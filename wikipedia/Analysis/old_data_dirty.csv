Old Family #,Family Name,Looked at?,Variation,Algo ID,Algorithm Description,Final Call,Exact Problem Statement?,Exact algorithm?,Time Complexity (Average),Average Case Distribution,Reference?,,Algorithm Name,Year,Paper/Reference Link,Constants,Derived?,Paper Reference for Constants,Time Complexity Improvement?,Transition Class,Time Complexity Class,Param: Time Class,Time Complexity (Worst Only),Parameter definitions,Preferred Parameter,Time Complexity Reference,Derived Time Complexity?,Computational Model,Unit of Space,Space Complexity Class,Param: Space Class,Space Complexity (Auxiliary),Space Complexity Reference,Derived Space Complexity?,Space Complexity in Original Paper?,Interesting Space Complexity?,Randomized?,"Type of Randomized Algorithm (e.g. Las Vegas, Monte Carlo, Atlantic City)",Approximate?,Approximation Factor (if approximate algorithm),Heuristic-based?,Parallel?,"# of
Processors",Quantum?,GPU-based?,Other References,Problem Statement,"Algorithm family
parameters",Description of Inputs,Ratios of input parameter sizes,Space n = 1000 value,Space n = 1000 rate,Space n = 10^6 value,Space n = 10^6 rate,Space n = 10^9 value,Space n = 10^9 rate,n = 1000 value,n = 1000 scale,n = 1000 Rate,n = 10^6 value,n = 10^6 scale,n = 10^6 Rate,n = 10^9 value,n = 10^9 scale,n = 10^9 Rate,Starting Complexity,Remarks,Papers for ratio evaluations,Domains
49,Nearest Neighbor Search,2,k-ANNS,419,,,1,0,O(nlogn),,,[https://doi.org/10.1109/TPAMI.2018.2889473 Hierarchical Navigable Small World (HNSW) (2018)],Hierarchical Navigable Small World (HNSW),2018,https://doi.org/10.1109/TPAMI.2018.2889473,,,,0,0,4,n: 4,O(nlogn),"n: number of elements
M: heuristic choice -- number of closest neighbors for a part of the algo",n,,,,bytes of memory,1,"n: 1,
M: 3",O(M),"https://arxiv.org/abs/1603.09320, ""Memory usage is proportional to choice of M""",0,1,,0,,1,? experimental results,1,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
49,Nearest Neighbor Search,2,k-ANNS,420,,,1,0,"O(nLkt) [pre-processing]
O(L(kt+dnP_2^k)) [query-time]",,,[http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf Locality-sensitive hashing (2010)],Locality-sensitive hashing,2010,http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf,,,,0,0,3,"n: 3,
k: 3,
L: 3,
t: 3,
d: 3","$O(nLkt)$ [pre-processing]
$O(L(kt+dnP_2^k))$ [query-time]","$n$: number of elements
$L$: number of hash tables
$k$: width parameter
$t$: time to evaluate a function
$d$: dimensionality of the data
$P_1, P_2$: Probabilities inherent in the hash functions
$c$: approximation factor",n,,,,hash table cells,3,"n: 3,
L: 3",O(nL),https://en.wikipedia.org/wiki/Locality-sensitive_hashing#LSH_algorithm_for_nearest_neighbor_search,0,0,,0,,1,c,0,0,,0,0,https://en.wikipedia.org/wiki/Locality-sensitive_hashing#LSH_algorithm_for_nearest_neighbor_search,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
49,Nearest Neighbor Search,2,k-ANNS for a dense 3D map of geometric points,421,,,1,0,O(k),,,[http://www.araa.asn.au/acra/acra2013/papers/pap148s1-file1.pdf Projected radial search (2013)],Projected radial search,2013,http://www.araa.asn.au/acra/acra2013/papers/pap148s1-file1.pdf,,,,0,0,3,k: 3,O(k),k: number of neighbors to find,n,,,Word RAM,words,1,n: 1,O(1),Derived: There are 5 local variables and no tables or lists aside from input/output,1,0,,0,,1,?,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics
49,Nearest Neighbor Search,2,k-ANNS,422,,,1,0,Varies by codebook structure,,,[ Compression/Clustering [Vector Quantization] (1992)],Compression/Clustering [Vector Quantization],1992,,,,,1,5->6,3,n: 3,Varies by codebook structure,n: number of elements,n,,,,,#VALUE!,,Varies by codebook structure,Table 2,0,0,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,2,Almost Stable Marriage Problem,619,,,1,0,O(1),,,"[https://arxiv.org/pdf/0812.4893.pdf Valentin Polishchuk, and Jukka Suomela (2008)]","Valentin Polishchuk, and Jukka Suomela",2008,https://arxiv.org/pdf/0812.4893.pdf,,,,0,0,1,n: 1,O(1),n: number of people in set,n,,,Word RAM,words,1,n: 1,O(1),derived: must be \leq time complexity,1,0,,0,,1,2 + \epsilon,0,1,,0,0,,,,,,,,,,,,1,,,,,,,,,4,,,Combinatorics
32,Cycle Detection,2,Cycle Detection,324,,,1,0,(\mu + \lambda)(1+\Theta(1/sqrt(M))),"mentioned in conclusion that the analysis might be interesting, but it wasn't actually done",https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,[https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat Sedgewick; Szymanski; and Yao (1982)],Sedgewick; Szymanski; and Yao,1982,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,1,0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,0,0,3,"\mu: 3,
\lambda: 3,
M: 1.5",$(\mu + \lambda)(1+\Theta(1/sqrt(M)))$,"$\mu$: first index of element in cycle
$\lambda$: period
$M$: number of memory cells available",\mu,,,,Memory cells,1,"M: 3,
\mu: 1",M,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,0,1,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,100.3512293,,#REF!,#REF!,,#REF!,#REF!,,6,,,Combinatorics
32,Cycle Detection,2,Cycle Detection,325,,,1,0,\mu + 3/2 \lambda,"Elements have independently random magnitudes, subject to periodicity constraints \mu and \lambda",https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,[https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view Nivasch (2004)],Nivasch,2004,https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,,,,0,0,3,"\mu: 3,
\lambda: 3",$O(\mu + \lambda)$,"$\mu$: index of first element in cycle
$\lambda$: cycle length",\mu,,,not mentioned,Stack size,2,\mu: 2,O(\log\mu),https://www.gabrielnivasch.org/fun/cycle-detection,0,1,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,,,,,,,,,6,,,Combinatorics
1,Sorting,2,Comparison Sorting,1,,,1,1,O( n² ),uniform distribution over all possible permutations,CLRS?,[- Naive sorting (1940)],Naive sorting,1940,-,1,1,,1,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,NA,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,NA,NA,Combinatorics
1,Sorting,2,Comparison Sorting,2,,,1,1,O( n² ),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Selection Sort (1962)],Selection Sort,1962,-,,,,0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Selection_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,3,,,1,1,O(n logn),"Any distribution (runtime is same regardless of input, at least in the typical implementation)",(same behavior across all inputs),[- Merge Sort (1945)],Merge Sort,1945,-,,,,1,4->5,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,3,n: 3,O(n),need some way to store partially processed lists while merging,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Merge_sort#cite_note-2

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,5,,,1,1,O( n² ),uniform distribution over all possible permutations,(can be easily derived),[- Bubble Sort (1956)],Bubble Sort,1956,-,,,,0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1,0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,8,,,1,1,O(n logn),uniform distribution over all possible permutations,(lower bound for average-case in sorting + upper bound for heapsort),[https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23 Intro Sort (1997)],Intro Sort,1997,https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23,,,,0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,2,n: 2,O(logn),(see quicksort + heapsort),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Introsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,24,,,1,1,O(n logn),uniform distribution over all possible permutations (reference proof possibly not complete?),https://www.sciencedirect.com/science/article/pii/030439759390364Y?via%3Dihub,[https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern Heap Sort (1964)],Heap Sort,1964,https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern,,,,0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),(can be easily derived),1,0,,0,,0,,0,0,0,0,0,https://en.wikipedia.org/wiki/Heapsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,2,Non-Comparison Sorting,7,,,1,1,O(n+k),uniform distribution over all sets of key values,CLRS,[http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf Counting Sort (1954)],Counting Sort,1954,http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf,,,,0,0,3,"n: 3,
k: 3",O(n+k),"n: size of list
k: range of non-negative key values",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k),(can be easily derived),1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Counting_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
1,Sorting,2,Non-Comparison Sorting,16,,,1,1,O(n),uniform distribution of elements within domain of array,CLRS,[- Bucket Sort (1940)],Bucket Sort,1940,-,,,,0,0,5,n: 5,O( n² ),n: size of list,n,,,Word RAM,words,3,n: 3,O(n),CLRS,0,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,2,Non-Comparison Sorting,21,,,1,1,O(wn),Any distribution (runtime is same regardless of input),(same general behavior across all inputs),[- Radix Sort (1940)],Radix Sort,1940,-,4,1,,1,4->6,3,"n: 3,
w: 3",O(wn),"n: size of list
w: length of word",n,,,Word RAM,words,3,"n: 3,
w: 3",O(w+n),(wikipedia page?),0,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Radix_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,NA,,,,,,,1000,1000,999,1000000,1000000,999999,1000000000,1000000000,999999999,4,NA,NA,Combinatorics
5,Maximum Flow,2,,54,,,1,1,O(E^2U),<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf Ford & Fulkerson (1955)],Ford & Fulkerson,1955,http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf,,,,1,2->3,7,"V: 7,
E: 5,
U: 3",O(E^2U),"V: number of vertices
E: number of edges
U: maximum edge capacity
Edge weights must be integers",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666.666667,4.623413252,1666666.667,30.6227766,1666666667,176.827941,56895766.95,0.004394,,5.69E+16,0.000004394,,5.69E+25,0.000000004394,,2,,,Combinatorics
5,Maximum Flow,2,,55,,,1,1,O(V^2E),^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (1970)],Dinitz,1970,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,,,0,0,7,"V: 7,
E: 3",O(V^2E),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,20482476,384.6153865,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,,56,,,1,1,O(E^2LogU),^ see above,,[https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf Edmonds & Karp (1972)],Edmonds & Karp,1972,https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf,,,,1,0,7,"V: 7,
E: 5,
U: 2",O(E^2 \log U),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1270306.607,0.196802881,,2744535051194,0.0910901101,,4.22E+18,0.05925906969,,2,,,Combinatorics
5,Maximum Flow,2,,58,,,1,1,O(V^3),^ see above,,[http://alexander-karzanov.net/Publications/maxflow-acyc.pdf Karzanov (1974)],Karzanov,1974,http://alexander-karzanov.net/Publications/maxflow-acyc.pdf,,,,0,0,6,V: 6,O(V^3),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 1,
V: 5",O(V^2),https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,12289485,641.0256755,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,,60,,,1,1,O(VELog^2V),^ see above,,[https://core.ac.uk/download/pdf/81946904.pdf Galil & Naamad (1980)],Galil & Naamad,1980,https://core.ac.uk/download/pdf/81946904.pdf,,,,1,0,6.02,"V: 6.02,
E: 3",O(VE \log^2 V),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0,1,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,7559564.594,#VALUE!,,32701134618989,#VALUE!,,7.55E+19,#VALUE!,,2,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,74,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),(can be easily derived because additions and multiplications can be done in constant time),[- Naive algorithm (1940)],Naive algorithm,1940,-,,,,1,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",O(1) auxiliary,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,75,,,1,1,O(n^{(log7/log2)}) ~ O(n^2.807),Any distribution (runtime is same regardless of input),(can be easily derived because additions and multiplications can be done in constant time),[https://link.springer.com/article/10.1007%2FBF02165411 Strassen's algorithm (1969)],Strassen's algorithm,1969,https://link.springer.com/article/10.1007%2FBF02165411,,,,1,0,4.4035,"n: 5.807,
n^2: 4.4035",$O(n^{(log7/log2)}) ~ O(n^{2.807})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),http://www.cs.cmu.edu/afs/cs/academic/class/15750-s17/ScribeNotes/lecture1.pdf,0,0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,263633138.6,3.79314985,0.04704540988,6.95E+16,14.38798578,0.09630409036,1.83E+25,54.57578611,0.1478801656,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,76,,,1,1,O(n^{(log(143640)/log(70))}) ~ O(n^{2.795}),Any distribution (runtime is same regardless of input),(can be easily derived because additions and multiplications can be done in constant time),[https://ieeexplore.ieee.org/document/4567976 Pan's algorithm (1978)],Pan's algorithm,1978,https://ieeexplore.ieee.org/document/4567976,,,,1,0,4.3975,"n: 5.795,
n^2: 4.3975",$O(n^{(log(143640)/log(70))}) ~ O(n^{2.795})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,251188643.2,3.981071706,0.03702559087,6.31E+16,15.84893192,0.07542207611,1.58E+25,63.09573445,0.1152402139,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,79,,,1,1,O(n^{2.51665}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211020 Romani's algorithm (1981)],Romani's algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211020,,,,1,0,4.258325,"n: 5.51665,
n^2: 4.258325",$O(n^{2.51665})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,35809643.71,27.92543841,0.08459673488,1.28E+15,779.8301105,0.1763500773,4.59E+22,21777.09772,0.2758654529,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,80,,,1,1,O(n^{2.495548}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211038 Coppersmith–Winograd algorithm (1981)],Coppersmith–Winograd algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211038,,,,1,0,4.247774,"n: 5.495568,
n^2: 4.247774",$O(n^{2.495548})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,30549211.13,32.73406949,0.08880779024,933254300796992,1071.519305,0.1855024041,2.85E+22,35075.1874,0.2907842529,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,81,,,1,1,O(n^{(log54/log5)}) ~ O(n^{(2.4785)}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://ieeexplore.ieee.org/abstract/document/4568194 Strassen's algorithm (1986)],Strassen's algorithm,1986,https://ieeexplore.ieee.org/abstract/document/4568194,,,,1,0,4.23925,"n: 5.4785,
n^2: 4.23925",$O(n^{(log54/log5)}) ~ O(n^{(2.4785)})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,27542287.03,36.30780548,0.08121744309,758577575029184,1318.256739,0.1690311592,2.09E+22,47863.00923,0.2639768809,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,82,,,1,1,O(n^{2.3755}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf Coppersmith–Winograd algorithm (1990)],Coppersmith–Winograd algorithm,1990,http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf,,,,1,0,4.18775,"n: 5.3755,
n^2: 4.18775",$O(n^{2.3755})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13061708.88,76.55966069,0.0906364297,170608238900312,5861.381645,0.1894878218,2.23E+21,448745.3899,0.2972987511,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,83,,,1,1,O(n^{2.372873}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://theory.stanford.edu/~virgi/matrixmult-f.pdf Vassilevska Williams (2014)],Vassilevska Williams,2014,http://theory.stanford.edu/~virgi/matrixmult-f.pdf,,,,1,0,4.1864365,"n: 5.372873,
n^2: 4.1864365",$O(n^{2.372873})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13152248,76.03262956,0.06027597087,179060585403530,5584.701947,0.1236605537,2.40E+21,417349.5985,0.1911122816,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,84,,,1,1,O(n^{2.3728639}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://arxiv.org/abs/1401.7714 François Le Gall (2014)],François Le Gall,2014,https://arxiv.org/abs/1401.7714,,,,1,0,4.18643195,"n: 5.3728639,
n^2: 4.18643195",$O(n^{2.3728639})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,12971792.71,77.09034691,0.06047393837,168267406107047,5942.921586,0.124604974,2.18E+21,458141.8867,0.1926142659,3,,,Combinatorics
9,Linear System,2,"General Linear System; Positive Definite, Hermitian Matrix; Non-Definite, Symmetric Matrix; Toeplitz Matrix; Vandermonde Matrix",102,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1,,1,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037,1,,3.70E+16,1,,3.70E+25,1,,3,,,Numerical Analysis
9,Linear System,2,"Positive Definite, Hermitian Matrix",103,,,1,1,O(n^3),^see above (with caveat that matrix has to be positive definite and hermitian),^see above,[- Cholesky (1940)],Cholesky,1940,-,,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037,1,,,,,,,,3,,,Numerical Analysis
9,Linear System,2,"Non-Definite, Symmetric Matrix",105,,,1,1,O(n^3),"^see above (non-definite, symmetric)",^see above,[https://link.springer.com/article/10.1007/BF01931804 Aasen's method (1971)],Aasen's method,1971,https://link.springer.com/article/10.1007/BF01931804,,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037,1,,,,,,,,3,,,Numerical Analysis
9,Linear System,2,Toeplitz Matrix,106,,,1,1,O(n^2),^see above (Toeplitz),^see above,[https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261 Levinson–Durbin recursion (1947)],Levinson–Durbin recursion,1947,https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,1000000,36.926037,,,,,,,,3,,,Numerical Analysis
9,Linear System,2,Toeplitz Matrix,107,,,1,1,O(n^2),^see above (Toeplitz),^see above,[https://link.springer.com/article/10.1007/BF02163269 Bareiss Algorithm (1969)],Bareiss Algorithm,1969,https://link.springer.com/article/10.1007/BF02163269,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889,333,,,,,,,,3,,,Numerical Analysis
9,Linear System,2,Vandermonde Matrix,108,,,1,1,O(n^2),^see above (Vandermonde),^see above,[https://www.jstor.org/stable/2004623?seq=1 Bjorck-Pereyra (1970)],Bjorck-Pereyra,1970,https://www.jstor.org/stable/2004623?seq=1,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889,333,,,,,,,,3,,,Numerical Analysis
10,Linear Programming,2,,110,,,1,1,O((m/4)^{(2^n)}),Any distribution (runtime is same regardless of input),"(same behavior across all inputs, at least for naive implementation)",[- Fourier–Motzkin elimination (1940)],Fourier–Motzkin elimination,1940,-,4,1,http://www.cs.cmu.edu/~odonnell/toolkit13/lecture13-anonymous.pdf,1,0,8,"n: 8,
m: 7",O((m/4)^{(2^n)}),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,8,"n: 8,
m: 7",O((m/4)^{(2^n)}),(can be easily derived? you have that many inequalities),1,0,,0,,0,,0,0,,0,0,https://gallica.bnf.fr/ark:/12148/bpt6k32227/f53,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,Inf,,Inf,,Inf,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
10,Linear Programming,2,,111,,,1,1,O(n^6 * L^2 logL loglogL),Any distribution (runtime is same regardless of input),(same behavior across all inputs?),[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Khachiyan Ellipsoid algorithm  (1979)],Khachiyan Ellipsoid algorithm,1979,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,,,1,1->2,7,"n: 7,
L: 5.02",O(n^6 * L^2 \log L \log\log L),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),see orginal paper (noting that O(alpha*log(H*alpha)) = O(L)),0,1,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Linear_programming#Ellipsoid_algorithm,_following_Khachiyan",Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,225400229426,Inf,,7.13E+24,Inf,,2.25E+38,Inf,,1,,,Numerical Analysis
12,Convex Hull,2,2-dimensional,127,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute Force (1935)],Brute Force,1935,-,1,1,http://math.uaa.alaska.edu/~afkjm/cs351/handouts/bruteforce,1,0,6,n: 6,O(n^3),"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1000,,1000000,,1000000000,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Image Processing
12,Convex Hull,2,2-dimensional,128,,,1,1,O(nh),^see above,^see above,[https://linkinghub.elsevier.com/retrieve/pii/0020019073900203 Jarvis (1973)],Jarvis,1973,https://linkinghub.elsevier.com/retrieve/pii/0020019073900203,,,,0,0,3,"n: 3,
h: 3",O(nh),"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1,0.1993539462,1,0.4384498883,1,0.7252105499,31622.7766,31622.7766,0.3134727062,1000000000,1000000000,0.7252105499,31622776601684,31622776601684,1.26601697,3,,,Image Processing
14,Minimum Spanning Tree (MST),2,"Undirected, General MST",157,,,1,1,O(E + Vlog^2(V)),Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution),https://dl.acm.org/doi/10.5555/2791171.2791187,[https://link.springer.com/chapter/10.1007/BFb0028279 Kruskal’s algorithm with demand-sorting (1991)],Kruskal’s algorithm with demand-sorting,1991,https://link.springer.com/chapter/10.1007/BFb0028279,,,,0,0,5.01,"V: 5.01,
E: 3",O(E \log V),"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120,0.1580012453,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),2,"Undirected, General MST",158,,,1,1,O(E + Vlog^2(V)),Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution),https://dl.acm.org/doi/10.5555/2791171.2791187,[https://dl.acm.org/citation.cfm?id=2791187 Quick Kruskal algorithm (2006)],Quick Kruskal algorithm,2006,https://dl.acm.org/citation.cfm?id=2791187,,,,0,0,5.01,"V: 5.01,
E: 3",O(E \log V),"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120,0.1580012453,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),2,"Undirected, General MST",162,,,1,1,O(E),Randomness within the algorithm steps themselves,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,[http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf Karger; Klein & Tarjan (1995)],Karger; Klein & Tarjan,1995,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,4,1,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,1,5->6,5,"V: 5,
E: 3","O(min(V^2, ElogV))","V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1,0,,1,Las Vegas,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583,8.704974271,0.04012774621,583333.3333,18.66853416,0.05465664879,583333333.3,28.63431845,0.06289129891,5,,,Combinatorics
20,LU Decomposition,2,Square Matrix LU Decomposition,209,,,1,1,O(n^3),Any,,[ Doolittle Algorithm (1878)],Doolittle Algorithm,1878,,2,1,https://www.geeksforgeeks.org/doolittle-algorithm-lu-decomposition/,1,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1,0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,"This is essentially just Gaussian elimination

Original paper is ""Method employed in the solution of normal equations and the adjustment of a triangularization""",,Numerical Analysis
20,LU Decomposition,2,Square Matrix LU Decomposition,210,,,1,1,O(n^3),,,[https://en.wikipedia.org/wiki/Crout_matrix_decomposition Crout and LUP algorithms (2007)],Crout and LUP algorithms,2007,https://en.wikipedia.org/wiki/Crout_matrix_decomposition,,,,0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1,0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000,1,,,,,,,,3,Slight variation of Doolittle,,Numerical Analysis
20,LU Decomposition,2,Square Matrix LU Decomposition,215,,,1,0,O(n^3),,,[https://arxiv.org/abs/math/0506382 Okunev; Johnson (1997)],Okunev; Johnson,1997,https://arxiv.org/abs/math/0506382,,,,0,0,6,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$O(1)$,Derived: all in-place calculations,1,0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,,,,,,3,,,Numerical Analysis
21,Informed Search,2,Informed Search,217,,,1,1,O(b^d),,,[https://ieeexplore.ieee.org/document/4082128/ A* Algorithm (1968)],A* Algorithm,1968,https://ieeexplore.ieee.org/document/4082128/,,,,0,0,8,"b: 7,
d: 8",O(b^d),"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),https://en.wikipedia.org/wiki/A*_search_algorithm: Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,https://www.cs.auckland.ac.nz/compsci767s2c/projectReportExamples.d/astarNilsson.pdf,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,218,,,1,1,O(b^{(d/2)}),,https://arxiv.org/pdf/1703.03868.pdf for experimental results,[https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf Bidirectional A* Algorithm (2007)],Bidirectional A* Algorithm,2007,https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf,2,1,http://theory.stanford.edu/~amitp/GameProgramming/Variations.html,1,0,8,"b: 7,
d: 8",$O(b^{(d/2)})$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^{(d/2)}),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,https://en.wikipedia.org/wiki/Bidirectional_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Robotics
21,Informed Search,2,Informed Search,224,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf Fringe Saving A* (FSA*) (2008)],Fringe Saving A* (FSA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,225,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf Generalized Adaptive A* (GAA*) (2008)],Generalized Adaptive A* (GAA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,226,,,1,1,O(b^d),,,[https://linkinghub.elsevier.com/retrieve/pii/0004370285900840 Iterative Deepening A* (IDA*) (1985)],Iterative Deepening A* (IDA*),1985,https://linkinghub.elsevier.com/retrieve/pii/0004370285900840,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,227,,,1,1,O(b^d),,,[http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf Jump Point Search (JPS) (2011)],Jump Point Search (JPS),2011,http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,228,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf Lifelong Planning A* (LPA*) (2001)],Lifelong Planning A* (LPA*),2001,http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,229,,,1,1,O(b^d),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.7839 Simplified Memory-Bounded A* (SMA*) (1992)],Simplified Memory-Bounded A* (SMA*),1992,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.7839,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,230,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf Theta* (2010)],Theta*,2010,http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,231,,,1,1,O(b^d),,,[https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf Anytime Repairing A* (ARA*) (2005)],Anytime Repairing A* (ARA*),2005,https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,232,,,1,1,O(b^d),,,[https://www.cs.du.edu/~sturtevant/papers/TBA.pdf Time-Bounded A* (TBA*) (2009)],Time-Bounded A* (TBA*),2009,https://www.cs.du.edu/~sturtevant/papers/TBA.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
22,String Search,2,Single String Search,233,Linear searching,,1,1,O(m(n-m+1)),,Wikipedia claims this is O(n+m),[- Naïve string-search algorithm (1940)],Naïve string-search algorithm,1940,-,1,1,https://en.wikipedia.org/wiki/String-searching_algorithm,1,0,5,"m: 3,
n: 3,
m+n: 5",$O(m(n-m+1))$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",O(1),Derived (pointer algorithm),1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,80100,1,,80000100000,1,,8.00E+16,1,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
22,String Search,2,Single String Search,234,Automaton-based,,1,1,O(m+n),,,[https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf Knuth-Morris-Pratt (KMP) algorithm (1977)],Knuth-Morris-Pratt (KMP) algorithm,1977,https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,,,,0,0,3,"m: 3,
n: 3,
m+n: 3",$O(m+n)$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
s: 1,
m+n: 3",O(m),https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,0,1,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
22,String Search,2,Single String Search,235,"Heuristics-based, bad-character and good-suffix heuristics",,1,1,O(mn + s),,,[https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf Boyer-Moore (BM) algorithm (1977)],Boyer-Moore (BM) algorithm,1977,https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,,,,0,0,5,"m: 3,
n: 3,
s: 3,
m+n: 5",$O(mn + s)$,"m: pattern length
n: length of searchable text
s: size of the alphabet",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 3,
m+n: 1",O(s),https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0,1,,0,,0,,1,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
22,String Search,2,Single String Search,237,"Hashing-based, compare the text and patterns via their hash functions",,1,1,O(m + n),,,[https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf Rabin-Karp (RK) algorithm (1987)],Rabin-Karp (RK) algorithm,1987,https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",O(1),Derived: only storing a rolling hash,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
23,Sequence Alignment,2,"Edit sequence, global alignment",250,,,1,1,O(mn),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://www.sciencedirect.com/science/article/pii/0022283670900574 Needleman–Wunsch algorithm (1970)],Needleman–Wunsch algorithm,1970,https://www.sciencedirect.com/science/article/pii/0022283670900574,1,1,https://www.sciencedirect.com/science/article/pii/0022283670900574,1,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000000,,1000000000000,,1.00E+18,,250000,1,,250000000000,1,,2.50E+17,1,,4,,,Bioinformatics
23,Sequence Alignment,2,"Edit sequence, local alignment",251,,,1,1,O(mn^2),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283681900875 Smith–Waterman algorithm (1981)],Smith–Waterman algorithm,1981,https://www.sciencedirect.com/science/article/pii/0022283681900875,,,,0,0,6,"m: 3,
n: 5,
m+n: 6",$O(mn^2)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,2,Edit distance,252,,,1,1,O(mn / log(n)),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022000080900021 Masek; Patterson (1980)],Masek; Patterson,1980,https://www.sciencedirect.com/science/article/pii/0022000080900021,1,1,https://reader.elsevier.com/reader/sd/pii/0022000080900021?token=73AF2A185C2FC6C67F5579CDB00D3B782FF86C4EB03694E1E783EFF5885B871AB0841E8A69D206FB16A1EFF882EB712C,1,0,4.99,"m: 3,
n: 3,
m+n: 4.99",$O(mn / log(n))$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",O(n),https://www.sciencedirect.com/science/article/pii/0022000080900021,0,1,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,27901,8.960252321,0.2451796774,13205456224,18.93156857,0.3418953868,8.65E+15,28.89735285,0.3998638745,4,,,Bioinformatics
23,Sequence Alignment,2,Edit sequence,253,,,1,1,O(mn),^see above,^see above,[https://dl.acm.org/doi/10.1145/360825.360861 Hirschberg's algorithm (1975)],Hirschberg's algorithm,1975,https://dl.acm.org/doi/10.1145/360825.360861,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",O(n),https://dl.acm.org/doi/10.1145/360825.360861,0,1,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000,2.981071706,1000000,14.84893192,1000000000,62.09573445,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,2,"Edit sequence, local alignment",254,,,1,1,O(mn),^see above,^see above,[https://www.ncbi.nlm.nih.gov/pubmed/2983426 FASTA (1985)],FASTA,1985,https://www.ncbi.nlm.nih.gov/pubmed/2983426,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FASTA,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,2,"Edit sequence, local alignment",255,,,1,1,O(mn),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283682903989 Gotoh (1982)],Gotoh,1982,https://www.sciencedirect.com/science/article/pii/0022283682903989,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,2,"Edit sequence, local alignment",256,,,1,1,O(mn),^see above,^see above,[https://link.springer.com/article/10.1007/BF02462326 Altschul and Erickson (1986)],Altschul and Erickson,1986,https://link.springer.com/article/10.1007/BF02462326,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,2,"Edit sequence, local alignment",257,,,1,1,O(mn),^see above,^see above,[https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true Myers and Miller (1988)],Myers and Miller,1988,https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 2,
m+n: 3",O(n+log(m)),https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,0,1,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,2,"Edit sequence, global alignment",260,,,1,1,O(mn),^see above,^see above,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/ David Sankoff (1972)],David Sankoff,1972,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
25,Line Clipping,2,Rectangular Window,265,,,1,1,O(n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ Cohen–Sutherland (1967)],Cohen–Sutherland,1967,https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ,1,1,https://www.geeksforgeeks.org/line-clipping-set-1-cohen-sutherland-algorithm/,1,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Image Processing
25,Line Clipping,2,Rectangular Window,266,,,1,1,O(n),^ see above,^ see above,[https://dl.acm.org/doi/10.1145/357332.357333 Liang–Barsky (1984)],Liang–Barsky,1984,https://dl.acm.org/doi/10.1145/357332.357333,,,,0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing
25,Line Clipping,2,Convex Polygonal Window; Convex Polyhedral window,267,,,1,1,O(np),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849378900213 Cyrus–Beck (1978)],Cyrus–Beck,1978,https://www.sciencedirect.com/science/article/pii/0097849378900213,,,,0,0,3,"n: 3,
p: 3",O(np),"n: number of lines
p: number of edges/faces on polygon/polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived? (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing
25,Line Clipping,2,Rectangular Window,268,,,1,1,O(n),^ see above,^ see above,[https://dl.acm.org/doi/10.1145/37401.37432 Nicholl–Lee–Nicholl (1987)],Nicholl–Lee–Nicholl,1987,https://dl.acm.org/doi/10.1145/37401.37432,,,,0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,https://www.cs.drexel.edu/~david/Classes/Talks/McCurdyPresentation.pdf,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing
25,Line Clipping,2,Rectangular Window,269,,,1,1,O(n),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849387900616 Fast clipping (1987)],Fast clipping,1987,https://www.sciencedirect.com/science/article/pii/0097849387900616,,,,0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing
27,Multiplication,2,,273,,,1,1,O(n^1.58),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng Karatsuba Algorithm (1962)],Karatsuba Algorithm,1962,http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng,,,,1,0,4.58,n: 4.58,$O(n^{1.58})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Re-use space across recursive subcalls (to obtain the recursion S(n) = S(n/2)+O(n)),1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,54954.08739,18.19700859,0.1409660639,3019951720,331.1311215,0.3018035591,165958690743756,6025.595861,0.4853136828,4,,,Numerical Analysis
27,Multiplication,2,,274,,,1,1,O(n^1.46),^see above,^see above,[https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf Toom-3 (1969)],Toom-3,1969,https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf,,,,1,0,4.46,n: 4.46,$O(n^{1.46})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Re-use space across recursive subcalls (to obtain the recursion S(n) = S(n/3)+O(n)),1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,23988,41.68751042,0.1372665733,19952623.15,50118.72336,0.4523422297,19952623.15,50118723363,1.338651544,4,,,Numerical Analysis
27,Multiplication,2,,275,,,1,1,O(n^2),^see above,^see above,[ Long Multiplication (1940)],Long Multiplication,1940,,1,1,https://en.wikipedia.org/wiki/Multiplication_algorithm,1,0,5,n: 5,$O(n^2)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Easily derived (needed for intermediate results),1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Numerical Analysis
46,Line Simplification,2,,391,,0,0,1,O(n^2),,,[https://www.sciencedirect.com/science/article/abs/pii/S0146664X72800170 Ramer–Douglas–Peucker algorithm (1972)],Ramer–Douglas–Peucker algorithm,1972,https://www.sciencedirect.com/science/article/abs/pii/S0146664X72800170,,,,0,0,5,n: 5,O(n^2),n: number of points (n-1 line segments),n,,,Real RAM,,3,n: 3,O(n),"Derived: Recursive algorithm that has a worst-case recursion tree depth of O(n), and O(1) info stored per level",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
46,Line Simplification,2,,392,,0,0,1,O(n^2),,,[https://hull-repository.worktribe.com/output/459275 Visvalingam–Whyatt (1993)],Visvalingam–Whyatt,1993,https://hull-repository.worktribe.com/output/459275,,,,0,0,5,n: 5,O(n^2),n: number of points (n-1 line segments),n,,,Real RAM,,3,n: 3,O(n),Derived: Storing each points effective area,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
46,Line Simplification,2,,393,,0,0,1,O(n),,,[ Reumann–Witkam (1974)],Reumann–Witkam,1974,,,,,0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,1,n: 1,O(1),Derived: The only auxiliary space used is the current search line and the distance from the next point to the line.,1,0,,0,,0,,0,0,,0,0,http://psimpl.sourceforge.net/reumann-witkam.html,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing
46,Line Simplification,2,,394,,0,0,1,O(n),,,[http://dx.doi.org/10.2312/eg.19811012 Opheim simplification (1981)],Opheim simplification,1981,http://dx.doi.org/10.2312/eg.19811012,,,,0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,1,n: 1,O(1),"Derived: The only auxiliary space used is the current search ray and the current best, the distances from the next point to the ray and to the ray's origin, candidate point to stay in the simplified line",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing
46,Line Simplification,2,,395,,0,0,1,O(n),,,[- Lang simplification (1969)],Lang simplification,1969,-,,,,1,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,1,n: 1,O(1),"Derived: The only auxiliary space used is the current search line and the distance from a point in the search interval to the search line, which is all $O(1)$ space",1,0,,0,,0,,0,0,,0,0,http://koreascience.or.kr/article/JAKO201300763572495.page,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing
46,Line Simplification,2,,396,,0,0,1,O(n),,,[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.494.7321 Zhao-Saalfeld (1997)],Zhao-Saalfeld,1997,http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.494.7321,,,,0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,3,n: 3,O(n),Derived: There is an auxiliary sleeve set that is $O(n)$ size worst-case,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing
49,Nearest Neighbor Search,2,Nearest Neighbor Search (NNS),416,,,1,1,O(n),,,[- Linear search (1940)],Linear search,1940,-,1,1,,1,0,3,n: 3,O(n),,n,,,Real RAM,,1,n: 1,O(1),Derived: Only ever storing the current shortest distance and the corresponding node,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Combinatorics
49,Nearest Neighbor Search,2,Nearest Neighbor Search (NNS),417,,,1,1,"k-d Tree construction: O(n log n)
NNS: O(log n)","Beta distribution B(m, n). See paper for details",https://dl.acm.org/doi/pdf/10.1145/355744.355745,[https://dl.acm.org/doi/pdf/10.1145/355744.355745 k-d Tree (1975)],k-d Tree,1975,https://dl.acm.org/doi/pdf/10.1145/355744.355745,1,1,https://www.geeksforgeeks.org/k-dimensional-tree/,1,4->5,4,n: 4,"k-d Tree construction: $O(n \log n)$
NNS: $O(n)$",n: number of elements,n,,,Real RAM,,3,n: 3,O(n),https://dl.acm.org/doi/pdf/10.1145/355744.355745,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Combinatorics
49,Nearest Neighbor Search,2,Nearest Neighbor Search (NNS),418,,,1,1,"R-Tree construction: O(n log n)
NNS: O(log n)",,,[http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf R-tree (1984)],R-tree,1984,http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf,,,,0,0,4,n: 4,"R-Tree construction: $O(n \log n)$
NNS: $O(n)$",n: number of elements,n,,,Real RAM,,2,n: 2,O(log n),"https://www.sciencedirect.com/science/article/pii/S1877050915019675, Table 2",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
80,Maximum Subarray Problem,2,1D Maximum Subarray,622,,,1,1,O(n^3),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[- Brute Force (1977)],Brute Force,1977,-,1,1,,1,0,6,n: 6,O(n^3),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1),"keep track of which subarray is being computed, along with current maximum",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Combinatorics
80,Maximum Subarray Problem,2,1D Maximum Subarray,623,,,1,1,O(n^2),^see above,^see above,[- Grenander (1977)],Grenander,1977,-,,,,1,3->4,5,n: 5,O(n^2),n: length of array,n,,,Word/Real RAM,words,3,n: 3,O(n),storing precomputed cumulative sums,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000,1000,0.2052609369,1000000000000,1000000,0.4526539259,1.00E+18,1000000000,0.7508270317,3,,1099511627776,Combinatorics
80,Maximum Subarray Problem,2,1D Maximum Subarray,623,,,1,1,O(n^2),^see above,^see above,[https://dl.acm.org/doi/pdf/10.1145/358234.381162 Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]) (1977)],Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]),1977,https://dl.acm.org/doi/pdf/10.1145/358234.381162,,,,0,0,5,n: 5,O(n^2),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1),"keep track of which subarray is being computed, along with current maximum",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000,1000,,1000000000000,1000000,,1.00E+18,1000000000,,3,,1099511627776,Combinatorics
80,Maximum Subarray Problem,2,1D Maximum Subarray,624,,,1,1,O(nlogn),^see above,^see above,[- Shamos (1978)],Shamos,1978,-,,,,1,4->5,4,n: 4,O(n \log n),n: length of array,n,,,Word/Real RAM,words,2,n: 2,O(\log n),keep track of recursive maximums,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,9965.784285,100343.3319,0.3539982994,19931568.57,50171665944,0.9124540696,29897352854,3.34E+16,1.721772176,3,,,Combinatorics
80,Maximum Subarray Problem,2,1D Maximum Subarray,625,,,1,1,O(n),^see above,^see above,[- Kadane's Algorithm (1982)],Kadane's Algorithm,1982,-,1,1,,1,5->6,3,n: 3,O(n),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000,1000000,0.3894954944,1000000,1000000000000,0.9306977289,1000000000,1.00E+18,1.682695795,3,,,Combinatorics
80,Maximum Subarray Problem,2,1D Maximum Subarray,628,,,1,1,O(log n),^see above,^see above,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf Perumalla and Deo (1995)],Perumalla and Deo,1995,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,Perumalla and Deo,,,0,0,2,n: 2,O(\log n),n: length of array,n,,,EREW PRAM,words,3,n: 3,O(n) auxiliary,constant number of arrays as outlined in algorithm,1,0,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,9965,,,,,,,,,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,77,,,1,0,O(n^{2.7799}),,,[https://doi.org/10.1016/0020-0190(79)90113-3 Bini's algorithm (1979)],Bini's algorithm,1979,https://doi.org/10.1016/0020-0190(79)90113-3,,,,1,0,4.38995,"n: 5.7799,
n^2: 4.38995",$O(n^{2.7799})$,n: dimension of square matrix,n^2,https://doi.org/10.1016/0020-0190(79)90113-3,0,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"Derived: Same idea as Strassen's, plus three additional nxn matrices",1,0,,0,n/a,1,$O(n logn)$ error,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,218776162.4,0.0000000455488381,,4.79E+16,0,,1.05E+25,0,,3,,,Combinatorics
6,Matrix Product,2,Matrix Multiplication,78,,,1,0,O(n^{(3*log52/log110)}) ~ O(n^{2.5218}),,,[https://epubs.siam.org/doi/abs/10.1137/0210032 Schonhage's algorithm (1980)],Schonhage's algorithm,1980,https://epubs.siam.org/doi/abs/10.1137/0210032,,,,1,0,4.2609,"n: 5.5218,
n^2: 4.2609",$O(n^{(3*\log 52/l \og 110)}) ~ O(n^{2.5218})$,n: dimension of square matrix,n^2,https://epubs.siam.org/doi/abs/10.1137/0210032,0,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"Derived: Same idea as Strassen's, plus three additional nxn matrices",1,0,,0,n/a,1,?,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,36307805.48,0.0000002744588903,,1.32E+15,0,,4.79E+22,0,,3,,,Combinatorics
61,The Traveling-Salesman Problem,2,Minimum TSP,488,ILP formulation,,1,1,exp(V),,,[https://dl.acm.org/doi/10.1145/321043.321046 Miller-Tucker-Zemlin (MTZ) formulation  (1960)],Miller-Tucker-Zemlin (MTZ) formulation,1960,https://dl.acm.org/doi/10.1145/321043.321046,,,,0,0,8,V: 8,$exp(V)$,"V: number of vertices
E: number of edges",V,Derived: Integer programming is NP-hard and this uses O(V^2) constraints on O(V^2) variables,1,Word RAM,words,7,V:7,O(V^4),"Derived: V^2 + 2V constraints on V^2 variables, most integer programs use space of O(nm) where n=#vars and m=#constraints",1,0,,0,,0,,1,0,,0,0,,,,,,1000000000000,Inf,1.00E+24,Inf,1.00E+36,Inf,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,2,Minimum TSP,489,ILP formulation,,1,1,O(1.674^V E^2),,,[https://doi.org/10.1287/opre.2.4.393 Dantzig-Fulkerson-Johnson (DFJ) formulation (1954)],Dantzig-Fulkerson-Johnson (DFJ) formulation,1954,https://doi.org/10.1287/opre.2.4.393,,,,0,0,8,"V: 8,
E: 5",$O(1.674^V E^2)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,8,V: 8,O(2^V),http://web.ist.utl.pt/~ist11038/CD_Casquilho/TSP1992EJOR_Laporte.pdf,0,0,,0,,0,,1,0,,0,0,,,,,,Inf,,Inf,,Inf,,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,1,Geometric Maximum TSP,490,Tunneling,,1,0,O(V^2 loglogE),,,[https://dl.acm.org/doi/10.1145/876638.876640 Barvinok (2003)],Barvinok,2003,https://dl.acm.org/doi/10.1145/876638.876640,,,,0,0,5.01,"V: 5.01,
E: 1.99",$O(V^2 \log\log E)$,"V: number of vertices
E: number of edges",V,https://dl.acm.org/doi/10.1145/876638.876640,0,Real RAM,memory cells,3,V: 3,O(V)?,"Derived: One memory cell per tunnel-city pair, with one tunnel total",1,0,,0,,1,?,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
115,SLAM Algorithms,1,SLAM Algorithms,905,,0,1,0,O(n^3),"don't think ""avg case distribution"" makes sense here",(none),[http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf EKF SLAM (1998)],EKF SLAM,1998,http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf,,,,1,0,6,n: 6,$O(n^3)$,n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,(can be easily derived? it's mostly square matrices here),1,0,,0,,1,,0,0,,0,0,"https://www.researchgate.net/figure/Computational-Complexity-of-Different-Forms-of-Unscented-Kalman-Filter_tbl1_220398698

https://www.researchgate.net/publication/283824088_Computational_cost_analysis_of_extended_Kalman_filter_in_simultaneous_localization_and_mapping_EKF-SLAM_problem_for_autonomous_vehicle

https://www.researchgate.net/figure/Computational-Complexity-of-Different-Forms-of-Unscented-Kalman-Filter_tbl1_220398698",,,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Robotics
115,SLAM Algorithms,1,SLAM Algorithms,906,,0,1,0,O(n^3),^see above,(none),[https://www.seas.harvard.edu/courses/cs281/papers/unscented.pdf UKF (2000)],UKF,2000,https://www.seas.harvard.edu/courses/cs281/papers/unscented.pdf,,,,0,0,6,n: 6,$O(n^3)$,n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,(can be easily derived? it's mostly square matrices here),1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics
115,SLAM Algorithms,1,SLAM Algorithms,907,,0,1,0,O(n^3),^see above,(none),[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.206.999&rep=rep1&type=pdf Compressed Extended KF (2002)],Compressed Extended KF,2002,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.206.999&rep=rep1&type=pdf,,,,0,0,6,n: 6,$O(n^3)$,n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,(can be easily derived? it's mostly square matrices here),1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics
115,SLAM Algorithms,1,SLAM Algorithms,909,,0,1,1,O(n^2),^see above,(none),[https://papers.nips.cc/paper/1716-bayesian-map-learning-in-dynamic-environments.pdf Rao-Blackwellized Particle Filtering SLAM (2001)],Rao-Blackwellized Particle Filtering SLAM,2001,https://papers.nips.cc/paper/1716-bayesian-map-learning-in-dynamic-environments.pdf,,,,1,3->4,5,n: 5,$O(n^2)$,n: number of dimensions in state space,n,,,Real RAM?,words?,3,n: 3,O(n)?,(based on Section 4 of the paper?),0,1,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000,1,,1000000000000,1000000,,1.00E+18,1000000000,,3,,,Robotics
20,LU Decomposition,2,Square Matrix LU Decomposition,212,,,1,1,O(n^2.376),,,[https://dl.acm.org/citation.cfm?id=248979 Bunch; Hopcroft (1974)],Bunch; Hopcroft,1974,https://dl.acm.org/citation.cfm?id=248979,1,1,https://www.ams.org/journals/mcom/1974-28-125/S0025-5718-1974-0331751-8/,1,0,4.188,"n: 5.376,
n^2: 4.188",$O(n^{2.376})$,n: dimension of square matrix,n^2,,,Word RAM,words,4,"n: 5.01,
n^2: 4",$\tilde{O}(n^2)$,Derived: Uses Strassen multiplication and a constant number of $n \times n$ auxiliary matrices,1,0,,0,n/a,0,n/a,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,13427649.61,74.47319739,0.135164559,180301774085957,5546.25713,0.2885985759,2.42E+21,413047.502,0.4627714341,3,,,Numerical Analysis
22,String Search,2,Single String Search,242,,,1,1,O(mn),,,[https://en.wikipedia.org/wiki/Bitap_algorithm Bitap algorithm (1964)],Bitap algorithm,1964,https://en.wikipedia.org/wiki/Bitap_algorithm,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: text length",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
m+n: 3",$O(m)$,Derived: Uses a bit array of size $O(m)$,1,0,,0,n/a,0,n/a,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,4,,,1,1,O(n logn),uniform distribution over all possible permutations,(derive from lower + upper bounds),[https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4 Tree sort (1986)],Tree sort,1986,https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4,,,,0,0,4,n: 4,$O(n \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),"Derived: Need some way to store the tree of elements, so we need $O(n)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,6,,,1,1,O(n logn),uniform distribution over all possible permutations,https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,[https://apps.dtic.mil/dtic/tr/fulltext/u2/740110.pdf Quick Sort (1961)],Quick Sort,1961,https://apps.dtic.mil/dtic/tr/fulltext/u2/740110.pdf,,,,0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,2,n: 2,O(\log n),https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,0,0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,9,,,1,1,O(n*log n),uniform distribution over all possible permutations (implicit; reference says runtime is O(n+n*log(rho)) where rho is number of runs but expected value of rho is Theta(n),https://drops.dagstuhl.de/opus/volltexte/2018/9467/,[- Tim Sort (2002)],Tim Sort,2002,-,,,,0,0,4,n: 4,$O(n logn)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),(can be easily derived),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Timsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,10,,,1,1,O(n logn),,,[https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub Cube Sort Parallel Implementation (1992)],Cube Sort Parallel Implementation,1992,https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub,,,,0,0,4,n: 4,$O(n logn)$,n: size of list,n,,,Parallel RAM,words,3,n: 3,O(n),(can be easily derived),1,0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Cubesort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,11,,,1,1,O( n² ),<= potentially open?,,[https://dl.acm.org/citation.cfm?doid=368370.368387 Shell Sort (Shell) (1959)],Shell Sort (Shell),1959,https://dl.acm.org/citation.cfm?doid=368370.368387,,,,0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,12,,,1,1,O(n^1.5),<= I think this is an open problem to determine if there's a better average-case bound,,[https://dl.acm.org/citation.cfm?doid=366947.366957 Shell Sort (Frank & Lazarus) (1960)],Shell Sort (Frank & Lazarus),1960,https://dl.acm.org/citation.cfm?doid=366947.366957,,,,0,0,4.5,n: 4.5,$O(n^{1.5})$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,None,,,,,,,31622,31.62355322,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,13,,,1,1,O(n log² n),<= I think this is an open problem to determine if there's a better average-case bound,,[https://apps.dtic.mil/sti/pdfs/AD0740110.pdf Shell Sort (Pratt) (1971)],Shell Sort (Pratt),1971,https://apps.dtic.mil/sti/pdfs/AD0740110.pdf,,,,0,0,4.01,n: 4.01,$O(n \log^2 n)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,99301,10.07039204,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,14,,,1,1,O(n^1.33),<= I think this is an open problem to determine if there's a better average-case bound,,[https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub Shell Sort (Sedgewick) (1986)],Shell Sort (Sedgewick),1986,https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub,,,,0,0,4.33,n: 4.33,$O(n^{1.33})$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9772,102.3331969,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,17,,,1,1,O(log² n),,,[https://epubs.siam.org/doi/abs/10.1137/0218014 Bitonic Merge Sort Parallel Implementation (1968)],Bitonic Merge Sort Parallel Implementation,1968,https://epubs.siam.org/doi/abs/10.1137/0218014,,,,0,0,2,n: 2,$O(\log^2 n)$,n: size of list,n,,,PRAC (shared-memory multiprocessor of the EREW PRAM variety),words,1,n: 1,O(1),"Paper claims ""logspace uniform"", so with O(log n) words, this is constant # of words",0,1,,0,,0,,0,1,n/log(n),0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,99,10101.0101,,,,,,,,4,,,Combinatorics
1,Sorting,2,Comparison Sorting,22,,,1,1,O(n loglogn),,,[https://www.sciencedirect.com/science/article/pii/S0196677402912113 Thorup's Sorting Algorithm (2002)],Thorup's Sorting Algorithm,2002,https://www.sciencedirect.com/science/article/pii/S0196677402912113,,,,0,0,4,n: 4,$O(n \log \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/S0196677402912113,0,1,,0,,0,,0,0,0,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,3316,301.5681544,,,,,,,,4,,,Combinatorics
1,Sorting,2,Non-Comparison Sorting,1500,,,1,1,O( n² ),uniform distribution over all possible permutations?,can consider expected number of swaps per element,[- Naive sorting (1940)],Naive sorting,1940,-,1,1,,1,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,NA,,,,,,,1000000,1,,1000000,1,,1000000000,1,,4,NA,NA,Combinatorics
1,Sorting,2,Non-Comparison Sorting,15,,,1,1,O(n),uniform distribution over all sets of key values,(can be easily derived),[http://www.neubert.net/FSOIntro.html Flash Sort (1998)],Flash Sort,1998,http://www.neubert.net/FSOIntro.html,,,,0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),"http://www.neubert.net/FSOIntro.html, ""array of size # of different keys""",0,1,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
1,Sorting,1,Non-Comparison Sorting,18,,,1,1,O(n),uniform distribution over all sets of positive key values,(can be easily derived),[https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf Bead Sort (2002)],Bead Sort,2002,https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf,,,,0,0,3,n: 3,$O(n)$,n: size of list,n,,,Word RAM,words,5,n: 5,O(n^2),(wikipedia page?),0,0,,0,,0,,0,0,,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
1,Sorting,1,Non-Comparison Sorting,20,,,1,1,O(wn),Any distribution (runtime is same regardless of input)?,(same behavior across all inputs),[https://dl.acm.org/citation.cfm?doid=1005813.1041517 Burst Sort (2004)],Burst Sort,2004,https://dl.acm.org/citation.cfm?doid=1005813.1041517,,,,0,0,4,"n: 4,
w: 3",$O(wn)$,"n: size of list
w: length of word",n,,,Word RAM,words,4,"n: 4,
w: 3",O(wn),(wikipedia page?),0,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
1,Sorting,1,Non-Comparison Sorting,23,,,1,1,O(n),"Lots of distributions (uniform, Gaussian, etc.)",https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,[https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52 Spreadsort (2002)],Spreadsort,2002,https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,,,,0,0,4,n: 4,$O(n \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n)?,(can be easily derived?),1,0,,0,,0,,0,0,0,0,0,"https://en.wikipedia.org/wiki/Spreadsort#cite_note-1

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
5,Maximum Flow,1,,53,,,1,1,O(V^2EU),<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[ Dantzig (1951)],Dantzig,1951,,,,,1,0,7,"V: 7,
E: 3,
U: 3",$O(V^2EU)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,6,"V: 6,
E: 3",O(VE)?,"Assuming this is referring to translating maximum flow into linear programming and using the simplex algorithm, this requires $O(VE)$ space.",1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666666.667,,1666666666667,,1.67E+18,,7877875424,1,,7.88E+21,1,,7.88E+33,1,,2,,,Combinatorics
5,Maximum Flow,2,,57,,,1,1,O(VELogU),^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (with dynamic trees) (1973)],Dinitz (with dynamic trees),1973,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,,,0,0,6,"V: 6,
E: 3,
U: 2",$O(VE \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),"The dynamic tree should take $O(E)$ extra space, and that should be the only extra space (if any) compared to Dinitz's original algorithm. Thus, this requires $O(E)$ space.",1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,762183.964,10335.92387,0.5221954617,1646721030716,4783976929,1.754167902,2.53E+18,3.11E+15,4.060932865,2,,,Combinatorics
5,Maximum Flow,2,,59,,,1,1,O(V^2E^0.5),^ see above,,[https://www.sciencedirect.com/science/article/abs/pii/S037722179600269X Cherkassky (1977)],Cherkassky,1977,https://www.sciencedirect.com/science/article/abs/pii/S037722179600269X,,,,0,0,6,"V: 6,
E: 2.5",$O(V^2E^{0.5})$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1044405,7542.931549,,,,,,,,2,,,Combinatorics
5,Maximum Flow,1,,61,,,1,1,O(VELogV),^ see above,,[https://www.sciencedirect.com/science/article/pii/0022000083900065 Sleator & Tarjan (1983)],Sleator & Tarjan,1983,https://www.sciencedirect.com/science/article/pii/0022000083900065,,,,0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),can be derived?,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,761538,10344.69117,,,,,,,,2,,,Combinatorics
5,Maximum Flow,1,,62,,,1,1,O(VELog(V^2/E)),^ see above,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf Goldberg & Tarjan (1986)],Goldberg & Tarjan,1986,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf,,,,0,0,6,"V: 6,
E: 3",$O(VE \log (V^2/E))$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),can be derived? also hints of space complexity might be in the paper,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,753550,10454.34998,,,,,,,,2,,,Combinatorics
5,Maximum Flow,1,,63,,,1,1,O(VE + V^2LogU),^ see above,,[https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem Ahuja & Orlin (1987)],Ahuja & Orlin,1987,https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem,,,,0,0,6,"V: 6,
E: 3,
U: 2",$O(VE + V^2 \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3,
U: 2",O(ELogU),derived in sheet,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,545676,14436.91023,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,st-Maximum Flow,65,Push-relabel method,,1,1,O(VE + V^2(LogV)^2),[some distribution in this paper],https://ieeexplore.ieee.org/document/63465,[https://ieeexplore.ieee.org/document/63465 Cheriyan & Hagerup (1989)],Cheriyan & Hagerup,1989,https://ieeexplore.ieee.org/document/63465,,,,0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://ieeexplore.ieee.org/document/63465,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: d_heap and e_heap are size O(V). Adjacency list of a given vertex is O(V). Dynamic trees data structure is size O(E).,1,0,,1,Las Vegas,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,3362046,2343.178952,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,st-Maximum Flow,66,Derandomization of Cheriyan & Hagerup,,1,1,O(V^3 / LogV),see 233,,[https://link.springer.com/chapter/10.1007/BFb0032035 Cheriyan et al. (1990)],Cheriyan et al.,1990,https://link.springer.com/chapter/10.1007/BFb0032035,,,,0,0,5.99,V: 5.99,$O(V^3 / \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://link.springer.com/chapter/10.1007/BFb0032035,0,Uniform-Cost RAM (is this the same as Word RAM?),words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1567523,5025.684104,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,st-Maximum Flow,67,Derandomization of Cheriyan & Hagerup,,1,1,O(VE + V^{(2.66)}LogV),^ see 233,,[https://www.sciencedirect.com/science/article/pii/002001909090024R Alon (1990)],Alon,1990,https://www.sciencedirect.com/science/article/pii/002001909090024R,,,,0,0,6,"V: 6,
E: 3",$O(VE + V^{2.66} \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://www.sciencedirect.com/science/article/pii/002001909090024R,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,15237244,517.0144564,0.1737537478,3.29E+15,2396247.828,0.4573965487,4.90E+23,16091415411,0.8268695823,2,,,Combinatorics
5,Maximum Flow,2,st-Maximum Flow,68,Derandomization of Cheriyan & Hagerup,,1,1,O(VE + V^{(2+\epsilon)}),^ see 233,,[https://dl.acm.org/citation.cfm?id=139438 King et al. (KRT) (1992)],King et al. (KRT),1992,https://dl.acm.org/citation.cfm?id=139438,,,,0,0,6,"V: 6,
E: 3",$O(VE + V^{2+\epsilon})$,"V: number of vertices
E: number of edges
U: maximum edge capacity
eps: any positive real number",V,https://dl.acm.org/citation.cfm?id=139438,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,142011,55473.69869,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,st-Maximum Flow,69,Derandomization of Cheriyan & Hagerup,,1,1,O(VE(Log(V;V/E)) + V^2(LogV)^2 ),^ see 233,,[https://dl.acm.org/citation.cfm?id=167201 Phillips & Westbrook (1993)],Phillips & Westbrook,1993,https://dl.acm.org/citation.cfm?id=167201,,,,1,0,6,"V: 6,
E: 3",$O(VE(\log(V;V/E)) + V^2(\log V)^2 )$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=167201,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,4524418.767,0.0002210228653,,26027057526546,0,,6.52E+19,0,,2,,,Combinatorics
5,Maximum Flow,2,Integer Maximum Flow,71,Finding blocking flows,,1,1,O(E^{1.5} Log(V^2/E) LogU),^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,,,1,3->4,6,"V: 6,
E: 4.5,
U: 2",$O(E^{1.5} \log(V^2/E) \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,460753.7601,16.40695149,,75582472025,0,,5.82E+15,0,,2,,,Combinatorics
5,Maximum Flow,2,Integer Maximum Flow,72,Finding blocking flows,,1,1,O(V^{0.66}E Log(V^2/E) LogU),^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,,,0,0,5.66,"V: 5.66,
E: 3,
U: 2",$O(V^{0.66}E \log(V^2/E) \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,851225,9254.751005,,,,,,,,2,,,Combinatorics
5,Maximum Flow,2,st-Maximum Flow,73,Improvement of the KRT algorithm,,1,1,O(VE),^ see 233,,[https://dl.acm.org/citation.cfm?id=2488705 James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm (2013)],James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm,2013,https://dl.acm.org/citation.cfm?id=2488705,,,,1,0,6,"V: 6,
E: 3",$O(VE)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=2488705,0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,88757,88757.7929,0.2017379668,88757396440,88757396408,0.5017026406,8.88E+16,8.88E+16,0.8765413472,2,,,Combinatorics
9,Linear System,2,Positive Definite Matrix,104,,,1,0,O (m k^0.5),^see above (positive definite),^see above,[https://nvlpubs.nist.gov/nistpubs/jres/049/jresv49n6p409_A1b.pdf Conjugate Gradient (1952)],Conjugate Gradient,1952,https://nvlpubs.nist.gov/nistpubs/jres/049/jresv49n6p409_A1b.pdf,1,1,https://en.wikipedia.org/wiki/Conjugate_gradient_method,1,3->4,3,"m: 3,
k: 2.5,
n^2: 3",$O(m k^{0.5})$,"n: number of variables and number of equations
m: number of nonzero entries in matrix
k: ratio between largest and smallest eigenvalues",n^2,,,Word RAM,words,3,"m: 3,
n: 5,
n^2: 3",O(m),http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf,0,0,,0,,1,,0,0,,0,0,http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,6076,6077.359612,1.066852945,192450089.7,192450089.7,3.901848033,6085806194502,6085806194502,10.62411354,3,,,Numerical Analysis
9,Linear System,2,Sparse Linear System,109,Quantum algorithm,,1,1,O (k^2*logn),,,[https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.103.150502 Harrow (Quantum) (2009)],Harrow (Quantum),2009,https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.103.150502,,,,0,0,2,"k: 5,
n: 2,
n^2: 2",$O(k^2*\log n)$,"n: number of variables and number of equations
k: ratio between largest and smallest eigenvalues",n^2,,,Quantum Computer,qubits,2,"n: 2,
n^2: 2",O(\log n),https://arxiv.org/pdf/0811.3171.pdf,0,1,,0,,0,,0,0,,1,0,https://en.wikipedia.org/wiki/Quantum_algorithm_for_linear_systems_of_equations,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,8.37,4411712.903,,,,,,,,3,,,Numerical Analysis
10,Linear Programming,1,,112,,,1,1,O(n^3.5 L^2 logL loglogL),,,[https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf Karmarkar's algorithm (1984)],Karmarkar's algorithm,1984,https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf,,,,1,0,6.5,"n: 6.5,
L: 5.02",$O(n^{3.5} L^2 logL loglogL)$,"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),can be derived from paper?,1,0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,389062121651,Inf,,1.23E+22,Inf,,3.89E+32,Inf,,1,,,Numerical Analysis
10,Linear Programming,1,,113,,,1,1,"O(2^n*poly(n, m))? (previously O(2^n))",,,[- Simplex Algorithm (1947)],Simplex Algorithm,1947,-,,,,0,0,8,"n: 8,
m: 7","$O(2^n*poly(n, m))$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",O(nm),can be easily derived?,1,0,,0,,0,,0,0,,0,0,http://www-leland.stanford.edu/group/SOL/reports/OR-80-27.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",333333.3333,Inf,333333333333,Inf,3.33E+17,Inf,Inf,1,,,,,,,,1,,,Numerical Analysis
10,Linear Programming,1,,114,,,1,1,"O(2^n*poly(n, m))? (previously O(2^n))",,,[- Terlaky's Criss-cross algorithm (1985)],Terlaky's Criss-cross algorithm,1985,-,,,,0,0,8,"n: 8,
m: 7","$O(2^n*poly(n, m))$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",O(nm),can be easily derived?,1,0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/BF01585729.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis
10,Linear Programming,1,,115,,,1,1,? (originally O(n^{3.5} L) but seems unclear),,,[- Affine scaling (1967)],Affine scaling,1967,-,,,,0,0,6.5,"n: 6.5,
L: 3",? (originally $O(n^{3.5} L)$ but seems unclear),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 5",O(nm+m^2)?,can be easily derived?,1,0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/c23c/43d781da35b8314489d83ee8f3b5490541ea.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,316227766017,Inf,Inf,,,Inf,,,Inf,1,,,Numerical Analysis
10,Linear Programming,1,,116,,,1,1,"$O(n^{(max(omega, 2.5-alpha/2, 13/6))}*polylog(n, m, L))$, where omega is the exponent on matrix multiplication, alpha is the dual exponent of matrix multiplication;
currently $O(n^{2.37285956})$",,,[https://arxiv.org/abs/1810.07896 Cohen; Lee and Song (2018)],Cohen; Lee and Song,2018,https://arxiv.org/abs/1810.07896,1,1,https://arxiv.org/abs/1810.07896,1,2->3,6,n: 6,"$O(n^{max(omega, 2.5-alpha/2, 13/6)}*polylog(n, m, L))$, where omega is the exponent on matrix multiplication, alpha is the dual exponent of matrix multiplication;
currently $O(n^2.37285956)$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",O(nm+n^2)?,"Not entirely sure about this, but it seems like each iteration manipulates a constant number of $O(m+n)\times O(n)$ matrices, along with a constant number of vectors of size $O(m+n)$, all of whose elements are of size $O(1)$ words.",1,0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,12971792,Inf,,168267406107047,Inf,,2.18E+21,Inf,,1,,,Numerical Analysis
10,Linear Programming,1,,117,,,1,1,O((nnz(A) + n^2) n^{0.5}),,,[https://arxiv.org/abs/1503.01752 Lee and Sidford (2015)],Lee and Sidford,2015,https://arxiv.org/abs/1503.01752,,,,0,0,5.5,n: 5.5,$O((nnz(A) + n^2) n^{0.5})$,"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",O(nm+n^2)??,Same reasoning as ^,1,0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,31654399,Inf,Inf,,,Inf,,,Inf,1,,,Numerical Analysis
12,Convex Hull,1,2-dimensional,129,,,1,1,O(nlogn),Any distribution (runtime is same regardless of input),https://link.springer.com/chapter/10.1007/978-1-4612-1098-6_3,[https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub Graham (1972)],Graham,1972,https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub,,,,1,3->5,4,n: 4,$O(n \log n)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,0.3651371615,19931568.57,50171665944,0.9462632475,29897352854,3.34E+16,1.796433658,3,,,Image Processing
12,Convex Hull,1,2-dimensional,130,,,1,1,O(nh),(pseudorandom sampling; experimental),https://dl.acm.org/citation.cfm?id=355766,[https://dl.acm.org/citation.cfm?id=355766 W. Eddy Quickhull (1977)],W. Eddy Quickhull,1977,https://dl.acm.org/citation.cfm?id=355766,,,,0,0,5,"n: 5,
h: 3",$O(nh)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,"n: 3,
h: 3",O(h)?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing
12,Convex Hull,1,2-dimensional; 3-dimensional,131,,,1,1,O(nlogn),,,[https://dl.acm.org/citation.cfm?id=359430 Preparata and Hong (1977)],Preparata and Hong,1977,https://dl.acm.org/citation.cfm?id=359430,,,,0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n)?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing
12,Convex Hull,1,2-dimensional,132,,,1,1,O(nlogn),,,[https://www.sciencedirect.com/science/article/pii/0020019079900723 Andrew's algorithm (1979)],Andrew's algorithm,1979,https://www.sciencedirect.com/science/article/pii/0020019079900723,,,,0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing
12,Convex Hull,1,2-dimensional,134,,,1,1,O(n log h),,,[https://ecommons.cornell.edu/handle/1813/6417 The ultimate planar convex hull algorithm (1986)],The ultimate planar convex hull algorithm,1986,https://ecommons.cornell.edu/handle/1813/6417,2,1,https://www.cs.princeton.edu/~chazelle/temp/451/451-2019/KirkSeidel.pdf,1,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://ecommons.cornell.edu/handle/1813/6417,0,1,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.892142,2.006063891,,9965784.285,0,,14948676427,0,,3,,,Image Processing
12,Convex Hull,1,2-dimensional; 3-dimensional,135,,,1,1,O(n log h),,,[https://link.springer.com/article/10.1007/BF02712873 Chan's algorithm (1996)],Chan's algorithm,1996,https://link.springer.com/article/10.1007/BF02712873,,,,0,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://link.springer.com/article/10.1007/BF02712873,0,1,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982,200722.6014,,#VALUE!,#VALUE!,,#VALUE!,#VALUE!,,3,,,Image Processing
12,Convex Hull,1,2-dimensional,136,,,1,1,"O(logn) time using
O(n) processors",,,[https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf Miller; Stout (1988)],Miller; Stout,1988,https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf,,,,1,5->7,#VALUE!,,"$O(logn)$ time using
$O(n)$ processors","n: number of line segments
h: number of points on the convex hull",n,,,"EREW PRAM, possibly others (see paper)",words,3,n: 3,O(n) total?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1,0,,0,,0,,0,1,O(n),0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9.965,100351229.3,,,,,,,,3,,,Image Processing
13,Strongly Connected Components,1,SCCs,137,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/0898122181900080 Kosaraju's algorithm (1978)],Kosaraju's algorithm,1978,https://www.sciencedirect.com/science/article/pii/0898122181900080,,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 3",O(V+E),auxiliary data structures take up at most that much space,1,0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,https://www.sciencedirect.com/science/article/pii/B9780123743640500114,Combinatorics
13,Strongly Connected Components,1,SCCs,138,,,1,1,O(V+E),,,[https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6 Tarjan's strongly connected components algorithm (1972)],Tarjan's strongly connected components algorithm,1972,https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6,2,1,https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/,1,5->6,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),https://www.sciencedirect.com/science/article/pii/S0020019015001532,0,0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,183.673,,1000000,183673.4694,,1000000000,183673469.4,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,139,,,1,1,O(V+E),,,[https://www.worldcat.org/title/discipline-of-programming/oclc/1958445 Path-based strong components algorithm; Dijkstra (1976)],Path-based strong components algorithm; Dijkstra,1976,https://www.worldcat.org/title/discipline-of-programming/oclc/1958445,,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),constant number of auxiliary stacks?,1,0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,140,,,1,1,O(ElogV+V),,,[https://ldhulipala.github.io/readings/sequential-scc.pdf Fleischer forward-backward (FB) algorithm (2003)],Fleischer forward-backward (FB) algorithm,2003,https://ldhulipala.github.io/readings/sequential-scc.pdf,,,,0,0,5.01,"E: 3,
V: 5.01",$O(E\log V+V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E),constructing recursive subgraphs? and reuse space across recursive calls,1,0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,141,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/S0020019015001532 Pearce (2016)],Pearce,2016,https://www.sciencedirect.com/science/article/pii/S0020019015001532,,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),https://www.sciencedirect.com/science/article/pii/S0020019015001532,0,1,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,142,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub Path-based depth-first search Gabow (2000)],Path-based depth-first search Gabow,2000,https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1","O(V+E) total, O(V) auxiliary?",https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,0,1,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,Transitive Closure,143,,,1,1,O(V^2),"Each edge is selected with probability p, 0<p<1",https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,[https://link.springer.com/article/10.1007%2FBF01940892 Paul Purdom (1970)],Paul Purdom,1970,https://link.springer.com/article/10.1007%2FBF01940892,4,1,https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,1,0,6,"V: 6,
E: 3",$O(V^2+VE)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 1",O(V^2),https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,0,1,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000000,,1000000000000,,1.00E+18,,183673,0.005444458358,,183673469388,1,,1.84E+17,1,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,144,,,1,1,O(V^2),,,[http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html Lowe’s Algorithm (2014)],Lowe’s Algorithm,2014,http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html,,,,0,0,5,"V: 5,
E: 3",$O(V^2)$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) per processor,(can be easily derived?),1,0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,184244,0.005427585159,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,145,,,1,1,"O(p*(V+E)*alpha(V, E))?",,,[https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44 Renault’s Algorithm (2009)],Renault’s Algorithm,2009,https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44,,,,0,0,5,"V: 5,
E: 3,
p: 3","$O(p*(V+E)*\alpha(V, E))$","V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) per processor,(can be easily derived?),1,0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,183673,0.005444458358,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,146,,,1,1,O(V+E),,,[https://link.springer.com/chapter/10.1007/3-540-48119-2_16 Couvreur (1999)],Couvreur,1999,https://link.springer.com/chapter/10.1007/3-540-48119-2_16,,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V)?,can be easily derived?,1,0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,147,,,1,1,O(E + VlogV),,,[https://www.sciencedirect.com/science/article/pii/0020019071900068 Munro’s algorithm (1971)],Munro’s algorithm,1971,https://www.sciencedirect.com/science/article/pii/0020019071900068,,,,1,4->5,5,"V: 5,
E: 3",$O(E + V \log V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V)?,can be easily derived?,1,0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000,999,1000000,999999,1000000000,999999999,4318.596513,42.53071558,41.53071558,8589646.921,21383.12216,21382.12216,12860697328,14281765.96,14281764.96,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,148,,,1,1,O(V(V+E)),,,[https://ieeexplore.ieee.org/document/8133154 OBF Algorithm (2011)],OBF Algorithm,2011,https://ieeexplore.ieee.org/document/8133154,,,,0,0,6,"E: 3,
V: 6",$O(V(V+E))$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E+V^2) total,https://ris.utwente.nl/ws/files/6872352/Barnat09distributed.pdf,0,1,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,149,,,1,1,O(VE),,,[https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution CH Algorithm (2004)],CH Algorithm,2004,https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution,,,,0,0,6,"E: 3,
V: 6",$O(VE)$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E)?,Each vertex needs to keep track of one color; then we need to build recursive subgraphs,1,0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,244897,0.004083349326,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,150,,,1,1,O(V(V+E)),,,[https://stanford-ppl.github.io/website/papers/sc13-hong.pdf Hong’s algorithm (2013)],Hong’s algorithm,2013,https://stanford-ppl.github.io/website/papers/sc13-hong.pdf,,,,0,0,6,"E: 3,
V: 6",$O(V(V+E))$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E)?,Building recursive subgraphs,1,0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",151,,,1,1,O(ElogV),,,[- Borůvka's algorithm (1926)],Borůvka's algorithm,1926,-,1,1,https://www.geeksforgeeks.org/boruvkas-algorithm-greedy-algo-9/,1,0,5.01,"V: 5.01,
E: 3",$O(E \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5075,1,,10889978.26,1,,16703352428,1,,5,,https://scholarworks.rit.edu/cgi/viewcontent.cgi?article=1658&context=theses,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",152,,,1,1,O(V^2),,,[https://ieeexplore.ieee.org/document/6773228 Prim's algorithm + adjacency matrix searching (1957)],Prim's algorithm + adjacency matrix searching,1957,https://ieeexplore.ieee.org/document/6773228,,,,0,0,5,V: 5,$O(V^2)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,173611,0.02923201871,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",153,,,1,1,O(E + VlogV),,,[https://dl.acm.org/citation.cfm?id=28874 Prim's algorithm + Fibonacci heaps; Fredman & Tarjan (1987)],Prim's algorithm + Fibonacci heaps; Fredman & Tarjan,1987,https://dl.acm.org/citation.cfm?id=28874,,,,0,0,5,"V: 5,
E: 3",$O(E + V \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,4208,1.206036122,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",154,,,1,1,O(ElogE),,,[https://www.jstor.org/stable/2033241 Kruskal's algorithm (1956)],Kruskal's algorithm,1956,https://www.jstor.org/stable/2033241,,,,0,0,5.01,"V: 5.01,
E: 4",$O(E \log E)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5355,0.9477124183,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",155,,,1,1,O(EloglogV),,,[https://www.sciencedirect.com/science/article/pii/0020019075900563 Yao's algorithm (1975)],Yao's algorithm,1975,https://www.sciencedirect.com/science/article/pii/0020019075900563,,,,1,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820,2.788461538,0.02973317467,2463146.436,4.421165588,0.04338336425,2823142793,5.916580794,0.05210519661,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",156,,,1,1,O(EloglogV),,,[https://epubs.siam.org/doi/abs/10.1137/0205051 Cheriton-Tarjan Algorithm (1976)],Cheriton-Tarjan Algorithm,1976,https://epubs.siam.org/doi/abs/10.1137/0205051,,,,0,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,keep track of copy of graph where edges may be deleted?,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820,2.788461538,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",159,,,1,1,"O(E+Vlog(V)log(E/V)), equivalent to O(E + Vlog(V)loglog(V))","Arbitrary graph, random edge weights",https://dl.acm.org/doi/10.5555/2791220.2791225,[https://dl.acm.org/citation.cfm?id=2791225 Filter Kruskal algorithm (2009)],Filter Kruskal algorithm,2009,https://dl.acm.org/citation.cfm?id=2791225,,,,0,0,5.01,"V: 5.01,
E: 4",$O(E \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,"Kruskal-based, with minimal overhead? filtering should only remove edges, and each edge should only require O(1) information",1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,12258,0.4140153369,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",160,,,1,1,"O(E*alpha(E, V))",,,[https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf Chazelle's algorithm (2000)],Chazelle's algorithm,2000,https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf,,,,0,0,5,"V: 5,
E: 3","$O(E*\alpha(E, V))$","V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary??,"Seems like it uses Boruvka phases and contracts the graph, which requires $O(E)$ space, and then additional information in the tree data structure/soft heap don't require space beyond that",,,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583,8.704974271,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",161,,,1,1,O(E LogV (loglogV)^3),,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Thorup (reverse-delete) (2000)],Thorup (reverse-delete),2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,,,0,0,5.02,"V: 5.02,
E: 3",$O(E \log V (\log \log V)^3)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,154134,0.03292589565,,,,,,,,5,,,Combinatorics
16,Shortest Path (Directed Graphs),1,general weights,174,,,1,1,O( V² EL),,,[https://apps.dtic.mil/sti/pdfs/AD0422842.pdf Bellman–Ford algorithm (Ford 1956) (1956)],Bellman–Ford algorithm (Ford 1956),1956,https://apps.dtic.mil/sti/pdfs/AD0422842.pdf,1,1,https://www.rand.org/pubs/papers/P923.html,1,0,7,"V: 7,
E: 3,
L: 3",$O(V^2 EL)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",O(E),number of equations in LP; each equation has a constant number of variables,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",666.6666667,,666666.6667,,666666666.7,,7407407407,1,,7.41E+18,1,,7.41E+27,1,,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,general weights,175,,,1,1,O(VE),,,[https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959) (1959)],Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959),1959,https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf,,,,1,2->4,6,"V: 6,
E: 3",$O(VE)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),keeping track of distances,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",333.3333333,0.2599210499,333333.3333,0.2599210499,333333333.3,0.2599210499,222222,33333.36667,31.18299021,222222222222,33333333.33,320.8297949,2.22E+17,33333333333,3217.297949,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Weights,176,,,1,1,O( V² logV),,,[https://www.jstor.org/stable/pdf/2627005.pdf Bellman–Ford algorithm (Dantzig 1960) (1960)],Bellman–Ford algorithm (Dantzig 1960),1960,https://www.jstor.org/stable/pdf/2627005.pdf,,,,0,0,5.01,V: 5.01,$O(V^2 \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",O(E) (total),can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,931111,15910.90086,,,,,,,,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Weights,177,,,1,1,O( V² ),,,[https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents Dijkstra's algorithm with list (Whiting & Hillier 1960) (1960)],Dijkstra's algorithm with list (Whiting & Hillier 1960),1960,https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents,,,,0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with list",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,111111,133333.4667,,,,,,,,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Weights,178,,,1,1,O((E + V) log V),,,[https://dl.acm.org/citation.cfm?id=321993 Dijkstra's algorithm with binary heap (Johnson 1977) (1977)],Dijkstra's algorithm with binary heap (Johnson 1977),1977,https://dl.acm.org/citation.cfm?id=321993,,,,1,4->5,5.01,"V: 5.01,
E: 3",$O((E + V) \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with heap",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,8380.821784,883852.1566,0.9193798649,18346606.07,403748103584,2.570030516,28312390353,2.62E+17,5.75171023,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Weights,179,,,1,1,O(E + V log V),,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987) (1984)],Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987),1984,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf,,,,0,0,5,"E: 3,
V: 5",$O(E + V \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with heap",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,3460,4281738.386,,,,,,,,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Integer Weights,180,,,1,1,O(E log log L),,,[https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983) (1981)],Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983),1981,https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,2,1,https://link.springer.com/article/10.1007/BF01786986,1,0,5,"E: 3,
V: 5,
L: 1.99",$O(E \log \log L)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word RAM,words,3,"V: 3,
L: 3",O(V+L),https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,669.3,11067394.9,0.9132063615,1821347.23,4066993532946,2.194264973,1821347230,4.07E+18,4.550996318,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Weights,181,,,1,1,O(E logL/log(2+(E/V))),,,[https://ieeexplore.ieee.org/document/4568085 Gabow's algorithm (1983)],Gabow's algorithm,1983,https://ieeexplore.ieee.org/document/4568085,,,,0,0,5,"E: 3,
V: 5,
L: 2",$O(E \log L/\log(2+(E/V)))$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,"V: 3,
E: 3",O(V+E)?,(keeping track of new graphs?),1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,4426,3347224.314,,,,,,,,2,,,Combinatorics
16,Shortest Path (Directed Graphs),2,Nonnegative Integer Weights,182,,,1,1,O(E + V*((log(L))^0.5) ),,,[https://dl.acm.org/doi/10.1145/77600.77615 Gabow Ahuja Algorithm (1990)],Gabow Ahuja Algorithm,1990,https://dl.acm.org/doi/10.1145/77600.77615,,,,0,0,5,"E: 3,
V: 5,
L: 1.5",$O(E + V*((\log(L))^{0.5}) )$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word RAM,words,5,"V: 5,
E: 3
C: 2",O(E + \log C),https://dl.acm.org/doi/10.1145/77600.77615,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1525,9714632.665,,,,,,,,2,,,Combinatorics
16,Shortest Path (Directed Graphs),1,Nonnegative Integer Weights,183,,,1,1,"O(E + V min(log log V, log log L))",,,[https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003 Thorup's algorithm (2004)],Thorup's algorithm,2004,https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,,,,0,0,5,"E: 3,
V: 5,
L: 1.99","$O(E + V min(log log V, log log L))$","V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,"O(V)? (""linear-space queue"")",https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1686,8786960.151,,,,,,,,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP on Dense Directed Graphs with Arbitrary Weights,184,,,1,1,O(n^4),,,[https://link.springer.com/article/10.1007/BF02476438 Shimbel Algorithm (1953)],Shimbel Algorithm,1953,https://link.springer.com/article/10.1007/BF02476438,1,1,https://link.springer.com/content/pdf/10.1007/BF02476438.pdf,1,0,7,n: 7,$O(n^4)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,12345679012,1,,1.23E+22,1,,1.23E+34,1,,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP,185,,,1,1,O(n^3),,,[https://dl.acm.org/citation.cfm?id=368168 Floyd–Warshall algorithm (1962)],Floyd–Warshall algorithm,1962,https://dl.acm.org/citation.cfm?id=368168,,,,1,2->3,6,n: 6,$O(n^3)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,37037037,333.3333337,0.9068646188,3.70E+16,333333.3333,3.108215283,3.70E+25,333333333.3,7.850881521,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP on Dense Undirected Unweighted Graphs; APSP on Sparse Undirected Unweighted Graphs,186,,,1,1,O (n^{2.373} \log n),,,[https://www.sciencedirect.com/science/article/pii/S0022000085710781 Seidel's algorithm (1995)],Seidel's algorithm,1995,https://www.sciencedirect.com/science/article/pii/S0022000085710781,,,,1,0,5.373,n: 5.373,$O (n^{2.373} \log n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses four auxiliary $V \times V$ matrices,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,8100011,1524.155833,0.1906562983,234070670188821,52743383.02,0.5270777256,4.75E+21,2598646354631,0.9751005894,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP on Dense Directed Graphs with Arbitrary Weights,187,,,1,1,O(n^3 /2^{(\log n)^{0.5}}),,,[https://dl.acm.org/citation.cfm?id=2591811 Williams (2014)],Williams,2014,https://dl.acm.org/citation.cfm?id=2591811,,,,0,0,6,n: 6,$O(n^3 /2^{(\log n)^{0.5}})$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: discussed with Ryan, uses an auxiliary $V \times V$ matrix, and the space required for the matrix multiplication of $V \times d$ and $d \times V$ matrices is also $O(V^2)$",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,4998250,2470.000303,,,,,,,,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),0.001,APSP on Dense Undirected Graphs with Arbitrary Weights; APSP on Sparse Undirected Graphs with Arbitrary Weights,188,,,1,1,"O(mn \log \alpha(m,n))",,,[https://dl.acm.org/citation.cfm?id=545417 Pettie & Ramachandran (2002)],Pettie & Ramachandran,2002,https://dl.acm.org/citation.cfm?id=545417,,,,0,0,6,"n: 6,
m: 3","$O(mn \log \alpha(m,n))$","$n$: number of vertices
$m$: number of edges
$\alpha$:",n,,,Pointer Machine,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222,55555.61111,,,,,,,,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP on Dense Undirected Graphs with Positive Integer Weights; APSP on Sparse Undirected Graphs with Positive Integer Weights,189,,,1,1,O(mn),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf Thorup (1999)],Thorup,1999,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,1,1,https://dl.acm.org/doi/pdf/10.1145/316542.316548,1,3->4,6,"n: 6,
m: 3",$O(mn)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3",$O(mn)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222,55555.61111,,222222222222,55555555556,,2.22E+17,5.56E+16,,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP on Geometrically Weighted Graphs,190,,,1,1,O(n^{2.844}),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (Geometrically Weighted) (2009)],Chan (Geometrically Weighted),2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0,0,5.844,n: 5.844,$O(n^{2.844})$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(l n^2)$,Derived: Compute and store $2l$ $V \times V$ matrices,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,14964670,824.9883901,,,,,,,,2,,,Combinatorics
17,All-Pairs Shortest Paths (APSP),2,APSP on Dense Directed Graphs with Arbitrary Weights; APSP on Dense Undirected Graphs with Arbitrary Weights,191,,,1,1,O(n^3 \log^3 \log n / \log^2 n),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (2009)],Chan,2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0,0,6,n: 6,$O(n^3 \log^3 \log n / \log^2 n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(n^2)$,"Derived: Dividing $A$ and $B$ into $V \times q$ and $q \times V$ matrices, in total using $O(V^2)$ space",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,15111217,816.9877391,,,,,,,,2,,,Combinatorics
18,Integer Factoring,1,First Category Integer Factoring,192,,,1,1,O(2^{(n/2)}),,,[- Trial division (1202)],Trial division,1202,-,1,1,https://en.wikipedia.org/wiki/Trial_division,1,0,8,n: 8,$O(2^{n/2})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),need to keep track of what number you're currently checking,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Trial_division,whose running time depends on the size of smallest prime factor.,,,,1000,,1000000,,1000000000,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,193,,,1,1,O( 2^{(n/2)}),,,[ Wheel factorization (1940)],Wheel factorization,1940,,,,,0,0,8,n: 8,$O(2^{n/2})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),"need to keep track of what number you're currently checking, along with o(n) bits for the wheel (assuming it's small)",1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,194,,,1,1,-,,,[https://link.springer.com/article/10.1007%2FBF01933667 Pollard's rho algorithm (1975)],Pollard's rho algorithm,1975,https://link.springer.com/article/10.1007%2FBF01933667,,,,0,0,#VALUE!,,-,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),"keep track of g (the polynomial; O(1) space), x, y, and d (all O(n) space)",1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,195,,,1,1,O(B*log B*log^2(n))?,,,[https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989 Pollard's p − 1 algorithm (1974)],Pollard's p − 1 algorithm,1974,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989,,,,0,0,8,n: 8,O(B*log B*log^2(n))?,"n: number of bits in the integer
B: smoothness bound (can be exponential)",n,,,Word RAM?,bits,8,"n: 8,
B: 3",O(n+B),"the number M requires O((log B)*pi(B)) = O(B) bits, and the other numbers require O(n) bits",1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,196,,,1,1,O(2^{(n)}),,,[https://www.jstor.org/stable/2007633?origin=crossref Williams' p + 1 algorithm (1982)],Williams' p + 1 algorithm,1982,https://www.jstor.org/stable/2007633?origin=crossref,,,,0,0,8,n: 8,$O(2^n)$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which are expressed in mod N,1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,197,,,1,1,O(e^{(sqrt((1+o(1))n*log n))}),,,[https://www.jstor.org/stable/1971363?origin=crossref&seq=1 Lenstra elliptic curve factorization (1987)],Lenstra elliptic curve factorization,1987,https://www.jstor.org/stable/1971363?origin=crossref&seq=1,,,,0,0,8,n: 8,$O(e^{(\sqrt((1+o(1))n*log n))})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which are expressed in mod N,1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22542392121,Inf,,,,,,,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,198,,,1,1,O(2^n)?,,,[https://archive.org/details/oeuvresdefermat02ferm Fermat's factorization method (1894)],Fermat's factorization method,1894,https://archive.org/details/oeuvresdefermat02ferm,1,1,https://www.geeksforgeeks.org/fermats-factorization-method/,1,0,8,n: 8,$O(2^n)$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which require at most O(n) bits,1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22387211385,Inf,,5.01E+20,Inf,,1.12E+31,Inf,,1,,,Numerical Analysis
18,Integer Factoring,1,First Category Integer Factoring,199,,,1,1,O(2^{(n/2)})?,,,[- Euler's factorization method (1940)],Euler's factorization method,1940,-,,,,0,0,8,n: 8,$O(2^{(n/2)})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),constant number of values which require at most O(n) bits,1,0,,0,,0,,0,0,,0,0,https://archive.org/details/numbertheoryitsh0000orey/page/59,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis
19,Integer Factoring,1,Second Category Integer Factoring,201,,,1,1,O(e^{(2 sqrt(2) sqrt(n*logn))}),,,[https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html Dixon's algorithm (1981)],Dixon's algorithm,1981,https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html,,,,0,0,8,n: 8,$O(e^{(2 \sqrt(2) \sqrt(n*logn))})4,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,There are pi(B) = O(B/log B) primes in the factor base; need pi(B)+1=O(B/log B) relations involving an integer (which doesn't need to be kept track of) and a pi(B)-bit string of exponents. Also need O(n) bits to perform other computations. Rest is irrelevant asymptotically,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis
19,Integer Factoring,1,Second Category Integer Factoring,202,,,1,1,O(e^{sqrt(2n*logn)}),,,[https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html Continued fraction factorization (CFRAC) (1931)],Continued fraction factorization (CFRAC),1931,https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html,,,,1,0,8,n: 8,$O(e^{\sqrt(2n*logn)})$,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same as above? assuming there is a bound parameter implemented,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,3395.232193,1,,497271.0145,1,,27199045.33,1,,4,,,Numerical Analysis
19,Integer Factoring,1,Second Category Integer Factoring,203,,,1,1,-,,,[https://www.semanticscholar.org/paper/Analysis-and-comparison-of-some-integer-factoring-Pomerance/134b7b065a73d4ca00bb16c7b8bebbde951b0ba0 Quadratic sieve (1981)],Quadratic sieve,1981,https://www.semanticscholar.org/paper/Analysis-and-comparison-of-some-integer-factoring-Pomerance/134b7b065a73d4ca00bb16c7b8bebbde951b0ba0,,,,0,0,#VALUE!,,-,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same general approach as Dixon's algorithm,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
19,Integer Factoring,1,Second Category Integer Factoring,204,,,1,1,O(e^{sqrt((2+o(1))n*logn)}),,,[https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf Rational sieve (1993)],Rational sieve,1993,https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf,,,,0,0,8,n: 8,O(e^{sqrt((2+o(1))n*logn)}),"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same general approach as Dixon's algorithm,1,0,,0,,0,,0,1,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
19,Integer Factoring,1,Second Category Integer Factoring,206,,,1,1,O(2^{(n/4)}),,,[https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf Shanks's square forms factorization (SQUFOF) (2007)],Shanks's square forms factorization (SQUFOF),2007,https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf,,,,0,0,8,n: 8,$O(2^{n/4})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,Constant number of O(n)-bit integers,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
20,LU Decomposition,0.001,Square Matrix LU Decomposition,208,,,1,1,O(nlogn),,,[ Closed formula (1975)],Closed formula,1975,,,,,1,3->5,2.51,"n: 4,
n^2: 2.51",$O(n \log n)$,n: dimension of square matrix,n^2,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,#DIV/0!,,,#DIV/0!,,3,,,Numerical Analysis
20,LU Decomposition,2,Rectangular Matrix LU Decomposition,211,,,1,0,O(n^3),,,[https://www.sciencedirect.com/science/article/pii/S1063520316300069 Randomized LU Decomposition (2016)],Randomized LU Decomposition,2016,https://www.sciencedirect.com/science/article/pii/S1063520316300069,,,,0,0,4.5,"n: 6,
mn: 4.5",O(n^3),"$m$: number of rows in input matrix
$n$: number of columns in input matrix
$l$: number of columns chosen to use in the decomposition ($l \geq k$)
$k$: desired rank of decomposition",mn,,,Word RAM,words,3,"n: 3,
m: 3,
l: 3,
mn: 3",$\tilde{O}(nl + ml)$,Derived: Two intermediate auxiliary matrices of sizes $n \times l$ and $m \times l$ for the input matrix of size $m \times n$,1,0,,1,Monte Carlo,1,See Theorem 4.3 in original paper for error bound,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000,1,,,,,,,,3,There are 4 different algorithms in this paper,,Numerical Analysis
20,LU Decomposition,0.001,Square Matrix LU Decomposition,213,,,1,1,O(nlogn),,,[ David (2006)],David,2006,,,,,0,0,2.51,"n: 4,
n^2: 2.51",$O(n \log n)$,n: dimension of square matrix,n^2,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,1,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,,,,,,3,,,Numerical Analysis
20,LU Decomposition,2,Square Matrix LU Decomposition,214,,,1,1,O(n^3),,,"[https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false Press, Teukolsky, Flannery (2007)]","Press, Teukolsky, Flannery",2007,https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false,,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: dimension of square matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$\tilde{O}(n)$,"Derived: The only auxiliary structure used is a list called ""vv"" that has one entry per row of the input matrix to store some sort of scaling metric",1,0,,0,,0,,1,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,,,,,,3,,,Numerical Analysis
21,Informed Search,2,Informed Search,216,,,1,1,O(b^d),,,[ Greedy Best-First Search (1959)],Greedy Best-First Search,1959,,1,1,https://www.cs.cmu.edu/afs/cs/project/jair/pub/volume28/coles07a-html/node11.html,1,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),https://en.wikipedia.org/wiki/Breadth-first_search: Stores all generated nodes in memory,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Breadth-first_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Robotics
21,Informed Search,0.001,,219,,,1,1,O(b^d),,,[ Incremental Heuristic Search (1968)],Incremental Heuristic Search,1968,,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,#VALUE!,,,,,,,0,,0,,1,0,,0,0,https://en.wikipedia.org/wiki/Incremental_heuristic_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,220,,,1,1,O(b^d),,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf for experimental results,[https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf Block A* (2011)],Block A*,2011,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,221,,,1,1,O(b^d),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.15.3683 D* (1994)],D*,1994,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.15.3683,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,222,,,1,1,O(b^d),,,[https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf Field D* (2006)],Field D*,2006,https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
21,Informed Search,2,Informed Search,223,,,1,1,O(b^d),,,[ Fringe (2005)],Fringe,2005,,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics
22,String Search,2,Single String Search,236,,,1,1,O(n/m),,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf Tuned Boyer-Moore algorithm (1991)],Tuned Boyer-Moore algorithm,1991,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: length of searchable text
s: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",O(m + s),https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0,1,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
23,Sequence Alignment,1,"Edit sequence, global alignment",261,,,1,1,O(mn),,,[https://www.nature.com/articles/srep01746 FOGSAA (2013)],FOGSAA,2013,https://www.nature.com/articles/srep01746,,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",O(mn)?,"Upper bounded by runtime, though likely there's a better bound?",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
25,Line Clipping,1,convex polygonal window,270,,,1,1,O(n*logp),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849394900647/pdf?md5=06bd1f11031af17d1fd34626c4e2f49b&pid=1-s2.0-0097849394900647-main.pdf O(lg N) algorithm (1994)],O(lg N) algorithm,1994,https://www.sciencedirect.com/science/article/pii/0097849394900647/pdf?md5=06bd1f11031af17d1fd34626c4e2f49b&pid=1-s2.0-0097849394900647-main.pdf,376,0,https://www.sciencedirect.com/science/article/pii/0097849394900647,0,0,3,"n: 3,
p: 2",$O(n*\log p)$,"n: number of lines
p: number of edges on polygon",n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary??,"Easily derived? (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Image Processing
25,Line Clipping,1,convex and non-convex polyhedral window,271,,,1,1,O(np)?,^ see above,^ see above,[https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061 Skala (1996)],Skala,1996,https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061,,,,0,0,3,"n: 3,
p: 3",O(np)?,"n: number of lines
p: number of faces on polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary?,"Easily derived? (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,1,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1,1000,,,,,,,,6,,,Image Processing
27,Multiplication,1,,276,,,1,1,O(n logn loglogn),^see above,^see above,[https://link.springer.com/article/10.1007/BF02242355 Schönhage–Strassen algorithm (1971)],Schönhage–Strassen algorithm,1971,https://link.springer.com/article/10.1007/BF02242355,,,,1,0,4.001,n: 4.001,$O(n \log n \log\log n)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,Depends on DFT/FFT algorithm? but all vectors/numbers are of size O(n) and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,32984,30.31772981,0.1163404644,86044249.58,11621.92715,0.3525022766,146555204661,6823367.361,0.6613134177,4,,,Numerical Analysis
27,Multiplication,1,,277,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf Furer's algorithm (2007)],Furer's algorithm,2007,https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf,,,,0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,Depends on DFT/FFT algorithm (though original source describes its own algorithm)? but all vectors/numbers are of size O(n) and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640,0.02449981184,,,,,,,,4,,,Numerical Analysis
27,Multiplication,1,,278,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://arxiv.org/abs/0801.1416 De (2008)],De,2008,https://arxiv.org/abs/0801.1416,,,,0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,^ same as above,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640,0.02449981184,,,,,,,,4,,,Numerical Analysis
27,Multiplication,1,,279,,,1,1,O(nlogn),^see above,^see above,[https://hal.archives-ouvertes.fr/hal-02070778 Harvey; Hoeven (2019)],Harvey; Hoeven,2019,https://hal.archives-ouvertes.fr/hal-02070778,,,,1,4->5,4,n: 4,$O(n \log n)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,[this one is kind of a mess to read but it seems generally the same as above - objects like polynomials/vectors and other numbers are of size O(n) and there are constantly many?],1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,9965.784285,100.3433319,0.06007183934,19931568.57,50171.66594,0.146831135,29897352854,33447777.3,0.2452173271,4,,,Numerical Analysis
27,Multiplication,1,,280,,,1,1,O(nlogn 2^{(3log*n)}),^see above,^see above,[https://arxiv.org/abs/1407.3360 Harvey; Hoeven; Lecerf (2015)],Harvey; Hoeven; Lecerf,2015,https://arxiv.org/abs/1407.3360,,,,0,0,7,n: 7,$O(n \log n 2^{(3 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720,12.54390366,,,,,,,,4,,,Numerical Analysis
27,Multiplication,1,,281,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://hal.inria.fr/hal-01108166v1/document Covanov and Thomé (2015)],Covanov and Thomé,2015,https://hal.inria.fr/hal-01108166v1/document,,,,0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640,0.02449981184,,,,,,,,4,,,Numerical Analysis
27,Multiplication,1,,282,,,1,1,O(nlogn 2^{(3log*n)}),^see above,^see above,[https://arxiv.org/abs/1502.02800 Covanov and Thomé (2016)],Covanov and Thomé,2016,https://arxiv.org/abs/1502.02800,,,,0,0,7,n: 7,$O(n \log n 2^{(3 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720,12.54390366,,,,,,,,4,,,Numerical Analysis
27,Multiplication,1,,283,,,1,1,O(nlogn 2^{(2log*n)}),^see above,^see above,[https://arxiv.org/abs/1802.07932 Harvey; Hoeven; Lecerf (2018)],Harvey; Hoeven; Lecerf,2018,https://arxiv.org/abs/1802.07932,,,,0,0,7,n: 7,$O(n \log n 2^{(2 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,39860,25.08780733,,,,,,,,4,,,Numerical Analysis
30,Mutual Exclusion,1,,298,,,1,1,O(n),^see above,(none),[http://lamport.azurewebsites.net/pubs/bakery.pdf Lamport's bakery algorithm (1974)],Lamport's bakery algorithm,1974,http://lamport.azurewebsites.net/pubs/bakery.pdf,,,,0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,1,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,1000000,,,1000000000,,,6,,,Operating Systems
30,Mutual Exclusion,1,,299,,,1,1,O(n),^see above,(none),[https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait Szymanski's algorithm (1988)],Szymanski's algorithm,1988,https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait,,,,0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",http://cs.rpi.edu/~szymansk/papers/jerus.93.pdf (kinda),0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems
30,Mutual Exclusion,1,,300,,,1,1,O(n),^see above,(none),[https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5 Taubenfeld's black-white bakery algorithm (2004)],Taubenfeld's black-white bakery algorithm,2004,https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5,,,,0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://link.springer.com/content/pdf/10.1007/b101206.pdf,0,1,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems
30,Mutual Exclusion,1,,301,,,1,1,O(n^{0.5}),^see above,(none),[https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf Maekawa's algorithm (1985)],Maekawa's algorithm,1985,https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf,,,,1,0,2.5,n: 2.5,$O(n^{0.5})$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,31.6227766,31.6227766,0.3688745095,1000,1000,0.8738174229,31622.7766,31622.7766,1.565020906,6,,,Operating Systems
30,Mutual Exclusion,1,,302,,,1,1,O(logn)? (originally this had O(n)),^see above,(none),[https://dl.acm.org/doi/abs/10.1145/58564.59295 Raymond's algorithm (1997)],Raymond's algorithm,1997,https://dl.acm.org/doi/abs/10.1145/58564.59295,,,,0,0,2,n: 2,O(\log n)? (originally this had O(n)),n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems
30,Mutual Exclusion,1,,304,,,1,1,O(n)? (originally this had O(logn)),^see above,(none),[https://cse.iitkgp.ac.in/~agupta/distsys/Mutex-SuzukiKasami.pdf Suzuki-Kasami's algorithm (1985)],Suzuki-Kasami's algorithm,1985,https://cse.iitkgp.ac.in/~agupta/distsys/Mutex-SuzukiKasami.pdf,2,1,,1,6->7,3,n: 3,O(n)? (originally this had O(logn)),n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Operating Systems
45,Shown Surface Determination,1,,385,,0,0,1,O(n*log(n)+np),"??? I think there is not really a ""good sense"" of average case distribution here since real-world images should make sense","(none, though http://medialab.di.unipi.it/web/IUM/Waterloo/node64.html is a good one for runtimes)",[https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf Painter's algorithm/Newell's algorithm (1972)],Painter's algorithm/Newell's algorithm,1972,https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf,,,,0,0,4,"n: 4,
p: 3",O(n*log(n)+np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n),(can be easily derived),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
45,Shown Surface Determination,1,,386,,0,0,1,O(np),^see above,(none),[https://dl.acm.org/doi/book/10.5555/905316?dl=ACM Warnock's algorithm (1969)],Warnock's algorithm,1969,https://dl.acm.org/doi/book/10.5555/905316?dl=ACM,,,,1,0,3,"n: 3,
p: 3",O(np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n)?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
45,Shown Surface Determination,1,,387,,0,0,1,O(np),^see above,(none),[ Ray tracing (1982)],Ray tracing,1982,,,,,0,0,3,"n: 3,
p: 3",O(np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n)?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
45,Shown Surface Determination,1,,388,,0,0,1,O(n^2+p)? (previously said O(n^2logn),^see above,(none),[https://apps.dtic.mil/dtic/tr/fulltext/u2/700375.pdf Binary space partitioning (BSP) (1969)],Binary space partitioning (BSP),1969,https://apps.dtic.mil/dtic/tr/fulltext/u2/700375.pdf,,,,1,0,5,"n: 5,
p: 3",O(n^2+p)? (previously said O(n^2logn),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,5,"n: 5,
p: 3",O(n^2+p)?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Binary_space_partitioning

http://library.msri.org/books/Book52/files/29toth.pdf

(6.856 Spring 2020 Lecture 1)",,,,,,,,,,,,,,,,,,,,4,,,Image Processing
45,Shown Surface Determination,1,,389,,0,0,1,O(np),^see above,(none),[http://isgwww.cs.uni-magdeburg.de/graphics/misc/Wolfgang_Stra%C3%9Fer_Schnelle_Kurven-_und_Flaechendarstellung_auf_grafischen_Sichtgeraeten.pdf Z-buffering (1974)],Z-buffering,1974,http://isgwww.cs.uni-magdeburg.de/graphics/misc/Wolfgang_Stra%C3%9Fer_Schnelle_Kurven-_und_Flaechendarstellung_auf_grafischen_Sichtgeraeten.pdf,,,,1,4->6,3,"n: 3,
p: 3",O(np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n),"https://www.geeksforgeeks.org/z-buffer-depth-buffer-method/#:~:text=Z%2Dbuffer%2C%20which%20is%20also,pixels%20times%20number%20of%20objects.",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing
45,Shown Surface Determination,1,,390,,0,0,1,O(E+p)?,^see above,(none),[ S-buffer/Scanline Rendering (1980)],S-buffer/Scanline Rendering,1980,,,,,0,0,3,"n: 3,
p: 3,
E: 3",O(E+p)?,"n: number of polygons
p: number of pixels in viewport
E: total number of edges across all polygons",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n)?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Scanline_rendering,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing
47,Eigenvalues (Iterative Methods),2,Eigenpair with the Largest Eigenvalue,397,,0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk Power Iteration (1929)],Power Iteration,1929,https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk,1,1,https://en.wikipedia.org/wiki/Power_iteration,1,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Stores an auxiliary vector,1,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Numerical Analysis
64,Delaunay Triangulation,1,,527,,,1,1,O(nlogn),,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune (1987)],Fortune,1987,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,,,0,0,4,n: 4,$O(n \log n)$,n: number of vertices,n,,,Real RAM?,words,3,n: 3,O(n),See Fortune's Algorithm (Voronoi diagrams); Voronoi diagram gives us O(n) circumcenters which can be used to find the O(n) triangles,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
80,Maximum Subarray Problem,1,1D Maximum Subarray,626,,,1,1,O(n),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0167642383900151?via%3Dihub Gries (1982)],Gries,1982,https://www.sciencedirect.com/science/article/pii/0167642383900151?via%3Dihub,,,,0,0,3,n: 3,$O(n)$,n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics
80,Maximum Subarray Problem,1,1D Maximum Subarray,627,,,1,1,O(n),^see above,^see above,[https://dl.acm.org/doi/10.1093/comjnl/32.2.122 Bird (1989)],Bird,1989,https://dl.acm.org/doi/10.1093/comjnl/32.2.122,,,,0,0,3,n: 3,$O(n)$,n: length of array,n,,,???,???,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics
80,Maximum Subarray Problem,1,1D Maximum Subarray,629,,,1,1,O(log n),^see above,^see above,"[https://ieeexplore.ieee.org/document/6972008 Ferreira, Camargo, Song (2014)]","Ferreira, Camargo, Song",2014,https://ieeexplore.ieee.org/document/6972008,,,,0,0,2,n: 2,O(\log n),n: length of array,n,,,EREW PRAM?,words,3,n: 3,O(n) auxiliary,constant number of arrays as outlined in algorithm,1,0,,0,,0,,0,1,O(n/log n),0,1,,,,,,,,,,,,9965,,,,,,,,,3,,,Combinatorics
120,Integer Relation,1,,923,,,1,1,O(n^3(n+k)),,,[https://epubs.siam.org/doi/pdf/10.1137/0218059 HJLS algorithm (1986)],HJLS algorithm,1986,https://epubs.siam.org/doi/pdf/10.1137/0218059,,,,0,0,7,"n: 7,
k: 3",$O(n^3(n+k))$,"n: dimensionality of vector
k: relation size parameter",n,https://epubs.siam.org/doi/pdf/10.1137/0218059,0,bit complexity,bits,5,n: 5,O(n^2) -- but requires infinite precision with large n or else it becomes unstable,"Derived: Store Gram-Schmidt basis vectors b_i (n n-dimensional vectors) and Gram-Schmidt numbers \mu_{i,j} (i and j both from 1 to n), not sure how to take into account the ""bit complexity"" part",1,0,,0,,0,,0,0,,0,0,,"Given a vector in n-space, is there a non-zero integral vector that is orthogonal to that vector?",,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis
147,Deadlock Avoidance,1,Dining Philosophers Problem,1017,,0,0,1,O(2^n),,,[https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution Resource hierarchy solution (1965)],Resource hierarchy solution,1965,https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution,2,1,,1,0,8,n: 8,O(2^n),n: number of philosophers,n,,,,,3,n: 3,O(n),each fork has a mutex and there are O(n) forks,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Operating Systems
147,Deadlock Avoidance,1,Dining Philosophers Problem,1018,,0,0,1,O(2^n),,,[https://en.wikipedia.org/wiki/Dining_philosophers_problem#Arbitrator_solution Arbitrator solution (1965)],Arbitrator solution,1965,https://en.wikipedia.org/wiki/Dining_philosophers_problem#Arbitrator_solution,,,,0,0,8,n: 8,O(2^n),n: number of philosophers,n,,,,,1,n: 1,O(1),"adding 1 arbitrator, which is of constant size",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Operating Systems
61,The Traveling-Salesman Problem,0.001,Approximate TSP,491,,,1,0,O(V^2 E),,,[https://www.jstor.org/stable/j.ctt7s8xg Applegate et al. (2006)],Applegate et al.,2006,https://www.jstor.org/stable/j.ctt7s8xg,,,,0,0,7,"V: 7,
E: 3",O(V^2 E),,V,,,,,#VALUE!,,,,,,,0,,1,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,0.001,,492,,,1,0,-,,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.1635&rep=rep1&type=pdf Johnson; D. S.; McGeoch; L. A. (1997)],Johnson; D. S.; McGeoch; L. A.,1997,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.92.1635&rep=rep1&type=pdf,,,,0,0,8,V: 8,O(2^{(p(n)}),n: number of cities,V,,,,,#VALUE!,,,,,,,0,,1,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,0.001,,493,,,1,0,-,,,[https://www.researchgate.net/publication/222408030_Traveling_Salesman_Should_not_be_Greedy_Domination_Analysis_of_Greedy-Type_Heuristics_for_the_TSP  Gutina; Gregory; Yeob; Anders; Zverovich; Alexey (2002)],Gutina; Gregory; Yeob; Anders; Zverovich; Alexey,2002,https://www.researchgate.net/publication/222408030_Traveling_Salesman_Should_not_be_Greedy_Domination_Analysis_of_Greedy-Type_Heuristics_for_the_TSP,,,,0,0,#VALUE!,,-,"V: number of vertices
E: number of edges",V,,,,,#VALUE!,,,,,,,0,,1,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,2,Approximate TSP,494,Nearest neighbor search,,1,0,O(V^2),,,[https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3 Rosenkrantz; D. J.; Stearns; R. E.; Lewis; P. M. (1974)],Rosenkrantz; D. J.; Stearns; R. E.; Lewis; P. M.,1974,https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3,,,,0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges",V,https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3,0,Word RAM,words,1,V: 1,O(1),Derived: Nearest neighbor search can be done with constant auxiliary space,1,0,,0,,1,1/2\log n + 1/2,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,2,Approximate TSP,495,Heuristic,,1,0,O(V^2),,,[https://www.cs.princeton.edu/~bwk/btl.mirror/tsp.pdf Lin–Kernighan (1981)],Lin–Kernighan,1981,https://www.cs.princeton.edu/~bwk/btl.mirror/tsp.pdf,,,,0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges",V,https://doi.org/10.1016/S0377-2217(99)00284-2,0,Word RAM,words,3,V: 3,O(V),https://doi.org/10.1016/S0377-2217(99)00284-2,0,0,,0,,1,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
108,Image Segmentation,0,,838,,,0,0,O(n^2),,,[ Linda G. Shapiro and George C. Stockman (2001) (2001)],Linda G. Shapiro and George C. Stockman (2001),2001,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,839,,,0,0,O(n^2),,,[ Recursive Region Splitting (1978)],Recursive Region Splitting,1978,,,,,1,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,840,,,0,0,O(nlogn),,,[ Barghout; Lauren Visual Taxometric approach (2014)],Barghout; Lauren Visual Taxometric approach,2014,,,,,0,0,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,841,,,0,0,O(nlogn),,,[ Dual clustering - Guberman (2012)],Dual clustering - Guberman,2012,,,,,0,0,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,842,,,0,0,O(n^2),,,[ R. Nock and F. Nielsen Statistical Region Merging (2004)],R. Nock and F. Nielsen Statistical Region Merging,2004,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,843,,,0,0,O(n^2),,,[ Kass; Witkin and Terzopoulos (1987)],Kass; Witkin and Terzopoulos,1987,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,844,,,0,0,O(nlogn),,,[ Chen's lambda-connected segmentation (1991)],Chen's lambda-connected segmentation,1991,,,,,1,4->5,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,845,,,0,0,O(n^2),,,[ S.L. Horowitz and T. Pavlidis - directed split and merge (1974)],S.L. Horowitz and T. Pavlidis - directed split and merge,1974,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,846,,,0,0,O(n^2),,,[ David Mumford and Jayant Shah (1989) (1989)],David Mumford and Jayant Shah (1989),1989,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,847,,,0,0,O(n^2),,,[ Geman and Geman Markov random fields (1984)],Geman and Geman Markov random fields,1984,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,848,,,0,0,O(n^2),,,[ Iterated conditional modes algorithm (1986)],Iterated conditional modes algorithm,1986,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,849,,,0,0,O(n^2),,,[ watershed transformation 1979 (1979)],watershed transformation 1979,1979,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,850,,,0,0,O(n^2),,,[ topological watershed (1997)],topological watershed,1997,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,851,,,0,0,O(n^2),,,[ Florack and Kuijper (2000)],Florack and Kuijper,2000,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,852,,,0,0,O(n^2),,,[ Bijaoui and Rué (1995)],Bijaoui and Rué,1995,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,853,,,0,0,O(n^2),,,[ Multi-scale MAP estimation - A. Bouman and M. Shapiro (2002) (2002)],Multi-scale MAP estimation - A. Bouman and M. Shapiro (2002),2002,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,854,,,0,0,O(n^2),,,[ Multiple Resolution segmentation - J. Liu and Y. H. Yang (1994) (1994)],Multiple Resolution segmentation - J. Liu and Y. H. Yang (1994),1994,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,855,,,0,0,O(nlogn),,,[ Quasi-linear Topological watershed (2005)],Quasi-linear Topological watershed,2005,,,,,0,0,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing
108,Image Segmentation,0,,856,,,0,0,O(n^2),,,[ Isometric graph partitioning - Leo Grady and Eric L. Schwartz (2006) (2006)],Isometric graph partitioning - Leo Grady and Eric L. Schwartz (2006),2006,,,,,0,0,5,n: 5,O(n^2),,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
112,Rasterization,2,Rasterization,895,Scan-conversion line algorithm,,0,0,O(n^1.45 logn),,,"[Hearn, Baker (1997) pg. 87 Digital Differential Analyzer (DDA) (1983)]",Digital Differential Analyzer (DDA),1983,"Hearn, Baker (1997) pg. 87",,,,1,0,3,n: 3,O(n),n: dimension of image,n,,,Word RAM,Words,1,n: 1,O(1),"Derived: for each iteration (i.e. each step along the line), only need to store a constant number of variables that are then overwritten in the next iteration.",1,0,,0,,1,n/a,0,0,,0,0,,,,,,,,,,,,223088,,,,,,,,,4,,,Image Processing
112,Rasterization,2,Rasterization,896,,,0,0,O(n^2),,,"[Hearn, Baker (1997) pg. 88 Bresenham Algorithm (1962)]",Bresenham Algorithm,1962,"Hearn, Baker (1997) pg. 88",,,,1,0,3,n: 3,O(n),n: dimension of image,n,,,Word RAM,Words,1,n: 1,O(1),"Derived: for each iteration (i.e. each step along the line), only need to store a constant number of variables that are then overwritten in the next iteration.",1,0,,0,,1,n/a,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
115,SLAM Algorithms,1,SLAM Algorithms,908,,0,1,0,O(m*log n) per iteration,^see above,(none),[http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf FastSlam (2003)],FastSlam,2003,http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf,,,,0,0,2,"m: 3,
n: 2",O(m*\log n) per iteration,"n: number of dimensions in state space
m: number of particles in particle filter",n,http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf,0,Real RAM?,words?,3,"m: 3,
n: 3",O(mn)?,Stores and updates a balanced binary tree of n elements/dimensions per particle,1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics
115,SLAM Algorithms,1,SLAM Algorithms,910,,0,1,0,O(n^2),^see above,(none),[http://ingmec.ual.es/~jlblanco/papers/blanco2013rba.pdf srba (2002)],srba,2002,http://ingmec.ual.es/~jlblanco/papers/blanco2013rba.pdf,,,,0,0,5,n: 5,O(n^2),n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,"Seems to store a constant number of O(n)*O(n)-sized matrices and O(n)*O(n)-sized tables (see section II, part C)",1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000,,,,,,,,,3,,,Robotics
1,Sorting,2,Comparison Sorting,19,,,1,1,O( n² ),Any distribution,Same general behavior across inputs,[https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce Odd Even Sort Parallel  Implementation (1972)],Odd Even Sort Parallel  Implementation,1972,https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce,,,,0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ,0,1,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,1,Non-Comparison Sorting,25,,,1,1,O(n),Any distribution,need to read entire input,[https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11 Spaghetti Sort Parallel Implementation (1984)],Spaghetti Sort Parallel Implementation,1984,https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11,,,,0,0,3,n: 3,O(n),n: size of list,n,,,???,words,1,n: 1,O(1) auxiliary? per processor?,"Assuming getting the spaghetti rods doesn't take up any auxiliary space, the only auxiliary space in this algorithm involves the table and the hands, each using O(1) space",1,0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Spaghetti_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
5,Maximum Flow,0.001,,64,,,1,1,O(VELog(V(LogU)^0.5 / E)),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.5093&rep=rep1&type=pdf Ahuja et al. (1987)],Ahuja et al.,1987,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.5093&rep=rep1&type=pdf,,,,1,0,6,"V: 6,
E: 3",O(VELog(V(LogU)^0.5 / E)),,V,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,0.07226045025,#VALUE!,,0.1215822702,0,,0.1491085327,0,,2,,,Combinatorics
12,Convex Hull,0.001,,133,,,1,1,O(n log n),,,[https://www.sciencedirect.com/science/article/pii/002001908490084X Incremental convex hull algorithm; Michael Kallay (1984)],Incremental convex hull algorithm; Michael Kallay,1984,https://www.sciencedirect.com/science/article/pii/002001908490084X,,,,0,0,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing
14,Minimum Spanning Tree (MST),2,"Undirected, General MST",163,Parallel algorithm,,1,1,O(E log(V)/p),,,[https://www.sciencedirect.com/science/article/pii/S0743731506001262 Bader & Cong Parallel Implementation  (2006)],Bader & Cong Parallel Implementation,2006,https://www.sciencedirect.com/science/article/pii/S0743731506001262,,,,0,0,5.01,"E: 3,
V: 5.01",O(E \log(V)/p),"V: number of vertices
E: number of edges
U: maximum edge weight
p: number of processors",V,https://www.sciencedirect.com/science/article/pii/S0743731506001262,0,PRAM/SMPs?,words,3,"V: 3,
E: 1",O(V) total,Initializes and uses a constant number of arrays of size O(V) (and does work similar to work done in Boruvka/Prim algorithm),1,0,,0,,0,,0,1,p,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,8.7,583.3333333,,,,,,,,5,,,Combinatorics
18,Integer Factoring,2,First Category Integer Factoring,200,"For integers of the form $r^e \pm s$, for r and s relatively small",,1,1,$O(exp((1+o(1))(32n/9)^{(1/3)}(log n)^{(2/3)})$ heuristically?,,http://www.ams.org/notices/199612/pomerance.pdf,[ Special number field sieve (1940)],Special number field sieve,1940,,,,,0,0,8,n: 8,O(exp((1+o(1))(32n/9)^{(1/3)}(log n)^{(2/3)}) heuristically?,n: number of bits in number to factor,n,,,,bits,2.66,n: 2.66,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0,0,,0,,0,,1,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,100,,10000,,1000000,,Inf,1,,,,,,,,1,,,Numerical Analysis
19,Integer Factoring,2,Second Category Integer Factoring,205,,,1,1,$O(exp((1+o(1))(64n/9)^{(1/3)}(log n)^{(2/3)})$ heuristically?,,,[http://www.ams.org/notices/199612/pomerance.pdf General number field sieve (1996)],General number field sieve,1996,http://www.ams.org/notices/199612/pomerance.pdf,,,,0,0,8,n: 8,O(exp((1+o(1))(64n/9)^{(1/3)}(log n)^{(2/3)}) heuristically?,n: number of bits in number to factor,n,,,,bits,2.66,n: 2.66,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0,1,,0,,0,,1,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
19,Integer Factoring,2,Second Category Integer Factoring,207,Quantum algorithm,,1,1,O(n),,,[https://ieeexplore.ieee.org/document/365700/ Shor's algorithm Quantum Implementation (1994)],Shor's algorithm Quantum Implementation,1994,https://ieeexplore.ieee.org/document/365700/,,,,0,0,3,n: 3,O(n),n: number of bits in number to factor,n,,,Quantum Computer,qubits,3,n: 3,O(n),https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm,0,0,,0,,0,,0,0,,1,0,https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,O(n^2) gates,,Numerical Analysis
22,String Search,2,Single String Search,238,,,1,1,O(n + m),,,[http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf Two-way String-Matching Algorithm (1991)],Two-way String-Matching Algorithm,1991,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,,,,0,0,3,"n: 3,
m: 3,
m+n: 3",O(n + m),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",$O(1)$,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,0,1,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
22,String Search,2,Single String Search,239,,,1,1,O(mn),,,[- String-Matching with Finite Automata (1940)],String-Matching with Finite Automata,1940,-,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,Derived: $O(m)$ states in the DFA,1,0,,0,,0,,0,0,,0,0,https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics
22,String Search,2,Single String Search,240,,,1,1,O(mn),,,[http://www.ijcte.org/papers/462-G1278.pdf Quick-Skip Searching (2012)],Quick-Skip Searching,2012,http://www.ijcte.org/papers/462-G1278.pdf,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses two tables, both of size $O(m)$",1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Single String Search,241,,,1,1,O(n+m)+ O(m+s),,,[https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf Fast Hybrid Algorithm (2017)],Fast Hybrid Algorithm,2017,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,4,1,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,1,4->6,3,"n: 3,
m: 3,
m+n: 3,
s: 3",O(n+m)+ O(m+s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses three tables, each of size $O(m)$",1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,1150,69.65217391,0.05665744313,1100050,72724.058,0.156481465,1100000050,72727269.51,0.2650274945,4,,,Combinatorics
22,String Search,2,Single String Search,243,,,1,1,O(n (\log_s m)/m),,,[https://link.springer.com/chapter/10.1007/BFb0030778 Backward Non-Deterministic DAWG Matching (BNDM) (1998)],Backward Non-Deterministic DAWG Matching (BNDM),1998,https://link.springer.com/chapter/10.1007/BFb0030778,,,,0,0,3,"n: 3,
m: 3,
m+n: 3",O(n+m),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",$O(sm)$,https://link.springer.com/chapter/10.1007/BFb0030778,0,1,,0,,0,,0,1,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Multiple String Search,244,"Automaton-based, constructs a converse state machine from the given patterns",,1,1,O(mn),,,[https://link.springer.com/chapter/10.1007/3-540-09510-1_10 Commentz-Walter Algorithm (1979)],Commentz-Walter Algorithm,1979,https://link.springer.com/chapter/10.1007/3-540-09510-1_10,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Multiple String Search,245,"Automaton-based, finite automaton that tracks the partial prefix match",,1,1,O(n + m + z),,,[https://cr.yp.to/bib/1975/aho.pdf Aho–Corasick (AC) Algorithm (1975)],Aho–Corasick (AC) Algorithm,1975,https://cr.yp.to/bib/1975/aho.pdf,,,,0,0,3,"n: 3,
m: 3,
m+n: 3,
z: 3",O(n + m + z),"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords
$z$: number of matches",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Single String Search,246,Bad-character heuristic,,1,1,O(n),Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608 Boyer-Moore-Horspool (BMH) (1980)],Boyer-Moore-Horspool (BMH),1980,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn + s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Single String Search,247,Slight variation of BMH,,1,1,O(n),Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf Raita Algorithm (1991)],Raita Algorithm,1991,https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf,,,,0,0,5,"n: 3,
m: 3,
m+n: 5,
s: 3",O(mn + s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Single String Search,248,Automaton-based oracle,,1,1,O(m) + O(mn),,,[https://link.springer.com/chapter/10.1007/3-540-47849-3_18 BOM (Backward Oracle Matching) (1999)],BOM (Backward Oracle Matching),1999,https://link.springer.com/chapter/10.1007/3-540-47849-3_18,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(m) + O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://link.springer.com/content/pdf/10.1007/3-540-47849-3_18.pdf,0,1,,0,,0,,0,0,,0,0,https://www-igm.univ-mlv.fr/~lecroq/string/bom.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
22,String Search,2,Single String Search,249,Variant of BM,,1,1,O(m + s) + O(n),,,[https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1 Apostolico–Giancarlo Algorithm (1986)],Apostolico–Giancarlo Algorithm,1986,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,,,,0,0,3,"n: 3,
m: 3,
m+n: 3,
s: 3",O(m + s) + O(n),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,0,1,,0,,0,,0,0,,0,0,http://www.darkridge.com/~jpr5/mirror/string/node16.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics
23,Sequence Alignment,1,"Edit Sequence, constant-size alphabet",258,,,1,1,O(mn),,,[https://www.ncbi.nlm.nih.gov/pubmed/9254694 Gapped BLAST (1997)],Gapped BLAST,1997,https://www.ncbi.nlm.nih.gov/pubmed/9254694,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",O(mn)?,"Uses at most a constant number of O(m)*O(n) arrays, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
23,Sequence Alignment,1,"Edit Sequence, constant-size alphabet",259,,,1,1,O(mn),,,[https://www.ncbi.nlm.nih.gov/pubmed/2231712 Basic Local Alignment Search Tool (BLAST) (1990)],Basic Local Alignment Search Tool (BLAST),1990,https://www.ncbi.nlm.nih.gov/pubmed/2231712,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",O(mn)?,"Uses at most a constant number of O(m)*O(n) arrays, whose contents are of size O(1)",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics
29,Key Exchange,1,Key Exchange,294,,,1,1,O(mult(n)*n) where mult(n) is running time on n-bit multiplication,"Not sure if ""average case"" distribution makes sense here",(none),[https://ieeexplore.ieee.org/document/1055638 Diffie–Hellman key exchange (1978)],Diffie–Hellman key exchange,1978,https://ieeexplore.ieee.org/document/1055638,2,1,https://dl.acm.org/doi/10.1145/359460.359473,1,0,7,n: 7,O(mult(n)*n) where mult(n) is running time on n-bit multiplication,"n: maximum size of numbers (prime, base, keys), in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Each party only keeps track of a constant number of n-bit integers,1,0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,62500000000,1,,6.25E+22,1,,6.25E+34,1,,2,,,Cryptography
29,Key Exchange,1,Key Exchange,295,,,1,1,O(mult(n)*n^2)? where mult(n) is running time on n-bit multiplication,^see above,(none),[https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14 Elliptic-curve Diffie-Hellman (ECDH) (2006)],Elliptic-curve Diffie-Hellman (ECDH),2006,https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14,2,1,,0,0,7,n: 7,O(mult(n)*n^2)? where mult(n) is running time on n-bit multiplication,"n: maximum size of numbers (prime, parameters, keys), in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Each party only keeps track of a constant number of n-bit integers,1,0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,125000000,500,,1.25E+17,500000,,1.25E+26,500000000,,2,,,Cryptography
30,Mutual Exclusion,0.001,2-thread Mutual Exclusion,296,,,1,1,O(n),"Not sure if ""average case"" distribution makes sense here",(none),[- Dekker's algorithm (1963)],Dekker's algorithm,1963,-,1,1,,1,0,3,n: 3,O(n),n: number of processes,n,,,,communication variables?,#VALUE!,,,,,,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dekker%27s_algorithm
","mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Operating Systems
30,Mutual Exclusion,1,,297,,,1,1,O(n),^see above,(none),[https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf Peterson's algorithm (1981)],Peterson's algorithm,1981,https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf,,,,0,0,3,n: 3,O(n),n: number of processes,n,,,,communication variables?,3,n: 3,$O(n)$ total,"see original paper (""requires $2n-1$ shared variables of size $n$"")",0,1,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems
30,Mutual Exclusion,1,,303,,,1,1,O(logn),^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416 Naimi-Trehel's algorithm (1996)],Naimi-Trehel's algorithm,1996,https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416,,,,0,0,2,n: 2,O(\log n),n: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process keeps track of a constant number of variables (see algorithm description),1,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,,,,,,,6,,,Operating Systems
30,Mutual Exclusion,1,,305,,,1,1,O(logn),^see above,(none),[https://ieeexplore.ieee.org/document/113817 Chan-Singhal-Liu (1990)],Chan-Singhal-Liu,1990,https://ieeexplore.ieee.org/document/113817,,,,0,0,2,n: 2,O(\log n),n: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process seems to keep track of a constant number of variables (see algorithm description),1,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,0.3338136837,19.93156857,50171.66594,0.966883593,29.89735285,33447777.3,1.953064644,6,,,Operating Systems
32,Cycle Detection,1,,321,,,1,1,O((\lambda + \mu) t_f),"S = {0, ..., N-1}
F = {f | f: S -> S}
f chosen randomly from the N^N functions in F
",,[http://pds7.egloos.com/pds/200801/07/29/p636-floyd.pdf Floyd's tortoise and hare algorithm (1967)],Floyd's tortoise and hare algorithm,1967,http://pds7.egloos.com/pds/200801/07/29/p636-floyd.pdf,3,0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,1,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",O((\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,O(1),Algorithmic Cryptanalysis,0,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Cycle_detection,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Combinatorics
32,Cycle Detection,1,,322,,,1,1,O((\lambda + \mu) t_f),,,[https://maths-people.anu.edu.au/~brent/pd/rpb005.pdf Brent's algorithm (1973)],Brent's algorithm,1973,https://maths-people.anu.edu.au/~brent/pd/rpb005.pdf,,,,0,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",O((\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,O(1),Algorithmic Cryptanalysis,0,0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics
32,Cycle Detection,1,,323,,,1,1,O((\lambda + \mu) log(\lambda + \mu) t_f),,,[https://www.inwap.com/pdp10/hbaker/hakmem/flows.html#item132 Gosper's algorithm (1978)],Gosper's algorithm,1978,https://www.inwap.com/pdp10/hbaker/hakmem/flows.html#item132,,,,0,0,4,"\lambda: 4,
\mu: 4,
t_f: 3",O((\lambda + \mu) log(\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,,2,"\mu: 2,
\lambda: 2",\Theta(log(\mu + \lambda)),https://en.wikipedia.org/wiki/Cycle_detection#Gosper's_algorithm,0,0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics
33,Generating Random Permutations,2,General Permutations,326,,,1,1,O(n^2),From randomness in the algorithm itself,(none),[https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135 Fisher–Yates/Knuth shuffle (1938)],Fisher–Yates/Knuth shuffle,1938,https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135,,,,0,0,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of which elements have been struck out already,1,0,,1,??,0,,0,0,,0,0,https://digital.library.adelaide.edu.au/dspace/handle/2440/10701,Generating random permutation of an input string.,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis
33,Generating Random Permutations,2,General Permutations,327,,,1,1,O(n),^see above,(none),[https://dl.acm.org/doi/10.1145/364520.364540 Durstenfeld's Algorithm 235 (1964)],Durstenfeld's Algorithm 235,1964,https://dl.acm.org/doi/10.1145/364520.364540,,,,0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,1,n: 1,O(1),Essentially in-situ,1,0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,1,0.3335214322,1,0.77827941,1,1.371373706,1000,,,,,,,,,6,,,Numerical Analysis
33,Generating Random Permutations,2,General Permutations,328,,,1,1,O(n),^see above,(none),[- Radix sorting method (1887)],Radix sorting method,1887,-,4,1,https://www.geeksforgeeks.org/radix-sort/,1,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,3,n: 3,O(n),"Need to keep track of randomly generated numbers, but otherwise see radix sort",1,0,,1,??,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Radix_sort,Generating random permutation of an input string.,,,,1000,,1000000,,1000000000,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
33,Generating Random Permutations,2,Cyclic Permutations,329,,,1,1,O(n),^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/0020019086900736 Sattolo's algorithm (1986)],Sattolo's algorithm,1986,https://www.sciencedirect.com/science/article/abs/pii/0020019086900736,,,,0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,1,n: 1,O(1),Essentially in-situ,1,0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,,,,,,,1000000,,,,,,,,,6,,,Numerical Analysis
35,Gröbner Bases,1,Gröbner Bases,335,,,1,1,d^{(2^{(n+o(1)))}},,,[https://dl.acm.org/doi/10.1145/1088216.1088219 Buchberger's algorithm (1976)],Buchberger's algorithm,1976,https://dl.acm.org/doi/10.1145/1088216.1088219,2,0,https://dl.acm.org/doi/pdf/10.1145/1088216.1088219,1,0,8,n: 8,d^{(2^{(n+o(1)})}),"n: number of variables in each polynomial
d: maximal total degree of the polynomials",n,,,Word RAM,words,8,"n: 8,
d: 7",d^{(2^{(n+o(1))})}??,"Output may contain that many elements. However, this bound seems very crude/loose",1,0,,0,,0,,0,0,,0,0,"EXPSPACE-hard reference: ""Complexity of Gröbner basis detection and border basis detection""","In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,turns out this is EXPSPACE hard: https://www.sciencedirect.com/science/article/pii/S0304397512007505,,Numerical Analysis
35,Gröbner Bases,1,Gröbner Bases,336,,,1,1,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication",,,[https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055 Faugère F4 algorithm (1999)],Faugère F4 algorithm,1999,https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055,1,1,https://reader.elsevier.com/reader/sd/pii/S0022404999000055?token=DC73BE34D9F12491D472CE3BBE70B5745448C6F5A27E99595808DA4B6E66531C37C9B7D23A7AFD7419D27DC7F06396F7,1,0,8,n: 8,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication","n: number of variables in each polynomial
D_reg: smallest degree for which a nontrivial relation occurs",n,,,Word RAM,words,8,n: 8,"O(C(n+D_{reg}, D_{reg})^2)?","Seems to keep track of a square matrix (for monomials) of size $O(C(n+D_{reg}, D_{reg})^2$)",1,0,,0,,0,,0,0,,0,0,https://eprint.iacr.org/2021/051.pdf,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K.",,,"d:n
1:400",,,,,,,1000000000,Inf,,1.00E+18,Inf,,1.00E+27,Inf,,1,,,Numerical Analysis
35,Gröbner Bases,1,Gröbner Bases,337,,,1,1,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication",,,[https://dl.acm.org/doi/10.1145/780506.780516 Faugère F5 algorithm (2002)],Faugère F5 algorithm,2002,https://dl.acm.org/doi/10.1145/780506.780516,,,,0,0,8,n: 8,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication","n: number of variables in each polynomial
D_reg: smallest degree for which a nontrivial relation occurs",n,,,Word RAM,words,8,n: 8,"O(C(n+D_{reg}, D_{reg})^2)?","Seems to keep track of a square matrix (for monomials) of size $O(C(n+D_{reg}, D_{reg})^2$)",1,0,,0,,0,,0,0,,0,0,https://hal.inria.fr/hal-01064519/document,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis
37,All Permutations,2,All Permutations,340,,,1,1,amortized O(1) per permutation,averaged over all permutations,https://dl.acm.org/doi/10.1145/356689.356692,[https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html Steinhaus–Johnson–Trotter algorithm (1963)],Steinhaus–Johnson–Trotter algorithm,1963,https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html,2,1,https://en.wikipedia.org/wiki/Steinhaus–Johnson–Trotter_algorithm,1,4->6,3,n: 3,O(n) on specific permutations,n: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Determining $x_i$ and $y_i$ each iteration can be done in constant space,1,0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1,1.682695795,1,6.19685673,1,18.30697729,1000,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Numerical Analysis
37,All Permutations,2,All Permutations,341,,,1,1,amortized O(1) per permutation,averaged over all permutations,(napkin math - number of iterations is approximately e*n!),[https://mathscinet.ams.org/mathscinet-getitem?mr=0080380 Tompkins–Paige algorithm (1956)],Tompkins–Paige algorithm,1956,https://mathscinet.ams.org/mathscinet-getitem?mr=0080380,1,1,https://en.wikipedia.org/wiki/Tompkins–Paige_algorithm,1,0,3,n: 3,O(n) on specific permutations,n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of auxiliary counting array,1,0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1000,,1000000,,1000000000,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Numerical Analysis
37,All Permutations,2,All Permutations,342,,,1,1,O(1) per permutation,averaged over all permutations,Easily derived (each permutation takes O(1) time),[https://academic.oup.com/comjnl/article/6/3/293/360213 Heap's algorithm (1963)],Heap's algorithm,1963,https://academic.oup.com/comjnl/article/6/3/293/360213,,,,0,0,3,n: 3,O(n) per permutation,n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,$O(n)$-sized stack or array necessary,1,0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,,,,,,,1000,,,,,,,,,4,,,Numerical Analysis
40,Maximum-Weight Matching,1,Bipartite Maximum-Weight Matching,357,,,1,1,O(n^4),,,[https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf Hungarian algorithm (1955)],Hungarian algorithm,1955,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,2,1,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,1,0,7,n: 7,O(n^4),n: number of vertices,n,,,Word RAM,words,5,n: 5,O(n^2),Either graph interpretation maintains O(n^2) orientations and O(n) potential or matrix interpretation manipulates an O(n)*O(n) auxiliary matrix,1,0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000000,1,,1.00E+24,1,,1.00E+36,1,,2,,,Combinatorics
40,Maximum-Weight Matching,1,Maximum-Weight Matching,358,,,1,1,O(mn^2),,,[https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf Edmonds (1965)],Edmonds,1965,https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf,1,1,,0,0,7,"n: 7,
m: 3",O(mn^2),"n: number of vertices
m: number of edges",n,,,Word RAM,words,7,"n: 7,
m: 3",O(mn^2)??,"At worst, keeps track of the entire sequence of graphs created; it's possible this can be improved?",1,0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000,1000,,1.00E+18,1000000,,1.00E+27,1000000000,,2,,,Combinatorics
40,Maximum-Weight Matching,0.001,,359,,,1,1,O(n^3 logn),,,[https://ieeexplore.ieee.org/document/4567800 Micali; Vazirani (1980)],Micali; Vazirani,1980,https://ieeexplore.ieee.org/document/4567800,,,,0,0,6.01,n: 6.01,O(n^3 \log n),,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,,,,,,,,,,2,,,Combinatorics
40,Maximum-Weight Matching,0.001,,360,,,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1109/FOCS.2004.40 Mucha and Sankowski (2004)],Mucha and Sankowski,2004,https://dl.acm.org/doi/10.1109/FOCS.2004.40,,,,0,0,6,n: 6,O(n^3),,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000,,,,,,,,,2,,,Combinatorics
41,Constructing Eulerian Trails in a Graph,1,Constructing Eulerian Trails in a Graph,362,,,1,1,O(E^2),,,[https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph Fleury's algorithm + Tarjan (1974)],Fleury's algorithm + Tarjan,1974,https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph,,,,0,0,7,"V: 7,
E: 5",O(E^2),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1,0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics
41,Constructing Eulerian Trails in a Graph,2,Constructing Eulerian Trails in a Graph,363,,,1,1,O(E),Any distribution of values,(need to read entire input),[- Hierholzer's algorithm (1873)],Hierholzer's algorithm,1873,-,3,1,https://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/,1,0,5,"V: 5,
E: 3",O(E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Eulerian_path#Fleury's_algorithm,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Combinatorics
41,Constructing Eulerian Trails in a Graph,1,Constructing Eulerian Trails in a Graph,364,,,1,1,O(E log^3(E) loglogE),,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Fleury's algorithm + Thorup (2000)],Fleury's algorithm + Thorup,2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,,,0,0,5.03,"V: 5.03,
E: 4.01",O(E \log^3(E) \log\log E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1,0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics
42,Discrete Fourier Transform,2,Discrete Fourier Transform,365,,,1,1,O(n^2),Any distribution of values,(same general behavior for all inputs),[- Naive algorithm (1965)],Naive algorithm,1965,-,1,1,https://ccrma.stanford.edu/~jos/mdft/,1,0,5,n: 5,O(n^2),$n$: length of the input data set,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,Derived: You only need a constant number of variables that are of $O(1)$ size at any given time,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,366,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf Cooley–Tukey algorithm (1965)],Cooley–Tukey algorithm,1965,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,3,0,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,1,4->5,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1055938,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,100.3512293,0.2024330587,19931568.57,50171.66594,0.5417655625,29897352854,33447777.3,0.9997453266,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,367,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162805 Rader–Brenner algorithm (1976)],Rader–Brenner algorithm,1976,https://ieeexplore.ieee.org/document/1162805,,,,0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,368,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1163036/ Bruun's FFT algorithm (1978)],Bruun's FFT algorithm,1978,https://ieeexplore.ieee.org/document/1163036/,,,,0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes O(n) remainders per stage; storage space can be reused across stages,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,369,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/citation.cfm?id=1476610 Yavne Split Radix FFT algorithm (1968)],Yavne Split Radix FFT algorithm,1968,https://dl.acm.org/citation.cfm?id=1476610,,,,0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,370,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf Gentleman; Morven and Gordon Sande radix-4 algorithm (1966)],Gentleman; Morven and Gordon Sande radix-4 algorithm,1966,http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf,,,,0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,371,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162043 Bergland; Glenn radix-8 algorithm (1969)],Bergland; Glenn radix-8 algorithm,1969,https://ieeexplore.ieee.org/document/1162043,,,,0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://ieeexplore.ieee.org/document/1162043,0,1,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,372,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/917698 Extended Split Radix FFT algorithm (2001)],Extended Split Radix FFT algorithm,2001,https://ieeexplore.ieee.org/document/917698,,,,0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,373,,,1,1,O(n (logn)^2),Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/doi/10.1145/236869.236882  Von zur Gathen-Gerhard additive FFT (1996)],Von zur Gathen-Gerhard additive FFT,1996,https://dl.acm.org/doi/10.1145/236869.236882,,,,0,0,4.01,n: 4.01,O(n (\log n)^2),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://dl.acm.org/doi/10.1145/236869.236882,0,1,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,374,,,1,1,O(n(logn)^{1.585}),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1926/ Wang-Zhu-Cantor additive FFT (1988)],Wang-Zhu-Cantor additive FFT,1988,https://ieeexplore.ieee.org/document/1926/,,,,0,0,4.00585,n: 4.00585,O(n(\log n)^{1.585}),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes O(n) remainders per stage; storage space can be reused across stages,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing
42,Discrete Fourier Transform,2,Discrete Fourier Transform,375,,,1,1,O(n logn loglogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613 Gao’s additive FFT (2010)],Gao’s additive FFT,2010,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,,,,0,0,4.001,n: 4.001,O(n logn loglogn),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,0,1,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing
43,Line Drawing,2,Line Drawing,376,,,1,1,O(n),not well-defined,(none),[- Naive algorithm (1940)],Naive algorithm,1940,-,1,1,,1,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Line_drawing_algorithm,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Image Processing
43,Line Drawing,2,Line Drawing,377,,,1,1,O(n),not well-defined,(none),[- Digital Differential Analyzer (1940)],Digital Differential Analyzer,1940,-,,,,0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Digital_differential_analyzer_(graphics_algorithm),,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
43,Line Drawing,2,Line Drawing,378,,,1,1,O(n),not well-defined,(none),[https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf Bresenham's line algorithm (1965)],Bresenham's line algorithm,1965,https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf,,,,0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
43,Line Drawing,2,Line Drawing,379,,,1,1,O(n),not well-defined,(none),[http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf Xiaolin Wu's line algorithm (1991)],Xiaolin Wu's line algorithm,1991,http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf,,,,0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
43,Line Drawing,2,Line Drawing,380,,,1,1,O(n),not well-defined,(none),[http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf Gupta-Sproull algorithm (1981)],Gupta-Sproull algorithm,1981,http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf,,,,0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
47,Eigenvalues (Iterative Methods),2,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,398,,0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104 Inverse iteration (1921)],Inverse iteration,1921,https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu*I)^{(-1)}$,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),2,Any eigenpair; Any eigenvalue,399,,0,1,1,O(n^2),,,[- Rayleigh quotient iteration (1940)],Rayleigh quotient iteration,1940,-,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu_i*I)^{(-1)}$,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Rayleigh_quotient_iteration#Algorithm,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),1,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,400,,0,1,1,O(n^2),,,[- LOBPCG algorithm (1948)],LOBPCG algorithm,1948,-,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of $O(n)$-sized vectors per iteration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/LOBPCG,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),1,Any eigenvalue,401,,0,1,1,O(n^2),,,[- Bisection method (1985)],Bisection method,1985,-,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computing characteristic polynomial takes $O(n^2)$ space (via e.g. Faddeev–LeVerrier algorithm); rest of algo can be done in $O(n)$ space (related to root computation),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),1,Any eigenvalue,402,,0,1,1,O(n^2),,,[- Laguerre iteration (1940)],Laguerre iteration,1940,-,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,^ see above,1,0,,0,,0,,0,0,,0,0,https://archive.org/details/numericalmethods00form,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),2,All eigenvalues; Any eigenvalue,403,,0,1,1,O(n^2),,,[https://academic.oup.com/comjnl/article/4/4/332/432033 QR algorithm (1962)],QR algorithm,1962,https://academic.oup.com/comjnl/article/4/4/332/432033,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores QR factorization at each iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),1,All eigenvalues; Any eigenvalue,404,,0,1,1,O(n^2),,,[https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030 Jacobi eigenvalue algorithm (1846)],Jacobi eigenvalue algorithm,1846,https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computes and stores results of GSG^T iterations,1,0,,0,,0,,0,0,,0,0,,,,,,1000000,,1000000000000,,1.00E+18,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),2,All eigenvalues; Any eigenvalue,405,,0,1,1,O(nlogn),,,[https://link.springer.com/content/pdf/10.1007/BF01389480.pdf Divide-and-conquer (1986)],Divide-and-conquer,1986,https://link.springer.com/content/pdf/10.1007/BF01389480.pdf,,,,1,4->5,2.51,"n: 4,
n^2: 2.51",O(n \log n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Stores reduction to tridiagonal form; recursion (S(n)=2S(n/2)+O(n^2)) should work out to O(n^2),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm,,,,,,,,,,,9965,100.3512293,0.1053793904,19931568.57,50171.66594,0.2652719521,29897352854,33447777.3,0.4573813291,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),1,All eigenpairs; Eigenpair closest to mu; Any eigenpair; Any eigenvalue; All eigenvalues,406,,0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),1,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,407,,0,1,1,O(n^2),,,[https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828 Folded spectrum method (1934)],Folded spectrum method,1934,https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828,,,,0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of O(n)-sized vectors per iteration; matrix-to-vector multiplication only requires O(n) aux space,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis
47,Eigenvalues (Iterative Methods),2,Any eigenpair; Any eigenvalue,408,,0,1,1,O(n),,,[https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf MRRR algorithm (1999)],MRRR algorithm,1999,https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf,2,1,http://www.cs.utexas.edu/~inderjit/public_papers/DesignMRRR_toms06.pdf,1,5->6,2.5,"n: 3,
n^2: 2.5",O(n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store some matrix of the form $(A-mu*I)^{(-1)}$ (for inverse iteration-like uses),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000,0.1242100351,1000000,1000000,0.2638482029,1000000000,1000000000,0.4208308325,4,,,Numerical Analysis
48,Root Computation,1,General Root Computation,409,,0,1,1,O(log((b-a)/epsilon),,,[- Bisection method (1820)],Bisection method,1820,-,,,,0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,https://en.wikipedia.org/wiki/Bisection_method,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis
48,Root Computation,1,General Root Computation,410,,0,1,1,O(n),,,[- False position method (1690)],False position method,1690,-,1,1,https://www.geeksforgeeks.org/program-for-method-of-false-position/,1,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,https://archive.org/details/historyofmathema031897mbp,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
48,Root Computation,1,Root Computation with continuous first derivative,411,,0,1,1,(order of convergence = 2),,,[ Newton's method (1940)],Newton's method,1940,,,,,0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current estimate $x_i$ and the derivative $f'$ (assuming this takes $O(1)$ space); iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis
48,Root Computation,1,Root Computation with continuous second derivative,412,,0,1,1,(order of convergence = 3),,,[- Halley's method (1940)],Halley's method,1940,-,,,,0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current estimate x_i and the derivatives f' and f'' (assuming this takes O(1) space); iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,https://en.wikipedia.org/wiki/Halley%27s_method,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis
48,Root Computation,1,General Root Computation,413,,0,1,1,(order of convergence = phi~1.618),,,[- Secant method (1940)],Secant method,1940,-,,,,0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store previous 2 estimates x_i and x_{i-1}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,https://en.wikipedia.org/wiki/Secant_method,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis
48,Root Computation,1,General Root Computation,414,,0,1,1,(order of convergence = sqrt(2)),,,[https://ieeexplore.ieee.org/document/1084580/ Ridder's method (1979)],Ridder's method,1979,https://ieeexplore.ieee.org/document/1084580/,,,,0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store previous 2 estimates x_i and x_{i-1}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis
48,Root Computation,1,General Root Computation,415,,0,1,1,(order of convergence ~ 1.84),,,[https://www.jstor.org/stable/2001916 Muller's method (1956)],Muller's method,1956,https://www.jstor.org/stable/2001916,,,,0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store previous 3 estimates x_i, x_{i-1}, and x_{i-2}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1,0,,0,,1,"epsilon, additive",0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,6,,,Numerical Analysis
51,Maximum Likelihood Parameters,1,,426,,0,1,1,O(n^3),,,[https://www.jstor.org/stable/2984875 Expectation–maximization (EM) algorithm (1977)],Expectation–maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,,,0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
51,Maximum Likelihood Parameters,1,,427,,0,1,1,O(n^3),,,[- Newton–Raphson algorithm (1685)],Newton–Raphson algorithm,1685,-,,,,1,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",O(n+r^2)?,"Stores current theta guess, which is updated each iteration, and requires computation of the (inverse of the) Hessian matrix. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Newton%27s_method

https://web.mit.edu/10.001/Web/Course_Notes/NLAE/node6.html",,,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis
51,Maximum Likelihood Parameters,1,,428,,0,1,1,O(n^3),,,[https://www.jstor.org/stable/2337481 Parameter-expanded expectation maximization (PX-EM) algorithm (1998)],Parameter-expanded expectation maximization (PX-EM) algorithm,1998,https://www.jstor.org/stable/2337481,,,,0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta (+ alpha) and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
51,Maximum Likelihood Parameters,1,,429,,0,1,1,O(n^2 logn),,,[https://arxiv.org/abs/1709.06970 Expectation conditional maximization (ECM) (2017)],Expectation conditional maximization (ECM),2017,https://arxiv.org/abs/1709.06970,,,,1,0,5.01,n: 5.01,O(n^2 \log n),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.285,100.3433319,0.06167931846,19931568569324,50171.66594,0.1509194139,2.99E+19,33447777.3,0.2523307814,3,,,Numerical Analysis
51,Maximum Likelihood Parameters,1,,430,,0,1,1,O(n^4 log^0.1.5n),,,[https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf Generalized expectation maximization (GEM) algorithm (1994)],Generalized expectation maximization (GEM) algorithm,1994,https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf,,,,0,0,7,n: 7,O(n^4 \log^{0.1}(.5n)),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
51,Maximum Likelihood Parameters,1,,431,,0,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1109/TIT.2002.808105 α-EM algorithm (2003)],α-EM algorithm,2003,https://dl.acm.org/doi/10.1109/TIT.2002.808105,,,,0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of alpha-log-likelihood takes O(n+r) auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis
52,Cardinality Estimation,2,,432,,0,1,1,O(N),,,[- Naive solution (1940)],Naive solution,1940,-,,,,1,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,3,N: 3,O(n),"keep track of exact histogram, may require storing all values",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis
52,Cardinality Estimation,2,,433,,0,1,1,O(N),Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/src/FlMa85.pdf  Flajolet–Martin algorithm (1984)],Flajolet–Martin algorithm,1984,http://algo.inria.fr/flajolet/Publications/src/FlMa85.pdf,,,,0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,2,N: 2,O(log n),https://www.sciencedirect.com/science/article/pii/S0022000097915452,0,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis
52,Cardinality Estimation,2,,434,,0,1,1,O(N),Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf LogLog algorithm (2003)],LogLog algorithm,2003,http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf,,,,0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,1.99,N: 1.99,O(log(log(n))),http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf,0,1,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis
52,Cardinality Estimation,2,,435,,0,1,1,O(N),Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf HyperLogLog algorithm (2007)],HyperLogLog algorithm,2007,http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf,,,,0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)
eps: approximation parameter",N,,,Word RAM,words,2,N: 2,O(eps^{-2}*log(log(n)))+log(n)),https://oertl.github.io/hyperloglog-sketch-estimation-paper/paper/paper.pdf,0,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis
52,Cardinality Estimation,2,,436,,0,1,1,O(N),Any distribution of values?,(need to read entire input),[https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf HyperLogLog++ (2014)],HyperLogLog++,2014,https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf,,,,1,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)
eps: approximation parameter",N,,,Word RAM,words,2,N: 2,O(eps^{-2}*log(log(n)))+log(n)),(see hyperloglog?),0,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,5.623413252,177.827941,,31.6227766,31622.7766,,177.827941,5623413.252,,6,,,Numerical Analysis
52,Cardinality Estimation,2,streaming,437,,0,1,1,O(N),Any distribution of values?,(need to read entire input),[ Min/max sketches streaming algorithm (1980)],Min/max sketches streaming algorithm,1980,,,,,0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,1,N: 1,O(1),only keep track of minimum value. also assuming hash function requires O(1) space,1,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis
52,Cardinality Estimation,2,streaming,438,,0,1,1,O(N),Any distribution of values?,(need to read entire input),[ Bottom-m sketches streaming algorithm (1980)],Bottom-m sketches streaming algorithm,1980,,,,,0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)
m: size of sketch",N,,,Word RAM,words,3,"m: 3,
N: 3",O(m),only keep track of m minimum values. also assuming hash function requires O(1) space,1,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",475,,,1,1,O(3^{(n/3)}),,,[https://dl.acm.org/doi/10.1145/362342.362367 Bron–Kerbosch algorithm (1973)],Bron–Kerbosch algorithm,1973,https://dl.acm.org/doi/10.1145/362342.362367,,,,1,-,8,n: 8,$O(3^{(n/3)})$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,Keep track of an O(n)-sized recursive stack with O(n)-sized lists as elements?,1,0,,0,,0,,0,0,,0,0,,,,,,250000,,250000000000,,2.50E+17,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",476,,,1,1,O(3^{(n/3)}),,,[http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf Akkoyunlu; E. A.  (1973)],Akkoyunlu; E. A.,1973,http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf,,,,0,-,8,n: 8,O(3^{(n/3)}),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,See Bron-Kerbosch (seems like a similar approach?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",477,,,1,1,O(3^{(n/3)}),,,[https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf Tomita; Tanaka & Takahashi (2006)],Tomita; Tanaka & Takahashi,2006,https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf,,,,0,-,8,n: 8,O(3^{(n/3)}),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,See Bron-Kerbosch (seems like a similar approach?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",478,,,1,1,O(3^{(n/3)}) total work? (previously this cell said O(n^4)),,,[https://arxiv.org/pdf/1801.00202.pdf Segundo; Artieda;  Strash Parallel (2011)],Segundo; Artieda;  Strash Parallel,2011,https://arxiv.org/pdf/1801.00202.pdf,,,,0,-,8,n: 8,$O(3^{(n/3)})$ total work? (previously this cell said $O(n^4)$),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2) auxiliary??,Keep track of an O(n)-sized recursive stack with O(n)-sized lists as elements? (this algo builds off of Bron-Kerbosch),1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",479,,,1,1,O(dn 3^{(d/3)}),,,"[https://arxiv.org/pdf/1006.5440.pdf David Eppstein, Maarten Löffler, Darren Strash (2010)]","David Eppstein, Maarten Löffler, Darren Strash",2010,https://arxiv.org/pdf/1006.5440.pdf,,,,0,-,8,"n: 8,
d: 8",$O(dn 3^{(d/3)})$,"n: number of vertices
m: number of edges
d: degeneracy of graph (worst case, d=O(n))",n,,,Word RAM,words,5,n: 5,O(n^2)?,"See Bron-Kerbosch, but also keeps track of O(n)-sized degeneracy ordering",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",480,,,1,1,$O(a(G)*m)$ per clique,,,[https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf Chiba and Nishizeki  (1985)],Chiba and Nishizeki,1985,https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,,,,0,-,6,"n: 6,
m: 3,
a(G): 3",$O(a(G)*m)$ per clique,"n: number of vertices
m: number of edges
a(G): arboricity of graph (O(n) worst case)",n,,,Word RAM,words,5,"m: 3,
n: 5",O(m),https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,0,1,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",481,,,1,1,O(n d^2 2^d),,,[https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf M. Chrobak and D. Eppstein (1989)],M. Chrobak and D. Eppstein,1989,https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf,,,,0,-,8,n: 8,$O(n d^2 2^d)$,"n: number of vertices
m: number of edges
d: degeneracy of graph (O(n) worst case)",n,,,Word RAM,words,3,n: 3,O(n)?,Keeps track of degeneracy ordering along with vertex and subset being tested (here the subset size is bounded by O(d)=O(n)),1,0,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",482,,,1,1,$O(nm)$ per clique,,,"[https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa (1977)]","Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa",1977,https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true,,,,1,-,6,"n: 6,
m: 3",$O(nm)$ per clique,"n: number of vertices
m: number of edges
d: degeneracy of graph",n,,,Word RAM,words,5,"m: 3,
n: 5",O(m),"See original reference, but also note that we'd have to construct and store the complementary graph (as this is originally an algo for MISs)",0,1,,0,,0,,0,0,,0,0,,,,,"V:E
1:1",500,3.728708045,500000,25.59147948,500000000,148.5348781,250000,Inf,Inf,250000000000,Inf,Inf,2.50E+17,Inf,Inf,1,,,Combinatorics
60,Clique Problems,1,"Enumerating Maximal Cliques, arbitrary graph",483,,,1,1,$O(n^\omega)$ per clique where omega is the exponent on matrix multiplication,,,"[https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23 Kazuhisa Makino, Takeaki Uno; Section 5 (2004)]","Kazuhisa Makino, Takeaki Uno; Section 5",2004,https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,,,,0,-,5.3728596,n: 5.3728596,$O(n^{\omega})$ per clique where omega is the exponent on matrix multiplication,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
61,The Traveling-Salesman Problem,1,Minimum TSP,484,,,1,1,$O(V^2 2^V)$,,,[https://www.jstor.org/stable/2098806 Held–Karp algorithm (1962)],Held–Karp algorithm,1962,https://www.jstor.org/stable/2098806,,,,1,0,8,V: 8,$O(V^2 2^V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,8,V: 8,O(V*2^V),"Need to store all C(S, l) for all subsets $S \subseteq V$ and all vertices l",1,0,,0,,0,,1,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
61,The Traveling-Salesman Problem,2,Approximate TSP,485,,,1,0,$O(V^3)$,,,[https://apps.dtic.mil/dtic/tr/fulltext/u2/a025602.pdf Christofides algorithm (1976)],Christofides algorithm,1976,https://apps.dtic.mil/dtic/tr/fulltext/u2/a025602.pdf,,,,1,0,6,V: 6,$O(V^3)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,V: 5,O(V^2)???,Depends on best space complexity for O(V^3) min-weight matching (the rest of the algorithm requires O(V) auxiliary space),1,0,,0,,1,1.5,1,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
61,The Traveling-Salesman Problem,0.001,Minimum TSP,486,,,1,1,$O(1.674^V E^2)$,,,[https://onlinelibrary.wiley.com/doi/10.1002/net.3230180309 Lawler; E. L. (1985)],Lawler; E. L.,1985,https://onlinelibrary.wiley.com/doi/10.1002/net.3230180309,,,,1,0,8,V: 8,$O(1.674^V E^2)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,1,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
61,The Traveling-Salesman Problem,0.001,Minimum TSP,487,,,1,1,$O(2^V logE)$,,,[https://pubsonline.informs.org/doi/abs/10.1287/ijoc.3.4.376 TSPLIB (1991)],TSPLIB,1991,https://pubsonline.informs.org/doi/abs/10.1287/ijoc.3.4.376,,,,0,0,8,V: 8,$O(2^V \log E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,520,,,1,1,O(n^4)? (previously O(n^2)),,,[- Naive algorithm (1934)],Naive algorithm,1934,-,1,1,,1,0,7,n: 7,$O(n^4)$? (previously $O(n^2)$),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in triangulation, and current triangle being tested",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,521,,,1,1,O(n^2),,,[https://link.springer.com/article/10.1007/PL00009464 Flipping algorithm (1999)],Flipping algorithm,1999,https://link.springer.com/article/10.1007/PL00009464,,,,0,0,5,n: 5,O(n^2),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),Keep track of edges in current triangulation,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,522,,,1,1,O(nlogn),,,[https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf de Berg; Cheong (2008)],de Berg; Cheong,2008,https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf,,,,0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,523,,,1,1,O(nlogn),,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,,,,0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,524,,,1,1,O(nlogn),,,[https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf Belloch (2006)],Belloch,2006,https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf,,,,0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove (see other incremental algos)",1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,525,,,1,1,O(nlogn),,,[http://www.geom.uiuc.edu/~samuelp/del_project.html Guibas; Stofli (1985)],Guibas; Stofli,1985,http://www.geom.uiuc.edu/~samuelp/del_project.html,,,,0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Space recursion is S(n)=max(2S(n/2), O(n)) as triangulations from recursive calls are modified in the merge step",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,2,2-Dimensional Delaunay Triangulation,526,,,1,1,O(nlogn),,,[https://dl.acm.org/doi/10.1145/142675.142695 Fortune (1992)],Fortune,1992,https://dl.acm.org/doi/10.1145/142675.142695,,,,0,0,5,n: 5,O(n^2),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),See incremental/flipping algorithm space complexities,1,0,,0,,0,O(1/n\epsilon),0,0,,0,0,,"Given a set of points on a surface, find a triangulation such that for every triangule there is a circumscribing pseudocircle that is \alpha-empty. A circumscribing  \alpha-pseudocircle are circular arcs with endpoints at the vertices of the polygon which all lie inside the circumscribing circle of the polygon and make an angle at most \alpha with the circumscribing polygon at the verticies. A pseudocircle is \alpha-empty if it is an \alpha-pseudocircle and it contains no verticies in its interior.",,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,528,,,1,1,O(nlogn),,,[http://www.s-hull.org/paper/s_hull.pdf S-hull (Sinclair) (2010)],S-hull (Sinclair),2010,http://www.s-hull.org/paper/s_hull.pdf,,,,0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,2,2-Dimensional Delaunay Triangulation,529,,,1,1,O(n log log n),uniform distribution in the unit square,https://link.springer.com/article/10.1007/BF01840356,[https://link.springer.com/article/10.1007/BF01840356 Dwyer (1987)],Dwyer,1987,https://link.springer.com/article/10.1007/BF01840356,,,,0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,"Space recursion is S(n)=max(2S(n/2), O(n)) as triangulations from recursive calls are modified in the merge step",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
64,Delaunay Triangulation,0.001,,530,Cell technique and divide-and-conquer,,1,1,O(n),,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313167,[https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313167  Katajainen and M. Koppinen (1988)],Katajainen and M. Koppinen,1988,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313167,,,,1,4->5,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,3316.983346,301.4787521,0.1262924722,4316983.346,231643.2378,0.2935019136,4901945847,204000621.6,0.4897634763,4,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,531,,,1,1,O(n),uniform distribution in the unit square,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,[https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf Drysdale; Su (1996)],Drysdale; Su,1996,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,1,1,,1,5->6,3,n: 3,O(n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,See other incremental algorithms,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000,0.1312834366,1000000,1000000,0.279802214,1000000000,1000000000,0.4478190469,4,,,Combinatorics
64,Delaunay Triangulation,1,General Delaunay Triangulation (d-dimensions),532,,,1,1,O(n),random points from a d-ball,https://link.springer.com/article/10.1007/BF02574694,[https://link.springer.com/article/10.1007/BF02574694 Dwyer (higher dimensions) (1987)],Dwyer (higher dimensions),1987,https://link.springer.com/article/10.1007/BF02574694,,,,0,0,3.99,n: 3.99,O(n \log \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,Keep track of O(1) information per triangle related to triangulation??,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,3316.983346,301.4787521,0.1291461101,4316983.346,231643.2378,0.3006040392,4901945847,204000621.6,0.5024522209,4,,,Combinatorics
73,CFG Problems,1,CFG Recognition,584,,,1,1,O(n^3 * |G|),,,[https://core.ac.uk/download/pdf/158319955.pdf Cocke–Younger–Kasami algorithm (1968)],Cocke–Younger–Kasami algorithm,1968,https://core.ac.uk/download/pdf/158319955.pdf,,,,1,0,6,"n: 6,
|G|: 3",O(n^3 * |G|),"n: input string length
|G|: size of grammar",n,,,Double-tape TM,cells,5,n: 5,O(n^2),https://core.ac.uk/download/pdf/158319955.pdf,0,1,,0,,0,,0,0,,0,0,,,,,G=100,,,,,,,100000000000,1,,1.00E+20,1,,1.00E+29,1,,3,,,Combinatorics
73,CFG Problems,1,CFG Recognition,585,,,1,1,$O(n^\omega * |G|)$ where omega is the exponent for matrix multiplication,,,[https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468 Valiant (1975)],Valiant,1975,https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468,,,,1,0,5.3728596,"n: 5.3728596,
|G|: 3",O(n^omega * |G|) where omega is the exponent for matrix multiplication,"n: input string length
|G|: size of grammar",n,,,Word RAM and multitape TM,words/cells,5,n: 5,O(n^2)?,See matrix multiplication space complexity,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1380384265,72.44359601,0.8438020169,1.91E+16,5248.074602,2.399605878,2.63E+23,380189.3963,5.268200174,3,,,Combinatorics
73,CFG Problems,2,CFG Parsing,586,,,1,1,O(n^3),,,[https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf Earley parser (1968)],Earley parser,1968,https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,,,,1,0,6,n: 6,O(n^3),n: input string length,n,,,Word RAM,words,5,n: 5,O(n^2),https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,100,,1.00E+18,100,,1.00E+27,100,,3,,,Combinatorics
73,CFG Problems,2,CFG Parsing,587,,,1,1,O(n^3),,,[https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18 GLR parser (1974)],GLR parser,1974,https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,,,,0,0,6,n: 6,O(n^3),n: input string length,n,,,Word RAM? (implemented on ALGOL),words,6,n: 6,O(n^3),https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,611,,,1,1,O(n^2),,,[http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf Gale–Shapley algorithm (1962)],Gale–Shapley algorithm,1962,http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf,1,1,https://en.wikipedia.org/wiki/Gale–Shapley_algorithm,1,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,3,n: 3,O(n),Only need to keep track of current (provisional) matchings,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Roommates Problem,612,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf Irving's Algorithm (1985)],Irving's Algorithm,1985,http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf,,,,0,0,5,n: 5,O(n^2),n: number of pairs of roommates,n,,,Word RAM,words,5,n: 5,O(n^2)?,Manipulates the $O(n)$-many $O(n)$-size preference lists,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,613,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf Manlove; Malley (2005)],Manlove; Malley,2005,http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf,,,,0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance?",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,614,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf Unsworth; C.; Prosser; P (2005)],Unsworth; C.; Prosser; P,2005,http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf,,,,0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance? (see original reference)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Arc Consistency?,615,,,1,1,O(n^3),,,[https://www.sciencedirect.com/science/article/abs/pii/000437029290020X Hentenryck et. al. (1992)],Hentenryck et. al.,1992,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,,,,0,0,6,n: 6,O(n^3),n: number of men and number of women,n,,,Word RAM,words,6,n: 6,O(n^3)?,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,616,,,1,1,O(n^2),,,[https://link.springer.com/chapter/10.1007/3-540-45578-7_16 Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M. (2001)],Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M.,2001,https://link.springer.com/chapter/10.1007/3-540-45578-7_16,,,,0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an O(n^2)-size CSP instance?",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Roommates Problem,617,,,1,1,O(n^3),,,[https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2 Patrick Posser (2014)],Patrick Posser,2014,https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,,,,0,0,6,n: 6,O(n^3),n: number of pairs of roommates,n,,,Word RAM,words,3,n: 3,O(n),https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,618,,,1,1,O(n^2),,,[https://link.springer.com/content/pdf/10.1007/BF02136029.pdf S. S. TSENG and R. C. T. LEE (1984)],S. S. TSENG and R. C. T. LEE,1984,https://link.springer.com/content/pdf/10.1007/BF02136029.pdf,,,,0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,3,n: 3,$O(n)$ per processor?,Only need to keep track of current (provisional) matchings,1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,620,,,1,1,O(n^{0.5}),,,"[http://theory.stanford.edu/~megiddo/pdf/soda94.pdf Tomas Feder, Nimrod Megiddoy, Serge A Plotki (1994)]","Tomas Feder, Nimrod Megiddoy, Serge A Plotki",1994,http://theory.stanford.edu/~megiddo/pdf/soda94.pdf,,,,0,0,2.5,n: 2.5,O(n^0.5),n: number of men and number of women,n,,,Word RAM,words,2.5,n: 2.5,$O(n^{0.5})$ auxiliary per processor?,bounded by runtime,1,0,,0,,0,,0,1,Polynomial,0,0,,,,,,,,,,,,31.62,,,,,,,,,4,,,Combinatorics
79,Longest Path Problem,1,Longest Path on Interval Graphs,621,,,1,1,O(n^4),,,[https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D. (2011)],Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D.,2011,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1,1,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1,0,7,n: 7,O(n^4),n: number of vertices,n,,,Word RAM,words,6,n: 6,O(n^3),https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000,1,,1.00E+24,1,,1.00E+36,1,,2,,,Combinatorics
84,Longest Palindromic Substring,2,Longest Palindromic Substring,653,,,1,1,O(n^3),Any distribution of values?,(behavior same across all inputs),[- Naive (1940)],Naive,1940,-,1,1,,1,0,6,n: 6,O(n^3),n: length of given string,n,,,Word RAM,words,1,n: 1,$O(1)$,https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Combinatorics
84,Longest Palindromic Substring,1,Longest Palindromic Substring,654,,,1,1,O(n^2),,,[- Dynamic Programming (1953)],Dynamic Programming,1953,-,,,,1,3->4,5,n: 5,O(n^2),n: length of given string,n,,,Word RAM,words,5,n: 5,O(n^2),https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1000,0.7012542799,1000000000000,1000000,1.894266125,1.00E+18,1000000000,3.923882632,3,,,Combinatorics
84,Longest Palindromic Substring,2,Longest Palindromic Substring,655,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://doi.org/10.1145%2F321892.321896 Manacher (1975)],Manacher,1975,https://doi.org/10.1145%2F321892.321896,2,1,https://dl.acm.org/doi/10.1145/321892.321896,1,4->6,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it stores the radii for each center, requiring O(n) space. Space usage is bounded from above by runtime, so at most O(n) space is used.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000000,0.483981789,1000,1000000000000,1.20220195,1000000000,1.00E+18,2.268027589,3,,,Combinatorics
84,Longest Palindromic Substring,1,Longest Palindromic Substring,656,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://doi.org/10.1007%2FBF01182773 Jeuring (1994)],Jeuring,1994,https://doi.org/10.1007%2FBF01182773,,,,0,0,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$?,Stores (and uses) previously computed palindrome information; unclear if O(n) is best bound possible,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics
84,Longest Palindromic Substring,2,Longest Palindromic Substring,657,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3 Gusfield  (1997)],Gusfield,1997,https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3,,,,0,0,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it pre-processes and stores the string and the reverse of the string, requiring O(n) space. Space usage is bounded from above by runtime, so at most O(n) space is used.",1,0,,0,,0,,0,0,,0,0,https://d1wqtxts1xzle7.cloudfront.net/31053376/Algorithms_on_String_Trees_and_Sequences-with-cover-page-v2.pdf?Expires=1661234618&Signature=F2kwJp-yun59cg~XkWJkmRPpTYA~w8ZV8-T7prnT1vRBskR9HP5--HSAW3yRCkMvsogo8r6dTuq94Um2iFLJueNP-wf-EwQwsnTfaNWN8~IPjQAStkg0o3~9dr~gbsRzgddypdVJFp2qnFOzCaL3RgLw1mVEt~z6l9NwCSAK~mKZn6gZm3pP2-oCtuvQeUkRQKEWMrjbmZJvnXGoTSeKl4wMvvO5VOB17WLvU2A~G3XuiV05wJJwK8cQ9wqGZdorSYXieKLElOTfoYCDEjugeJuQXa2R-VhZtk8WpBPLmIv-PKUqQpxNG2usEwy0f4rcZnpsIBfEAJV9UBv1QwxlPQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics
88,Duplicate Elimination,2,Duplicate Elimination,673,,,1,1,O(nlogn),,,[ Sorting based [Merge Sort] (1964)],Sorting based [Merge Sort],1964,,,,,1,0,4,n: 4,O(n \log n),,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: linear space for mergesort,1,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,9965,1,,19931568.57,1,,29897352854,1,,5,,,Databases
88,Duplicate Elimination,0.001,Duplicate Elimination,674,,,1,1,O(nlogn),,,[ Sorting based [Merge Sort] + real-time elimination (1964)],Sorting based [Merge Sort] + real-time elimination,1964,,,,,0,0,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,5,,,Databases
88,Duplicate Elimination,2,Duplicate Elimination,675,,,1,1,O(nlogn),,,[ BST Algorithm (1999)],BST Algorithm,1999,,,,,0,0,4,n: 4,O(n \log n),,n,,,Word RAM,words,2,n: 2,$O(\log n)$,Derived: Space required for the recursion stack space,1,0,,0,,0,,0,0,,0,0,,,,,,9.965784285,0.1407366271,19.93156857,0.3623817424,29.89735285,0.6405214824,9965,,,,,,,,,5,,,Databases
88,Duplicate Elimination,2,Duplicate Elimination,676,Selection sort using priority queue?,,1,1,O(n^2),,,[ Priority Queue Algorithm (1976)],Priority Queue Algorithm,1976,,,,,0,0,5,n: 5,O(n^2),,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary space needed for the priority queue,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,5,,,Databases
88,Duplicate Elimination,2,Duplicate Elimination,677,,,1,1,O(n^2),,,[https://link.springer.com/article/10.1023/A:1009761603038 Sorted Neighborhood Algorithm (SNA) (1998)],Sorted Neighborhood Algorithm (SNA),1998,https://link.springer.com/article/10.1023/A:1009761603038,,,,0,0,5,n: 5,O(n^2),,n,https://doi.org/10.1145/1255175.1255213,0,Word RAM,words,3,n: 3,$O(n)$,"Derived: store a key for each entry in the ""Create Key"" phase",1,0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/document/5381140,,,,,,,,,,,9965,,,,,,,,,5,,,Databases
88,Duplicate Elimination,0.001,Duplicate Elimination,678,,,1,1,O(nlogn),,,[ Duplicate Elimination Sorted Neighborhood Algorithm (DE-SNA) (2002)],Duplicate Elimination Sorted Neighborhood Algorithm (DE-SNA),2002,,,,,0,0,4,n: 4,O(n \log n),,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,5,,,Databases
88,Duplicate Elimination,2,Duplicate Elimination,679,SVM string similarity,,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1145/956750.956759 Adaptive Duplicate Detection Algorithm (ADD) (2003)],Adaptive Duplicate Detection Algorithm (ADD),2003,https://dl.acm.org/doi/10.1145/956750.956759,,,,1,0,6,n: 6,O(n^3),,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: For SVM, only need to store a constant number of support vectors",1,0,,0,,0,,0,0,,0,0,,,,,,1,0.7767563268,1,1.112931266,1,1.338342829,3316.983346,3.004235765,,4316983.346,4.617013078,,4901945847,6.099078567,,5,,,Databases
97,Optimal Policies for MDPs,2,Optimal Policies for MDPs,763,,,1,1,O(2^n),Any distribution of values,Steps are the same regardless of input,[https://www.jstor.org/stable/24900506 Bellman Value Iteration (VI) (1957)],Bellman Value Iteration (VI),1957,https://www.jstor.org/stable/24900506,,,,1,0,8,n: 8,O(2^n),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Robotics
97,Optimal Policies for MDPs,2,Optimal Policies for MDPs,764,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[http://web.mit.edu/dimitrib/www/dpchapter.pdf Howard Policy Iteration (PI) (1960)],Howard Policy Iteration (PI),1960,http://web.mit.edu/dimitrib/www/dpchapter.pdf,,,,1,1->3,6,n: 6,O(n^3),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,Inf,Inf,1.00E+18,Inf,Inf,1.00E+27,Inf,Inf,1,,,Robotics
97,Optimal Policies for MDPs,2,Optimal Policies for MDPs,765,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[ Puterman Modified Policy Iteration (MPI) (1974)],Puterman Modified Policy Iteration (MPI),1974,,,,,0,0,6,n: 6,O(n^3),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,1,,,Robotics
101,Link Analysis,1,InDegree Analysis,792,,,1,1,O(m^2 n ),,,[https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf The INDEGREE Algorithm (1997)],The INDEGREE Algorithm,1997,https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf,,,,1,0,6,"m: 3,
n: 6",O(mn),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Must maintain a list of visited nodes to eliminate duplication.,1,0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/1052934.1052942,,,,,,,,,,,125000000,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,793,,,1,1,O(m n ),,,[http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf The PAGERANK Algorithm (1998)],The PAGERANK Algorithm,1998,http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf,,,,1,3->4,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates an O(n)-sized vector designed to converge to some sort of stationary distribution,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,250000,500,499,250000000000,500000,499999,2.50E+17,500000000,499999999,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,794,,,1,1,O(n^2 k),,,[https://dl.acm.org/doi/pdf/10.1145/324133.324140 The (Hyperlink-Induced Topic Search) HITS Algorithm (1998)],The (Hyperlink-Induced Topic Search) HITS Algorithm,1998,https://dl.acm.org/doi/pdf/10.1145/324133.324140,,,,1,0,5,n: 5,O(n^2 k),"n: number of pages
m: number of hyperlinks?
k: number of iterations",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates hub and authority values per node,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/HITS_algorithm#Algorithm,,,,,,,,,,,125000000,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics
153,Link Analysis,0.001,Link Analysis,795,,,1,1,O(m^2 n ),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.585.7341&rep=rep1&type=pdf Kleinberg (1998)],Kleinberg,1998,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.585.7341&rep=rep1&type=pdf,,,,0,0,7,"m: 5,
n: 7",O(m^2 n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,796,,,1,1,O(m^2 n ),,,[https://dl.acm.org/doi/abs/10.1145/382979.383041 The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm (2000)],The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm,2000,https://dl.acm.org/doi/abs/10.1145/382979.383041,,,,0,0,7,"m: 5,
n: 7",O(m^2 n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n)?,Stores and updates two O(n)-sized vectors (corresponding to 2 random walks) designed to converge to some sort of stationary distribution,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,797,,,1,1,O(m nlogn ),,,[https://dl.acm.org/doi/pdf/10.1145/383952.384003 Randomized HITS (2001)],Randomized HITS,2001,https://dl.acm.org/doi/pdf/10.1145/383952.384003,,,,0,0,6.01,"m: 3,
n: 6.01",O(m n\log n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates hub and authority values per node,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,798,,,1,1,O(m n ),,,[http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf PHITS Coheng Chan (2000)],PHITS Coheng Chan,2000,http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf,,,,0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
z: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",O(nz)?,"Needs to store P(z), P(d|z), and P(c|z) after each EM iteration (algorithm can be smart about intermediate calculations as to not use more than O(nz) space)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,799,PageRank with categories/topics,,1,1,O(m n ),,,[http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf Haveliwala (2002)],Haveliwala,2002,http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf,,,,0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
z: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",O(nz)?,Stores and updates z O(n)-sized vectors designed to converge to some stationary distributions,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,800,Personalized PageRank with hubs,,1,1,O(m n ),,,[http://infolab.stanford.edu/~glenj/spws.pdf Jeh and Widom (2003)],Jeh and Widom,2003,http://infolab.stanford.edu/~glenj/spws.pdf,,,,0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
h: number of ""hub"" pages",n,,,Word RAM,words,3,"n: 3,
h: 3",O(nh),Stores and updates z O(n)-sized vectors designed to converge to some basis vectors,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,801,Query-dependent PageRank,,1,1,O(m n ),,,[https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf  Richardson and Domingos (2002)],Richardson and Domingos,2002,https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf,,,,0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
l: number of words in lexicon",n,,,Word RAM,words,3,"n: 3,
l: 3",O(nl),See paper (noting that sum d_q can be as high as O(nl)),0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,802,,,1,1,O(m n ),,,[https://dl.acm.org/doi/10.1145/775152.775202 Tomlin (2003)],Tomlin,2003,https://dl.acm.org/doi/10.1145/775152.775202,,,,0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of operations per page?",n,,,Word RAM,words,3,n: 3,O(n)?,Generally computes O(n) values per iteration (row + column sums and their ratios); algorithm can be smart about intermediate calculations as to not use more space asymptotically,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
153,Link Analysis,1,Link Analysis,803,,,1,1,O(mn ),,,[https://homes.cs.washington.edu/~karlin/papers/web-search.pdf Achlioptas (2001)],Achlioptas,2001,https://homes.cs.washington.edu/~karlin/papers/web-search.pdf,,,,0,0,6,"m: 3,
n: 6",O(mn ),"n: number of pages
m: number of operations per page?
l: number of words in lexicon",n,,,Word RAM,words,5,"n: 5,
l: 5",O((n+l)^2)?,Computes a constant number of SVDs of O((n+l)^2)-sized matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
107,Point-in-Polygon,2,Point-in-Polygon,830,,,1,1,O(n),,,[https://dl.acm.org/doi/pdf/10.1145/368637.368653 Ray casting algorithm Shimrat; M (1962)],Ray casting algorithm Shimrat; M,1962,https://dl.acm.org/doi/pdf/10.1145/368637.368653,7,0,,1,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of ray direction and how many polygon sides intersect with the ray,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,831,,,1,1,O(a),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Grid Method) (1967)],Nordbeck and Rystedt (Grid Method),1967,https://doi.org/10.1007/BF01934125,,,,0,0,3,n: 3,O(n),n: number of edges of polygon,n,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,Real RAM,words,3,n: 3,O(n),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,832,,,1,1,O(nlogn),,,[https://doi.org/10.1016/0098-3004(78)90085-7 Salomon (Swath Method) (1978)],Salomon (Swath Method),1978,https://doi.org/10.1016/0098-3004(78)90085-7,,,,0,0,4,n: 4,O(n\log n),n: number of edges of polygon,n,,,Real RAM,words,5,n: 5,O(n^2),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,,,,,,,,,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,833,,,1,1,O(n),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Sum of area) (1967)],Nordbeck and Rystedt (Sum of area),1967,https://doi.org/10.1007/BF01934125,,,,0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current triangle and total area sum,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,834,,,1,1,O(n),,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Wedge) (1985)],Preparata and Shamos (Wedge),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,,,0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,3,n: 3,O(n),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,835,,,1,1,O(n),,,[https://doi.org/10.1080/02693798708927823 Saalfeld (Sign of offset) (1987)],Saalfeld (Sign of offset),1987,https://doi.org/10.1080/02693798708927823,,,,0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current sides (2) being looked at,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,836,,,1,1,O(n),,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Intersection sum of angle) (1985)],Preparata and Shamos (Intersection sum of angle),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,,,0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current angle and cumulative angle sum,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
107,Point-in-Polygon,2,Point-in-Polygon,837,,,1,1,O(n),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Orientation) (1967)],Nordbeck and Rystedt (Orientation),1967,https://doi.org/10.1007/BF01934125,,,,0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current side being looked at,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing
120,Integer Relation,2,Integer Relation,921,,,1,1,O(n^3),,,[https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf Ferguson–Forcade algorithm (1979)],Ferguson–Forcade algorithm,1979,https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf,,,,1,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses auxiliary $n\times n$ matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis
120,Integer Relation,2,Integer Relation,922,Lattice-based,,1,1,O(n^4),,,[https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf LLL algorithm (1982)],LLL algorithm,1982,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,,,,0,0,7,n: 7,O(n^4),n: number of real numbers to find integer relation for,n,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,0,Word RAM,words,5,n: 5,O(n^2),"Derived: Uses n auxiliary vectors each of length n, as well as an nxn matrix",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis
120,Integer Relation,2,Integer Relation,924,Partial Sum of Squares,,1,1,O(n^3),,,[https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf PSOS algorithm (1988)],PSOS algorithm,1988,https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf,,,,0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses multiple nxn auxiliary matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis
120,Integer Relation,2,Integer Relation,925,Partial Sum of Squares using QR decomposition,,1,1,O(n^3),,,[https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf PSLQ algorithm (1992)],PSLQ algorithm,1992,https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf,,,,0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses multiple nxn auxiliary matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis
123,Logarithm Calculations,2,Discrete Logarithm Over Finite Fields,939,,,1,1,O(2^n),,,[NA Trial Multiplication (1940)],Trial Multiplication,1940,NA,,,,0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Each power $k$ that you try in the brute force search is size $O(\log n)$, which is $O(1)$ when considering $O(\log n)$ size words. Only need to keep track of one at a time.",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Discrete_logarithm#Algorithms,,,,,1,,1,,1,,Inf,,,,,,,,,1,,,Statistics
123,Logarithm Calculations,2,Discrete Logarithm Over Finite Fields,940,,,1,1,O(2^{\sqrt{n}}),,,[https://doi.org/10.1090/pspum/020 Baby-step Giant-step (1971)],Baby-step Giant-step,1971,https://doi.org/10.1090/pspum/020,,,,0,0,8,n: 8,O(2^{\sqrt{n}}),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$,Derived: Uses a hash table of this size,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Baby-step_giant-step,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,941,,,1,1,O(2^n),,,[https://www.sciencedirect.com/science/article/pii/S0890540198927614 Function Field Sieve (FFS) (1999)],Function Field Sieve (FFS),1999,https://www.sciencedirect.com/science/article/pii/S0890540198927614,,,,0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,O(n^{2/3})?,same space as Number Field Sieve?,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics
123,Logarithm Calculations,1,"Discrete Logarithm Over Finite Fields, F_q",942,,,1,1,$O(e^{(sqrt(2) sqrt(n*logn))})$,,,[NA Index calculus algorithm (1922)],Index calculus algorithm,1922,NA,,,,1,0,8,n: 8,$O(e^{(\sqrt(2) \sqrt(n*logn))})$,"n: number of digits/bits in the order of the finite group
r: size of factor base",n,,,RAM?,bits,3,"n: 3,
r: 5",O(n+r^2)?,See Dixon's algorithm for factoring integers; also works with an O(r)-by-O(r) sized matrix (to obtain discrete logs of primes in factor base),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Index_calculus_algorithm,,,,,1000,,1000000,,1000000000,,Inf,1,,Inf,1,,Inf,1,,1,,,Statistics
123,Logarithm Calculations,2,Discrete Logarithm Over Finite Fields,943,,,1,1,O(2^n),,,[http://www.ams.org/notices/199612/pomerance.pdf Number Field Sieve (NFS) (1990)],Number Field Sieve (NFS),1990,http://www.ams.org/notices/199612/pomerance.pdf,,,,0,0,8,n: 8,$O(2^n)$,n: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0,1,,0,,0,,0,0,,0,0,https://core.ac.uk/download/pdf/15590206.pdf,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,944,,,1,1,"O(2^{\sqrt{n}}), only for primes; does much better for composites",,,[https://dl.acm.org/citation.cfm?id=2269283 Pohlig-Hellman (1978)],Pohlig-Hellman,1978,https://dl.acm.org/citation.cfm?id=2269283,,,,0,0,8,n: 8,"O(2^{\sqrt{n}}), only for primes; does much better for composites",n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$ (though only for primes),A step in the algorithm involves using baby-steps giant-steps to compute discrete logs; the rest of the algorithm (including CRT and repeated powers) isn't as intensive,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,945,,,1,1,O(2^{(n/2)}),,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's rho algorithm (1978)],Pollard's rho algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,,,0,0,8,n: 8,$O(2^{(n/2)})$,n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,O(1),Stores a constant number of O(n)-bit values per iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,946,,,1,1,O(2^n),,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's kangaroo algorithm (1978)],Pollard's kangaroo algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,,,0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,O(1),"Stores a constant number of O(n)-bit values (a, b, x_i, d, x_N, y_i, d_i) per iteration; assumes that the pseudorandom map is part of the input",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Pollard%27s_kangaroo_algorithm,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics
135,Tower of Hanoi,2,Tower of Hanoi,973,,0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Iteration based (1883)],Iteration based,1883,NA,1,1,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Only need to keep track of current configuration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics
135,Tower of Hanoi,2,Tower of Hanoi,974,,0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Recursion based (1940)],Recursion based,1940,NA,,,,0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,4,n: 4,O(n \log n),"Need to keep track of an O(n)-sized recursive stack, each entry requiring O(log n) space (i.e. which tower size to manipulate)",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics
135,Tower of Hanoi,2,Tower of Hanoi,975,,0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Non-recursion based (1940)],Non-recursion based,1940,NA,,,,0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Only need to keep track of current configuration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics
135,Tower of Hanoi,2,Tower of Hanoi,976,,0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Gray-code based (1940)],Gray-code based,1940,NA,,,,0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Need to keep track of an n-bit counter for Gray codes,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics
135,Tower of Hanoi,0.001,Tower of Hanoi,977,,0,1,1,O(2^n),(no distribution to talk about here),(none),[https://books.google.com/books/about/Topics_in_Graph_Theory.html?id=pSv3XotPCQgC Hanoi graph (2008)],Hanoi graph,2008,https://books.google.com/books/about/Topics_in_Graph_Theory.html?id=pSv3XotPCQgC,,,,0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics
138,One-Way Hash Functions,1,Unkeyed Hash Functions,980,,0,0,1,O(n),any distribution?,needs to read entire string,[ MD5 (1991)],MD5,1991,,,,,1,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,"only need constant padding, 128-bit state being manipulated, and constant-sized non-linear functions (i.e. operating on O(1) bits). Also based off of Merkle-Damgard construction",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,Unkeyed Hash Functions,981,,0,0,1,O(n),any distribution?,needs to read entire string,[ SHA-1 (1993)],SHA-1,1993,,,,,0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,Unkeyed Hash Functions,982,,0,0,1,O(n),any distribution?,needs to read entire string,[ RIPEMD-160 (1996)],RIPEMD-160,1996,,,,,0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Likely based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,Unkeyed Hash Functions,983,,0,0,1,O(n),any distribution?,needs to read entire string,[ bcrypt (1999)],bcrypt,1999,,,,,0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary??,generally operates in the O(1) scheme,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,,984,,0,0,1,O(n),any distribution?,needs to read entire string,[ Whirlpool (2000)],Whirlpool,2000,,,,,0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,Unkeyed Hash Functions,985,,0,0,1,O(n),any distribution?,needs to read entire string,[ SHA-2 (2001)],SHA-2,2001,,,,,0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,Unkeyed Hash Functions,986,,0,0,1,O(n),any distribution?,needs to read entire string,[ SHA-3 (2015)],SHA-3,2015,,,,,0,0,3,n: 3,O(n),"n: length of string
b: width of bit blocks
r: rate parameter
d: output length",n,,,Word RAM,bits,1,"b: 3,
d: 3,
n: 1",O(b+d) auxiliary?,"only need constant padding, O(b)-bit ""absorb"" state being manipulated, constant-sized non-linear functions (i.e. operating on O(1) bits), and O(d)-sized ""squeezed"" state being manipulated. In practice b, d are O(1)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
138,One-Way Hash Functions,1,Optional Key?,987,,0,0,1,O(n),any distribution?,needs to read entire string,[ BLAKE2 (2012)],BLAKE2,2012,,,,,0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,"Generally processes the message in O(1)-sized chunks; parameters into the ""compress"" function are also technically O(1)-sized",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
141,Block Ciphers,1,Block Ciphers,994,,0,0,1,O(n),,,[NA Lucifer / DES (1976)],Lucifer / DES,1976,NA,,,,1,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,"Network has a constant number of rounds and operates on O(n) bits, thus structure should require O(n) bits to describe",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Data_Encryption_Standard,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
141,Block Ciphers,1,Block Ciphers,995,,0,0,1,O(n),,,[NA IDEA (1991)],IDEA,1991,NA,,,,0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,(^see above),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
141,Block Ciphers,1,Block Ciphers,996,,0,0,1,O(n),,,[https://link.springer.com/chapter/10.1007/3-540-60590-8_7 RC5 (1994)],RC5,1994,https://link.springer.com/chapter/10.1007/3-540-60590-8_7,,,,0,0,3,n: 3,O(n),"n: text length (block size)
k: key length
r: number of rounds
w: length of word",n,,,Word RAM,bits,1,"k: 3,
r: 3,
w: 3,
n: 1",O(k+rw)?,"Requires additional O(k/w)-length array of O(w)-size words (temporary working array) and O(r)-length array of O(w)-size words, as key-independent pseudorandom array.",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/RC5,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
141,Block Ciphers,1,Block Ciphers,997,,0,0,1,O(n),,,[https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf Rijndael / AES (2001)],Rijndael / AES,2001,https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf,,,,0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,"Network generally operates on the O(n) bits over O(k) rounds, each round having roughly the same structure (so structure of rounds require O(1) bits to describe)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
141,Block Ciphers,1,Block Ciphers,998,,0,0,1,O(n),,,[https://link.springer.com/chapter/10.1007/3-540-58108-1_24 Blowfish (1993)],Blowfish,1993,https://link.springer.com/chapter/10.1007/3-540-58108-1_24,,,,0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,"Network has a constant number of rounds and operates on O(n) bits, thus structure should require O(n) bits to describe",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography
143,Greatest Common Divisor,1,Greatest Common Divisor,1003,,,1,1,O(n^2),,,[ Euclid's algorithm (-300)],Euclid's algorithm,-300,,1,1,,1,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),Store only the current values being iterated on,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Statistics
143,Greatest Common Divisor,1,Greatest Common Divisor,1004,,,1,1,O(n^2),,,[ Lehmer's GCD algorithm (1940)],Lehmer's GCD algorithm,1940,,,,,0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),"Store only the current values being iterated on, and an O(1)-sized matrix with O(n)-bit numbers",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Statistics
143,Greatest Common Divisor,1,Greatest Common Divisor,1005,,,1,1,O(n^2),,,[https://arxiv.org/abs/0910.0095 Binary GCD algorithm (1967)],Binary GCD algorithm,1967,https://arxiv.org/abs/0910.0095,,,,0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),Store only the current values being iterated on,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Statistics
143,Greatest Common Divisor,1,Greatest Common Divisor,,,,1,1,O(n log^2 n log log n),,,"[https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf Sthele, Zimmermann (2006)]","Sthele, Zimmermann",2006,https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf,,,,1,0,4.011,n: 4.011,O(n \log^2 n \log \log n),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n)??,Depends on Schonhage-Strassen multiplication,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,33056.34051,30.25138248,0.05301736662,86044249.58,11621.92715,0.1523784375,146555204661,6823367.361,0.2692449252,4,,,Statistics
147,Deadlock avoidance,1,Deadlock Avoidance,1019,,,1,1,O(mn^2),,,[https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF Banker's Algorithm (1966)],Banker's Algorithm,1966,https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF,,,,1,0,5,"m: 3,
n: 5",O(mn^2),"n: number of processes
m: number of resource types",n,,,Word RAM,words,3,"n: 3,
m: 3",O(mn),"Main space-consuming arrays needed include ""Max,"" ""Allocation,"" and ""Need,"" which are all n*m arrays. Other arrays are either O(n) or O(m)-sized",1,0,,0,,0,,0,0,,0,0,https://www.cs.colorado.edu/~rhan/CSCI_3753_Spring_2005/CSCI_3753_Spring_2005/Lectures/03_01_05_deadlock.pdf,,,,,,,,,,,,1,,,1,,,1,,3,,,Operating Systems
148,Page Replacements,1,Offline,1020,,,1,1,O(n^2),,,[ The theoretically optimal page replacement algorithm (1940)],The theoretically optimal page replacement algorithm,1940,,2,1,,1,0,5,n: 5,O(n^2),"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache; linear scan for searching for page not being used for the longest only requires O(1) auxiliary space,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1.00E+18,1,,4,,,Operating Systems
148,Page Replacements,1,Online,1021,,,1,1,O(nk)?,,,[ Not recently used (1940)],Not recently used,1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1022,,,1,1,O(nk)?,,,"[ First-in, first-out (1940)]","First-in, first-out",1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1023,,,1,1,O(nk)?,,,[ Second-chance (1940)],Second-chance,1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1024,,,1,1,O(nk)?,,,[ Clock (1940)],Clock,1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only (plus iterator),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1025,,,1,1,O(nk)?,,,[ Least recently used (1940)],Least recently used,1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + info related to time last referenced for each of k pages,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1026,,,1,0,O(n),,,[ Random (1940)],Random,1940,,,,,0,0,3,n: 3,O(n),"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k)?,Need to keep track of cache?,1,0,,1,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1027,,,1,1,O(nk)?,,,[ Not frequently used (NFU) (1940)],Not frequently used (NFU),1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference counters only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1028,,,1,1,O(nk)?,,,[ Aging (1940)],Aging,1940,,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference counters only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems
148,Page Replacements,1,Online,1029,,,1,1,O(nk)?,,,[https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf Longest distance first (LDF) page replacement algorithm (2017)],Longest distance first (LDF) page replacement algorithm,2017,https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf,,,,0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + information related to position of pages,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems