,Has dedicated page?,Part of another page?,One of them,Page title,Best known upper bound,Old Family #,Family Name,Looked at?,Variation,Algo ID,Algorithm Description,Final Call,Exact Problem Statement?,Exact algorithm?,Time Complexity (Average),Average Case Distribution,Reference?,Unnamed: 17,Algorithm Name,Year,Paper/Reference Link,Constants,Derived?,Paper Reference for Constants,Time Complexity Improvement?,Transition Class,Time Complexity Class,Param: Time Class,Time Complexity (Worst Only),Parameter definitions,Preferred Parameter,Time Complexity Reference,Derived Time Complexity?,Computational Model,Unit of Space,Space Complexity Class,Param: Space Class,Space Complexity (Auxiliary),Space Complexity Reference,Derived Space Complexity?,Space Complexity in Original Paper?,Interesting Space Complexity?,Randomized?,"Type of Randomized Algorithm (e.g. Las Vegas, Monte Carlo, Atlantic City)",Approximate?,Approximation Factor (if approximate algorithm),Heuristic-based?,Parallel?,"# of
Processors",Quantum?,GPU-based?,Other References,Problem Statement,"Algorithm family
parameters",Description of Inputs,Ratios of input parameter sizes,Space n = 1000 value,Space n = 1000 rate,Space n = 10^6 value,Space n = 10^6 rate,Space n = 10^9 value,Space n = 10^9 rate,n = 1000 value,n = 1000 scale,n = 1000 Rate,n = 10^6 value,n = 10^6 scale,n = 10^6 Rate,n = 10^9 value,n = 10^9 scale,n = 10^9 Rate,Starting Complexity,Remarks,Papers for ratio evaluations,Domains,formatted_title,reads_url,2015070100,2015080100,2015090100,2015100100,2015110100,2015120100,2016010100,2016020100,2016030100,2016040100,2016050100,2016060100,2016070100,2016080100,2016090100,2016100100,2016110100,2016120100,2017010100,2017020100,2017030100,2017040100,2017050100,2017060100,2017070100,2017080100,2017090100,2017100100,2017110100,2017120100,2018010100,2018020100,2018030100,2018040100,2018050100,2018060100,2018070100,2018080100,2018090100,2018100100,2018110100,2018120100,2019010100,2019020100,2019030100,2019040100,2019050100,2019060100,2019070100,2019080100,2019090100,2019100100,2019110100,2019120100,2020010100,2020020100,2020030100,2020040100,2020050100,2020060100,2020070100,2020080100,2020090100,2020100100,2020110100,2020120100,2021010100,2021020100,2021030100,2021040100,2021050100,2021060100,2021070100,2021080100,2021090100,2021100100,2021110100,2021120100,2022010100,2022020100,2022030100,2022040100,2022050100,2022060100,2022070100,2022080100,2022090100,2022100100,2022110100,2022120100,2023010100,2023020100,2023030100,2023040100,2023050100,2023060100,2023070100,average_monthly_reads,min_time_complexity_class,is_optimal,min_space_complexity_class,is_optimal_space
0,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,Approximate OBST,348.0,,,1,0,O(n),,,[https://people.mpi-inf.mpg.de/~mehlhorn/ftp/mehlhorn3.pdf Melhorn's Approximation algorithm (1975)],Melhorn's Approximation algorithm,1975,https://people.mpi-inf.mpg.de/~mehlhorn/ftp/mehlhorn3.pdf,,,,0.0,0,3,n: 3,$O(n)$,"H: entropy of the distribution
P_opt:
P_balanced: 
n: number of elements",n,,,,,3,n: 3,O(n),"https://people.mpi-inf.mpg.de/~mehlhorn/ftp/mehlhorn3.pdf, storing left/right subtrees' weights",0.0,1.0,,0,,1,0.63 H \leq P_opt \leq P_balanced \leq 2 + 1.44 H,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
1,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,Approximate OBST,350.0,,,1,0,O(n^0.6),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.6940&rep=rep1&type=pdf Karpinski (1996)],Karpinski,1996,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.6940&rep=rep1&type=pdf,,,,0.0,0,2.6,n: 2.6,O(n^{0.6}),n: number of elements,n,,,,,1,n: 1,O(1),Derived: dynamic programming and making use of Monge matrix properties,1.0,0.0,,0,,1,\epsilon = o(1),0,1,n,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,63.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,True,1,True
2,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,Alphabetic Tree Problem,351.0,,,1,1,O(n),,,[https://epubs.siam.org/doi/abs/10.1137/S0895480193256651?journalCode=sjdmec Klawe; Mumey (1993)],Klawe; Mumey,1993,https://epubs.siam.org/doi/abs/10.1137/S0895480193256651?journalCode=sjdmec,,,,0.0,0,3,n: 3,O(n),n: number of elements,n,,,,,3,n: 3,O(n),Derived: uses a worklist of size O(n),1.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,weights within constant factors of each other or exponentially separated,,,,,,,,1000.0,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
3,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,Approximate OBST,352.0,,,1,0,O(n^1.6),,,[https://www.sciencedirect.com/science/article/pii/0196677487900526 Larmore (1987)],Larmore,1987,https://www.sciencedirect.com/science/article/pii/0196677487900526,,,,0.0,0,4.6,n: 4.6,O(n^{1.6}),n: number of elements,n,,,,,3,n: 3,O(n),"Derived: Computing and storing f_{d,l} for each n elements",1.0,0.0,,0,,1,\epsilon = o(1),0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,63095.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
4,0.0,1.0,1,Nearest neighbor search,,49.0,Nearest Neighbor Search,2.0,k-ANNS,419.0,,,1,0,O(nlogn),,,[https://doi.org/10.1109/TPAMI.2018.2889473 Hierarchical Navigable Small World (HNSW) (2018)],Hierarchical Navigable Small World (HNSW),2018,https://doi.org/10.1109/TPAMI.2018.2889473,,,,0.0,0,4,n: 4,O(nlogn),"n: number of elements
M: heuristic choice -- number of closest neighbors for a part of the algo",n,,,,bytes of memory,1,"n: 1,
M: 3",O(M),"https://arxiv.org/abs/1603.09320, ""Memory usage is proportional to choice of M""",0.0,1.0,,0,,1,? experimental results,1,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,Nearest_neighbor_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Nearest_neighbor_search/monthly/20150701/20230731,7816.0,7973.0,8427.0,10234.0,9997.0,9991.0,9588.0,10143.0,10339.0,11056.0,10202.0,8594.0,7885.0,8483.0,9185.0,10693.0,10940.0,9245.0,9253.0,9468.0,11124.0,9787.0,10649.0,9649.0,8283.0,7773.0,8478.0,10424.0,10304.0,8333.0,9317.0,9030.0,10164.0,9872.0,9581.0,7866.0,7642.0,7684.0,8230.0,9803.0,9577.0,8981.0,8869.0,8631.0,10689.0,10477.0,10253.0,8456.0,8325.0,7782.0,9178.0,10902.0,10772.0,8891.0,9219.0,9197.0,9794.0,10922.0,9920.0,9754.0,7915.0,7467.0,7968.0,9289.0,9736.0,8648.0,8630.0,8146.0,10160.0,9268.0,8992.0,8682.0,8196.0,8015.0,8101.0,8781.0,8384.0,8443.0,7899.0,7467.0,7991.0,7988.0,7740.0,7425.0,6241.0,6253.0,6510.0,7619.0,7493.0,6858.0,6733.0,7535.0,8914.0,7455.0,8019.0,7279.0,6679.0,8855.80412371134,3,False,1,True
5,1.0,0.0,1,Locality-sensitive hashing,,49.0,Nearest Neighbor Search,2.0,k-ANNS,420.0,,,1,0,"O(nLkt) [pre-processing]
O(L(kt+dnP_2^k)) [query-time]",,,[http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf Locality-sensitive hashing (2010)],Locality-sensitive hashing,2010,http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf,,,,0.0,0,3,"n: 3,
k: 3,
L: 3,
t: 3,
d: 3","$O(nLkt)$ [pre-processing]
$O(L(kt+dnP_2^k))$ [query-time]","$n$: number of elements
$L$: number of hash tables
$k$: width parameter
$t$: time to evaluate a function
$d$: dimensionality of the data
$P_1, P_2$: Probabilities inherent in the hash functions
$c$: approximation factor",n,,,,hash table cells,3,"n: 3,
L: 3",O(nL),https://en.wikipedia.org/wiki/Locality-sensitive_hashing#LSH_algorithm_for_nearest_neighbor_search,0.0,0.0,,0,,1,c,0,0,,0,0,https://en.wikipedia.org/wiki/Locality-sensitive_hashing#LSH_algorithm_for_nearest_neighbor_search,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,Locality-sensitive_hashing,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Locality-sensitive_hashing/monthly/20150701/20230731,5619.0,5321.0,5928.0,6247.0,5889.0,5402.0,5532.0,6095.0,6248.0,6535.0,6351.0,6130.0,5429.0,5588.0,6062.0,6781.0,6908.0,5950.0,6370.0,7019.0,8498.0,7529.0,8305.0,8683.0,6518.0,6298.0,7010.0,8371.0,8936.0,6867.0,7424.0,6744.0,7836.0,7942.0,8277.0,7251.0,6838.0,6891.0,6812.0,8070.0,8006.0,6974.0,7113.0,7226.0,8438.0,8318.0,7183.0,6240.0,6450.0,6461.0,6603.0,8069.0,7191.0,6498.0,8954.0,8478.0,8892.0,7929.0,8157.0,8614.0,7319.0,6174.0,6472.0,7706.0,7184.0,6645.0,6842.0,6366.0,8486.0,8191.0,7260.0,7410.0,6036.0,7057.0,6963.0,7763.0,7751.0,6449.0,6573.0,6888.0,7290.0,7654.0,7070.0,6502.0,6339.0,6457.0,6250.0,7742.0,6676.0,15951.0,7651.0,8010.0,9182.0,7476.0,7572.0,7773.0,6297.0,7193.041237113402,3,True,1,False
6,0.0,0.0,0,,,49.0,Nearest Neighbor Search,2.0,k-ANNS for a dense 3D map of geometric points,421.0,,,1,0,O(k),,,[http://www.araa.asn.au/acra/acra2013/papers/pap148s1-file1.pdf Projected radial search (2013)],Projected radial search,2013,http://www.araa.asn.au/acra/acra2013/papers/pap148s1-file1.pdf,,,,0.0,0,3,k: 3,O(k),k: number of neighbors to find,n,,,Word RAM,words,1,n: 1,O(1),Derived: There are 5 local variables and no tables or lists aside from input/output,1.0,0.0,,0,,1,?,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
7,0.0,1.0,1,Knapsack problem,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,546.0,,,1,1,O(nt/logt),,,[https://link.springer.com/article/10.1007/s00453-002-0989-y Pisinger (2003)],Pisinger,2003,https://link.springer.com/article/10.1007/s00453-002-0989-y,,,,0.0,0,3,"n: 3,
t: 2.99",O(nt/logt),"n: number of elements in the set
t: target sum",n,,,Word RAM,words,1,"n: 1,
t: 2.5",O(t/logt),https://link.springer.com/article/10.1007/s00453-002-0989-y,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Knapsack_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Knapsack_problem/monthly/20150701/20230731,25191.0,27276.0,30404.0,36756.0,38328.0,34148.0,28716.0,31831.0,35171.0,36492.0,37738.0,28989.0,23280.0,28288.0,31481.0,39510.0,43108.0,36742.0,31257.0,33395.0,39111.0,37114.0,35045.0,26670.0,24100.0,26200.0,30518.0,39535.0,40502.0,39333.0,28909.0,29217.0,34884.0,36598.0,35054.0,25244.0,25312.0,25833.0,28495.0,38159.0,34816.0,30498.0,27573.0,28250.0,33713.0,33944.0,28947.0,24224.0,22612.0,24215.0,29863.0,37453.0,40439.0,32674.0,29950.0,34292.0,32658.0,36710.0,35562.0,30515.0,26294.0,26515.0,29573.0,38838.0,39142.0,38988.0,35794.0,31762.0,38006.0,36792.0,33627.0,31002.0,31977.0,28751.0,28913.0,34448.0,36660.0,33675.0,31700.0,32380.0,34856.0,35636.0,37048.0,31299.0,27130.0,25670.0,31007.0,35964.0,43033.0,34809.0,29883.0,28226.0,32017.0,29493.0,31420.0,26831.0,22794.0,32317.474226804123,3,True,1,True
8,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,547.0,,,1,1,O(n' t),,,[https://doi.org/10.1287/opre.21.1.332 Faaland (1973)],Faaland,1973,https://doi.org/10.1287/opre.21.1.332,,,,0.0,0,3,"n: 3,
n': 3,
t: 3",O(n' t),"n': number of distinct elements in the set
t: target sum",n,,,,,1,"n: 1,
t: 3",O(t),https://doi.org/10.1287/opre.21.1.332,0.0,1.0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,Dynamic Programming,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
9,0.0,1.0,1,Subset sum problem,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,548.0,,,1,1,O(n' t),,,[https://link.springer.com/article/10.1007/s006070050042 Pferschy (1999)],Pferschy,1999,https://link.springer.com/article/10.1007/s006070050042,,,,0.0,0,3,"n: 3,
n': 3,
t: 3",O(n' t),"n': number of distinct elements in the set
t: target sum",n,,,,,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Subset_sum_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Subset_sum_problem/monthly/20150701/20230731,8812.0,8136.0,9700.0,11712.0,14063.0,13303.0,11208.0,12764.0,12129.0,13821.0,12366.0,9587.0,17323.0,10858.0,10134.0,12880.0,14501.0,13148.0,11550.0,11223.0,13675.0,13647.0,13261.0,9921.0,9500.0,9043.0,10483.0,11994.0,14674.0,11514.0,10956.0,9494.0,10826.0,13359.0,12206.0,8737.0,8217.0,8379.0,9379.0,11734.0,14340.0,13900.0,11445.0,10640.0,12463.0,13760.0,12479.0,9615.0,9097.0,8946.0,10444.0,13182.0,13153.0,12380.0,11003.0,11896.0,10544.0,13912.0,12559.0,12308.0,9901.0,9850.0,11206.0,13717.0,15521.0,17179.0,13413.0,11455.0,13930.0,15882.0,12608.0,10553.0,10683.0,10707.0,10255.0,12675.0,15448.0,13552.0,11307.0,13094.0,12992.0,13044.0,13023.0,9801.0,8382.0,7772.0,8094.0,9592.0,11897.0,10161.0,8317.0,7838.0,8685.0,8851.0,8342.0,7106.0,6602.0,11461.01030927835,3,True,1,True
10,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,549.0,,,1,1,O(σ^{(3/2)}),,,[https://doi.org/10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2 Klinz (1999)],Klinz,1999,https://doi.org/10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2,,,,0.0,0,4.5,"n: 4.5,
\sigma: 4.5",$O(σ^{(3/2)})$,$\sigma$: sum of integers in the set ($\sigma \geq n$),n,,,,,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,True
11,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,550.0,,,1,1,\tilde{O}(n max(S)),,,[https://www.sciencedirect.com/science/article/abs/pii/S019667749690841X?via%3Dihub Eppstein (1997)],Eppstein,1997,https://www.sciencedirect.com/science/article/abs/pii/S019667749690841X?via%3Dihub,,,,0.0,0,4,"n: 4,
max(S): 3",$\tilde{O}(n max(S))$,"n: number of elements in the set
S: the set
t: target sum",n,,,,,1,"n: 1,
t: 4",O(t logt),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,True
12,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,551.0,,,1,1,\tilde{O}(n max(S)),,,[https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507 Serang (2014)],Serang,2014,https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507,,,,0.0,0,4,"n: 4,
max(S): 3",$\tilde{O}(n max(S))$,"n: number of elements in the set
S: the set
t: target sum",n,,,,,1,"n: 1,
t: 4",O(t logt),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,True
13,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,552.0,,,1,1,\tilde{O}(n max(S)),,,[https://www.liebertpub.com/doi/10.1089/cmb.2015.0013 Serang (2015)],Serang,2015,https://www.liebertpub.com/doi/10.1089/cmb.2015.0013,,,,0.0,0,4,"n: 4,
max(S): 3",$\tilde{O}(n max(S))$,"n: number of elements in the set
S: the set
t: target sum",n,,,,,1,"n: 1,
t: 4",O(t logt),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,True
14,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,553.0,,,1,1,\tilde{O}(n^3 t),,,[https://dl.acm.org/doi/abs/10.1145/1806689.1806735 Lokshtanov (2010)],Lokshtanov,2010,https://dl.acm.org/doi/abs/10.1145/1806689.1806735,,,,0.0,0,6,"n: 6,
t: 3",$\tilde{O}(n^3 t)$,"n: number of elements in the set
t: target sum",n,,,,,5,"n: 5,
t: 1",O(n^2),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
15,0.0,0.0,0,,,78.0,Stable Matching Problem,2.0,Almost Stable Marriage Problem,619.0,,,1,0,O(1),,,"[https://arxiv.org/pdf/0812.4893.pdf Valentin Polishchuk, and Jukka Suomela (2008)]","Valentin Polishchuk, and Jukka Suomela",2008,https://arxiv.org/pdf/0812.4893.pdf,,,,0.0,0,1,n: 1,O(1),n: number of people in set,n,,,Word RAM,words,1,n: 1,O(1),derived: must be \leq time complexity,1.0,0.0,,0,,1,2 + \epsilon,0,1,,0,0,,,,,,,,,,,,1.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,True,1,True
16,0.0,0.0,0,,,99.0,Motif Search,2.0,Motif Search,784.0,,,1,0,O(nm),,,"[https://www.ncbi.nlm.nih.gov/pubmed/2184437 Lawrence, Reilly (1990)]","Lawrence, Reilly",1990,https://www.ncbi.nlm.nih.gov/pubmed/2184437,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(nm),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",O(nm),https://www.ncbi.nlm.nih.gov/pubmed/2184437,0.0,1.0,,0,,1,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/,,,,m=n= (value/2),,,,,,,250000.0,0,,2.5E+11,0,,2.50E+17,0,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
17,0.0,1.0,1,Charles Lawrence (mathematician),,99.0,Motif Search,2.0,Motif Search,785.0,,,1,0,O(nm),,,[https://science.sciencemag.org/content/262/5131/208 Lawrence Gibbs Sampling (1993)],Lawrence Gibbs Sampling,1993,https://science.sciencemag.org/content/262/5131/208,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(nm),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"n: 3,
m: 3,
mn: 2.5",O(n + m),"derived: two data structures, one uses O(n) and one uses O(m)",1.0,0.0,,0,,1,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,Charles_Lawrence_%28mathematician%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Charles_Lawrence_%28mathematician%29/monthly/20150701/20230731,49.0,62.0,73.0,86.0,55.0,54.0,47.0,56.0,58.0,82.0,82.0,51.0,71.0,63.0,70.0,74.0,52.0,72.0,59.0,36.0,71.0,67.0,50.0,61.0,24.0,31.0,57.0,44.0,44.0,63.0,53.0,34.0,53.0,45.0,36.0,33.0,33.0,42.0,43.0,63.0,75.0,37.0,43.0,37.0,51.0,51.0,43.0,20.0,48.0,29.0,46.0,40.0,62.0,72.0,37.0,49.0,45.0,37.0,29.0,15.0,33.0,23.0,31.0,42.0,19.0,23.0,33.0,15.0,35.0,39.0,28.0,14.0,19.0,10.0,20.0,15.0,27.0,22.0,26.0,20.0,22.0,19.0,17.0,22.0,24.0,25.0,21.0,24.0,18.0,13.0,21.0,10.0,10.0,18.0,13.0,17.0,13.0,39.855670103092784,2.75,False,2,False
18,0.0,1.0,1,Charles Lawrence (mathematician),,99.0,Motif Search,2.0,Motif Search,787.0,,,1,0,O(nm),,,[https://www.ncbi.nlm.nih.gov/pubmed/12015892 MotifSampler  (2001)],MotifSampler,2001,https://www.ncbi.nlm.nih.gov/pubmed/12015892,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(nm),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"n: 3,
m: 3,
mn: 2.5",O(n + m),derived: essentially just modified Gibbs sampling,1.0,0.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,Charles_Lawrence_%28mathematician%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Charles_Lawrence_%28mathematician%29/monthly/20150701/20230731,49.0,62.0,73.0,86.0,55.0,54.0,47.0,56.0,58.0,82.0,82.0,51.0,71.0,63.0,70.0,74.0,52.0,72.0,59.0,36.0,71.0,67.0,50.0,61.0,24.0,31.0,57.0,44.0,44.0,63.0,53.0,34.0,53.0,45.0,36.0,33.0,33.0,42.0,43.0,63.0,75.0,37.0,43.0,37.0,51.0,51.0,43.0,20.0,48.0,29.0,46.0,40.0,62.0,72.0,37.0,49.0,45.0,37.0,29.0,15.0,33.0,23.0,31.0,42.0,19.0,23.0,33.0,15.0,35.0,39.0,28.0,14.0,19.0,10.0,20.0,15.0,27.0,22.0,26.0,20.0,22.0,19.0,17.0,22.0,24.0,25.0,21.0,24.0,18.0,13.0,21.0,10.0,10.0,18.0,13.0,17.0,13.0,39.855670103092784,2.75,False,2,False
19,0.0,1.0,1,Texture synthesis,,103.1,Texture Synthesis,2.0,Texture Synthesis,809.0,,,0,0,O(n^2 log n),,,[https://dl.acm.org/doi/abs/10.1145/344779.345009 tree-structured vector quantization Wei-Levoy (2000)],tree-structured vector quantization Wei-Levoy,2000,https://dl.acm.org/doi/abs/10.1145/344779.345009,,,,0.0,0,5.01,n: 5.01,O(n^2 log n),"n: number of pixels in input image
d: neighborhood size",n,,,TSVQ Tree,,3,"n: 3,
d: 3",O(nd),https://dl.acm.org/doi/abs/10.1145/344779.345009,0.0,1.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Image Processing,Texture_synthesis,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Texture_synthesis/monthly/20150701/20230731,856.0,948.0,1066.0,1185.0,1200.0,1153.0,1321.0,1220.0,1157.0,1109.0,1027.0,1018.0,1034.0,1111.0,1111.0,1116.0,1157.0,1174.0,1143.0,1121.0,1228.0,1083.0,1012.0,970.0,799.0,934.0,872.0,1002.0,1118.0,933.0,1064.0,939.0,1028.0,938.0,856.0,753.0,718.0,707.0,713.0,842.0,932.0,910.0,750.0,779.0,982.0,827.0,831.0,704.0,652.0,887.0,778.0,958.0,887.0,801.0,861.0,849.0,803.0,868.0,827.0,735.0,712.0,697.0,702.0,819.0,871.0,698.0,687.0,736.0,891.0,751.0,745.0,694.0,549.0,619.0,829.0,792.0,729.0,712.0,899.0,732.0,828.0,985.0,658.0,557.0,520.0,551.0,600.0,576.0,634.0,629.0,596.0,563.0,685.0,792.0,829.0,714.0,519.0,860.3814432989691,3,False,3,True
20,0.0,1.0,1,Texture synthesis,,103.1,Texture Synthesis,2.0,Texture Synthesis,812.0,,,0,0,O(N),,,"[https://arxiv.org/abs/1705.06566 Spatial GAN-Based; Urs Bergmann, Nikolay Jetchev, Roland Vollgraf (2017)]","Spatial GAN-Based; Urs Bergmann, Nikolay Jetchev, Roland Vollgraf",2017,https://arxiv.org/abs/1705.06566,,,,0.0,0,3,"n: 3,
N: 3",O(N),N: number of pixels in output image,n,,,,,3,N: 3,O(N),https://arxiv.org/abs/1705.06566,0.0,1.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Image Processing,Texture_synthesis,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Texture_synthesis/monthly/20150701/20230731,856.0,948.0,1066.0,1185.0,1200.0,1153.0,1321.0,1220.0,1157.0,1109.0,1027.0,1018.0,1034.0,1111.0,1111.0,1116.0,1157.0,1174.0,1143.0,1121.0,1228.0,1083.0,1012.0,970.0,799.0,934.0,872.0,1002.0,1118.0,933.0,1064.0,939.0,1028.0,938.0,856.0,753.0,718.0,707.0,713.0,842.0,932.0,910.0,750.0,779.0,982.0,827.0,831.0,704.0,652.0,887.0,778.0,958.0,887.0,801.0,861.0,849.0,803.0,868.0,827.0,735.0,712.0,697.0,702.0,819.0,871.0,698.0,687.0,736.0,891.0,751.0,745.0,694.0,549.0,619.0,829.0,792.0,729.0,712.0,899.0,732.0,828.0,985.0,658.0,557.0,520.0,551.0,600.0,576.0,634.0,629.0,596.0,563.0,685.0,792.0,829.0,714.0,519.0,860.3814432989691,3,True,3,True
21,0.0,0.0,0,,,132.0,n-Queens Problem,2.0,n-Queens Completion,970.0,,,1,0,O(n),,experimental results in paper,[https://arxiv.org/abs/1912.05935 Grigoryan (2018)],Grigoryan,2018,https://arxiv.org/abs/1912.05935,,,,1.0,1->6,3,"n: 3,
n^2: 2.5",O(n),"n: board of dimension n x n
k: number of queens",n^2,,,,,5,"n: 3,
n^2: 5",O(n),Derived: two control arrays of size O(n),1.0,0.0,,1,Monte Carlo,1,error < 0.0001 and decreases with increasing n,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,2.5,False
22,0.0,1.0,1,Cycle detection,$t_f (\mu + \lambda)(1+\Theta(1/sqrt(M)))$,32.0,Cycle Detection,2.0,Cycle Detection,324.0,,,1,0,(\mu + \lambda)(1+\Theta(1/sqrt(M))),"mentioned in conclusion that the analysis might be interesting, but it wasn't actually done",https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,[https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat Sedgewick; Szymanski; and Yao (1982)],Sedgewick; Szymanski; and Yao,1982,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,1,0.0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,0.0,0,3,"\mu: 3,
\lambda: 3,
M: 1.5",$(\mu + \lambda)(1+\Theta(1/sqrt(M)))$,"$\mu$: first index of element in cycle
$\lambda$: period
$M$: number of memory cells available",\mu,,,,Memory cells,1,"M: 3,
\mu: 1",M,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,0.0,1.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,100.3512293,,#REF!,#REF!,,#REF!,#REF!,,6,,,Combinatorics,Cycle_detection,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cycle_detection/monthly/20150701/20230731,20214.0,59522.0,7905.0,9453.0,8264.0,7573.0,7251.0,8500.0,8136.0,7663.0,7985.0,6426.0,6358.0,6584.0,7286.0,8531.0,8114.0,6478.0,7160.0,7304.0,7630.0,6840.0,7098.0,6595.0,6574.0,6036.0,6556.0,7432.0,8830.0,6817.0,6734.0,6199.0,6684.0,6707.0,6298.0,6443.0,6192.0,6659.0,5975.0,6980.0,5818.0,6163.0,6091.0,5773.0,6902.0,6549.0,6603.0,5790.0,5328.0,5735.0,6133.0,6450.0,5997.0,6905.0,6327.0,20925.0,26268.0,16389.0,10591.0,10482.0,8477.0,11223.0,9550.0,10598.0,8803.0,8987.0,9228.0,8503.0,9354.0,9125.0,8777.0,8503.0,9214.0,9042.0,9406.0,8736.0,7700.0,7997.0,9586.0,8632.0,10138.0,7893.0,7483.0,7788.0,8946.0,9271.0,8879.0,8318.0,8926.0,7529.0,6782.0,6379.0,7493.0,5600.0,6280.0,6141.0,6057.0,8665.453608247422,3,True,1,True
23,0.0,1.0,1,Cycle detection,$t_f (\mu + \lambda)(1+\Theta(1/sqrt(M)))$,32.0,Cycle Detection,2.0,Cycle Detection,325.0,,,1,0,\mu + 3/2 \lambda,"Elements have independently random magnitudes, subject to periodicity constraints \mu and \lambda",https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,[https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view Nivasch (2004)],Nivasch,2004,https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,,,,0.0,0,3,"\mu: 3,
\lambda: 3",$O(\mu + \lambda)$,"$\mu$: index of first element in cycle
$\lambda$: cycle length",\mu,,,not mentioned,Stack size,2,\mu: 2,O(\log\mu),https://www.gabrielnivasch.org/fun/cycle-detection,0.0,1.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,,,,,,,,,6,,,Combinatorics,Cycle_detection,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cycle_detection/monthly/20150701/20230731,20214.0,59522.0,7905.0,9453.0,8264.0,7573.0,7251.0,8500.0,8136.0,7663.0,7985.0,6426.0,6358.0,6584.0,7286.0,8531.0,8114.0,6478.0,7160.0,7304.0,7630.0,6840.0,7098.0,6595.0,6574.0,6036.0,6556.0,7432.0,8830.0,6817.0,6734.0,6199.0,6684.0,6707.0,6298.0,6443.0,6192.0,6659.0,5975.0,6980.0,5818.0,6163.0,6091.0,5773.0,6902.0,6549.0,6603.0,5790.0,5328.0,5735.0,6133.0,6450.0,5997.0,6905.0,6327.0,20925.0,26268.0,16389.0,10591.0,10482.0,8477.0,11223.0,9550.0,10598.0,8803.0,8987.0,9228.0,8503.0,9354.0,9125.0,8777.0,8503.0,9214.0,9042.0,9406.0,8736.0,7700.0,7997.0,9586.0,8632.0,10138.0,7893.0,7483.0,7788.0,8946.0,9271.0,8879.0,8318.0,8926.0,7529.0,6782.0,6379.0,7493.0,5600.0,6280.0,6141.0,6057.0,8665.453608247422,3,True,1,False
24,0.0,0.0,0,,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,1.0,,,1,1,O( n² ),uniform distribution over all possible permutations,CLRS?,[- Naive sorting (1940)],Naive sorting,1940,-,1,1.0,,1.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,True
25,1.0,0.0,1,Selection sort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,2.0,,,1,1,O( n² ),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Selection Sort (1962)],Selection Sort,1962,-,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Selection_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,Selection_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Selection_sort/monthly/20150701/20230731,24331.0,27705.0,39311.0,47259.0,43658.0,38635.0,32933.0,43120.0,44019.0,44201.0,39911.0,27807.0,23130.0,28267.0,38410.0,44769.0,46755.0,39995.0,34313.0,41162.0,46544.0,40529.0,37335.0,23731.0,19894.0,22512.0,29842.0,42511.0,37517.0,31130.0,28915.0,33411.0,36850.0,36711.0,32337.0,20083.0,17533.0,20324.0,34760.0,31487.0,28434.0,23737.0,21108.0,22853.0,25237.0,26680.0,21867.0,14208.0,12686.0,13814.0,20520.0,25467.0,24199.0,19759.0,18412.0,20762.0,17654.0,19280.0,20169.0,16733.0,14027.0,16044.0,22770.0,26701.0,27788.0,24582.0,22294.0,22384.0,27262.0,22266.0,18142.0,16227.0,17999.0,16240.0,20862.0,23633.0,22129.0,19990.0,19342.0,18930.0,22187.0,18399.0,17159.0,13690.0,12075.0,11826.0,16260.0,19398.0,18149.0,14159.0,13709.0,14183.0,14799.0,12401.0,11266.0,8199.0,7118.0,25276.443298969072,2,False,1,True
26,1.0,0.0,1,Merge sort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,3.0,,,1,1,O(n logn),"Any distribution (runtime is same regardless of input, at least in the typical implementation)",(same behavior across all inputs),[- Merge Sort (1945)],Merge Sort,1945,-,,,,1.0,4->5,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,3,n: 3,O(n),need some way to store partially processed lists while merging,1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Merge_sort#cite_note-2

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics,Merge_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Merge_sort/monthly/20150701/20230731,44199.0,47856.0,64024.0,82249.0,71149.0,59366.0,56238.0,69994.0,71177.0,68218.0,63465.0,48428.0,42611.0,49022.0,64559.0,75367.0,76104.0,60534.0,57131.0,65809.0,72541.0,62028.0,58373.0,43461.0,37238.0,42556.0,59558.0,79502.0,65907.0,54817.0,52977.0,62290.0,64634.0,62905.0,56857.0,40779.0,37372.0,38062.0,51105.0,55180.0,50732.0,39369.0,39428.0,42839.0,45177.0,43035.0,39353.0,28359.0,25143.0,25906.0,37984.0,45455.0,42761.0,34240.0,36548.0,43085.0,38632.0,40283.0,42107.0,36018.0,30997.0,31333.0,44310.0,50114.0,50730.0,44023.0,39547.0,42264.0,48584.0,41875.0,37985.0,33539.0,34572.0,33132.0,41423.0,45504.0,44846.0,37904.0,37413.0,39998.0,47161.0,39295.0,38325.0,29903.0,24833.0,24937.0,32915.0,37897.0,38868.0,30012.0,27987.0,29637.0,35153.0,26370.0,27352.0,23552.0,20280.0,45945.010309278354,2,False,1,False
27,1.0,0.0,1,Bubble sort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,5.0,,,1,1,O( n² ),uniform distribution over all possible permutations,(can be easily derived),[- Bubble Sort (1956)],Bubble Sort,1956,-,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),in-situ,1.0,0.0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,Bubble_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bubble_sort/monthly/20150701/20230731,41617.0,45014.0,61124.0,73914.0,69169.0,59228.0,55586.0,64989.0,65954.0,68618.0,59481.0,48150.0,43139.0,47528.0,64332.0,74706.0,78942.0,61515.0,58497.0,69163.0,76307.0,61536.0,57014.0,42148.0,37926.0,40539.0,53816.0,78803.0,65882.0,51433.0,51823.0,55959.0,60485.0,58369.0,51180.0,38236.0,35428.0,39241.0,47092.0,54235.0,49259.0,40277.0,39650.0,39756.0,43923.0,40546.0,34397.0,25674.0,24072.0,26080.0,36089.0,40841.0,39434.0,31279.0,32283.0,36007.0,33402.0,35316.0,35886.0,31573.0,28451.0,29540.0,39733.0,44660.0,46829.0,39734.0,36289.0,36498.0,44289.0,35247.0,30645.0,27170.0,31176.0,29094.0,36471.0,44085.0,41509.0,33062.0,34603.0,33762.0,37393.0,32427.0,29852.0,23746.0,22313.0,21485.0,25935.0,30454.0,30532.0,25790.0,23390.0,23494.0,26402.0,21577.0,20855.0,17055.0,15243.0,42625.278350515466,2,False,1,True
28,1.0,0.0,1,Introsort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,8.0,,,1,1,O(n logn),uniform distribution over all possible permutations,(lower bound for average-case in sorting + upper bound for heapsort),[https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23 Intro Sort (1997)],Intro Sort,1997,https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23,,,,0.0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,2,n: 2,O(logn),(see quicksort + heapsort),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Introsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics,Introsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Introsort/monthly/20150701/20230731,2688.0,2750.0,2905.0,3898.0,3341.0,2806.0,3005.0,3026.0,3496.0,3449.0,3199.0,3374.0,2560.0,2690.0,2994.0,3352.0,4205.0,3371.0,3194.0,3253.0,3798.0,3094.0,3334.0,2988.0,2622.0,2548.0,2935.0,5322.0,3533.0,3023.0,3005.0,3062.0,3368.0,3813.0,3906.0,3233.0,2485.0,2508.0,2701.0,3571.0,3266.0,2840.0,3055.0,3486.0,4320.0,3828.0,3353.0,2201.0,2325.0,2096.0,2728.0,3110.0,2766.0,2516.0,2591.0,2938.0,3263.0,2827.0,3421.0,2288.0,2381.0,2467.0,2631.0,3152.0,2796.0,3015.0,2425.0,2687.0,3306.0,2920.0,2650.0,2440.0,2215.0,2055.0,2356.0,2940.0,3261.0,3030.0,2678.0,2919.0,3460.0,3597.0,3329.0,3062.0,2603.0,2306.0,2580.0,3247.0,3230.0,2802.0,2865.0,2891.0,4513.0,3413.0,3432.0,3337.0,2742.0,3044.907216494845,2,False,1,False
29,1.0,0.0,1,Heapsort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,24.0,,,1,1,O(n logn),uniform distribution over all possible permutations (reference proof possibly not complete?),https://www.sciencedirect.com/science/article/pii/030439759390364Y?via%3Dihub,[https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern Heap Sort (1964)],Heap Sort,1964,https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern,,,,0.0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),(can be easily derived),1.0,0.0,,0,,0,,0,0,0,0,0,https://en.wikipedia.org/wiki/Heapsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics,Heapsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Heapsort/monthly/20150701/20230731,24867.0,27715.0,34477.0,42451.0,42576.0,37312.0,31073.0,35782.0,40768.0,39939.0,39842.0,30642.0,24958.0,29770.0,36097.0,45750.0,45995.0,38808.0,33169.0,36715.0,39035.0,33504.0,33101.0,24089.0,21402.0,22995.0,27822.0,42986.0,35196.0,29665.0,25963.0,26898.0,30597.0,29916.0,29680.0,21760.0,19571.0,19697.0,24644.0,30209.0,28183.0,23101.0,21162.0,21149.0,25948.0,24495.0,21510.0,16105.0,13936.0,14609.0,19144.0,22940.0,22209.0,17895.0,17550.0,18342.0,18399.0,18908.0,19414.0,17349.0,14539.0,14000.0,17744.0,22998.0,24055.0,21727.0,18171.0,18088.0,22490.0,20036.0,17767.0,19586.0,17015.0,14147.0,16200.0,20265.0,20402.0,17919.0,16241.0,17170.0,20737.0,18592.0,18193.0,16040.0,12220.0,11517.0,12482.0,14403.0,15555.0,13325.0,11537.0,11520.0,14148.0,11003.0,11664.0,10427.0,8491.0,23630.907216494845,2,False,1,True
30,1.0,0.0,1,Counting sort,,1.0,Sorting,2.0,Non-Comparison Sorting,7.0,,,1,1,O(n+k),uniform distribution over all sets of key values,CLRS,[http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf Counting Sort (1954)],Counting Sort,1954,http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf,,,,0.0,0,3,"n: 3,
k: 3",O(n+k),"n: size of list
k: range of non-negative key values",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k),(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Counting_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics,Counting_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Counting_sort/monthly/20150701/20230731,7687.0,7292.0,9596.0,14543.0,12069.0,9195.0,8230.0,10494.0,10645.0,9718.0,9620.0,7552.0,10402.0,8076.0,12092.0,13467.0,12726.0,11428.0,10476.0,12400.0,12501.0,9900.0,10133.0,8850.0,7544.0,7373.0,10442.0,15659.0,11587.0,8795.0,8425.0,10155.0,11527.0,9730.0,8848.0,7551.0,6700.0,7574.0,9729.0,12145.0,10284.0,8949.0,8916.0,9330.0,9911.0,10252.0,7426.0,5926.0,5097.0,6417.0,8792.0,10164.0,8626.0,7328.0,8264.0,8726.0,9806.0,8900.0,9193.0,8189.0,6729.0,7141.0,9155.0,10690.0,10185.0,9524.0,8853.0,8977.0,10296.0,9730.0,8632.0,7943.0,7602.0,7194.0,7952.0,10457.0,9448.0,8534.0,8024.0,7991.0,9773.0,8381.0,9485.0,10159.0,6493.0,6531.0,8284.0,9135.0,9179.0,7696.0,6730.0,7485.0,7643.0,6385.0,6424.0,5930.0,5590.0,9069.40206185567,2,False,1,False
31,1.0,0.0,1,Bucket sort,,1.0,Sorting,2.0,Non-Comparison Sorting,16.0,,,1,1,O(n),uniform distribution of elements within domain of array,CLRS,[- Bucket Sort (1940)],Bucket Sort,1940,-,,,,0.0,0,5,n: 5,O( n² ),n: size of list,n,,,Word RAM,words,3,n: 3,O(n),CLRS,0.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,Bucket_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bucket_sort/monthly/20150701/20230731,7357.0,8033.0,10128.0,13429.0,12679.0,10401.0,9041.0,11113.0,12167.0,11508.0,12497.0,8958.0,7887.0,8348.0,10970.0,14103.0,14696.0,12366.0,11017.0,12516.0,13688.0,11285.0,11420.0,8326.0,7918.0,7578.0,10022.0,15133.0,12693.0,10295.0,9279.0,10275.0,12487.0,11143.0,10500.0,7532.0,7278.0,7369.0,9188.0,12274.0,11513.0,9208.0,8451.0,8645.0,10560.0,10304.0,9019.0,6466.0,5967.0,5654.0,8141.0,10830.0,10785.0,7580.0,7490.0,8563.0,8384.0,8502.0,8616.0,7793.0,6284.0,5665.0,8899.0,9053.0,9370.0,8518.0,7460.0,7874.0,9151.0,8601.0,9263.0,7932.0,6505.0,7258.0,7027.0,10100.0,8806.0,7807.0,7811.0,7610.0,8945.0,7959.0,8129.0,7483.0,5790.0,5104.0,6300.0,9555.0,7377.0,6208.0,6262.0,5611.0,6258.0,5711.0,5535.0,4700.0,4057.0,8962.329896907217,2,False,1,False
32,1.0,0.0,1,Radix sort,,1.0,Sorting,2.0,Non-Comparison Sorting,21.0,,,1,1,O(wn),Any distribution (runtime is same regardless of input),(same general behavior across all inputs),[- Radix Sort (1940)],Radix Sort,1940,-,4,1.0,,1.0,4->6,3,"n: 3,
w: 3",O(wn),"n: size of list
w: length of word",n,,,Word RAM,words,3,"n: 3,
w: 3",O(w+n),(wikipedia page?),0.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Radix_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,999.0,1000000,1000000,999999.0,1000000000,1000000000,999999999.0,4,,,Combinatorics,Radix_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Radix_sort/monthly/20150701/20230731,16496.0,16782.0,20369.0,30866.0,26609.0,24005.0,20248.0,23582.0,29390.0,27029.0,24206.0,18195.0,15760.0,18321.0,22898.0,29164.0,31033.0,27379.0,25534.0,52081.0,27932.0,22949.0,21810.0,19452.0,15803.0,14860.0,20542.0,43718.0,29796.0,21454.0,18845.0,22187.0,28177.0,25843.0,23122.0,16751.0,15320.0,16103.0,19723.0,26869.0,24433.0,19748.0,16926.0,16618.0,21718.0,23336.0,18490.0,12886.0,11624.0,12896.0,21223.0,21387.0,17421.0,14226.0,14693.0,16403.0,15774.0,15376.0,16004.0,13198.0,12925.0,12337.0,21144.0,18904.0,18139.0,17491.0,15121.0,16299.0,22952.0,18906.0,16221.0,14153.0,12294.0,11894.0,13384.0,18249.0,20051.0,19138.0,14308.0,15129.0,18336.0,15637.0,18745.0,15279.0,12113.0,9871.0,12390.0,14703.0,14954.0,13348.0,10690.0,12805.0,13552.0,11682.0,11672.0,10445.0,8748.0,19067.9587628866,2,False,1,False
33,0.0,1.0,1,Tournament sort,O(n),2.0,kth Order Statistic,2.0,kth Order Statistic,26.0,,,1,1,O(nlogn),uniform distribution over all possible permutations (see sorting),(can derive from sorting + linear scan),[- Naive Selection (1940)],Naive Selection,1940,-,1,1.0,https://en.wikipedia.org/wiki/Selection_algorithm,1.0,0,4,n: 4,O(n \log n),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1.0,n is the size of the array,,,,,,,,9965.0,1,,19931568,1,,29897352854,1,,5,,,Combinatorics,Tournament_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tournament_sort/monthly/20150701/20230731,675.0,721.0,1014.0,1213.0,1070.0,1125.0,806.0,971.0,1197.0,1217.0,1122.0,779.0,573.0,735.0,853.0,1105.0,1180.0,1137.0,905.0,1004.0,1428.0,1037.0,1035.0,786.0,689.0,650.0,702.0,2025.0,1128.0,1089.0,765.0,779.0,1083.0,1081.0,961.0,818.0,673.0,579.0,736.0,827.0,959.0,772.0,794.0,728.0,1133.0,2667.0,1087.0,816.0,544.0,528.0,832.0,1239.0,1170.0,1029.0,1034.0,954.0,1810.0,1173.0,895.0,706.0,532.0,567.0,648.0,755.0,755.0,1246.0,684.0,730.0,902.0,948.0,837.0,802.0,737.0,1234.0,587.0,589.0,930.0,796.0,737.0,710.0,1070.0,724.0,1256.0,1037.0,832.0,358.0,587.0,643.0,1188.0,619.0,627.0,800.0,1215.0,869.0,992.0,726.0,440.0,916.0,3,False,1,True
34,1.0,0.0,1,Quicksort,O(n),2.0,kth Order Statistic,2.0,kth Order Statistic,27.0,,,1,1,O(n),uniform distribution over all possible permutations,https://11011110.github.io/blog/2007/10/09/blum-style-analysis-of.html,[https://dl.acm.org/citation.cfm?doid=366622.366647 Hoare's Selection Algorithm (QuickSelect) (1961)],Hoare's Selection Algorithm (QuickSelect),1961,https://dl.acm.org/citation.cfm?doid=366622.366647,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1) (in-situ),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1.0,n is the size of the array,,,,,,,,1000.0,9.965,,,,,,,,5,,,Combinatorics,Quicksort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Quicksort/monthly/20150701/20230731,62198.0,69606.0,86096.0,104396.0,95699.0,81770.0,77130.0,91008.0,93669.0,97755.0,86825.0,68841.0,60209.0,68166.0,86634.0,102916.0,101909.0,81735.0,78614.0,89043.0,98726.0,87092.0,80637.0,64746.0,56443.0,57203.0,73464.0,99464.0,82464.0,65862.0,65117.0,71411.0,78946.0,78924.0,75396.0,55074.0,51273.0,56327.0,69334.0,83828.0,74820.0,58533.0,56982.0,61269.0,66724.0,62874.0,55841.0,40242.0,37910.0,39692.0,55141.0,61611.0,54572.0,47354.0,49314.0,57054.0,52874.0,51954.0,55490.0,51484.0,46235.0,47991.0,59655.0,69886.0,67459.0,61420.0,55940.0,58365.0,70050.0,60893.0,54272.0,49469.0,47958.0,45975.0,53996.0,64041.0,59714.0,48305.0,49905.0,50387.0,59322.0,52363.0,51588.0,44728.0,38262.0,37147.0,44967.0,48790.0,49615.0,40221.0,38064.0,39580.0,44454.0,38506.0,34726.0,29685.0,26750.0,62560.50515463918,3,False,1,True
35,0.0,1.0,1,Matrix chain multiplication,$O(n \log n)$,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Ordering Problem,29.0,,,1,1,O (4^n),Any distribution (runtime is same regardless of input),CLRS for runtime,[- Brute Force (1940)],Brute Force,1940,-,1,1.0,http://www.cs.tut.fi/~elomaa/teach/AADS-2014-7.pdf,1.0,0,8,n: 8,$O(4^n)$,n: number of matrices,n,,,Word RAM,words,3,n: 3,O(n),can be derived,1.0,0.0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,True
36,0.0,1.0,1,Matrix chain multiplication,$O(n \log n)$,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Ordering Problem,30.0,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),CLRS for runtime,[- Dynamic Programming Algorithm (S. S. Godbole) (1953)],Dynamic Programming Algorithm (S. S. Godbole),1953,-,,,,1.0,1->3,6,n: 6,O(n^3),n: number of matrices,n,,,Word RAM,words,5,n: 5,O(n^2),CLRS http://mitpress.mit.edu/9780262046305/introduction-to-algorithms/,0.0,0.0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000000000.0,Inf,,,,,,,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,False
37,1.0,0.0,1,Wagner–Fischer algorithm,,4.0,Longest Common Subsequence,2.0,LCS,38.0,,,1,1,O(mn),Any distribution (runtime is same regardless of input),(can be easily derived),[https://dl.acm.org/citation.cfm?doid=321796.321811 Wagner and Fischer (1974)],Wagner and Fischer,1974,https://dl.acm.org/citation.cfm?doid=321796.321811,,,,1.0,-,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",O(mn),https://dl.acm.org/doi/10.1145/360825.360861,0.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,1000000.0,,1000000000000.0,,1e+18,,250000.0,1,,2.5E+11,1,,2.50E+17,1,,4,,,Combinatorics,Wagner%E2%80%93Fischer_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Wagner%E2%80%93Fischer_algorithm/monthly/20150701/20230731,1203.0,4092.0,1649.0,2010.0,2014.0,1660.0,1808.0,1856.0,1738.0,2062.0,1638.0,1474.0,1333.0,1703.0,1587.0,1646.0,2194.0,2004.0,1662.0,1831.0,1828.0,1573.0,1607.0,1390.0,1323.0,1495.0,1426.0,1884.0,2164.0,1485.0,1735.0,1998.0,2244.0,1864.0,1884.0,1399.0,1292.0,1255.0,1529.0,1815.0,2242.0,1487.0,1431.0,1614.0,1948.0,1843.0,1753.0,1249.0,1293.0,1399.0,1342.0,1709.0,1747.0,1198.0,1297.0,1516.0,1763.0,1490.0,1930.0,1458.0,1220.0,1230.0,1164.0,1553.0,1900.0,1116.0,1266.0,1221.0,1919.0,1393.0,1360.0,1242.0,1101.0,1015.0,1115.0,1525.0,1586.0,1180.0,1346.0,1147.0,1353.0,1343.0,1749.0,1069.0,958.0,990.0,1133.0,1325.0,1627.0,1035.0,1040.0,1077.0,1710.0,1098.0,1260.0,1054.0,988.0,1540.9381443298969,3,False,3,False
38,1.0,0.0,1,Ford–Fulkerson algorithm,,5.0,Maximum Flow,2.0,,54.0,,,1,1,O(E^2U),<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf Ford & Fulkerson (1955)],Ford & Fulkerson,1955,http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf,,,,1.0,2->3,7,"V: 7,
E: 5,
U: 3",O(E^2U),"V: number of vertices
E: number of edges
U: maximum edge capacity
Edge weights must be integers",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666.666667,4.623413252,1666666.667,30.6227766,1666666667.0,176.827941,56895766.95,0.004394,,5.69E+16,0.000004394,,5.69E+25,4.394E-09,,2,,,Combinatorics,Ford%E2%80%93Fulkerson_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ford%E2%80%93Fulkerson_algorithm/monthly/20150701/20230731,4829.0,4452.0,6009.0,9965.0,13498.0,12017.0,7113.0,6870.0,11003.0,12625.0,13133.0,8465.0,4574.0,4672.0,5844.0,11080.0,13968.0,12913.0,8929.0,7516.0,12727.0,12459.0,11210.0,8623.0,5645.0,4609.0,5803.0,10856.0,13603.0,11333.0,7695.0,6369.0,10167.0,12132.0,10418.0,7495.0,4803.0,4632.0,8729.0,10933.0,13682.0,12072.0,7702.0,6601.0,8701.0,11643.0,9412.0,6594.0,4473.0,3865.0,5122.0,9601.0,12861.0,10187.0,6480.0,6151.0,7171.0,11178.0,9761.0,6805.0,5299.0,4450.0,5486.0,9772.0,13639.0,12641.0,8122.0,6404.0,10793.0,11429.0,9850.0,7231.0,5443.0,4815.0,4963.0,8880.0,11437.0,10271.0,6974.0,6294.0,8696.0,9551.0,9363.0,7159.0,4751.0,4260.0,4717.0,9147.0,12176.0,10558.0,7549.0,6568.0,8859.0,9146.0,8084.0,6495.0,4472.0,8510.536082474227,5.66,False,5,True
39,1.0,0.0,1,Dinic's algorithm,,5.0,Maximum Flow,2.0,,55.0,,,1,1,O(V^2E),^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (1970)],Dinitz,1970,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,,,0.0,0,7,"V: 7,
E: 3",O(V^2E),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,20482476.0,384.6153865,,,,,,,,2,,,Combinatorics,Dinic%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dinic%27s_algorithm/monthly/20150701/20230731,1335.0,1130.0,1432.0,1923.0,1851.0,1601.0,1531.0,1730.0,2019.0,1687.0,2081.0,1663.0,1308.0,1328.0,1834.0,2206.0,2072.0,1997.0,1899.0,1836.0,2163.0,2006.0,2027.0,1935.0,1610.0,1352.0,1682.0,2347.0,2571.0,1935.0,1734.0,1713.0,1740.0,2323.0,1949.0,1747.0,1362.0,1273.0,1486.0,2196.0,2066.0,1715.0,1701.0,1578.0,1681.0,1968.0,1815.0,1697.0,1346.0,1141.0,1355.0,2036.0,2125.0,1943.0,1728.0,1571.0,1453.0,1860.0,2089.0,1742.0,1529.0,1307.0,1432.0,2281.0,2625.0,2512.0,2038.0,1682.0,2030.0,1913.0,2119.0,1818.0,1319.0,1145.0,1294.0,1856.0,2018.0,2227.0,1979.0,1651.0,2003.0,1811.0,1904.0,1962.0,1305.0,1259.0,1291.0,2271.0,2787.0,2024.0,1963.0,2006.0,2080.0,1784.0,1974.0,1812.0,1170.0,1797.9896907216496,5.66,False,5,True
40,1.0,0.0,1,Edmonds–Karp algorithm,,5.0,Maximum Flow,2.0,,56.0,,,1,1,O(E^2LogU),^ see above,,[https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf Edmonds & Karp (1972)],Edmonds & Karp,1972,https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf,,,,1.0,0,7,"V: 7,
E: 5,
U: 2",O(E^2 \log U),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1270306.607,0.196802881,,2.74454E+12,0.09109011,,4.22E+18,0.05925907,,2,,,Combinatorics,Edmonds%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Edmonds%E2%80%93Karp_algorithm/monthly/20150701/20230731,2155.0,1820.0,2682.0,3964.0,5154.0,5737.0,3224.0,3079.0,4089.0,4766.0,5062.0,3597.0,2086.0,2142.0,2871.0,5046.0,6064.0,5313.0,3463.0,2932.0,4925.0,5129.0,5019.0,4083.0,2283.0,2191.0,2397.0,5174.0,5574.0,5483.0,3655.0,2824.0,4451.0,5423.0,5208.0,3810.0,2378.0,2119.0,2239.0,4544.0,5806.0,5722.0,3764.0,3348.0,4343.0,5711.0,5068.0,3897.0,2604.0,2008.0,2450.0,4701.0,5843.0,4937.0,3405.0,3347.0,3383.0,5001.0,5295.0,3408.0,3138.0,2550.0,2584.0,4257.0,5980.0,5612.0,3941.0,3650.0,4823.0,4875.0,5090.0,3848.0,2680.0,2362.0,2199.0,4204.0,5130.0,5387.0,3561.0,3129.0,4064.0,5007.0,5189.0,4230.0,3086.0,2052.0,2222.0,5091.0,6062.0,5186.0,4134.0,3465.0,4904.0,4729.0,5359.0,3712.0,2599.0,4002.958762886598,5.66,False,5,True
41,1.0,0.0,1,Hopcroft–Karp algorithm,,5.0,Maximum Flow,2.0,,58.0,,,1,1,O(V^3),^ see above,,[http://alexander-karzanov.net/Publications/maxflow-acyc.pdf Karzanov (1974)],Karzanov,1974,http://alexander-karzanov.net/Publications/maxflow-acyc.pdf,,,,0.0,0,6,V: 6,O(V^3),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 1,
V: 5",O(V^2),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,12289485.0,641.0256755,,,,,,,,2,,,Combinatorics,Hopcroft%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hopcroft%E2%80%93Karp_algorithm/monthly/20150701/20230731,1720.0,1816.0,2402.0,2989.0,3162.0,3148.0,2535.0,2404.0,2772.0,3408.0,4049.0,2485.0,1657.0,2033.0,2392.0,3271.0,2940.0,2764.0,2903.0,2592.0,3376.0,3374.0,3774.0,3468.0,2301.0,2299.0,2487.0,3462.0,3392.0,2847.0,2901.0,2859.0,2809.0,2534.0,2782.0,2145.0,1553.0,1796.0,1872.0,2563.0,2780.0,2051.0,2024.0,1937.0,2237.0,2383.0,2181.0,1905.0,1517.0,1757.0,1792.0,3075.0,2644.0,2344.0,2767.0,2200.0,2125.0,2597.0,2492.0,1820.0,1631.0,1667.0,1793.0,2365.0,2335.0,2820.0,1932.0,1858.0,2594.0,2124.0,2436.0,1929.0,1665.0,1511.0,1601.0,1870.0,1781.0,1870.0,1882.0,1674.0,2277.0,1775.0,2358.0,1480.0,1395.0,1397.0,1465.0,1775.0,1914.0,1897.0,1792.0,2144.0,2422.0,2036.0,2199.0,1729.0,1482.0,2304.5257731958764,5.66,False,5,True
42,0.0,0.0,0,,,5.0,Maximum Flow,2.0,,60.0,,,1,1,O(VELog^2V),^ see above,,[https://core.ac.uk/download/pdf/81946904.pdf Galil & Naamad (1980)],Galil & Naamad,1980,https://core.ac.uk/download/pdf/81946904.pdf,,,,1.0,0,6.02,"V: 6.02,
E: 3",O(VE \log^2 V),"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,7559564.594,#VALUE!,,3.27011E+13,#VALUE!,,7.55E+19,#VALUE!,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.66,False,5,True
43,0.0,1.0,1,Matrix multiplication algorithm,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,74.0,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),(can be easily derived because additions and multiplications can be done in constant time),[- Naive algorithm (1940)],Naive algorithm,1940,-,,,,1.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",O(1) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Combinatorics,Matrix_multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_multiplication_algorithm/monthly/20150701/20230731,2285.0,3277.0,4624.0,5857.0,5282.0,4581.0,4968.0,6573.0,6166.0,6259.0,5603.0,4358.0,3656.0,4921.0,7524.0,7918.0,7822.0,6217.0,6132.0,7881.0,8424.0,7133.0,6310.0,4537.0,4658.0,5272.0,8381.0,9410.0,9094.0,6576.0,8244.0,8188.0,8454.0,7801.0,7848.0,5145.0,4909.0,5188.0,7799.0,8991.0,7445.0,6265.0,7086.0,7141.0,7414.0,7704.0,6637.0,4670.0,4537.0,5054.0,7409.0,10114.0,8423.0,6782.0,6953.0,8008.0,6870.0,8155.0,7165.0,5710.0,5032.0,5310.0,8565.0,10430.0,9259.0,8290.0,7712.0,8719.0,11557.0,9348.0,8001.0,6618.0,6293.0,7051.0,8227.0,8817.0,9414.0,6928.0,7600.0,7475.0,8150.0,6726.0,6208.0,4940.0,4496.0,4501.0,6729.0,12342.0,8564.0,5894.0,6807.0,6443.0,7958.0,5975.0,5539.0,4344.0,3980.0,6845.876288659794,4.18643195,False,1,True
44,1.0,0.0,1,Strassen algorithm,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,75.0,,,1,1,O(n^{(log7/log2)}) ~ O(n^2.807),Any distribution (runtime is same regardless of input),(can be easily derived because additions and multiplications can be done in constant time),[https://link.springer.com/article/10.1007%2FBF02165411 Strassen's algorithm (1969)],Strassen's algorithm,1969,https://link.springer.com/article/10.1007%2FBF02165411,,,,1.0,0,4.4035,"n: 5.807,
n^2: 4.4035",$O(n^{(log7/log2)}) ~ O(n^{2.807})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),http://www.cs.cmu.edu/afs/cs/academic/class/15750-s17/ScribeNotes/lecture1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,263633138.6,3.79314985,0.04704541,6.95E+16,14.38798578,0.09630409,1.83E+25,54.57578611,0.147880166,3,,,Combinatorics,Strassen_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Strassen_algorithm/monthly/20150701/20230731,4483.0,4794.0,7780.0,8745.0,7231.0,6882.0,7007.0,9184.0,8343.0,8934.0,7817.0,5386.0,4425.0,5532.0,8701.0,9973.0,9104.0,7279.0,7874.0,10330.0,10556.0,8681.0,7599.0,5525.0,4850.0,5871.0,8576.0,10863.0,9541.0,6588.0,7521.0,9771.0,8674.0,8129.0,9164.0,5293.0,6472.0,6057.0,9059.0,10695.0,8653.0,7048.0,7103.0,8229.0,8761.0,8417.0,7881.0,5598.0,4976.0,6085.0,9404.0,12744.0,9344.0,8189.0,8436.0,10365.0,8951.0,9151.0,7924.0,6326.0,5797.0,5260.0,9242.0,10907.0,8804.0,8666.0,7637.0,7636.0,11912.0,9053.0,7081.0,6110.0,6014.0,6616.0,8342.0,9478.0,9493.0,7584.0,7839.0,8762.0,9787.0,8526.0,7218.0,6340.0,5236.0,4973.0,7928.0,30563.0,12777.0,7893.0,8820.0,9969.0,10710.0,8448.0,8798.0,6627.0,5154.0,8194.577319587628,4.18643195,False,1,False
45,0.0,1.0,1,Computational complexity of matrix multiplication,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,76.0,,,1,1,O(n^{(log(143640)/log(70))}) ~ O(n^{2.795}),Any distribution (runtime is same regardless of input),(can be easily derived because additions and multiplications can be done in constant time),[https://ieeexplore.ieee.org/document/4567976 Pan's algorithm (1978)],Pan's algorithm,1978,https://ieeexplore.ieee.org/document/4567976,,,,1.0,0,4.3975,"n: 5.795,
n^2: 4.3975",$O(n^{(log(143640)/log(70))}) ~ O(n^{2.795})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,251188643.2,3.981071706,0.037025591,6.31E+16,15.84893192,0.075422076,1.58E+25,63.09573445,0.115240214,3,,,Combinatorics,Computational_complexity_of_matrix_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Computational_complexity_of_matrix_multiplication/monthly/20150701/20230731,11.0,29.0,25.0,23.0,11.0,25.0,23.0,18.0,15.0,6.0,14.0,34.0,14.0,11.0,27.0,32.0,19.0,31.0,18.0,15.0,15.0,16.0,13.0,18.0,25.0,23.0,15.0,34.0,28.0,21.0,16.0,32.0,14.0,34.0,29.0,35.0,24.0,26.0,26.0,32.0,38.0,25.0,25.0,33.0,28.0,30.0,40.0,29.0,33.0,29.0,50.0,50.0,47.0,30.0,60.0,39.0,20.0,30.0,65.0,30.0,23.0,12.0,26.0,100.0,72.0,62.0,59.0,30.0,36.0,22.0,731.0,2023.0,2236.0,2988.0,2542.0,3170.0,3251.0,2799.0,3355.0,3264.0,3787.0,3590.0,3558.0,3290.0,3198.0,3166.0,4435.0,12373.0,6470.0,4849.0,8182.0,5837.0,7137.0,6958.0,6038.0,4739.0,4550.0,1242.9484536082475,4.18643195,False,1,False
46,0.0,1.0,1,Computational complexity of matrix multiplication,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,79.0,,,1,1,O(n^{2.51665}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211020 Romani's algorithm (1981)],Romani's algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211020,,,,1.0,0,4.258325,"n: 5.51665,
n^2: 4.258325",$O(n^{2.51665})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,35809643.71,27.92543841,0.084596735,1.28E+15,779.8301105,0.176350077,4.59E+22,21777.09772,0.275865453,3,,,Combinatorics,Computational_complexity_of_matrix_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Computational_complexity_of_matrix_multiplication/monthly/20150701/20230731,11.0,29.0,25.0,23.0,11.0,25.0,23.0,18.0,15.0,6.0,14.0,34.0,14.0,11.0,27.0,32.0,19.0,31.0,18.0,15.0,15.0,16.0,13.0,18.0,25.0,23.0,15.0,34.0,28.0,21.0,16.0,32.0,14.0,34.0,29.0,35.0,24.0,26.0,26.0,32.0,38.0,25.0,25.0,33.0,28.0,30.0,40.0,29.0,33.0,29.0,50.0,50.0,47.0,30.0,60.0,39.0,20.0,30.0,65.0,30.0,23.0,12.0,26.0,100.0,72.0,62.0,59.0,30.0,36.0,22.0,731.0,2023.0,2236.0,2988.0,2542.0,3170.0,3251.0,2799.0,3355.0,3264.0,3787.0,3590.0,3558.0,3290.0,3198.0,3166.0,4435.0,12373.0,6470.0,4849.0,8182.0,5837.0,7137.0,6958.0,6038.0,4739.0,4550.0,1242.9484536082475,4.18643195,False,1,False
47,0.0,1.0,1,Computational complexity of matrix multiplication,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,80.0,,,1,1,O(n^{2.495548}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211038 Coppersmith–Winograd algorithm (1981)],Coppersmith–Winograd algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211038,,,,1.0,0,4.247774,"n: 5.495568,
n^2: 4.247774",$O(n^{2.495548})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,30549211.13,32.73406949,0.08880779,9.33254E+14,1071.519305,0.185502404,2.85E+22,35075.1874,0.290784253,3,,,Combinatorics,Computational_complexity_of_matrix_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Computational_complexity_of_matrix_multiplication/monthly/20150701/20230731,11.0,29.0,25.0,23.0,11.0,25.0,23.0,18.0,15.0,6.0,14.0,34.0,14.0,11.0,27.0,32.0,19.0,31.0,18.0,15.0,15.0,16.0,13.0,18.0,25.0,23.0,15.0,34.0,28.0,21.0,16.0,32.0,14.0,34.0,29.0,35.0,24.0,26.0,26.0,32.0,38.0,25.0,25.0,33.0,28.0,30.0,40.0,29.0,33.0,29.0,50.0,50.0,47.0,30.0,60.0,39.0,20.0,30.0,65.0,30.0,23.0,12.0,26.0,100.0,72.0,62.0,59.0,30.0,36.0,22.0,731.0,2023.0,2236.0,2988.0,2542.0,3170.0,3251.0,2799.0,3355.0,3264.0,3787.0,3590.0,3558.0,3290.0,3198.0,3166.0,4435.0,12373.0,6470.0,4849.0,8182.0,5837.0,7137.0,6958.0,6038.0,4739.0,4550.0,1242.9484536082475,4.18643195,False,1,False
48,1.0,0.0,1,Strassen algorithm,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,81.0,,,1,1,O(n^{(log54/log5)}) ~ O(n^{(2.4785)}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://ieeexplore.ieee.org/abstract/document/4568194 Strassen's algorithm (1986)],Strassen's algorithm,1986,https://ieeexplore.ieee.org/abstract/document/4568194,,,,1.0,0,4.23925,"n: 5.4785,
n^2: 4.23925",$O(n^{(log54/log5)}) ~ O(n^{(2.4785)})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,27542287.03,36.30780548,0.081217443,7.58578E+14,1318.256739,0.169031159,2.09E+22,47863.00923,0.263976881,3,,,Combinatorics,Strassen_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Strassen_algorithm/monthly/20150701/20230731,4483.0,4794.0,7780.0,8745.0,7231.0,6882.0,7007.0,9184.0,8343.0,8934.0,7817.0,5386.0,4425.0,5532.0,8701.0,9973.0,9104.0,7279.0,7874.0,10330.0,10556.0,8681.0,7599.0,5525.0,4850.0,5871.0,8576.0,10863.0,9541.0,6588.0,7521.0,9771.0,8674.0,8129.0,9164.0,5293.0,6472.0,6057.0,9059.0,10695.0,8653.0,7048.0,7103.0,8229.0,8761.0,8417.0,7881.0,5598.0,4976.0,6085.0,9404.0,12744.0,9344.0,8189.0,8436.0,10365.0,8951.0,9151.0,7924.0,6326.0,5797.0,5260.0,9242.0,10907.0,8804.0,8666.0,7637.0,7636.0,11912.0,9053.0,7081.0,6110.0,6014.0,6616.0,8342.0,9478.0,9493.0,7584.0,7839.0,8762.0,9787.0,8526.0,7218.0,6340.0,5236.0,4973.0,7928.0,30563.0,12777.0,7893.0,8820.0,9969.0,10710.0,8448.0,8798.0,6627.0,5154.0,8194.577319587628,4.18643195,False,1,False
49,0.0,1.0,1,Computational complexity of matrix multiplication,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,82.0,,,1,1,O(n^{2.3755}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf Coppersmith–Winograd algorithm (1990)],Coppersmith–Winograd algorithm,1990,http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf,,,,1.0,0,4.18775,"n: 5.3755,
n^2: 4.18775",$O(n^{2.3755})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13061708.88,76.55966069,0.09063643,1.70608E+14,5861.381645,0.189487822,2.23E+21,448745.3899,0.297298751,3,,,Combinatorics,Computational_complexity_of_matrix_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Computational_complexity_of_matrix_multiplication/monthly/20150701/20230731,11.0,29.0,25.0,23.0,11.0,25.0,23.0,18.0,15.0,6.0,14.0,34.0,14.0,11.0,27.0,32.0,19.0,31.0,18.0,15.0,15.0,16.0,13.0,18.0,25.0,23.0,15.0,34.0,28.0,21.0,16.0,32.0,14.0,34.0,29.0,35.0,24.0,26.0,26.0,32.0,38.0,25.0,25.0,33.0,28.0,30.0,40.0,29.0,33.0,29.0,50.0,50.0,47.0,30.0,60.0,39.0,20.0,30.0,65.0,30.0,23.0,12.0,26.0,100.0,72.0,62.0,59.0,30.0,36.0,22.0,731.0,2023.0,2236.0,2988.0,2542.0,3170.0,3251.0,2799.0,3355.0,3264.0,3787.0,3590.0,3558.0,3290.0,3198.0,3166.0,4435.0,12373.0,6470.0,4849.0,8182.0,5837.0,7137.0,6958.0,6038.0,4739.0,4550.0,1242.9484536082475,4.18643195,False,1,False
50,0.0,1.0,1,Matrix multiplication algorithm,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,83.0,,,1,1,O(n^{2.372873}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://theory.stanford.edu/~virgi/matrixmult-f.pdf Vassilevska Williams (2014)],Vassilevska Williams,2014,http://theory.stanford.edu/~virgi/matrixmult-f.pdf,,,,1.0,0,4.1864365,"n: 5.372873,
n^2: 4.1864365",$O(n^{2.372873})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13152248.0,76.03262956,0.060275971,1.79061E+14,5584.701947,0.123660554,2.40E+21,417349.5985,0.191112282,3,,,Combinatorics,Matrix_multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_multiplication_algorithm/monthly/20150701/20230731,2285.0,3277.0,4624.0,5857.0,5282.0,4581.0,4968.0,6573.0,6166.0,6259.0,5603.0,4358.0,3656.0,4921.0,7524.0,7918.0,7822.0,6217.0,6132.0,7881.0,8424.0,7133.0,6310.0,4537.0,4658.0,5272.0,8381.0,9410.0,9094.0,6576.0,8244.0,8188.0,8454.0,7801.0,7848.0,5145.0,4909.0,5188.0,7799.0,8991.0,7445.0,6265.0,7086.0,7141.0,7414.0,7704.0,6637.0,4670.0,4537.0,5054.0,7409.0,10114.0,8423.0,6782.0,6953.0,8008.0,6870.0,8155.0,7165.0,5710.0,5032.0,5310.0,8565.0,10430.0,9259.0,8290.0,7712.0,8719.0,11557.0,9348.0,8001.0,6618.0,6293.0,7051.0,8227.0,8817.0,9414.0,6928.0,7600.0,7475.0,8150.0,6726.0,6208.0,4940.0,4496.0,4501.0,6729.0,12342.0,8564.0,5894.0,6807.0,6443.0,7958.0,5975.0,5539.0,4344.0,3980.0,6845.876288659794,4.18643195,False,1,False
51,0.0,1.0,1,Computational complexity of matrix multiplication,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,84.0,,,1,1,O(n^{2.3728639}),Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://arxiv.org/abs/1401.7714 François Le Gall (2014)],François Le Gall,2014,https://arxiv.org/abs/1401.7714,,,,1.0,0,4.18643195,"n: 5.3728639,
n^2: 4.18643195",$O(n^{2.3728639})$,n: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Re-use of space in recursive branches,1.0,0.0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,12971792.71,77.09034691,0.060473938,1.68267E+14,5942.921586,0.124604974,2.18E+21,458141.8867,0.192614266,3,,,Combinatorics,Computational_complexity_of_matrix_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Computational_complexity_of_matrix_multiplication/monthly/20150701/20230731,11.0,29.0,25.0,23.0,11.0,25.0,23.0,18.0,15.0,6.0,14.0,34.0,14.0,11.0,27.0,32.0,19.0,31.0,18.0,15.0,15.0,16.0,13.0,18.0,25.0,23.0,15.0,34.0,28.0,21.0,16.0,32.0,14.0,34.0,29.0,35.0,24.0,26.0,26.0,32.0,38.0,25.0,25.0,33.0,28.0,30.0,40.0,29.0,33.0,29.0,50.0,50.0,47.0,30.0,60.0,39.0,20.0,30.0,65.0,30.0,23.0,12.0,26.0,100.0,72.0,62.0,59.0,30.0,36.0,22.0,731.0,2023.0,2236.0,2988.0,2542.0,3170.0,3251.0,2799.0,3355.0,3264.0,3787.0,3590.0,3558.0,3290.0,3198.0,3166.0,4435.0,12373.0,6470.0,4849.0,8182.0,5837.0,7137.0,6958.0,6038.0,4739.0,4550.0,1242.9484536082475,4.18643195,True,1,False
52,0.0,1.0,1,Graph coloring,O(1.3289^n),7.0,Graph Coloring,2.0,3-Graph Coloring,85.0,,,1,1,O((n+m)*3^n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute-force search (1852)],Brute-force search,1852,-,1,1.0,,1.0,0,8,"n: 8,
m: 3",$O((m+n)*3^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n) auxiliary,(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Graph_coloring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_coloring/monthly/20150701/20230731,8595.0,9704.0,10569.0,14397.0,18162.0,16327.0,12809.0,13019.0,14456.0,18490.0,16650.0,12019.0,8460.0,9375.0,11997.0,15343.0,18564.0,17243.0,15294.0,13597.0,16435.0,16459.0,16108.0,10991.0,9548.0,8849.0,10699.0,15654.0,19650.0,15924.0,12208.0,11554.0,15400.0,18167.0,15989.0,10890.0,8749.0,8990.0,11333.0,15340.0,17372.0,16382.0,12651.0,11333.0,14801.0,15602.0,14930.0,11109.0,9034.0,8019.0,10395.0,14844.0,18118.0,16018.0,12595.0,12815.0,12882.0,17872.0,17304.0,13292.0,10775.0,9098.0,11006.0,16481.0,19198.0,19340.0,16029.0,14510.0,17725.0,18458.0,16280.0,13563.0,12242.0,10132.0,10405.0,13796.0,16590.0,16085.0,14103.0,13315.0,13271.0,15728.0,16211.0,12798.0,10015.0,8391.0,9438.0,13519.0,17050.0,15558.0,13554.0,11785.0,14258.0,13430.0,13897.0,11289.0,9549.0,13713.886597938144,4,False,3,True
53,0.0,0.0,0,,O(1.7272^n),8.0,Graph Coloring,2.0,4-Graph Coloring,98.0,,,1,1,O((m+n)*4^n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[ Brute force (1852)],Brute force,1852,,1,1.0,,1.0,0,8,"n: 8,
m: 3",$O((m+n)*4^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n) auxiliary,(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,3,True
54,1.0,0.0,1,Gaussian elimination,,9.0,Linear System,2.0,"General Linear System; Positive Definite, Hermitian Matrix; Non-Definite, Symmetric Matrix; Toeplitz Matrix; Vandermonde Matrix",102.0,,,1,1,O(n^3),Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,1,1.0,,1.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,3.70E+16,1,,3.70E+25,1,,3,,,Numerical Analysis,Gaussian_elimination,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Gaussian_elimination/monthly/20150701/20230731,15718.0,18251.0,31192.0,33843.0,31236.0,25689.0,26522.0,29663.0,29500.0,28482.0,25850.0,17963.0,14537.0,20206.0,31157.0,36059.0,35924.0,25426.0,27779.0,30919.0,32654.0,30338.0,30035.0,19964.0,17397.0,21278.0,33339.0,38649.0,36315.0,28428.0,31472.0,33819.0,35398.0,37122.0,31551.0,18818.0,16758.0,21660.0,36074.0,40546.0,36621.0,31146.0,31395.0,34144.0,35808.0,30730.0,26582.0,18804.0,18064.0,22081.0,34593.0,37075.0,35316.0,28111.0,30437.0,30844.0,27609.0,31577.0,32235.0,25616.0,20464.0,22798.0,36561.0,40045.0,37827.0,32568.0,31988.0,32124.0,37719.0,32258.0,26482.0,23534.0,20020.0,23377.0,31353.0,34387.0,32118.0,25530.0,28008.0,27300.0,28962.0,27081.0,25393.0,18963.0,15535.0,18079.0,28520.0,33621.0,32247.0,22699.0,23865.0,24857.0,28613.0,26085.0,26843.0,19624.0,16170.0,28246.77319587629,2,False,2,False
55,1.0,0.0,1,Cholesky decomposition,O(n^2.37285956),9.0,Linear System,2.0,"Positive Definite, Hermitian Matrix",103.0,,,1,1,O(n^3),^see above (with caveat that matrix has to be positive definite and hermitian),^see above,[- Cholesky (1940)],Cholesky,1940,-,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,,,,,,,3,,,Numerical Analysis,Cholesky_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cholesky_decomposition/monthly/20150701/20230731,14013.0,13470.0,16973.0,21602.0,21569.0,17618.0,17299.0,21418.0,21838.0,22082.0,20725.0,17126.0,13913.0,16111.0,19524.0,24153.0,25093.0,19731.0,20262.0,22684.0,24496.0,22932.0,22618.0,18431.0,15627.0,16779.0,19985.0,25275.0,25159.0,20009.0,20330.0,21148.0,24842.0,24403.0,22572.0,17697.0,16086.0,16541.0,19630.0,26777.0,26027.0,20035.0,20233.0,21168.0,24032.0,23739.0,22017.0,17687.0,17551.0,16445.0,21022.0,27532.0,25780.0,20123.0,20831.0,22646.0,21282.0,24696.0,24242.0,19897.0,17936.0,16072.0,20465.0,25452.0,25349.0,22018.0,20578.0,21850.0,26272.0,25176.0,23107.0,19557.0,16802.0,17336.0,19391.0,24920.0,24336.0,19543.0,20328.0,22520.0,24378.0,21539.0,21960.0,17239.0,15658.0,15606.0,20953.0,26029.0,26930.0,20222.0,21475.0,23102.0,25951.0,22446.0,22514.0,19003.0,16538.0,20990.48453608248,2,False,2,False
56,0.0,0.0,0,,O(n^2.37285956),9.0,Linear System,2.0,"Non-Definite, Symmetric Matrix",105.0,,,1,1,O(n^3),"^see above (non-definite, symmetric)",^see above,[https://link.springer.com/article/10.1007/BF01931804 Aasen's method (1971)],Aasen's method,1971,https://link.springer.com/article/10.1007/BF01931804,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037.0,1,,,,,,,,3,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,2,False
57,1.0,0.0,1,Levinson recursion,"min(O(n^2), C*O(n*log^2(n)))",9.0,Linear System,2.0,Toeplitz Matrix,106.0,,,1,1,O(n^2),^see above (Toeplitz),^see above,[https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261 Levinson–Durbin recursion (1947)],Levinson–Durbin recursion,1947,https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261,,,,0.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,1000000.0,36.926037,,,,,,,,3,,,Numerical Analysis,Levinson_recursion,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Levinson_recursion/monthly/20150701/20230731,1112.0,1006.0,1254.0,1423.0,1616.0,1466.0,1455.0,1433.0,1446.0,1683.0,1650.0,1133.0,879.0,941.0,1108.0,1360.0,1471.0,1334.0,1289.0,1206.0,1556.0,1495.0,1584.0,1169.0,932.0,968.0,1063.0,1433.0,1518.0,1262.0,1344.0,1106.0,1430.0,1636.0,1723.0,1206.0,901.0,914.0,1112.0,1255.0,1368.0,1580.0,1259.0,1246.0,1483.0,1688.0,1626.0,1167.0,1122.0,993.0,1082.0,1454.0,1509.0,1401.0,1234.0,1232.0,1314.0,1518.0,1371.0,1173.0,1017.0,916.0,968.0,1236.0,1381.0,1286.0,1151.0,998.0,1402.0,1261.0,1256.0,1060.0,820.0,823.0,978.0,1160.0,1146.0,1020.0,870.0,876.0,1191.0,1134.0,1147.0,974.0,797.0,749.0,847.0,1098.0,1188.0,1045.0,938.0,1105.0,1368.0,1196.0,1252.0,968.0,1038.0,1220.1237113402062,2,False,2,False
58,1.0,0.0,1,Bareiss algorithm,"min(O(n^2), C*O(n*log^2(n)))",9.0,Linear System,2.0,Toeplitz Matrix,107.0,,,1,1,O(n^2),^see above (Toeplitz),^see above,[https://link.springer.com/article/10.1007/BF02163269 Bareiss Algorithm (1969)],Bareiss Algorithm,1969,https://link.springer.com/article/10.1007/BF02163269,,,,0.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889.0,333,,,,,,,,3,,,Numerical Analysis,Bareiss_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bareiss_algorithm/monthly/20150701/20230731,320.0,363.0,511.0,690.0,490.0,449.0,527.0,498.0,481.0,505.0,563.0,358.0,337.0,333.0,599.0,602.0,573.0,449.0,459.0,502.0,555.0,494.0,558.0,430.0,394.0,339.0,486.0,616.0,547.0,596.0,624.0,535.0,620.0,599.0,658.0,489.0,414.0,440.0,591.0,835.0,661.0,543.0,564.0,432.0,643.0,579.0,515.0,426.0,464.0,443.0,951.0,808.0,739.0,576.0,606.0,666.0,601.0,751.0,722.0,585.0,466.0,492.0,659.0,839.0,911.0,722.0,669.0,668.0,926.0,807.0,719.0,553.0,480.0,536.0,611.0,866.0,800.0,713.0,755.0,681.0,699.0,624.0,684.0,578.0,374.0,411.0,695.0,821.0,848.0,802.0,634.0,637.0,764.0,671.0,707.0,490.0,533.0,593.2886597938144,2,False,2,False
59,0.0,1.0,1,Vandermonde matrix,O(n^2),9.0,Linear System,2.0,Vandermonde Matrix,108.0,,,1,1,O(n^2),^see above (Vandermonde),^see above,[https://www.jstor.org/stable/2004623?seq=1 Bjorck-Pereyra (1970)],Bjorck-Pereyra,1970,https://www.jstor.org/stable/2004623?seq=1,,,,0.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2) total,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1.0,0.0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889.0,333,,,,,,,,3,,,Numerical Analysis,Vandermonde_matrix,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Vandermonde_matrix/monthly/20150701/20230731,3907.0,3669.0,5486.0,7179.0,7254.0,6016.0,5999.0,6868.0,7358.0,6811.0,6422.0,4901.0,3976.0,4263.0,6389.0,8142.0,8436.0,6108.0,6523.0,7633.0,7612.0,6960.0,6487.0,5358.0,4435.0,4390.0,6827.0,8793.0,8706.0,6808.0,7463.0,7293.0,8416.0,8454.0,7929.0,5527.0,5154.0,4707.0,7105.0,9344.0,10027.0,6541.0,7398.0,8047.0,9202.0,8610.0,7548.0,5807.0,5108.0,5088.0,7226.0,10093.0,10045.0,6999.0,7507.0,8542.0,7866.0,8963.0,8958.0,6779.0,6524.0,5573.0,8290.0,11036.0,10818.0,8403.0,8409.0,8926.0,10122.0,10000.0,8234.0,7191.0,6041.0,5709.0,9376.0,10287.0,10906.0,8223.0,8512.0,9555.0,9890.0,9322.0,9219.0,7435.0,5814.0,6251.0,9430.0,11587.0,11264.0,9018.0,8370.0,9534.0,10519.0,9167.0,8516.0,7000.0,5834.0,7605.845360824742,2,False,2,False
60,1.0,0.0,1,Fourier–Motzkin elimination,,10.0,Linear Programming,2.0,,110.0,,,1,1,O((m/4)^{(2^n)}),Any distribution (runtime is same regardless of input),"(same behavior across all inputs, at least for naive implementation)",[- Fourier–Motzkin elimination (1940)],Fourier–Motzkin elimination,1940,-,4,1.0,http://www.cs.cmu.edu/~odonnell/toolkit13/lecture13-anonymous.pdf,1.0,0,8,"n: 8,
m: 7",O((m/4)^{(2^n)}),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,8,"n: 8,
m: 7",O((m/4)^{(2^n)}),(can be easily derived? you have that many inequalities),1.0,0.0,,0,,0,,0,0,,0,0,https://gallica.bnf.fr/ark:/12148/bpt6k32227/f53,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,inf,,inf,,inf,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,Fourier%E2%80%93Motzkin_elimination,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fourier%E2%80%93Motzkin_elimination/monthly/20150701/20230731,553.0,538.0,830.0,771.0,782.0,774.0,720.0,946.0,886.0,836.0,786.0,761.0,569.0,547.0,819.0,858.0,994.0,752.0,880.0,940.0,1013.0,875.0,975.0,667.0,673.0,611.0,775.0,908.0,1020.0,779.0,912.0,830.0,1026.0,871.0,879.0,588.0,564.0,594.0,880.0,991.0,862.0,750.0,873.0,874.0,1036.0,1098.0,980.0,798.0,681.0,731.0,924.0,981.0,1062.0,938.0,957.0,1046.0,817.0,963.0,1002.0,1022.0,754.0,770.0,973.0,1058.0,968.0,900.0,868.0,1072.0,1155.0,1238.0,1334.0,799.0,620.0,688.0,943.0,1173.0,891.0,820.0,865.0,787.0,1036.0,1057.0,827.0,746.0,679.0,651.0,869.0,1047.0,1079.0,836.0,878.0,950.0,1075.0,1035.0,1032.0,797.0,729.0,869.7628865979382,5.5,False,3,False
61,1.0,0.0,1,Ellipsoid method,,10.0,Linear Programming,2.0,,111.0,,,1,1,O(n^6 * L^2 logL loglogL),Any distribution (runtime is same regardless of input),(same behavior across all inputs?),[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Khachiyan Ellipsoid algorithm  (1979)],Khachiyan Ellipsoid algorithm,1979,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,,,1.0,1->2,7,"n: 7,
L: 5.02",O(n^6 * L^2 \log L \log\log L),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),see orginal paper (noting that O(alpha*log(H*alpha)) = O(L)),0.0,1.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Linear_programming#Ellipsoid_algorithm,_following_Khachiyan",Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,225400000000.0,Inf,,7.13E+24,Inf,,2.25E+38,Inf,,1,,,Numerical Analysis,Ellipsoid_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ellipsoid_method/monthly/20150701/20230731,1146.0,972.0,1207.0,1600.0,1566.0,1475.0,1473.0,1295.0,1527.0,1474.0,1583.0,1515.0,1039.0,1012.0,1076.0,1420.0,1459.0,1397.0,1404.0,1369.0,1646.0,1411.0,1440.0,1270.0,1150.0,1052.0,1313.0,1495.0,1711.0,1252.0,1397.0,1375.0,1481.0,1579.0,1392.0,1136.0,1007.0,944.0,1151.0,1444.0,1691.0,1363.0,1332.0,1146.0,1613.0,1655.0,1348.0,1152.0,1259.0,1129.0,1235.0,1464.0,1673.0,1657.0,1481.0,1483.0,1521.0,1553.0,1387.0,1341.0,1118.0,976.0,1130.0,1435.0,1367.0,1485.0,1249.0,1278.0,1485.0,1561.0,1406.0,1163.0,1204.0,836.0,990.0,1298.0,1375.0,1229.0,2057.0,1381.0,1375.0,1419.0,1191.0,1136.0,1034.0,965.0,1017.0,1419.0,1600.0,1244.0,1139.0,1134.0,1598.0,1146.0,1359.0,1140.0,989.0,1330.5773195876288,5.5,False,3,True
62,0.0,0.0,0,,O(n*log(n)+k),11.0,Line segment intersection,2.0,"Reporting all intersection points, line segments",118.0,,,1,1,O(n^2),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Naive (1940)],Naive,1940,-,1,1.0,,1.0,1,5,n: 5,O(n^2),"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,True
63,1.0,0.0,1,Bentley–Ottmann algorithm,O(n*log(n)+k),11.0,Line segment intersection,2.0,"Reporting all intersection points, line segments",119.0,,,1,1,O( n log n + k log n),^see above,^see above,[https://doi.org/10.1109%2FTC.1979.1675432 Bentley–Ottmann algorithm (1979)],Bentley–Ottmann algorithm,1979,https://doi.org/10.1109%2FTC.1979.1675432,,,,1.0,4->5,4,"n: 4,
k: 3",O( n \log n + k \log n),"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,n: 3,O(n),https://dl.acm.org/doi/pdf/10.1145/147508.147511,0.0,0.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,k=n^0.5,,,,,,,10280.93005,97.26746458,0.124536427,19951500.14,50121.5444,0.319816177,29898298291,33446719.62,0.559308843,4,,,Image Processing,Bentley%E2%80%93Ottmann_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bentley%E2%80%93Ottmann_algorithm/monthly/20150701/20230731,1040.0,1161.0,1283.0,2058.0,1934.0,1611.0,1512.0,1718.0,2042.0,2009.0,1703.0,1456.0,1317.0,1383.0,1496.0,1948.0,2290.0,1825.0,1538.0,1630.0,1762.0,2313.0,1804.0,1489.0,1192.0,1353.0,1369.0,1882.0,1938.0,1666.0,1787.0,1568.0,1602.0,1718.0,2473.0,1430.0,1217.0,1307.0,1470.0,1707.0,1667.0,1530.0,1513.0,1548.0,2162.0,1919.0,1863.0,1549.0,1339.0,1162.0,1444.0,1756.0,1747.0,2244.0,1552.0,1433.0,2322.0,1907.0,1565.0,1351.0,1226.0,1209.0,1354.0,1880.0,1832.0,2163.0,1606.0,1353.0,1732.0,1712.0,1619.0,1609.0,1258.0,1215.0,1409.0,1545.0,1724.0,2355.0,1578.0,1448.0,1594.0,1578.0,1371.0,1498.0,1300.0,1214.0,1330.0,1475.0,1583.0,1301.0,1533.0,1613.0,1881.0,1453.0,1595.0,1265.0,1272.0,1610.8969072164948,2,False,1,False
64,0.0,0.0,0,,,12.0,Convex Hull,2.0,2-dimensional,127.0,,,1,1,O(n^3),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute Force (1935)],Brute Force,1935,-,1,1.0,http://math.uaa.alaska.edu/~afkjm/cs351/handouts/bruteforce,1.0,0,6,n: 6,O(n^3),"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1000.0,,1000000.0,,1000000000.0,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#VALUE!,False,1,False
65,1.0,0.0,1,Gift wrapping algorithm,,12.0,Convex Hull,2.0,2-dimensional,128.0,,,1,1,O(nh),^see above,^see above,[https://linkinghub.elsevier.com/retrieve/pii/0020019073900203 Jarvis (1973)],Jarvis,1973,https://linkinghub.elsevier.com/retrieve/pii/0020019073900203,,,,0.0,0,3,"n: 3,
h: 3",O(nh),"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1.0,0.199353946,1.0,0.438449888,1.0,0.72521055,31622.7766,31622.7766,0.313472706,1000000000,1000000000,0.72521055,3.16228E+13,3.16228E+13,1.26601697,3,,,Image Processing,Gift_wrapping_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Gift_wrapping_algorithm/monthly/20150701/20230731,1567.0,1530.0,1851.0,2426.0,2652.0,2294.0,2190.0,1992.0,2291.0,2967.0,2579.0,1930.0,1509.0,1652.0,2439.0,3551.0,3136.0,2637.0,2349.0,2204.0,2642.0,2496.0,3022.0,2479.0,1729.0,1773.0,1991.0,2823.0,2967.0,2503.0,2573.0,2992.0,2661.0,3044.0,2945.0,2109.0,1914.0,1795.0,2394.0,2612.0,2886.0,2790.0,2393.0,2998.0,3146.0,2710.0,2211.0,2038.0,2959.0,1926.0,2502.0,2549.0,2549.0,2315.0,2221.0,2095.0,2225.0,2560.0,2276.0,1855.0,1839.0,1546.0,1516.0,2489.0,2568.0,2266.0,2244.0,2045.0,2860.0,2332.0,2844.0,2041.0,1498.0,1511.0,2675.0,2360.0,2551.0,2079.0,1983.0,1815.0,2041.0,2039.0,2058.0,1832.0,1454.0,1410.0,1803.0,2013.0,2759.0,2248.0,2031.0,1832.0,2311.0,2114.0,2002.0,1736.0,1426.0,2274.072164948453,#VALUE!,False,1,True
66,0.0,0.0,0,,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",157.0,,,1,1,O(E + Vlog^2(V)),Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution),https://dl.acm.org/doi/10.5555/2791171.2791187,[https://link.springer.com/chapter/10.1007/BFb0028279 Kruskal’s algorithm with demand-sorting (1991)],Kruskal’s algorithm with demand-sorting,1991,https://link.springer.com/chapter/10.1007/BFb0028279,,,,0.0,0,5.01,"V: 5.01,
E: 3",O(E \log V),"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120.0,0.158001245,,,,,,,,5,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
67,0.0,0.0,0,,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",158.0,,,1,1,O(E + Vlog^2(V)),Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution),https://dl.acm.org/doi/10.5555/2791171.2791187,[https://dl.acm.org/citation.cfm?id=2791187 Quick Kruskal algorithm (2006)],Quick Kruskal algorithm,2006,https://dl.acm.org/citation.cfm?id=2791187,,,,0.0,0,5.01,"V: 5.01,
E: 3",O(E \log V),"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120.0,0.158001245,,,,,,,,5,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
68,0.0,1.0,1,Minimum spanning tree,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",162.0,,,1,1,O(E),Randomness within the algorithm steps themselves,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,[http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf Karger; Klein & Tarjan (1995)],Karger; Klein & Tarjan,1995,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,4,1.0,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,1.0,5->6,5,"V: 5,
E: 3","O(min(V^2, ElogV))","V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),can be easily derived,1.0,0.0,,1,Las Vegas,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583.0,8.704974271,0.040127746,583333.3333,18.66853416,0.054656649,583333333.3,28.63431845,0.062891299,5,,,Combinatorics,Minimum_spanning_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Minimum_spanning_tree/monthly/20150701/20230731,13618.0,14238.0,18604.0,24317.0,27624.0,25545.0,17857.0,21491.0,22689.0,28622.0,26283.0,18198.0,14098.0,15640.0,20628.0,26755.0,33149.0,28472.0,21382.0,22545.0,25639.0,28048.0,25944.0,17346.0,13943.0,13702.0,17654.0,25145.0,29942.0,25608.0,18458.0,19937.0,23720.0,29729.0,25716.0,17185.0,14528.0,13610.0,17734.0,25133.0,27780.0,25896.0,18918.0,19767.0,24230.0,25330.0,22196.0,15803.0,13102.0,12736.0,16744.0,25324.0,28846.0,25144.0,17886.0,19216.0,21299.0,26631.0,27873.0,22476.0,18410.0,15720.0,18993.0,29311.0,30833.0,31180.0,22588.0,20176.0,28405.0,28071.0,24588.0,24110.0,21334.0,20598.0,20008.0,24487.0,28688.0,28015.0,21850.0,23349.0,26528.0,28337.0,26919.0,20273.0,17238.0,14712.0,16523.0,23803.0,29603.0,26610.0,19869.0,19867.0,22136.0,21378.0,19445.0,16503.0,12263.0,22169.01030927835,5,True,3,False
69,0.0,0.0,0,,,15.0,Closest Pair Problem,2.0,"k-dimensional space, l_m (or l_infty) norm",164.0,,,1,1,O(kn^2),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Naive Implementation (1975)],Naive Implementation,1975,-,1,1.0,,1.0,0,5,"n: 5,
k: 3",O(kn^2),"n: number of points
k: dimension of space",n,,,Real RAM,words,1,n: 1,O(1),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,True
70,0.0,1.0,1,LU decomposition,,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,209.0,,,1,1,O(n^3),Any,,[ Doolittle Algorithm (1878)],Doolittle Algorithm,1878,,2,1.0,https://www.geeksforgeeks.org/doolittle-algorithm-lu-decomposition/,1.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,"This is essentially just Gaussian elimination

Original paper is ""Method employed in the solution of normal equations and the adjustment of a triangularization""",,Numerical Analysis,LU_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/LU_decomposition/monthly/20150701/20230731,11093.0,10950.0,18335.0,23600.0,20505.0,16770.0,16285.0,21552.0,21401.0,19728.0,19675.0,13898.0,11062.0,13232.0,19887.0,27402.0,24450.0,18971.0,18374.0,24116.0,23179.0,20405.0,19578.0,14531.0,11697.0,13365.0,20231.0,27361.0,24053.0,18839.0,19273.0,22743.0,21803.0,22271.0,19855.0,14136.0,12219.0,13086.0,20207.0,26316.0,21299.0,17719.0,17570.0,21679.0,22133.0,19569.0,18469.0,13185.0,12007.0,12902.0,21366.0,27456.0,23257.0,18360.0,19126.0,22400.0,19266.0,20804.0,20748.0,16932.0,14170.0,13624.0,22417.0,28471.0,23644.0,19792.0,18518.0,21322.0,25066.0,20561.0,17630.0,15481.0,12562.0,12792.0,18719.0,23520.0,20961.0,17420.0,17790.0,20824.0,20572.0,18693.0,17331.0,13504.0,10472.0,11997.0,18137.0,22463.0,20058.0,15593.0,15479.0,17584.0,18537.0,15119.0,15431.0,12615.0,9957.0,18572.23711340206,2.51,False,1,True
71,0.0,1.0,1,LU decomposition,,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,210.0,,,1,1,O(n^3),,,[https://en.wikipedia.org/wiki/Crout_matrix_decomposition Crout and LUP algorithms (2007)],Crout and LUP algorithms,2007,https://en.wikipedia.org/wiki/Crout_matrix_decomposition,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000.0,1,,,,,,,,3,Slight variation of Doolittle,,Numerical Analysis,LU_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/LU_decomposition/monthly/20150701/20230731,11093.0,10950.0,18335.0,23600.0,20505.0,16770.0,16285.0,21552.0,21401.0,19728.0,19675.0,13898.0,11062.0,13232.0,19887.0,27402.0,24450.0,18971.0,18374.0,24116.0,23179.0,20405.0,19578.0,14531.0,11697.0,13365.0,20231.0,27361.0,24053.0,18839.0,19273.0,22743.0,21803.0,22271.0,19855.0,14136.0,12219.0,13086.0,20207.0,26316.0,21299.0,17719.0,17570.0,21679.0,22133.0,19569.0,18469.0,13185.0,12007.0,12902.0,21366.0,27456.0,23257.0,18360.0,19126.0,22400.0,19266.0,20804.0,20748.0,16932.0,14170.0,13624.0,22417.0,28471.0,23644.0,19792.0,18518.0,21322.0,25066.0,20561.0,17630.0,15481.0,12562.0,12792.0,18719.0,23520.0,20961.0,17420.0,17790.0,20824.0,20572.0,18693.0,17331.0,13504.0,10472.0,11997.0,18137.0,22463.0,20058.0,15593.0,15479.0,17584.0,18537.0,15119.0,15431.0,12615.0,9957.0,18572.23711340206,2.51,False,1,True
72,0.0,1.0,1,LU decomposition,,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,215.0,,,1,0,O(n^3),,,[https://arxiv.org/abs/math/0506382 Okunev; Johnson (1997)],Okunev; Johnson,1997,https://arxiv.org/abs/math/0506382,,,,0.0,0,6,"n: 6,
n^2: 4.5",O(n^3),n: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$O(1)$,Derived: all in-place calculations,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Numerical Analysis,LU_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/LU_decomposition/monthly/20150701/20230731,11093.0,10950.0,18335.0,23600.0,20505.0,16770.0,16285.0,21552.0,21401.0,19728.0,19675.0,13898.0,11062.0,13232.0,19887.0,27402.0,24450.0,18971.0,18374.0,24116.0,23179.0,20405.0,19578.0,14531.0,11697.0,13365.0,20231.0,27361.0,24053.0,18839.0,19273.0,22743.0,21803.0,22271.0,19855.0,14136.0,12219.0,13086.0,20207.0,26316.0,21299.0,17719.0,17570.0,21679.0,22133.0,19569.0,18469.0,13185.0,12007.0,12902.0,21366.0,27456.0,23257.0,18360.0,19126.0,22400.0,19266.0,20804.0,20748.0,16932.0,14170.0,13624.0,22417.0,28471.0,23644.0,19792.0,18518.0,21322.0,25066.0,20561.0,17630.0,15481.0,12562.0,12792.0,18719.0,23520.0,20961.0,17420.0,17790.0,20824.0,20572.0,18693.0,17331.0,13504.0,10472.0,11997.0,18137.0,22463.0,20058.0,15593.0,15479.0,17584.0,18537.0,15119.0,15431.0,12615.0,9957.0,18572.23711340206,2.51,False,1,True
73,1.0,0.0,1,A* search algorithm,O(b^d),21.0,Informed Search,2.0,Informed Search,217.0,,,1,1,O(b^d),,,[https://ieeexplore.ieee.org/document/4082128/ A* Algorithm (1968)],A* Algorithm,1968,https://ieeexplore.ieee.org/document/4082128/,,,,0.0,0,8,"b: 7,
d: 8",O(b^d),"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),https://en.wikipedia.org/wiki/A*_search_algorithm: Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,https://www.cs.auckland.ac.nz/compsci767s2c/projectReportExamples.d/astarNilsson.pdf,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,A%2A_search_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/A%2A_search_algorithm/monthly/20150701/20230731,84362.0,92321.0,75616.0,68298.0,56757.0,56290.0,46274.0,55712.0,61857.0,60093.0,59840.0,44287.0,38956.0,42286.0,58680.0,80003.0,105079.0,85714.0,84247.0,83761.0,88274.0,82978.0,95519.0,95780.0,106169.0,93238.0,118642.0,147583.0,118404.0,97597.0,91549.0,71888.0,71943.0,64886.0,58747.0,44171.0,40130.0,42600.0,57770.0,68224.0,65337.0,64380.0,63678.0,58271.0,74481.0,68675.0,54616.0,43092.0,42560.0,49068.0,53785.0,64802.0,56320.0,50285.0,50413.0,55417.0,54421.0,56305.0,55474.0,44846.0,38893.0,37408.0,50837.0,59484.0,63161.0,59795.0,54315.0,90670.0,102410.0,87466.0,56863.0,42110.0,37550.0,39782.0,52649.0,58922.0,58231.0,66613.0,47703.0,47909.0,52599.0,48038.0,48764.0,41561.0,35119.0,36878.0,46910.0,51749.0,56307.0,67007.0,52161.0,50819.0,57050.0,49916.0,49448.0,45574.0,37204.0,62913.67010309279,8,True,8,True
74,1.0,0.0,1,Bidirectional search,O(b^d),21.0,Informed Search,2.0,Informed Search,218.0,,,1,1,O(b^{(d/2)}),,https://arxiv.org/pdf/1703.03868.pdf for experimental results,[https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf Bidirectional A* Algorithm (2007)],Bidirectional A* Algorithm,2007,https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf,2,1.0,http://theory.stanford.edu/~amitp/GameProgramming/Variations.html,1.0,0,8,"b: 7,
d: 8",$O(b^{(d/2)})$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^{(d/2)}),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,https://en.wikipedia.org/wiki/Bidirectional_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Robotics,Bidirectional_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bidirectional_search/monthly/20150701/20230731,1864.0,2468.0,2102.0,2304.0,1813.0,1469.0,1428.0,2123.0,2179.0,2364.0,1899.0,1378.0,1147.0,1362.0,2833.0,2657.0,2307.0,2035.0,2315.0,2659.0,2518.0,1882.0,2079.0,1862.0,1206.0,1340.0,3197.0,2615.0,1914.0,1519.0,1520.0,2032.0,2057.0,1783.0,1564.0,1217.0,1149.0,1225.0,2030.0,1878.0,1640.0,1301.0,1369.0,1735.0,1892.0,2020.0,1444.0,1066.0,1059.0,1089.0,1741.0,1897.0,1451.0,1221.0,1441.0,1922.0,1470.0,1580.0,1919.0,1355.0,1334.0,1139.0,1898.0,1902.0,2142.0,1512.0,1413.0,1927.0,1868.0,1518.0,1608.0,1144.0,1140.0,1166.0,1519.0,1483.0,1735.0,1348.0,1552.0,1508.0,1426.0,1469.0,1710.0,1172.0,974.0,1322.0,1638.0,1471.0,1627.0,1545.0,1638.0,1577.0,1429.0,1220.0,1198.0,1035.0,714.0,1669.340206185567,8,True,8,True
75,0.0,1.0,1,A* search algorithm,O(b^d),21.0,Informed Search,2.0,Informed Search,224.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf Fringe Saving A* (FSA*) (2008)],Fringe Saving A* (FSA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,A%2A_search_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/A%2A_search_algorithm/monthly/20150701/20230731,84362.0,92321.0,75616.0,68298.0,56757.0,56290.0,46274.0,55712.0,61857.0,60093.0,59840.0,44287.0,38956.0,42286.0,58680.0,80003.0,105079.0,85714.0,84247.0,83761.0,88274.0,82978.0,95519.0,95780.0,106169.0,93238.0,118642.0,147583.0,118404.0,97597.0,91549.0,71888.0,71943.0,64886.0,58747.0,44171.0,40130.0,42600.0,57770.0,68224.0,65337.0,64380.0,63678.0,58271.0,74481.0,68675.0,54616.0,43092.0,42560.0,49068.0,53785.0,64802.0,56320.0,50285.0,50413.0,55417.0,54421.0,56305.0,55474.0,44846.0,38893.0,37408.0,50837.0,59484.0,63161.0,59795.0,54315.0,90670.0,102410.0,87466.0,56863.0,42110.0,37550.0,39782.0,52649.0,58922.0,58231.0,66613.0,47703.0,47909.0,52599.0,48038.0,48764.0,41561.0,35119.0,36878.0,46910.0,51749.0,56307.0,67007.0,52161.0,50819.0,57050.0,49916.0,49448.0,45574.0,37204.0,62913.67010309279,8,True,8,True
76,0.0,1.0,1,A* search algorithm,O(b^d),21.0,Informed Search,2.0,Informed Search,225.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf Generalized Adaptive A* (GAA*) (2008)],Generalized Adaptive A* (GAA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,A%2A_search_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/A%2A_search_algorithm/monthly/20150701/20230731,84362.0,92321.0,75616.0,68298.0,56757.0,56290.0,46274.0,55712.0,61857.0,60093.0,59840.0,44287.0,38956.0,42286.0,58680.0,80003.0,105079.0,85714.0,84247.0,83761.0,88274.0,82978.0,95519.0,95780.0,106169.0,93238.0,118642.0,147583.0,118404.0,97597.0,91549.0,71888.0,71943.0,64886.0,58747.0,44171.0,40130.0,42600.0,57770.0,68224.0,65337.0,64380.0,63678.0,58271.0,74481.0,68675.0,54616.0,43092.0,42560.0,49068.0,53785.0,64802.0,56320.0,50285.0,50413.0,55417.0,54421.0,56305.0,55474.0,44846.0,38893.0,37408.0,50837.0,59484.0,63161.0,59795.0,54315.0,90670.0,102410.0,87466.0,56863.0,42110.0,37550.0,39782.0,52649.0,58922.0,58231.0,66613.0,47703.0,47909.0,52599.0,48038.0,48764.0,41561.0,35119.0,36878.0,46910.0,51749.0,56307.0,67007.0,52161.0,50819.0,57050.0,49916.0,49448.0,45574.0,37204.0,62913.67010309279,8,True,8,True
77,1.0,0.0,1,Iterative deepening A*,O(b^d),21.0,Informed Search,2.0,Informed Search,226.0,,,1,1,O(b^d),,,[https://linkinghub.elsevier.com/retrieve/pii/0004370285900840 Iterative Deepening A* (IDA*) (1985)],Iterative Deepening A* (IDA*),1985,https://linkinghub.elsevier.com/retrieve/pii/0004370285900840,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Iterative_deepening_A%2A,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Iterative_deepening_A%2A/monthly/20150701/20230731,985.0,1607.0,1792.0,2512.0,2601.0,1811.0,1725.0,2381.0,2634.0,2481.0,2038.0,1565.0,1069.0,1393.0,2169.0,3016.0,2634.0,2511.0,2290.0,4479.0,3631.0,3329.0,2997.0,2170.0,1809.0,1678.0,4028.0,3630.0,2848.0,2272.0,2267.0,2412.0,2907.0,3375.0,2409.0,1962.0,1471.0,1733.0,2675.0,3243.0,3002.0,2318.0,2316.0,2673.0,3066.0,3632.0,2224.0,1905.0,1461.0,1634.0,2328.0,3834.0,2986.0,2707.0,2778.0,2691.0,3317.0,2851.0,2652.0,2017.0,1501.0,1602.0,2613.0,3256.0,4485.0,2928.0,2981.0,3112.0,4646.0,3806.0,2171.0,1806.0,1916.0,1597.0,2000.0,3516.0,4262.0,2951.0,2382.0,4373.0,4051.0,4081.0,2484.0,1916.0,1577.0,1698.0,2201.0,3234.0,3417.0,2842.0,2832.0,2912.0,2518.0,2381.0,1861.0,1587.0,1077.0,2572.2061855670104,8,True,8,True
78,1.0,0.0,1,Jump point search,O(b^d),21.0,Informed Search,2.0,Informed Search,227.0,,,1,1,O(b^d),,,[http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf Jump Point Search (JPS) (2011)],Jump Point Search (JPS),2011,http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Jump_point_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Jump_point_search/monthly/20150701/20230731,1429.0,2086.0,1253.0,1078.0,1547.0,864.0,838.0,925.0,1089.0,1045.0,936.0,739.0,716.0,783.0,838.0,995.0,1120.0,931.0,1093.0,1849.0,1334.0,1227.0,1139.0,1004.0,974.0,882.0,1945.0,1490.0,1169.0,1054.0,1111.0,962.0,1019.0,1141.0,1128.0,936.0,947.0,1088.0,948.0,1012.0,939.0,1105.0,1104.0,922.0,1055.0,1218.0,894.0,868.0,714.0,780.0,855.0,1331.0,977.0,934.0,894.0,891.0,849.0,1057.0,1120.0,824.0,988.0,880.0,883.0,899.0,1135.0,1030.0,991.0,895.0,1014.0,1073.0,881.0,788.0,3137.0,1983.0,915.0,899.0,1112.0,886.0,2143.0,784.0,852.0,886.0,870.0,760.0,907.0,945.0,856.0,749.0,1189.0,1122.0,1027.0,849.0,896.0,814.0,901.0,754.0,751.0,1056.0721649484535,8,True,8,True
79,1.0,0.0,1,Lifelong Planning A*,O(b^d),21.0,Informed Search,2.0,Informed Search,228.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf Lifelong Planning A* (LPA*) (2001)],Lifelong Planning A* (LPA*),2001,http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Lifelong_Planning_A%2A,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lifelong_Planning_A%2A/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,93.0,655.0,321.0,291.0,296.0,367.0,394.0,469.0,493.0,565.0,592.0,602.0,809.0,532.0,404.0,368.0,347.0,448.0,570.0,490.0,472.0,496.0,475.0,412.0,629.0,535.0,387.0,435.0,451.0,398.0,461.0,480.0,511.0,542.0,490.0,608.0,547.0,517.0,460.0,432.0,395.0,418.0,628.0,574.0,549.0,520.0,501.0,542.0,553.0,542.0,528.0,447.0,458.0,446.0,556.0,699.0,667.0,484.0,573.0,483.0,447.0,438.0,376.0,311.0,484.046875,8,True,8,True
80,1.0,0.0,1,SMA*,O(b^d),21.0,Informed Search,2.0,Informed Search,229.0,,,1,1,O(b^d),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.7839 Simplified Memory-Bounded A* (SMA*) (1992)],Simplified Memory-Bounded A* (SMA*),1992,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.105.7839,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,SMA%2A,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SMA%2A/monthly/20150701/20230731,1119.0,2120.0,1265.0,930.0,1165.0,770.0,789.0,849.0,1046.0,940.0,726.0,590.0,516.0,642.0,930.0,1277.0,1260.0,929.0,943.0,966.0,1009.0,1036.0,985.0,601.0,462.0,652.0,1743.0,1284.0,1358.0,703.0,827.0,789.0,1103.0,903.0,811.0,542.0,444.0,765.0,942.0,1051.0,1257.0,1039.0,848.0,1040.0,829.0,1072.0,737.0,533.0,448.0,521.0,726.0,1198.0,1123.0,922.0,733.0,810.0,742.0,666.0,587.0,653.0,350.0,372.0,677.0,849.0,725.0,655.0,1044.0,759.0,938.0,747.0,541.0,536.0,445.0,384.0,456.0,732.0,922.0,772.0,566.0,636.0,685.0,651.0,468.0,472.0,422.0,361.0,489.0,560.0,745.0,655.0,491.0,853.0,771.0,506.0,515.0,420.0,258.0,790.659793814433,8,True,8,True
81,1.0,0.0,1,Theta*,O(b^d),21.0,Informed Search,2.0,Informed Search,230.0,,,1,1,O(b^d),,,[http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf Theta* (2010)],Theta*,2010,http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Theta%2A,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Theta%2A/monthly/20150701/20230731,1.0,5.0,0.0,5.0,5.0,2.0,1.0,5.0,4.0,2.0,3.0,1.0,0.0,112.0,160.0,200.0,224.0,347.0,321.0,364.0,362.0,352.0,378.0,327.0,342.0,420.0,399.0,427.0,437.0,380.0,452.0,408.0,566.0,494.0,432.0,420.0,348.0,470.0,405.0,597.0,545.0,534.0,505.0,498.0,643.0,636.0,550.0,507.0,556.0,534.0,433.0,723.0,744.0,612.0,536.0,533.0,625.0,656.0,759.0,536.0,545.0,450.0,406.0,514.0,589.0,619.0,598.0,553.0,586.0,687.0,510.0,550.0,435.0,762.0,518.0,813.0,637.0,562.0,575.0,633.0,484.0,565.0,641.0,447.0,459.0,427.0,486.0,596.0,775.0,587.0,613.0,627.0,650.0,687.0,613.0,545.0,541.0,444.6185567010309,8,True,8,True
82,1.0,0.0,1,Anytime A*,O(b^d),21.0,Informed Search,2.0,Informed Search,231.0,,,1,1,O(b^d),,,[https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf Anytime Repairing A* (ARA*) (2005)],Anytime Repairing A* (ARA*),2005,https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Anytime_A%2A,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Anytime_A%2A/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,149.0,310.0,294.0,269.0,252.0,240.0,201.0,189.0,187.0,217.0,308.0,248.0,222.0,261.0,275.0,274.0,342.0,263.0,263.0,294.0,230.0,253.0,437.0,330.0,341.0,313.0,399.0,371.0,385.0,375.0,307.0,337.0,292.0,410.0,560.0,402.0,420.0,377.0,468.0,466.0,465.0,442.0,385.0,324.0,318.0,285.0,323.0,374.0,338.0,357.0,468.0,514.0,423.0,399.0,358.0,272.0,243.0,300.0,412.0,359.0,343.0,365.0,321.0,308.0,317.0,362.0,280.0,241.0,261.0,285.0,400.0,453.0,387.0,350.0,359.0,362.0,310.0,370.0,288.0,219.0,330.8875,8,True,8,True
83,0.0,0.0,0,,O(b^d),21.0,Informed Search,2.0,Informed Search,232.0,,,1,1,O(b^d),,,[https://www.cs.du.edu/~sturtevant/papers/TBA.pdf Time-Bounded A* (TBA*) (2009)],Time-Bounded A* (TBA*),2009,https://www.cs.du.edu/~sturtevant/papers/TBA.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,8,True
84,0.0,1.0,1,String-searching algorithm,,22.0,String Search,2.0,Single String Search,233.0,Linear searching,,1,1,O(m(n-m+1)),,Wikipedia claims this is O(n+m),[- Naïve string-search algorithm (1940)],Naïve string-search algorithm,1940,-,1,1.0,https://en.wikipedia.org/wiki/String-searching_algorithm,1.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(m(n-m+1))$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",O(1),Derived (pointer algorithm),1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,80100.0,1,,80000100000,1,,8.00E+16,1,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,String-searching_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/String-searching_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2773.0,5263.0,5188.0,5778.0,7167.0,7633.0,7099.0,6495.0,6400.0,7677.0,7688.0,7414.0,6259.0,6848.0,6563.0,7323.0,8254.0,8999.0,7680.0,7173.0,7619.0,10836.0,10133.0,9082.0,8474.0,7050.0,7302.0,9614.0,8399.0,8704.0,8516.0,7626.0,7167.0,8127.0,7699.0,7421.0,6913.0,7063.0,6528.0,6548.0,7653.0,8204.0,7028.0,7192.0,6346.0,6913.0,7034.0,7020.0,5817.0,5014.0,4938.0,5339.0,5890.0,6620.0,5914.0,5488.0,5214.0,6168.0,4961.0,5130.0,4386.0,4032.0,6916.064516129032,3,False,1,True
85,1.0,0.0,1,Knuth–Morris–Pratt algorithm,,22.0,String Search,2.0,Single String Search,234.0,Automaton-based,,1,1,O(m+n),,,[https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf Knuth-Morris-Pratt (KMP) algorithm (1977)],Knuth-Morris-Pratt (KMP) algorithm,1977,https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,,,,0.0,0,3,"m: 3,
n: 3,
m+n: 3",$O(m+n)$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
s: 1,
m+n: 3",O(m),https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm/monthly/20150701/20230731,11044.0,10817.0,12763.0,15628.0,16622.0,14560.0,13449.0,12959.0,16075.0,18110.0,15011.0,12201.0,11100.0,12966.0,14946.0,16532.0,19879.0,15578.0,14710.0,13415.0,16063.0,15810.0,14812.0,12778.0,11757.0,11655.0,11869.0,14620.0,16193.0,13889.0,12743.0,11260.0,14042.0,14941.0,13613.0,10902.0,10458.0,10401.0,11753.0,13712.0,13548.0,15621.0,11582.0,9591.0,12277.0,12135.0,10548.0,9465.0,9325.0,9977.0,10886.0,13963.0,12559.0,11515.0,10427.0,10118.0,11659.0,11463.0,11294.0,10413.0,9306.0,10179.0,11172.0,10571.0,11172.0,11457.0,10814.0,9605.0,11465.0,11780.0,9839.0,9017.0,10583.0,9402.0,10332.0,11379.0,11129.0,10981.0,11088.0,10373.0,10484.0,11109.0,10622.0,10458.0,9384.0,9519.0,11777.0,10899.0,11456.0,10010.0,9953.0,8588.0,10474.0,9486.0,9810.0,8361.0,8282.0,11982.659793814431,3,True,1,False
86,1.0,0.0,1,Boyer–Moore string-search algorithm,,22.0,String Search,2.0,Single String Search,235.0,"Heuristics-based, bad-character and good-suffix heuristics",,1,1,O(mn + s),,,[https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf Boyer-Moore (BM) algorithm (1977)],Boyer-Moore (BM) algorithm,1977,https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,,,,0.0,0,5,"m: 3,
n: 3,
s: 3,
m+n: 5",$O(mn + s)$,"m: pattern length
n: length of searchable text
s: size of the alphabet",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 3,
m+n: 1",O(s),https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0.0,1.0,,0,,0,,1,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,Boyer%E2%80%93Moore_string-search_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Boyer%E2%80%93Moore_string-search_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2215.0,3986.0,4568.0,4890.0,6292.0,6282.0,5317.0,5051.0,3849.0,6930.0,5932.0,4696.0,4672.0,4408.0,3706.0,4600.0,5093.0,6567.0,5520.0,4497.0,4857.0,5292.0,6930.0,5478.0,4981.0,4241.0,4187.0,5437.0,4278.0,5020.0,5922.0,4690.0,4591.0,6058.0,5176.0,4414.0,4506.0,4241.0,4038.0,3460.0,4357.0,5517.0,4559.0,4336.0,4401.0,5207.0,5164.0,4702.0,4434.0,4416.0,3806.0,3652.0,4094.0,5784.0,4770.0,4226.0,4476.0,5368.0,5581.0,4697.0,4267.0,3818.0,4814.5161290322585,3,False,1,True
87,1.0,0.0,1,Rabin–Karp algorithm,,22.0,String Search,2.0,Single String Search,237.0,"Hashing-based, compare the text and patterns via their hash functions",,1,1,O(m + n),,,[https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf Rabin-Karp (RK) algorithm (1987)],Rabin-Karp (RK) algorithm,1987,https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",O(1),Derived: only storing a rolling hash,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,Rabin%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Rabin%E2%80%93Karp_algorithm/monthly/20150701/20230731,3626.0,3579.0,4464.0,5538.0,6180.0,5475.0,4167.0,4500.0,5564.0,6407.0,7026.0,4665.0,4177.0,4683.0,5290.0,6797.0,8825.0,6970.0,6529.0,5702.0,6442.0,6903.0,7836.0,6162.0,4885.0,4568.0,4937.0,8519.0,8835.0,6942.0,4847.0,4640.0,6691.0,6838.0,6045.0,4948.0,4982.0,5125.0,6443.0,8144.0,8367.0,7383.0,6016.0,6038.0,6819.0,6601.0,5656.0,4916.0,4253.0,4869.0,4932.0,6660.0,6134.0,5636.0,5014.0,5311.0,5428.0,7632.0,6381.0,11692.0,5466.0,5265.0,5677.0,6294.0,5773.0,6617.0,5473.0,4635.0,5468.0,5533.0,5107.0,5785.0,5624.0,4376.0,4509.0,6824.0,6068.0,5754.0,5534.0,4911.0,4928.0,5478.0,6108.0,6401.0,5095.0,4760.0,5357.0,5961.0,6065.0,4836.0,4674.0,4007.0,4646.0,4496.0,4633.0,3907.0,3719.0,5736.061855670103,3,False,1,True
88,1.0,0.0,1,Needleman–Wunsch algorithm,,23.0,Sequence Alignment,2.0,"Edit sequence, global alignment",250.0,,,1,1,O(mn),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://www.sciencedirect.com/science/article/pii/0022283670900574 Needleman–Wunsch algorithm (1970)],Needleman–Wunsch algorithm,1970,https://www.sciencedirect.com/science/article/pii/0022283670900574,1,1.0,https://www.sciencedirect.com/science/article/pii/0022283670900574,1.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000000.0,,1000000000000.0,,1e+18,,250000.0,1,,2.5E+11,1,,2.50E+17,1,,4,,,Bioinformatics,Needleman%E2%80%93Wunsch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Needleman%E2%80%93Wunsch_algorithm/monthly/20150701/20230731,3411.0,3683.0,5514.0,8881.0,6514.0,5455.0,4974.0,6092.0,6934.0,9699.0,5954.0,4592.0,3844.0,3936.0,6054.0,7288.0,7289.0,5934.0,5699.0,6564.0,7727.0,7134.0,6232.0,4954.0,4008.0,3840.0,6040.0,8288.0,7306.0,5698.0,5915.0,6692.0,8146.0,7067.0,6887.0,4929.0,4147.0,4023.0,6237.0,8162.0,7591.0,6202.0,5733.0,6194.0,7888.0,7977.0,6764.0,5026.0,4227.0,4136.0,6124.0,8368.0,7091.0,5715.0,5673.0,6795.0,6048.0,7066.0,7100.0,6173.0,4716.0,4273.0,6198.0,8239.0,7407.0,6808.0,6141.0,6473.0,7941.0,7132.0,6613.0,5931.0,4332.0,4079.0,5419.0,7575.0,7526.0,5703.0,6397.0,6051.0,6993.0,6427.0,7001.0,5553.0,4161.0,3595.0,5458.0,6982.0,7459.0,5790.0,5282.0,5790.0,6419.0,5919.0,6829.0,5419.0,3881.0,6119.030927835051,4.99,False,3,False
89,1.0,0.0,1,Smith–Waterman algorithm,,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",251.0,,,1,1,O(mn^2),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283681900875 Smith–Waterman algorithm (1981)],Smith–Waterman algorithm,1981,https://www.sciencedirect.com/science/article/pii/0022283681900875,,,,0.0,0,6,"m: 3,
n: 5,
m+n: 6",$O(mn^2)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,Smith%E2%80%93Waterman_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Smith%E2%80%93Waterman_algorithm/monthly/20150701/20230731,3119.0,2858.0,4157.0,5762.0,5486.0,4522.0,4188.0,5777.0,5762.0,8331.0,5174.0,3952.0,3293.0,3440.0,4876.0,5752.0,5964.0,5456.0,5522.0,6339.0,7380.0,6139.0,6856.0,5377.0,4428.0,4142.0,5646.0,8468.0,7404.0,5879.0,5785.0,6785.0,7195.0,6890.0,7337.0,4813.0,4463.0,4418.0,6295.0,8364.0,6918.0,5965.0,5839.0,6405.0,7137.0,6934.0,6325.0,4384.0,3853.0,3778.0,5389.0,7157.0,6837.0,5730.0,4903.0,6229.0,5350.0,6324.0,6120.0,5546.0,4079.0,4188.0,4990.0,6368.0,6440.0,5524.0,5554.0,5245.0,6918.0,6246.0,7246.0,5341.0,4197.0,3923.0,4798.0,6128.0,5982.0,4659.0,4967.0,5503.0,6051.0,6166.0,5648.0,4509.0,3663.0,3460.0,4674.0,5525.0,6191.0,4709.0,4697.0,5242.0,5727.0,4971.0,5143.0,4438.0,3547.0,5500.762886597938,4.99,False,3,False
90,0.0,0.0,0,,,23.0,Sequence Alignment,2.0,Edit distance,252.0,,,1,1,O(mn / log(n)),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022000080900021 Masek; Patterson (1980)],Masek; Patterson,1980,https://www.sciencedirect.com/science/article/pii/0022000080900021,1,1.0,https://reader.elsevier.com/reader/sd/pii/0022000080900021?token=73AF2A185C2FC6C67F5579CDB00D3B782FF86C4EB03694E1E783EFF5885B871AB0841E8A69D206FB16A1EFF882EB712C,1.0,0,4.99,"m: 3,
n: 3,
m+n: 4.99",$O(mn / log(n))$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",O(n),https://www.sciencedirect.com/science/article/pii/0022000080900021,0.0,1.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,27901.0,8.960252321,0.245179677,13205456224,18.93156857,0.341895387,8.65E+15,28.89735285,0.399863875,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.99,True,3,True
91,1.0,0.0,1,Hirschberg's algorithm,,23.0,Sequence Alignment,2.0,Edit sequence,253.0,,,1,1,O(mn),^see above,^see above,[https://dl.acm.org/doi/10.1145/360825.360861 Hirschberg's algorithm (1975)],Hirschberg's algorithm,1975,https://dl.acm.org/doi/10.1145/360825.360861,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",O(n),https://dl.acm.org/doi/10.1145/360825.360861,0.0,1.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000.0,2.981071706,1000000.0,14.84893192,1000000000.0,62.09573445,250000.0,1,,,,,,,,4,,,Bioinformatics,Hirschberg%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hirschberg%27s_algorithm/monthly/20150701/20230731,909.0,1029.0,1158.0,1728.0,2048.0,1846.0,1927.0,1875.0,2273.0,2292.0,1668.0,1439.0,1395.0,1349.0,1501.0,2086.0,2113.0,1816.0,1613.0,1562.0,1641.0,1456.0,1516.0,1275.0,961.0,1021.0,1327.0,2162.0,1948.0,1374.0,1978.0,1308.0,1348.0,1553.0,1349.0,1150.0,973.0,955.0,1063.0,1868.0,1820.0,1460.0,1422.0,1122.0,1203.0,1180.0,1226.0,1194.0,854.0,910.0,1092.0,1618.0,2042.0,1479.0,1056.0,1200.0,1105.0,1787.0,1360.0,1012.0,910.0,802.0,955.0,1628.0,1848.0,1371.0,1073.0,1174.0,1419.0,1328.0,993.0,924.0,744.0,622.0,841.0,1363.0,2039.0,1297.0,801.0,1044.0,1091.0,1523.0,1841.0,1137.0,733.0,702.0,946.0,1203.0,1325.0,961.0,797.0,992.0,1183.0,1122.0,1064.0,771.0,661.0,1332.1958762886595,4.99,False,3,True
92,1.0,0.0,1,FASTA,,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",254.0,,,1,1,O(mn),^see above,^see above,[https://www.ncbi.nlm.nih.gov/pubmed/2983426 FASTA (1985)],FASTA,1985,https://www.ncbi.nlm.nih.gov/pubmed/2983426,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses an m*n array, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FASTA,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,FASTA,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/FASTA/monthly/20150701/20230731,2736.0,2631.0,3470.0,4332.0,4227.0,4247.0,3895.0,4557.0,4987.0,5450.0,5709.0,3604.0,2917.0,2882.0,3386.0,4158.0,4928.0,4356.0,4268.0,4565.0,5471.0,6760.0,6632.0,3465.0,2608.0,2636.0,3469.0,4823.0,5984.0,5230.0,5038.0,4666.0,5287.0,6502.0,6604.0,3686.0,3589.0,3637.0,4576.0,5470.0,6175.0,5571.0,4530.0,4213.0,5640.0,6413.0,6489.0,3199.0,2907.0,2699.0,3911.0,4197.0,5561.0,4899.0,3804.0,4127.0,3612.0,3373.0,2867.0,2562.0,1995.0,2052.0,3583.0,3605.0,2927.0,3267.0,3274.0,2961.0,2994.0,2659.0,2567.0,2723.0,2855.0,2418.0,2211.0,2071.0,2377.0,2473.0,2493.0,2807.0,2562.0,2265.0,3135.0,3077.0,2531.0,2198.0,2634.0,2495.0,3037.0,2754.0,2585.0,2181.0,2591.0,2225.0,2381.0,1823.0,1688.0,3718.1546391752577,4.99,False,3,False
93,0.0,1.0,1,Sequence alignment,,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",255.0,,,1,1,O(mn),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283682903989 Gotoh (1982)],Gotoh,1982,https://www.sciencedirect.com/science/article/pii/0022283682903989,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,Sequence_alignment,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sequence_alignment/monthly/20150701/20230731,8780.0,8972.0,12095.0,15144.0,15005.0,13034.0,11522.0,13904.0,16134.0,24700.0,16317.0,11172.0,9301.0,9735.0,13122.0,16385.0,17835.0,13880.0,12746.0,15041.0,17129.0,16243.0,17535.0,10678.0,9431.0,9374.0,12616.0,16313.0,17820.0,13271.0,13126.0,13520.0,16414.0,17061.0,16829.0,10338.0,9335.0,8985.0,12054.0,16540.0,16601.0,14963.0,12376.0,12491.0,16177.0,16636.0,15410.0,9859.0,8120.0,8608.0,11652.0,15335.0,15211.0,12735.0,10853.0,12508.0,12351.0,14969.0,13123.0,11064.0,9206.0,9092.0,13047.0,15427.0,13816.0,13043.0,11850.0,11496.0,13832.0,12690.0,11922.0,11477.0,10866.0,9333.0,9663.0,12015.0,11813.0,11386.0,10338.0,11346.0,12445.0,12530.0,11814.0,9356.0,7290.0,6642.0,8463.0,9587.0,10339.0,9008.0,8327.0,8032.0,9684.0,8353.0,9036.0,6935.0,6720.0,12357.701030927836,4.99,False,3,False
94,0.0,1.0,1,Smith–Waterman algorithm,,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",256.0,,,1,1,O(mn),^see above,^see above,[https://link.springer.com/article/10.1007/BF02462326 Altschul and Erickson (1986)],Altschul and Erickson,1986,https://link.springer.com/article/10.1007/BF02462326,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,Smith%E2%80%93Waterman_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Smith%E2%80%93Waterman_algorithm/monthly/20150701/20230731,3119.0,2858.0,4157.0,5762.0,5486.0,4522.0,4188.0,5777.0,5762.0,8331.0,5174.0,3952.0,3293.0,3440.0,4876.0,5752.0,5964.0,5456.0,5522.0,6339.0,7380.0,6139.0,6856.0,5377.0,4428.0,4142.0,5646.0,8468.0,7404.0,5879.0,5785.0,6785.0,7195.0,6890.0,7337.0,4813.0,4463.0,4418.0,6295.0,8364.0,6918.0,5965.0,5839.0,6405.0,7137.0,6934.0,6325.0,4384.0,3853.0,3778.0,5389.0,7157.0,6837.0,5730.0,4903.0,6229.0,5350.0,6324.0,6120.0,5546.0,4079.0,4188.0,4990.0,6368.0,6440.0,5524.0,5554.0,5245.0,6918.0,6246.0,7246.0,5341.0,4197.0,3923.0,4798.0,6128.0,5982.0,4659.0,4967.0,5503.0,6051.0,6166.0,5648.0,4509.0,3663.0,3460.0,4674.0,5525.0,6191.0,4709.0,4697.0,5242.0,5727.0,4971.0,5143.0,4438.0,3547.0,5500.762886597938,4.99,False,3,False
95,0.0,1.0,1,Smith–Waterman algorithm,,23.0,Sequence Alignment,2.0,"Edit sequence, local alignment",257.0,,,1,1,O(mn),^see above,^see above,[https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true Myers and Miller (1988)],Myers and Miller,1988,https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,3,"n: 3,
m: 2,
m+n: 3",O(n+log(m)),https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,0.0,1.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,Smith%E2%80%93Waterman_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Smith%E2%80%93Waterman_algorithm/monthly/20150701/20230731,3119.0,2858.0,4157.0,5762.0,5486.0,4522.0,4188.0,5777.0,5762.0,8331.0,5174.0,3952.0,3293.0,3440.0,4876.0,5752.0,5964.0,5456.0,5522.0,6339.0,7380.0,6139.0,6856.0,5377.0,4428.0,4142.0,5646.0,8468.0,7404.0,5879.0,5785.0,6785.0,7195.0,6890.0,7337.0,4813.0,4463.0,4418.0,6295.0,8364.0,6918.0,5965.0,5839.0,6405.0,7137.0,6934.0,6325.0,4384.0,3853.0,3778.0,5389.0,7157.0,6837.0,5730.0,4903.0,6229.0,5350.0,6324.0,6120.0,5546.0,4079.0,4188.0,4990.0,6368.0,6440.0,5524.0,5554.0,5245.0,6918.0,6246.0,7246.0,5341.0,4197.0,3923.0,4798.0,6128.0,5982.0,4659.0,4967.0,5503.0,6051.0,6166.0,5648.0,4509.0,3663.0,3460.0,4674.0,5525.0,6191.0,4709.0,4697.0,5242.0,5727.0,4971.0,5143.0,4438.0,3547.0,5500.762886597938,4.99,False,3,True
96,0.0,1.0,1,Needleman–Wunsch algorithm,,23.0,Sequence Alignment,2.0,"Edit sequence, global alignment",260.0,,,1,1,O(mn),^see above,^see above,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/ David Sankoff (1972)],David Sankoff,1972,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",O(mn),"Uses a constant number of m*n arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,Needleman%E2%80%93Wunsch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Needleman%E2%80%93Wunsch_algorithm/monthly/20150701/20230731,3411.0,3683.0,5514.0,8881.0,6514.0,5455.0,4974.0,6092.0,6934.0,9699.0,5954.0,4592.0,3844.0,3936.0,6054.0,7288.0,7289.0,5934.0,5699.0,6564.0,7727.0,7134.0,6232.0,4954.0,4008.0,3840.0,6040.0,8288.0,7306.0,5698.0,5915.0,6692.0,8146.0,7067.0,6887.0,4929.0,4147.0,4023.0,6237.0,8162.0,7591.0,6202.0,5733.0,6194.0,7888.0,7977.0,6764.0,5026.0,4227.0,4136.0,6124.0,8368.0,7091.0,5715.0,5673.0,6795.0,6048.0,7066.0,7100.0,6173.0,4716.0,4273.0,6198.0,8239.0,7407.0,6808.0,6141.0,6473.0,7941.0,7132.0,6613.0,5931.0,4332.0,4079.0,5419.0,7575.0,7526.0,5703.0,6397.0,6051.0,6993.0,6427.0,7001.0,5553.0,4161.0,3595.0,5458.0,6982.0,7459.0,5790.0,5282.0,5790.0,6419.0,5919.0,6829.0,5419.0,3881.0,6119.030927835051,4.99,False,3,False
97,1.0,0.0,1,Cohen–Sutherland algorithm,O(n),25.0,Line Clipping,2.0,Rectangular Window,265.0,,,1,1,O(n),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ Cohen–Sutherland (1967)],Cohen–Sutherland,1967,https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ,1,1.0,https://www.geeksforgeeks.org/line-clipping-set-1-cohen-sutherland-algorithm/,1.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Image Processing,Cohen%E2%80%93Sutherland_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cohen%E2%80%93Sutherland_algorithm/monthly/20150701/20230731,1747.0,2422.0,3981.0,4262.0,3886.0,3404.0,2440.0,3055.0,4295.0,4766.0,4514.0,2958.0,1781.0,2279.0,3204.0,4042.0,4849.0,3711.0,2969.0,2804.0,5270.0,5020.0,5063.0,3122.0,1896.0,2769.0,3843.0,4593.0,5519.0,4346.0,2742.0,2499.0,3367.0,4071.0,4050.0,2207.0,1537.0,1769.0,2389.0,3348.0,3597.0,3124.0,1850.0,2129.0,3211.0,4234.0,4407.0,2820.0,1587.0,2074.0,3174.0,4490.0,5563.0,3829.0,2535.0,2892.0,3510.0,5154.0,4538.0,3863.0,2105.0,2164.0,4136.0,5898.0,5941.0,5603.0,4880.0,3751.0,5060.0,4598.0,4346.0,4618.0,6477.0,3330.0,2847.0,3610.0,4537.0,5912.0,4871.0,4496.0,3448.0,3319.0,4252.0,4623.0,2812.0,1971.0,2922.0,2709.0,4180.0,5074.0,3787.0,2933.0,2864.0,2542.0,3940.0,2394.0,1370.0,3605.0515463917527,3,True,1,True
98,1.0,0.0,1,Liang–Barsky algorithm,O(n),25.0,Line Clipping,2.0,Rectangular Window,266.0,,,1,1,O(n),^ see above,^ see above,[https://dl.acm.org/doi/10.1145/357332.357333 Liang–Barsky (1984)],Liang–Barsky,1984,https://dl.acm.org/doi/10.1145/357332.357333,,,,0.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing,Liang%E2%80%93Barsky_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Liang%E2%80%93Barsky_algorithm/monthly/20150701/20230731,562.0,633.0,1211.0,1349.0,1488.0,1425.0,715.0,903.0,1257.0,1551.0,2106.0,923.0,388.0,721.0,1162.0,1228.0,1745.0,1166.0,704.0,889.0,1640.0,2039.0,2089.0,1248.0,841.0,938.0,1445.0,1511.0,1877.0,1478.0,985.0,939.0,1536.0,2002.0,1425.0,764.0,591.0,712.0,1016.0,1451.0,1583.0,1196.0,661.0,1042.0,1925.0,1248.0,1357.0,638.0,474.0,436.0,637.0,908.0,1406.0,974.0,490.0,772.0,922.0,1193.0,1012.0,934.0,552.0,521.0,916.0,823.0,938.0,1050.0,1142.0,750.0,1050.0,898.0,830.0,661.0,611.0,596.0,597.0,701.0,1183.0,1284.0,796.0,871.0,825.0,726.0,1027.0,845.0,725.0,525.0,529.0,810.0,1168.0,1214.0,908.0,812.0,700.0,687.0,950.0,709.0,476.0,1019.2474226804125,3,True,1,True
99,1.0,0.0,1,Cyrus–Beck algorithm,,25.0,Line Clipping,2.0,Convex Polygonal Window; Convex Polyhedral window,267.0,,,1,1,O(np),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849378900213 Cyrus–Beck (1978)],Cyrus–Beck,1978,https://www.sciencedirect.com/science/article/pii/0097849378900213,,,,0.0,0,3,"n: 3,
p: 3",O(np),"n: number of lines
p: number of edges/faces on polygon/polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived? (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing,Cyrus%E2%80%93Beck_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cyrus%E2%80%93Beck_algorithm/monthly/20150701/20230731,442.0,446.0,964.0,825.0,1111.0,990.0,565.0,835.0,875.0,1085.0,1232.0,1030.0,360.0,467.0,905.0,910.0,1254.0,1081.0,737.0,775.0,987.0,1209.0,1561.0,1085.0,493.0,574.0,1202.0,1268.0,1468.0,1242.0,832.0,985.0,1105.0,1408.0,1730.0,847.0,431.0,534.0,817.0,1148.0,1369.0,1204.0,623.0,898.0,1034.0,1761.0,1395.0,918.0,539.0,492.0,880.0,942.0,1173.0,1053.0,542.0,674.0,660.0,1050.0,786.0,554.0,469.0,283.0,623.0,1039.0,611.0,720.0,899.0,886.0,1916.0,646.0,513.0,785.0,545.0,541.0,420.0,466.0,584.0,1195.0,898.0,793.0,672.0,534.0,544.0,601.0,471.0,503.0,486.0,417.0,783.0,1329.0,790.0,434.0,386.0,497.0,652.0,620.0,449.0,838.7835051546392,3,True,1,True
100,1.0,0.0,1,Nicholl–Lee–Nicholl algorithm,O(n),25.0,Line Clipping,2.0,Rectangular Window,268.0,,,1,1,O(n),^ see above,^ see above,[https://dl.acm.org/doi/10.1145/37401.37432 Nicholl–Lee–Nicholl (1987)],Nicholl–Lee–Nicholl,1987,https://dl.acm.org/doi/10.1145/37401.37432,,,,0.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.drexel.edu/~david/Classes/Talks/McCurdyPresentation.pdf,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing,Nicholl%E2%80%93Lee%E2%80%93Nicholl_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Nicholl%E2%80%93Lee%E2%80%93Nicholl_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,164.0,282.0,362.0,538.0,489.0,477.0,388.0,240.0,298.0,394.0,548.0,357.0,202.0,208.0,283.0,346.0,323.0,441.0,378.0,159.0,302.0,355.0,359.0,385.0,176.0,155.0,186.0,289.0,328.0,508.0,318.0,199.0,324.0,291.0,480.0,239.0,148.0,94.0,168.0,255.0,231.0,232.0,254.0,193.0,240.0,187.0,145.0,186.0,208.0,137.0,152.0,134.0,161.0,205.0,282.0,236.0,139.0,213.0,225.0,326.0,282.0,180.0,115.0,93.0,126.0,223.0,149.0,119.0,115.0,212.0,204.0,249.0,179.0,107.0,255.0675675675676,3,True,1,True
101,0.0,1.0,1,Line clipping,O(n),25.0,Line Clipping,2.0,Rectangular Window,269.0,,,1,1,O(n),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849387900616 Fast clipping (1987)],Fast clipping,1987,https://www.sciencedirect.com/science/article/pii/0097849387900616,,,,0.0,0,3,n: 3,O(n),n: number of lines,n,,,Word/Real RAM,words,1,n: 1,O(1),"Easily derived (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000.0,1,,,,,,,,6,,,Image Processing,Line_clipping,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Line_clipping/monthly/20150701/20230731,1076.0,1424.0,1749.0,1838.0,1800.0,1591.0,1425.0,1560.0,2461.0,2213.0,2084.0,1293.0,927.0,1354.0,1719.0,1624.0,2126.0,1736.0,1413.0,1606.0,2608.0,2478.0,2250.0,1236.0,1060.0,1472.0,2157.0,2011.0,2715.0,2132.0,1608.0,1408.0,2235.0,2335.0,2050.0,1160.0,1402.0,1283.0,1517.0,1939.0,2309.0,1974.0,1354.0,1425.0,2145.0,2520.0,2186.0,1303.0,1002.0,1151.0,1681.0,2128.0,2662.0,1899.0,1255.0,1553.0,1827.0,2344.0,2121.0,1665.0,1206.0,1083.0,2062.0,2227.0,2120.0,2392.0,2221.0,2113.0,2275.0,2036.0,1416.0,2357.0,2106.0,1380.0,1243.0,1348.0,2186.0,2439.0,1871.0,1547.0,1412.0,1538.0,1766.0,2037.0,1325.0,993.0,987.0,1100.0,1627.0,1685.0,1413.0,1128.0,1138.0,1006.0,1597.0,1030.0,777.0,1719.2371134020618,3,True,1,True
102,1.0,0.0,1,Powerset construction,,26.0,NFA to DFA conversion,2.0,,272.0,,,1,1,O(2^n),,,[https://ieeexplore.ieee.org/document/5392601 Rabin–Scott powerset construction (1959)],Rabin–Scott powerset construction,1959,https://ieeexplore.ieee.org/document/5392601,1,1.0,http://www.cs.nuim.ie/~jpower/Courses/Previous/parsing/node9.html,1.0,0,8,n: 8,O(2^n),n: number of states,n,,,,,1,n: 1,O(1),"Derived: besides the O(2^n) output nodes and the O(n) input nodes, there's nothing to store",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Powerset_construction,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Powerset_construction/monthly/20150701/20230731,1210.0,1305.0,2016.0,2127.0,1941.0,1556.0,1820.0,2179.0,1738.0,1707.0,1739.0,1216.0,957.0,1239.0,1710.0,1902.0,1564.0,1310.0,1676.0,2180.0,1874.0,1484.0,1731.0,1283.0,955.0,1066.0,1852.0,2266.0,1919.0,1505.0,1787.0,2009.0,1835.0,1755.0,1905.0,1210.0,1075.0,1188.0,1833.0,1752.0,1554.0,1411.0,1607.0,2156.0,1796.0,1621.0,1522.0,1216.0,1059.0,1164.0,1814.0,1847.0,2047.0,1412.0,1797.0,2501.0,1784.0,2112.0,1680.0,1322.0,1217.0,1344.0,2532.0,2409.0,1998.0,1950.0,1959.0,2948.0,2281.0,1779.0,1770.0,1370.0,1164.0,1242.0,2080.0,2099.0,2057.0,1491.0,1489.0,2245.0,1832.0,1986.0,1487.0,1159.0,823.0,999.0,1411.0,1340.0,1390.0,1075.0,1337.0,1571.0,1395.0,1251.0,1300.0,1049.0,1110.0,1636.4639175257732,8,True,1,True
103,1.0,0.0,1,Karatsuba algorithm,,27.0,Multiplication,2.0,,273.0,,,1,1,O(n^1.58),Any distribution (runtime is same regardless of input),(same behavior across all inputs),[http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng Karatsuba Algorithm (1962)],Karatsuba Algorithm,1962,http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng,,,,1.0,0,4.58,n: 4.58,$O(n^{1.58})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Re-use space across recursive subcalls (to obtain the recursion S(n) = S(n/2)+O(n)),1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,54954.08739,18.19700859,0.140966064,3019951720,331.1311215,0.301803559,1.65959E+14,6025.595861,0.485313683,4,,,Numerical Analysis,Karatsuba_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Karatsuba_algorithm/monthly/20150701/20230731,5548.0,5199.0,6590.0,8774.0,7243.0,5952.0,6773.0,7478.0,7838.0,7894.0,6219.0,5474.0,5474.0,6612.0,8704.0,8682.0,9410.0,6835.0,7863.0,9406.0,8615.0,7732.0,7033.0,6129.0,6199.0,6485.0,8362.0,9487.0,9107.0,7407.0,9013.0,8764.0,8963.0,8258.0,7576.0,5428.0,4620.0,5357.0,7677.0,8814.0,8483.0,6391.0,7821.0,9714.0,10786.0,15247.0,9951.0,6317.0,5617.0,6246.0,10094.0,40648.0,10409.0,8751.0,9494.0,10659.0,8762.0,9842.0,7681.0,7212.0,8077.0,7286.0,9986.0,9862.0,9938.0,7446.0,8027.0,9444.0,10515.0,8822.0,7510.0,6549.0,5540.0,11584.0,14865.0,11150.0,11434.0,7519.0,8129.0,9010.0,9425.0,8347.0,8217.0,7222.0,6561.0,9934.0,13976.0,12004.0,11037.0,8865.0,12514.0,11031.0,10385.0,13102.0,8314.0,7028.0,6554.0,8786.886597938144,4,False,3,True
104,1.0,0.0,1,Toom–Cook multiplication,,27.0,Multiplication,2.0,,274.0,,,1,1,O(n^1.46),^see above,^see above,[https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf Toom-3 (1969)],Toom-3,1969,https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf,,,,1.0,0,4.46,n: 4.46,$O(n^{1.46})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Re-use space across recursive subcalls (to obtain the recursion S(n) = S(n/3)+O(n)),1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,23988.0,41.68751042,0.137266573,19952623.15,50118.72336,0.45234223,19952623.15,50118723363,1.338651544,4,,,Numerical Analysis,Toom%E2%80%93Cook_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Toom%E2%80%93Cook_multiplication/monthly/20150701/20230731,1188.0,1149.0,1555.0,1825.0,1599.0,1387.0,1530.0,1569.0,1683.0,1616.0,1609.0,1360.0,1255.0,1540.0,2120.0,1732.0,1788.0,1463.0,1586.0,1853.0,1812.0,1497.0,1770.0,1407.0,1348.0,1321.0,1519.0,1868.0,1881.0,1478.0,2051.0,1655.0,1763.0,1596.0,2402.0,1417.0,1159.0,1194.0,1796.0,1927.0,1650.0,1448.0,1621.0,1677.0,2424.0,2711.0,2394.0,1362.0,1248.0,1281.0,1886.0,3449.0,1827.0,1551.0,1631.0,1755.0,1702.0,1827.0,1717.0,1517.0,1457.0,1872.0,1520.0,1938.0,2062.0,1698.0,1377.0,1576.0,2258.0,2017.0,1446.0,1186.0,1098.0,1955.0,2202.0,1910.0,1985.0,1869.0,1501.0,1345.0,2178.0,1506.0,1601.0,1398.0,1473.0,1614.0,1997.0,2136.0,1818.0,1497.0,2103.0,1851.0,1831.0,1748.0,1659.0,1419.0,1218.0,1693.4536082474226,4,False,3,True
105,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,2.0,,275.0,,,1,1,O(n^2),^see above,^see above,[ Long Multiplication (1940)],Long Multiplication,1940,,1,1.0,https://en.wikipedia.org/wiki/Multiplication_algorithm,1.0,0,5,n: 5,$O(n^2)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Easily derived (needed for intermediate results),1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,False,3,True
106,1.0,0.0,1,Ramer–Douglas–Peucker algorithm,,46.0,Line Simplification,2.0,,391.0,,0.0,0,1,O(n^2),,,[https://www.sciencedirect.com/science/article/abs/pii/S0146664X72800170 Ramer–Douglas–Peucker algorithm (1972)],Ramer–Douglas–Peucker algorithm,1972,https://www.sciencedirect.com/science/article/abs/pii/S0146664X72800170,,,,0.0,0,5,n: 5,O(n^2),n: number of points (n-1 line segments),n,,,Real RAM,,3,n: 3,O(n),"Derived: Recursive algorithm that has a worst-case recursion tree depth of O(n), and O(1) info stored per level",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm/monthly/20150701/20230731,3441.0,3619.0,3681.0,4157.0,4166.0,4102.0,3874.0,4003.0,4780.0,3988.0,4751.0,4227.0,3919.0,4064.0,4137.0,4632.0,4677.0,4699.0,5089.0,4756.0,5370.0,5114.0,6122.0,5315.0,4741.0,5247.0,5417.0,5485.0,5336.0,4733.0,5093.0,5295.0,5681.0,5211.0,5541.0,5241.0,5350.0,5256.0,5537.0,6105.0,6086.0,4935.0,20420.0,12669.0,5819.0,5795.0,5656.0,4824.0,5434.0,4857.0,4770.0,6483.0,5500.0,4966.0,5604.0,5248.0,5155.0,5563.0,5937.0,5599.0,6078.0,5300.0,5041.0,6032.0,6158.0,6365.0,5747.0,5618.0,6910.0,6432.0,6553.0,5601.0,5163.0,5323.0,5336.0,5513.0,5478.0,4785.0,5561.0,5182.0,5237.0,5338.0,5552.0,4926.0,4752.0,4746.0,5075.0,5656.0,5996.0,5129.0,5667.0,5802.0,6663.0,5450.0,5818.0,6008.0,5674.0,5473.577319587629,3,False,1,False
107,1.0,0.0,1,Visvalingam–Whyatt algorithm,,46.0,Line Simplification,2.0,,392.0,,0.0,0,1,O(n^2),,,[https://hull-repository.worktribe.com/output/459275 Visvalingam–Whyatt (1993)],Visvalingam–Whyatt,1993,https://hull-repository.worktribe.com/output/459275,,,,0.0,0,5,n: 5,O(n^2),n: number of points (n-1 line segments),n,,,Real RAM,,3,n: 3,O(n),Derived: Storing each points effective area,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Visvalingam%E2%80%93Whyatt_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Visvalingam%E2%80%93Whyatt_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,1.0,,1.0,,,,,,,,1.0,,,,,1.0,,,,,2.0,,,,19.0,,,,,,,,,,,,,,0.0,,,,,,,123.0,484.0,552.0,787.0,708.0,630.0,577.0,551.0,584.0,593.0,575.0,594.0,486.0,581.0,605.0,678.0,612.0,711.0,682.0,691.0,666.0,685.0,766.0,767.0,572.0,875.0,813.0,980.0,773.0,890.0,811.0,827.0,544.974358974359,3,False,1,False
108,0.0,1.0,1,Ramer–Douglas–Peucker algorithm,,46.0,Line Simplification,2.0,,393.0,,0.0,0,1,O(n),,,[ Reumann–Witkam (1974)],Reumann–Witkam,1974,,,,,0.0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,1,n: 1,O(1),Derived: The only auxiliary space used is the current search line and the distance from the next point to the line.,1.0,0.0,,0,,0,,0,0,,0,0,http://psimpl.sourceforge.net/reumann-witkam.html,,,,,,,,,,,1000.0,,,,,,,,,4,,,Image Processing,Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm/monthly/20150701/20230731,3441.0,3619.0,3681.0,4157.0,4166.0,4102.0,3874.0,4003.0,4780.0,3988.0,4751.0,4227.0,3919.0,4064.0,4137.0,4632.0,4677.0,4699.0,5089.0,4756.0,5370.0,5114.0,6122.0,5315.0,4741.0,5247.0,5417.0,5485.0,5336.0,4733.0,5093.0,5295.0,5681.0,5211.0,5541.0,5241.0,5350.0,5256.0,5537.0,6105.0,6086.0,4935.0,20420.0,12669.0,5819.0,5795.0,5656.0,4824.0,5434.0,4857.0,4770.0,6483.0,5500.0,4966.0,5604.0,5248.0,5155.0,5563.0,5937.0,5599.0,6078.0,5300.0,5041.0,6032.0,6158.0,6365.0,5747.0,5618.0,6910.0,6432.0,6553.0,5601.0,5163.0,5323.0,5336.0,5513.0,5478.0,4785.0,5561.0,5182.0,5237.0,5338.0,5552.0,4926.0,4752.0,4746.0,5075.0,5656.0,5996.0,5129.0,5667.0,5802.0,6663.0,5450.0,5818.0,6008.0,5674.0,5473.577319587629,3,True,1,True
109,0.0,1.0,1,Ramer–Douglas–Peucker algorithm,,46.0,Line Simplification,2.0,,394.0,,0.0,0,1,O(n),,,[http://dx.doi.org/10.2312/eg.19811012 Opheim simplification (1981)],Opheim simplification,1981,http://dx.doi.org/10.2312/eg.19811012,,,,0.0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,1,n: 1,O(1),"Derived: The only auxiliary space used is the current search ray and the current best, the distances from the next point to the ray and to the ray's origin, candidate point to stay in the simplified line",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Image Processing,Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm/monthly/20150701/20230731,3441.0,3619.0,3681.0,4157.0,4166.0,4102.0,3874.0,4003.0,4780.0,3988.0,4751.0,4227.0,3919.0,4064.0,4137.0,4632.0,4677.0,4699.0,5089.0,4756.0,5370.0,5114.0,6122.0,5315.0,4741.0,5247.0,5417.0,5485.0,5336.0,4733.0,5093.0,5295.0,5681.0,5211.0,5541.0,5241.0,5350.0,5256.0,5537.0,6105.0,6086.0,4935.0,20420.0,12669.0,5819.0,5795.0,5656.0,4824.0,5434.0,4857.0,4770.0,6483.0,5500.0,4966.0,5604.0,5248.0,5155.0,5563.0,5937.0,5599.0,6078.0,5300.0,5041.0,6032.0,6158.0,6365.0,5747.0,5618.0,6910.0,6432.0,6553.0,5601.0,5163.0,5323.0,5336.0,5513.0,5478.0,4785.0,5561.0,5182.0,5237.0,5338.0,5552.0,4926.0,4752.0,4746.0,5075.0,5656.0,5996.0,5129.0,5667.0,5802.0,6663.0,5450.0,5818.0,6008.0,5674.0,5473.577319587629,3,True,1,True
110,0.0,1.0,1,Ramer–Douglas–Peucker algorithm,,46.0,Line Simplification,2.0,,395.0,,0.0,0,1,O(n),,,[- Lang simplification (1969)],Lang simplification,1969,-,,,,1.0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,1,n: 1,O(1),"Derived: The only auxiliary space used is the current search line and the distance from a point in the search interval to the search line, which is all $O(1)$ space",1.0,0.0,,0,,0,,0,0,,0,0,http://koreascience.or.kr/article/JAKO201300763572495.page,,,,,,,,,,,1000.0,,,,,,,,,4,,,Image Processing,Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm/monthly/20150701/20230731,3441.0,3619.0,3681.0,4157.0,4166.0,4102.0,3874.0,4003.0,4780.0,3988.0,4751.0,4227.0,3919.0,4064.0,4137.0,4632.0,4677.0,4699.0,5089.0,4756.0,5370.0,5114.0,6122.0,5315.0,4741.0,5247.0,5417.0,5485.0,5336.0,4733.0,5093.0,5295.0,5681.0,5211.0,5541.0,5241.0,5350.0,5256.0,5537.0,6105.0,6086.0,4935.0,20420.0,12669.0,5819.0,5795.0,5656.0,4824.0,5434.0,4857.0,4770.0,6483.0,5500.0,4966.0,5604.0,5248.0,5155.0,5563.0,5937.0,5599.0,6078.0,5300.0,5041.0,6032.0,6158.0,6365.0,5747.0,5618.0,6910.0,6432.0,6553.0,5601.0,5163.0,5323.0,5336.0,5513.0,5478.0,4785.0,5561.0,5182.0,5237.0,5338.0,5552.0,4926.0,4752.0,4746.0,5075.0,5656.0,5996.0,5129.0,5667.0,5802.0,6663.0,5450.0,5818.0,6008.0,5674.0,5473.577319587629,3,True,1,True
111,0.0,1.0,1,Ramer–Douglas–Peucker algorithm,,46.0,Line Simplification,2.0,,396.0,,0.0,0,1,O(n),,,[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.494.7321 Zhao-Saalfeld (1997)],Zhao-Saalfeld,1997,http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.494.7321,,,,0.0,0,3,n: 3,O(n),n: number of points (n-1 line segments),n,,,Real RAM,,3,n: 3,O(n),Derived: There is an auxiliary sleeve set that is $O(n)$ size worst-case,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Image Processing,Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm/monthly/20150701/20230731,3441.0,3619.0,3681.0,4157.0,4166.0,4102.0,3874.0,4003.0,4780.0,3988.0,4751.0,4227.0,3919.0,4064.0,4137.0,4632.0,4677.0,4699.0,5089.0,4756.0,5370.0,5114.0,6122.0,5315.0,4741.0,5247.0,5417.0,5485.0,5336.0,4733.0,5093.0,5295.0,5681.0,5211.0,5541.0,5241.0,5350.0,5256.0,5537.0,6105.0,6086.0,4935.0,20420.0,12669.0,5819.0,5795.0,5656.0,4824.0,5434.0,4857.0,4770.0,6483.0,5500.0,4966.0,5604.0,5248.0,5155.0,5563.0,5937.0,5599.0,6078.0,5300.0,5041.0,6032.0,6158.0,6365.0,5747.0,5618.0,6910.0,6432.0,6553.0,5601.0,5163.0,5323.0,5336.0,5513.0,5478.0,4785.0,5561.0,5182.0,5237.0,5338.0,5552.0,4926.0,4752.0,4746.0,5075.0,5656.0,5996.0,5129.0,5667.0,5802.0,6663.0,5450.0,5818.0,6008.0,5674.0,5473.577319587629,3,True,1,False
112,1.0,0.0,1,Linear search,,49.0,Nearest Neighbor Search,2.0,Nearest Neighbor Search (NNS),416.0,,,1,1,O(n),,,[- Linear search (1940)],Linear search,1940,-,1,1.0,,1.0,0,3,n: 3,O(n),,n,,,Real RAM,,1,n: 1,O(1),Derived: Only ever storing the current shortest distance and the corresponding node,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,Linear_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Linear_search/monthly/20150701/20230731,5394.0,6974.0,9180.0,11773.0,10650.0,8474.0,8345.0,9341.0,9952.0,10480.0,8461.0,6363.0,7506.0,7763.0,10812.0,11754.0,13319.0,10422.0,10355.0,11516.0,13284.0,11369.0,11471.0,8210.0,7959.0,8810.0,11375.0,13629.0,14210.0,11426.0,11714.0,11180.0,12735.0,12684.0,12403.0,7587.0,8779.0,10163.0,12049.0,16036.0,12428.0,10260.0,9943.0,9229.0,10053.0,11022.0,8349.0,5770.0,6918.0,8141.0,9718.0,10386.0,11657.0,8483.0,8351.0,8138.0,8166.0,8288.0,7639.0,7197.0,7113.0,8902.0,10860.0,11766.0,12216.0,11924.0,10289.0,10956.0,12978.0,10218.0,8984.0,8332.0,10926.0,10733.0,10826.0,10320.0,10115.0,9216.0,9395.0,8573.0,10028.0,8303.0,6972.0,5718.0,5759.0,5883.0,6860.0,6806.0,7087.0,6347.0,6521.0,5318.0,5796.0,4656.0,4460.0,3290.0,3724.0,9321.78350515464,3,True,1,True
113,1.0,0.0,1,k-d tree,,49.0,Nearest Neighbor Search,2.0,Nearest Neighbor Search (NNS),417.0,,,1,1,"k-d Tree construction: O(n log n)
NNS: O(log n)","Beta distribution B(m, n). See paper for details",https://dl.acm.org/doi/pdf/10.1145/355744.355745,[https://dl.acm.org/doi/pdf/10.1145/355744.355745 k-d Tree (1975)],k-d Tree,1975,https://dl.acm.org/doi/pdf/10.1145/355744.355745,1,1.0,https://www.geeksforgeeks.org/k-dimensional-tree/,1.0,4->5,4,n: 4,"k-d Tree construction: $O(n \log n)$
NNS: $O(n)$",n: number of elements,n,,,Real RAM,,3,n: 3,O(n),https://dl.acm.org/doi/pdf/10.1145/355744.355745,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Combinatorics,k-d_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/k-d_tree/monthly/20150701/20230731,,1.0,,,,,,0.0,,,,,3.0,8.0,,,,,,,,,,,,,,,,,,,,,,,,,1.0,,,,1.0,,,,,,,,,,,,,,0.0,,,0.0,,,,,0.0,,,,,,,,,,,,,0.0,,,,,,,,,0.0,,0.0,0.0,0.0,,,,,0.0,0.0,0.875,3,False,1,False
114,1.0,0.0,1,R-tree,,49.0,Nearest Neighbor Search,2.0,Nearest Neighbor Search (NNS),418.0,,,1,1,"R-Tree construction: O(n log n)
NNS: O(log n)",,,[http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf R-tree (1984)],R-tree,1984,http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf,,,,0.0,0,4,n: 4,"R-Tree construction: $O(n \log n)$
NNS: $O(n)$",n: number of elements,n,,,Real RAM,,2,n: 2,O(log n),"https://www.sciencedirect.com/science/article/pii/S1877050915019675, Table 2",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,R-tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/R-tree/monthly/20150701/20230731,10363.0,10256.0,11868.0,9741.0,9585.0,10185.0,11638.0,9965.0,11808.0,10494.0,10105.0,9142.0,8092.0,8794.0,8589.0,9622.0,10592.0,9923.0,11067.0,12064.0,11182.0,11291.0,11316.0,9741.0,8472.0,8540.0,8706.0,9249.0,9743.0,9259.0,9257.0,8590.0,9714.0,10565.0,10022.0,9173.0,8589.0,7942.0,7448.0,9425.0,8455.0,9126.0,8889.0,8359.0,9003.0,9339.0,8730.0,7968.0,7487.0,7553.0,7350.0,8621.0,9221.0,8036.0,7813.0,7773.0,7607.0,8666.0,8163.0,7401.0,6567.0,6255.0,6123.0,7089.0,7277.0,6930.0,6814.0,6897.0,8674.0,8600.0,8099.0,8137.0,7029.0,6608.0,6531.0,7194.0,7410.0,7763.0,7100.0,6759.0,7472.0,7806.0,8313.0,7142.0,6669.0,6769.0,6814.0,6930.0,7274.0,6637.0,6887.0,7167.0,7762.0,7649.0,9474.0,7003.0,6873.0,8517.257731958764,3,False,1,False
115,0.0,1.0,1,Subset sum problem,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,541.0,,,1,1,O(2^{(n/2)}),,,[https://dl.acm.org/doi/10.1145/321812.321823 Horowitz and Sahni (1974)],Horowitz and Sahni,1974,https://dl.acm.org/doi/10.1145/321812.321823,,,,1.0,0,8,n: 8,$O(2^{(n/2)})$,n: the number of integers in the set,n,,,Word RAM,words,8,"n: 8,
t: 1",O(2^{(n/2)}),https://dl.acm.org/doi/10.1145/321812.321823,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Subset_sum_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Subset_sum_problem/monthly/20150701/20230731,8812.0,8136.0,9700.0,11712.0,14063.0,13303.0,11208.0,12764.0,12129.0,13821.0,12366.0,9587.0,17323.0,10858.0,10134.0,12880.0,14501.0,13148.0,11550.0,11223.0,13675.0,13647.0,13261.0,9921.0,9500.0,9043.0,10483.0,11994.0,14674.0,11514.0,10956.0,9494.0,10826.0,13359.0,12206.0,8737.0,8217.0,8379.0,9379.0,11734.0,14340.0,13900.0,11445.0,10640.0,12463.0,13760.0,12479.0,9615.0,9097.0,8946.0,10444.0,13182.0,13153.0,12380.0,11003.0,11896.0,10544.0,13912.0,12559.0,12308.0,9901.0,9850.0,11206.0,13717.0,15521.0,17179.0,13413.0,11455.0,13930.0,15882.0,12608.0,10553.0,10683.0,10707.0,10255.0,12675.0,15448.0,13552.0,11307.0,13094.0,12992.0,13044.0,13023.0,9801.0,8382.0,7772.0,8094.0,9592.0,11897.0,10161.0,8317.0,7838.0,8685.0,8851.0,8342.0,7106.0,6602.0,11461.01030927835,3,False,1,False
116,0.0,1.0,1,Dynamic programming,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,542.0,,,1,1,O(n t),,,[https://onlinelibrary.wiley.com/doi/10.1002/nav.3800030107 Bellman dynamic programming algorithm (1956)],Bellman dynamic programming algorithm,1956,https://onlinelibrary.wiley.com/doi/10.1002/nav.3800030107,,,,1.0,0,3,"n: 3,
t: 3",$O(n t)$,"n: the number of integers in the set
t: the target sum",n,,,Word RAM,words,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Subset_sum_problem,,,,,1.0,0.539926526,1.0,1.371373706,1.0,2.651741273,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Dynamic_programming,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dynamic_programming/monthly/20150701/20230731,28605.0,30430.0,35201.0,42390.0,41304.0,37145.0,34061.0,35258.0,40128.0,41181.0,41761.0,33302.0,37626.0,35352.0,44919.0,48620.0,49964.0,46224.0,43865.0,44054.0,49318.0,48568.0,44491.0,36659.0,35586.0,36813.0,41996.0,51517.0,53161.0,44863.0,45974.0,43636.0,48903.0,50140.0,47961.0,41399.0,38422.0,38717.0,40140.0,44737.0,40048.0,35297.0,33161.0,32009.0,37793.0,39124.0,33709.0,29101.0,29140.0,26707.0,29447.0,34080.0,33602.0,29003.0,30139.0,35513.0,35270.0,40526.0,36472.0,33411.0,30271.0,30933.0,32582.0,38960.0,40485.0,45045.0,36578.0,35217.0,41654.0,37769.0,35008.0,33186.0,38565.0,33925.0,33247.0,36794.0,40011.0,38030.0,35298.0,33591.0,34977.0,33707.0,33373.0,31532.0,29425.0,28706.0,27397.0,30196.0,32305.0,32325.0,29444.0,25776.0,28265.0,25715.0,24442.0,21622.0,23288.0,36779.24742268041,3,True,1,True
117,0.0,1.0,1,Subset sum problem,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,543.0,,,1,1,O(n max(S)),,,[https://www.sciencedirect.com/science/article/abs/pii/S0196677499910349 Psinger (1999)],Psinger,1999,https://www.sciencedirect.com/science/article/abs/pii/S0196677499910349,,,,1.0,0,3,"n: 3,
max(S): 3",$O(n max(S))$,"n: the number of integers in the set
max(S): largest number in the set",n,,,Word RAM,words,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Subset_sum_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Subset_sum_problem/monthly/20150701/20230731,8812.0,8136.0,9700.0,11712.0,14063.0,13303.0,11208.0,12764.0,12129.0,13821.0,12366.0,9587.0,17323.0,10858.0,10134.0,12880.0,14501.0,13148.0,11550.0,11223.0,13675.0,13647.0,13261.0,9921.0,9500.0,9043.0,10483.0,11994.0,14674.0,11514.0,10956.0,9494.0,10826.0,13359.0,12206.0,8737.0,8217.0,8379.0,9379.0,11734.0,14340.0,13900.0,11445.0,10640.0,12463.0,13760.0,12479.0,9615.0,9097.0,8946.0,10444.0,13182.0,13153.0,12380.0,11003.0,11896.0,10544.0,13912.0,12559.0,12308.0,9901.0,9850.0,11206.0,13717.0,15521.0,17179.0,13413.0,11455.0,13930.0,15882.0,12608.0,10553.0,10683.0,10707.0,10255.0,12675.0,15448.0,13552.0,11307.0,13094.0,12992.0,13044.0,13023.0,9801.0,8382.0,7772.0,8094.0,9592.0,11897.0,10161.0,8317.0,7838.0,8685.0,8851.0,8342.0,7106.0,6602.0,11461.01030927835,3,True,1,True
118,0.0,1.0,1,Subset sum problem,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,544.0,,,1,1,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",,,[https://dl.acm.org/doi/pdf/10.1145/3329863 Koiliaris and Xu (2019)],Koiliaris and Xu,2019,https://dl.acm.org/doi/pdf/10.1145/3329863,,,,1.0,0,4,"n: 4,
t: 4.25,
\sigma: 3","$\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})$","n': the number of distinct elements in the set
t: the target sum
σ: sum of elements in the set",n,,,Word RAM,words,1,"n: 1,
t: 3",O(t),"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Subset_sum_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Subset_sum_problem/monthly/20150701/20230731,8812.0,8136.0,9700.0,11712.0,14063.0,13303.0,11208.0,12764.0,12129.0,13821.0,12366.0,9587.0,17323.0,10858.0,10134.0,12880.0,14501.0,13148.0,11550.0,11223.0,13675.0,13647.0,13261.0,9921.0,9500.0,9043.0,10483.0,11994.0,14674.0,11514.0,10956.0,9494.0,10826.0,13359.0,12206.0,8737.0,8217.0,8379.0,9379.0,11734.0,14340.0,13900.0,11445.0,10640.0,12463.0,13760.0,12479.0,9615.0,9097.0,8946.0,10444.0,13182.0,13153.0,12380.0,11003.0,11896.0,10544.0,13912.0,12559.0,12308.0,9901.0,9850.0,11206.0,13717.0,15521.0,17179.0,13413.0,11455.0,13930.0,15882.0,12608.0,10553.0,10683.0,10707.0,10255.0,12675.0,15448.0,13552.0,11307.0,13094.0,12992.0,13044.0,13023.0,9801.0,8382.0,7772.0,8094.0,9592.0,11897.0,10161.0,8317.0,7838.0,8685.0,8851.0,8342.0,7106.0,6602.0,11461.01030927835,3,False,1,True
119,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,2.0,Subset Sum,545.0,,,1,1,\tilde{O}(nt^{1+\epsilon}),,,[https://arxiv.org/abs/1610.04712 Bringman (2017)],Bringman,2017,https://arxiv.org/abs/1610.04712,,,,1.0,0,4,"n: 4,
t: 4.01",$\tilde{O}(nt^{1+\epsilon})$,"n: the number of integers in the set
t: the target sum
\epsilon: any positive constant",n,,,Word RAM,words,3,"n: 3,
t: 5?",\tilde{O}(nt^\epsilon),https://arxiv.org/abs/1610.04712,0.0,1.0,,1,Monte Carlo,1,(n+t)^{-\Omega(1)} error,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
120,0.0,1.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,622.0,,,1,1,O(n^3),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[- Brute Force (1977)],Brute Force,1977,-,1,1.0,,1.0,0,6,n: 6,O(n^3),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1),"keep track of which subarray is being computed, along with current maximum",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,True
121,0.0,1.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,623.0,,,1,1,O(n^2),^see above,^see above,[- Grenander (1977)],Grenander,1977,-,,,,1.0,3->4,5,n: 5,O(n^2),n: length of array,n,,,Word/Real RAM,words,3,n: 3,O(n),storing precomputed cumulative sums,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000.0,1000,0.205260937,1E+12,1000000,0.452653926,1.00E+18,1000000000,0.750827032,3,,1.09951E+12,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,False
122,0.0,1.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,623.0,,,1,1,O(n^2),^see above,^see above,[https://dl.acm.org/doi/pdf/10.1145/358234.381162 Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]) (1977)],Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]),1977,https://dl.acm.org/doi/pdf/10.1145/358234.381162,,,,0.0,0,5,n: 5,O(n^2),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1),"keep track of which subarray is being computed, along with current maximum",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000.0,1000,,1E+12,1000000,,1.00E+18,1000000000,,3,,1.09951E+12,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,True
123,0.0,1.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,624.0,,,1,1,O(nlogn),^see above,^see above,[- Shamos (1978)],Shamos,1978,-,,,,1.0,4->5,4,n: 4,O(n \log n),n: length of array,n,,,Word/Real RAM,words,2,n: 2,O(\log n),keep track of recursive maximums,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,9965.784285,100343.3319,0.353998299,19931568.57,50171665944,0.91245407,29897352854,3.34E+16,1.721772176,3,,,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,False
124,0.0,1.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,625.0,,,1,1,O(n),^see above,^see above,[- Kadane's Algorithm (1982)],Kadane's Algorithm,1982,-,1,1.0,,1.0,5->6,3,n: 3,O(n),n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000.0,1000000,0.389495494,1000000,1E+12,0.930697729,1000000000,1.00E+18,1.682695795,3,,,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,True
125,0.0,0.0,0,,O(n),80.0,Maximum Subarray Problem,2.0,1D Maximum Subarray,628.0,,,1,1,O(log n),^see above,^see above,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf Perumalla and Deo (1995)],Perumalla and Deo,1995,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,Perumalla and Deo,,,0.0,0,2,n: 2,O(\log n),n: length of array,n,,,EREW PRAM,words,3,n: 3,O(n) auxiliary,constant number of arrays as outlined in algorithm,1.0,0.0,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,9965.0,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,True,1,False
126,0.0,0.0,0,,,99.0,Motif Search,2.0,Motif Search,788.0,,,1,1,O(n^2m \sigma),,,[https://link.springer.com/chapter/10.1007/BFb0054337 Speller (1998)],Speller,1998,https://link.springer.com/chapter/10.1007/BFb0054337,,,,0.0,0,5.5,"m: 3,
n: 5,
\sigma: 3,
mn: 5.5",$O(mn^2 \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 3,
n: 5,
k: 1,
mn: 5.5",O(mn^2/w),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
127,0.0,0.0,0,,,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(k nm \sigma),,,[https://pubmed.ncbi.nlm.nih.gov/12169566/ Mitra (2002)],Mitra,2002,https://pubmed.ncbi.nlm.nih.gov/12169566/,,,,0.0,0,3,"m: 3,
n: 3,
k: 3,
\sigma: 3,
mn: 3",$O(k nm \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,3,"m: 3,
n: 3,
k: 3,
mn: 3",O(mnk),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
128,0.0,0.0,0,,,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(k nm \sigma),,,[https://link.springer.com/chapter/10.1007/978-3-540-45078-8_5 Census (2003)],Census,2003,https://link.springer.com/chapter/10.1007/978-3-540-45078-8_5,,,,0.0,0,3,"m: 3,
n: 3,
k: 3,
\sigma: 3,
mn: 3",$O(k nm \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,3,"m: 3,
n: 3,
k: 3,
mn: 3",O(mnk),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
129,0.0,1.0,1,Planted motif search,,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(n^2m \sigma),,,[https://link.springer.com/chapter/10.1007/11682462_69 Risotto (2006)],Risotto,2006,https://link.springer.com/chapter/10.1007/11682462_69,,,,0.0,0,5.5,"m: 3,
n: 5,
\sigma: 3,
mn: 5.5",$O(mn^2 \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 3,
n: 5,
k: 1,
mn: 5.5",O(mn^2),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,Planted_motif_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Planted_motif_search/monthly/20150701/20230731,111.0,121.0,152.0,158.0,157.0,117.0,109.0,113.0,109.0,94.0,84.0,78.0,93.0,103.0,140.0,103.0,148.0,104.0,84.0,140.0,130.0,146.0,118.0,85.0,71.0,100.0,67.0,110.0,233.0,98.0,94.0,100.0,292.0,96.0,101.0,79.0,48.0,74.0,90.0,65.0,113.0,87.0,67.0,95.0,81.0,119.0,75.0,76.0,89.0,44.0,117.0,77.0,101.0,83.0,79.0,92.0,68.0,96.0,71.0,55.0,36.0,46.0,103.0,82.0,73.0,116.0,59.0,165.0,91.0,74.0,78.0,58.0,63.0,27.0,136.0,32.0,66.0,121.0,44.0,46.0,43.0,39.0,52.0,43.0,52.0,17.0,38.0,106.0,58.0,40.0,33.0,20.0,36.0,27.0,46.0,35.0,23.0,86.84536082474227,2.75,False,2,False
130,1.0,,1,Planted motif search,,99.0,Motif Search,2.0,Motif Search,,,,1,1,O(nm^2 \sigma),,,[https://ieeexplore.ieee.org/abstract/document/4359890 PMS (2007)],PMS,2007,https://ieeexplore.ieee.org/abstract/document/4359890,,,,0.0,0,5.5,"m: 5,
n: 3,
\sigma: 3,
mn: 5.5",$O(nm^2 \sigma)$,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function V(k, m) defined as the number of k-mers that are at most m Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 5,
n: 3,
k: 1,
mn: 5.5",O(m^2 n),https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,Planted_motif_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Planted_motif_search/monthly/20150701/20230731,111.0,121.0,152.0,158.0,157.0,117.0,109.0,113.0,109.0,94.0,84.0,78.0,93.0,103.0,140.0,103.0,148.0,104.0,84.0,140.0,130.0,146.0,118.0,85.0,71.0,100.0,67.0,110.0,233.0,98.0,94.0,100.0,292.0,96.0,101.0,79.0,48.0,74.0,90.0,65.0,113.0,87.0,67.0,95.0,81.0,119.0,75.0,76.0,89.0,44.0,117.0,77.0,101.0,83.0,79.0,92.0,68.0,96.0,71.0,55.0,36.0,46.0,103.0,82.0,73.0,116.0,59.0,165.0,91.0,74.0,78.0,58.0,63.0,27.0,136.0,32.0,66.0,121.0,44.0,46.0,43.0,39.0,52.0,43.0,52.0,17.0,38.0,106.0,58.0,40.0,33.0,20.0,36.0,27.0,46.0,35.0,23.0,86.84536082474227,2.75,False,2,False
131,0.0,0.0,0,,O(n^2),124.0,Rod-Cutting Problem,2.0,Rod-Cutting Problem,947.0,,,1,1,O(n*2^n),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[ Brute Force (1940)],Brute Force,1940,,1,1.0,https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf,1.0,0,8,n: 8,$O(n*2^n)$,n: length of rod,n,,,Word RAM,words,3,n: 3,O(n),easily derived,1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dynamic_programming

 https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf",,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
132,0.0,0.0,0,,O(n^2),124.0,Rod-Cutting Problem,2.0,Rod-Cutting Problem,948.0,,,1,1,O(n^2),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[ Dynamic Programming (1953)],Dynamic Programming,1953,,0.5,1.0,https://www.geeksforgeeks.org/cutting-a-rod-dp-13/,1.0,1->4,5,n: 5,$O(n^2)$,n: length of rod,n,,,Word RAM,words,3,n: 3,O(n),easily derived,1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dynamic_programming

https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf",,,,,,,,,,,1000000.0,Inf,inf,1E+12,Inf,inf,1.00E+18,Inf,inf,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
133,0.0,0.0,0,,O(nS),130.0,Change-Making Problem,2.0,Change-Making Problem,960.0,,,1,1,O(S^n),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[NA Brute Force (1940)],Brute Force,1940,,1,1.0,"https://en.wikipedia.org/wiki/Change-making_problem#:~:text=It%20is%20also%20the%20most,the%20order%20of%20the%20coins.",1.0,0,8,"n: 8,
S: 7",$O(S^n)$,"n: number of coin denominations
S: sum to be made",n,,,Word RAM,words,3,n: 3,O(n),Easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Change-making_problem,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,3,True
134,0.0,1.0,1,Change-making problem,O(nS),130.0,Change-Making Problem,2.0,Change-Making Problem,961.0,,,1,1,O(Sn),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[https://dl.acm.org/doi/10.1145/321864.321874 Dynamic Programming (1953)],Dynamic Programming,1953,https://dl.acm.org/doi/10.1145/321864.321874,2,1.0,"https://en.wikipedia.org/wiki/Change-making_problem#:~:text=It%20is%20also%20the%20most,the%20order%20of%20the%20coins.",1.0,1->4,5,"n: 5,
S: 3",$O(Sn)$,"n: number of coin denominations
S: sum to be made",n,,,Word RAM,words,5,"n: 5,
S: 3",O(Sn),Easily derived,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Change-making_problem,,,,,,,,,,,50000.0,Inf,inf,50000000,Inf,inf,50000000000,Inf,inf,1,,,Combinatorics,Change-making_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Change-making_problem/monthly/20150701/20230731,2640.0,3111.0,3850.0,4812.0,4597.0,3529.0,3660.0,4190.0,4379.0,4922.0,4310.0,3647.0,3177.0,3153.0,4198.0,5493.0,5453.0,4968.0,5301.0,5828.0,6030.0,5469.0,4662.0,4006.0,3975.0,4143.0,5388.0,6113.0,5272.0,4278.0,4789.0,4690.0,5370.0,5069.0,4389.0,3115.0,5184.0,3275.0,4073.0,4743.0,4272.0,3094.0,3466.0,3571.0,3922.0,3678.0,3705.0,3039.0,2986.0,3220.0,4242.0,6044.0,5824.0,4265.0,4626.0,5025.0,4312.0,5556.0,4334.0,4581.0,3547.0,3852.0,4841.0,5456.0,5641.0,4773.0,4380.0,4314.0,4819.0,4204.0,3520.0,3115.0,3639.0,3673.0,3801.0,4437.0,5062.0,3496.0,3106.0,3219.0,3248.0,3083.0,2785.0,2518.0,2385.0,2556.0,2418.0,2825.0,3085.0,2391.0,2326.0,2081.0,2948.0,2201.0,2012.0,1709.0,1909.0,4004.0,4,False,3,False
135,0.0,1.0,1,Matrix chain multiplication,$O(\log \log n)$,3.0,Matrix Chain Multiplication,2.0,Approximate MCOP,35.0,,,1,0,$O(\log n)$,,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf Czumaj (1996)],Czumaj,1996,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,,,,0.0,0,2,n: 2,$O(\log n)$,n: number of matrices in chain,n,,,CREW PRAM,words?,3,n: 3,$O(n)$,"Derived: solving the optimal triangulation problem of a convex polygon where there are $n+1$ vertices and $n+1$, so total $O(n)$ auxiliary space",1.0,0.0,,0,,1,1.1547,0,1,$n / \log n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9.965,Inf,,,,,,,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,True
136,0.0,1.0,1,Matrix chain multiplication,$O(\log \log n)$,3.0,Matrix Chain Multiplication,2.0,Approximate MCOP,35.1,,,1,0,$O(\log \log n)$,,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf Czumaj (1996)],Czumaj,1996,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,,,,0.0,0,1.99,n: 1.99,$O(\log \log n)$,n: number of matrices in chain,n,,,COMMON CRCW PRAM,words?,3,n: 3,$O(n)$,"Derived: solving the optimal triangulation problem of a convex polygon where there are $n+1$ vertices and $n+1$, so total $O(n)$ auxiliary space",1.0,0.0,,0,,1,1.1547,0,1,$n / \log \log n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9.965,Inf,,,,,,,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,True,3,True
137,0.0,0.0,0,,$O(\log \log n)$,3.0,Matrix Chain Multiplication,1.0,Approximate MCOP,36.0,,,1,0,O(n),,,[https://www.worldcat.org/title/computing-matrix-chain-products-in-near-optimal-time/oclc/727708286 Chandra (1975)],Chandra,1975,https://www.worldcat.org/title/computing-matrix-chain-products-in-near-optimal-time/oclc/727708286,,,,0.0,0,3,n: 3,$O(n)$,n: number of matrices in chain,n,,,Word RAM,words,3,n: 3,$O(n)$?,"Derived: cannot find pdf of original paper or any description of the actual algorithm, but likely the same space as Chin's algorithm",1.0,0.0,,0,,1,2,1,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000.0,Inf,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1.99,False,3,True
138,0.0,1.0,1,Matrix chain multiplication,$O(\log \log n)$,3.0,Matrix Chain Multiplication,2.0,Approximate MCOP,37.0,,,1,0,O(n),,,[https://dl.acm.org/citation.cfm?id=359556 Chin (1978)],Chin,1978,https://dl.acm.org/citation.cfm?id=359556,,,,0.0,0,3,n: 3,$O(n)$,n: number of matrices in chain,n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: There are a few auxiliary variables, only one of which is variable length. That is a list of length $O(n)$.",1.0,0.0,,0,,1,1.2485,1,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000.0,Inf,,,,,,,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,True
139,0.0,0.0,0,,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,77.0,,,1,0,O(n^{2.7799}),,,[https://doi.org/10.1016/0020-0190(79)90113-3 Bini's algorithm (1979)],Bini's algorithm,1979,https://doi.org/10.1016/0020-0190(79)90113-3,,,,1.0,0,4.38995,"n: 5.7799,
n^2: 4.38995",$O(n^{2.7799})$,n: dimension of square matrix,n^2,https://doi.org/10.1016/0020-0190(79)90113-3,0.0,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"Derived: Same idea as Strassen's, plus three additional nxn matrices",1.0,0.0,,0,,1,$O(n logn)$ error,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,218776162.4,4.55488E-08,,4.79E+16,0,,1.05E+25,0,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4.18643195,False,1,False
140,0.0,1.0,1,Schönhage–Strassen algorithm,O(n^2.37285956),6.0,Matrix Product,2.0,Matrix Multiplication,78.0,,,1,0,O(n^{(3*log52/log110)}) ~ O(n^{2.5218}),,,[https://epubs.siam.org/doi/abs/10.1137/0210032 Schonhage's algorithm (1980)],Schonhage's algorithm,1980,https://epubs.siam.org/doi/abs/10.1137/0210032,,,,1.0,0,4.2609,"n: 5.5218,
n^2: 4.2609",$O(n^{(3*\log 52/l \og 110)}) ~ O(n^{2.5218})$,n: dimension of square matrix,n^2,https://epubs.siam.org/doi/abs/10.1137/0210032,0.0,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"Derived: Same idea as Strassen's, plus three additional nxn matrices",1.0,0.0,,0,,1,?,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,36307805.48,2.74459E-07,,1.32E+15,0,,4.79E+22,0,,3,,,Combinatorics,Sch%C3%B6nhage%E2%80%93Strassen_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sch%C3%B6nhage%E2%80%93Strassen_algorithm/monthly/20150701/20230731,1994.0,1936.0,2452.0,2705.0,2540.0,2240.0,2553.0,2608.0,3319.0,2670.0,2974.0,2504.0,2338.0,2205.0,2476.0,2290.0,2453.0,2154.0,2515.0,2653.0,2604.0,2427.0,2467.0,2819.0,1958.0,2054.0,2231.0,2551.0,2641.0,2249.0,2523.0,2232.0,2636.0,2479.0,2399.0,1819.0,1929.0,1921.0,2860.0,2651.0,2496.0,2480.0,3556.0,3265.0,4396.0,10375.0,3832.0,2385.0,2014.0,1979.0,2755.0,24266.0,3568.0,2659.0,2900.0,2524.0,2509.0,2942.0,2695.0,2336.0,2448.0,2265.0,2505.0,3433.0,3549.0,3191.0,2921.0,2530.0,3284.0,2795.0,2642.0,2295.0,2025.0,3432.0,3665.0,3084.0,7463.0,5517.0,2863.0,2773.0,3010.0,2716.0,2595.0,2456.0,19730.0,3285.0,3459.0,3461.0,4132.0,2857.0,3321.0,2752.0,3226.0,3687.0,3444.0,2654.0,3632.0,3278.948453608248,4.18643195,False,1,False
141,1.0,0.0,1,DSatur,O(1.3289^n),7.0,Graph Coloring,2.0,3-Graph Coloring,97.0,,,1,1,O(V^2),,,[https://dl.acm.org/doi/10.1145/359094.359101 Brélaz (DSatur) (1979)],Brélaz (DSatur),1979,https://dl.acm.org/doi/10.1145/359094.359101,,,,0.0,0,5,n: 5,$O(n^2)$,"n: number of nodes
m: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 3",O(m+n),Derived using adjacency lists,1.0,0.0,,0,,0,,1,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,1000000.0,Inf,inf,,,inf,,,inf,1,,,Combinatorics,DSatur,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/DSatur/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113.0,174.0,130.0,89.0,112.0,209.0,291.0,249.0,196.0,163.0,193.0,249.0,284.0,250.0,130.0,102.0,172.0,435.0,272.0,236.0,434.0,227.0,308.0,295.0,280.0,264.0,185.0,147.0,134.0,255.0,329.0,258.0,412.0,432.0,826.0,418.0,430.0,402.0,174.0,196.0,276.0,524.0,453.0,361.0,780.0,383.0,471.0,468.0,589.0,430.0,226.0,302.27450980392155,4,False,3,False
142,0.0,1.0,1,Hopcroft–Karp algorithm,,28.0,Maximum Cardinality Matching,1.0,,286.0,,,1,0,O(V^0.5 E),,https://link.springer.com/content/pdf/10.1007/PL00009186.pdf,[https://ieeexplore.ieee.org/document/4567800 Micali and Vazirani (1980)],Micali and Vazirani,1980,https://ieeexplore.ieee.org/document/4567800,,,,0.0,0,5.5,"V: 5.5,
E: 3",$O(V^{0.5} E)$,"V: #nodes
E: #edges",V,,,Restricted Randomness (RR),not mentioned,3,V: 3,O(V),https://link.springer.com/content/pdf/10.1007/PL00009186.pdf,0.0,0.0,,0,,1,,0,0,,0,0,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4567800,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,Hopcroft%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hopcroft%E2%80%93Karp_algorithm/monthly/20150701/20230731,1720.0,1816.0,2402.0,2989.0,3162.0,3148.0,2535.0,2404.0,2772.0,3408.0,4049.0,2485.0,1657.0,2033.0,2392.0,3271.0,2940.0,2764.0,2903.0,2592.0,3376.0,3374.0,3774.0,3468.0,2301.0,2299.0,2487.0,3462.0,3392.0,2847.0,2901.0,2859.0,2809.0,2534.0,2782.0,2145.0,1553.0,1796.0,1872.0,2563.0,2780.0,2051.0,2024.0,1937.0,2237.0,2383.0,2181.0,1905.0,1517.0,1757.0,1792.0,3075.0,2644.0,2344.0,2767.0,2200.0,2125.0,2597.0,2492.0,1820.0,1631.0,1667.0,1793.0,2365.0,2335.0,2820.0,1932.0,1858.0,2594.0,2124.0,2436.0,1929.0,1665.0,1511.0,1601.0,1870.0,1781.0,1870.0,1882.0,1674.0,2277.0,1775.0,2358.0,1480.0,1395.0,1397.0,1465.0,1775.0,1914.0,1897.0,1792.0,2144.0,2422.0,2036.0,2199.0,1729.0,1482.0,2304.5257731958764,3,False,3,True
143,0.0,1.0,1,Travelling salesman problem,O(V^2 2^V),61.0,The Traveling-Salesman Problem,2.0,Minimum TSP,488.0,ILP formulation,,1,1,exp(V),,,[https://dl.acm.org/doi/10.1145/321043.321046 Miller-Tucker-Zemlin (MTZ) formulation  (1960)],Miller-Tucker-Zemlin (MTZ) formulation,1960,https://dl.acm.org/doi/10.1145/321043.321046,,,,0.0,0,8,V: 8,$exp(V)$,"V: number of vertices
E: number of edges",V,Derived: Integer programming is NP-hard and this uses O(V^2) constraints on O(V^2) variables,1.0,Word RAM,words,7,V:7,O(V^4),"Derived: V^2 + 2V constraints on V^2 variables, most integer programs use space of O(nm) where n=#vars and m=#constraints",1.0,0.0,,0,,0,,1,0,,0,0,,,,,,1000000000000.0,inf,1e+24,inf,1e+36,inf,,,,,,,,,,1,,,Combinatorics,Travelling_salesman_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Travelling_salesman_problem/monthly/20150701/20230731,33179.0,33429.0,40727.0,47755.0,51864.0,59613.0,38495.0,39366.0,44316.0,55940.0,58069.0,44550.0,32674.0,37569.0,42534.0,48274.0,60958.0,54064.0,47470.0,48912.0,53865.0,59912.0,53719.0,41735.0,38045.0,40434.0,41061.0,59567.0,59739.0,52944.0,46718.0,44624.0,55256.0,60487.0,51910.0,37370.0,34775.0,37367.0,40759.0,48491.0,55592.0,56915.0,46021.0,42385.0,47732.0,49871.0,46844.0,35741.0,46523.0,33160.0,48213.0,50209.0,51177.0,48668.0,48759.0,45420.0,45552.0,54586.0,53487.0,43115.0,37141.0,35854.0,42381.0,63099.0,57454.0,59757.0,50736.0,44917.0,56742.0,57065.0,53720.0,46870.0,40064.0,39780.0,43609.0,46594.0,50842.0,53076.0,45347.0,42865.0,47174.0,55965.0,59944.0,44312.0,39148.0,41295.0,39629.0,48467.0,62284.0,57443.0,46066.0,43694.0,49117.0,47297.0,49822.0,41469.0,34465.0,47464.0206185567,#VALUE!,False,1,False
144,0.0,1.0,1,Travelling salesman problem,O(V^2 2^V),61.0,The Traveling-Salesman Problem,2.0,Minimum TSP,489.0,ILP formulation,,1,1,O(1.674^V E^2),,,[https://doi.org/10.1287/opre.2.4.393 Dantzig-Fulkerson-Johnson (DFJ) formulation (1954)],Dantzig-Fulkerson-Johnson (DFJ) formulation,1954,https://doi.org/10.1287/opre.2.4.393,,,,0.0,0,8,"V: 8,
E: 5",$O(1.674^V E^2)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,8,V: 8,O(2^V),http://web.ist.utl.pt/~ist11038/CD_Casquilho/TSP1992EJOR_Laporte.pdf,0.0,0.0,,0,,0,,1,0,,0,0,,,,,,inf,,inf,,inf,,,,,,,,,,,1,,,Combinatorics,Travelling_salesman_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Travelling_salesman_problem/monthly/20150701/20230731,33179.0,33429.0,40727.0,47755.0,51864.0,59613.0,38495.0,39366.0,44316.0,55940.0,58069.0,44550.0,32674.0,37569.0,42534.0,48274.0,60958.0,54064.0,47470.0,48912.0,53865.0,59912.0,53719.0,41735.0,38045.0,40434.0,41061.0,59567.0,59739.0,52944.0,46718.0,44624.0,55256.0,60487.0,51910.0,37370.0,34775.0,37367.0,40759.0,48491.0,55592.0,56915.0,46021.0,42385.0,47732.0,49871.0,46844.0,35741.0,46523.0,33160.0,48213.0,50209.0,51177.0,48668.0,48759.0,45420.0,45552.0,54586.0,53487.0,43115.0,37141.0,35854.0,42381.0,63099.0,57454.0,59757.0,50736.0,44917.0,56742.0,57065.0,53720.0,46870.0,40064.0,39780.0,43609.0,46594.0,50842.0,53076.0,45347.0,42865.0,47174.0,55965.0,59944.0,44312.0,39148.0,41295.0,39629.0,48467.0,62284.0,57443.0,46066.0,43694.0,49117.0,47297.0,49822.0,41469.0,34465.0,47464.0206185567,#VALUE!,False,1,False
145,0.0,0.0,0,,,61.0,The Traveling-Salesman Problem,1.0,Geometric Maximum TSP,490.0,Tunneling,,1,0,O(V^2 loglogE),,,[https://dl.acm.org/doi/10.1145/876638.876640 Barvinok (2003)],Barvinok,2003,https://dl.acm.org/doi/10.1145/876638.876640,,,,0.0,0,5.01,"V: 5.01,
E: 1.99",$O(V^2 \log\log E)$,"V: number of vertices
E: number of edges",V,https://dl.acm.org/doi/10.1145/876638.876640,0.0,Real RAM,memory cells,3,V: 3,O(V)?,"Derived: One memory cell per tunnel-city pair, with one tunnel total",1.0,0.0,,0,,1,?,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#VALUE!,False,1,False
146,0.0,1.0,1,Set cover problem,,98.0,The Set-Covering Problem,1.0,Weighted Set-Covering,767.0,,,1,0,O(dn^2),,,[https://www.jstor.org/stable/3689577#metadata_info_tab_contents Chvatal greedy heuristic (1979)],Chvatal greedy heuristic,1979,https://www.jstor.org/stable/3689577#metadata_info_tab_contents,,,,1.0,0,5,"n: 5,
d: 3",$O(dn^2)$,"n: number of elements in the universe
d: size of the largest set in S
m: number of sets in S",n,,,,,5,"d: 3,
m: 3,
n: 5",O(dm),"Derived -- worst case, updating each set in S to be something else and we don't want to change the input",1.0,0.0,,0,,1,ln n - lnln n + \Theta(1),1,0,,0,0,http://dl.acm.org/citation.cfm?id=237991,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Set_cover_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Set_cover_problem/monthly/20150701/20230731,4959.0,4491.0,5127.0,6942.0,9417.0,8467.0,6217.0,7246.0,6730.0,8181.0,7716.0,5806.0,4412.0,4392.0,5901.0,7263.0,9681.0,8770.0,6156.0,6567.0,7912.0,8004.0,8780.0,5992.0,5423.0,5010.0,5008.0,7836.0,9616.0,9079.0,7088.0,6320.0,7184.0,9827.0,7946.0,6051.0,5127.0,4747.0,5076.0,7401.0,8603.0,8543.0,6528.0,6243.0,7337.0,8801.0,8547.0,6009.0,5636.0,4738.0,5630.0,7997.0,10297.0,10077.0,6396.0,7013.0,6375.0,8683.0,8278.0,6884.0,5558.0,5616.0,5414.0,8196.0,9739.0,8637.0,6807.0,6621.0,7856.0,8485.0,7633.0,6257.0,5167.0,4826.0,5431.0,7139.0,8791.0,8082.0,6072.0,6368.0,6649.0,8796.0,7622.0,5702.0,4659.0,4256.0,4627.0,6527.0,8588.0,7535.0,6041.0,5830.0,6624.0,7611.0,6965.0,5191.0,5127.0,6902.350515463918,4,False,1,False
147,0.0,0.0,0,,,99.0,Motif Search,1.0,Motif Search,786.0,,,1,0,O(nm),,,[https://www.ncbi.nlm.nih.gov/pubmed/9788350 Roth AlignACE (1998)],Roth AlignACE,1998,https://www.ncbi.nlm.nih.gov/pubmed/9788350,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",$O(nm)$,"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2,"n: 3,
m: 3,
mn: 2",O(n + m),derived: essentially just modified Gibbs sampling,1.0,0.0,,0,,1,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,True
148,0.0,0.0,0,,,102.0,Image Compositing,1.0,Image Compositing,804.0,,,0,0,O(n^2 k/r),,,[ Petro Vlahos Algorithm (1985)],Petro Vlahos Algorithm,1985,,,,,1.0,0,5,"n: 5,
k: 3",$O(n^2 k/r)$,"n: number of images?
k: number of pixels in each image?",n,,,Word RAM?,words,3,"n: 3,
k: 3",O(nk)??,Keeps track of all pixels across all images,1.0,0.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
149,0.0,1.0,1,Simultaneous localization and mapping,,115.0,SLAM Algorithms,1.0,SLAM Algorithms,905.0,,0.0,1,0,O(n^3),"don't think ""avg case distribution"" makes sense here",(none),[http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf EKF SLAM (1998)],EKF SLAM,1998,http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf,,,,1.0,0,6,n: 6,$O(n^3)$,n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,(can be easily derived? it's mostly square matrices here),1.0,0.0,,0,,1,,0,0,,0,0,"https://www.researchgate.net/figure/Computational-Complexity-of-Different-Forms-of-Unscented-Kalman-Filter_tbl1_220398698

https://www.researchgate.net/publication/283824088_Computational_cost_analysis_of_extended_Kalman_filter_in_simultaneous_localization_and_mapping_EKF-SLAM_problem_for_autonomous_vehicle

https://www.researchgate.net/figure/Computational-Complexity-of-Different-Forms-of-Unscented-Kalman-Filter_tbl1_220398698",,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Robotics,Simultaneous_localization_and_mapping,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Simultaneous_localization_and_mapping/monthly/20150701/20230731,9151.0,8575.0,9633.0,11109.0,11367.0,10156.0,13051.0,12444.0,14572.0,12906.0,13838.0,13344.0,13615.0,14127.0,14866.0,19240.0,15730.0,13773.0,15950.0,16475.0,18254.0,18021.0,18118.0,17261.0,16361.0,15971.0,16517.0,17700.0,18592.0,15616.0,18443.0,16296.0,19060.0,18055.0,19190.0,17292.0,16278.0,15868.0,17046.0,21691.0,18692.0,16955.0,19509.0,18222.0,20824.0,20634.0,19120.0,16309.0,16344.0,16181.0,17984.0,20191.0,17972.0,15534.0,17548.0,17145.0,16458.0,17145.0,17411.0,16209.0,14988.0,14442.0,15845.0,17142.0,16523.0,15147.0,16606.0,14923.0,17882.0,16554.0,15848.0,14397.0,14027.0,12757.0,14512.0,16089.0,15300.0,13016.0,13491.0,12957.0,14091.0,13655.0,13982.0,12552.0,10648.0,11311.0,11884.0,12808.0,13496.0,11660.0,11843.0,11580.0,12458.0,10326.0,10484.0,9928.0,9116.0,15218.62886597938,2,False,3,False
150,0.0,0.0,0,,,115.0,SLAM Algorithms,1.0,SLAM Algorithms,906.0,,0.0,1,0,O(n^3),^see above,(none),[https://www.seas.harvard.edu/courses/cs281/papers/unscented.pdf UKF (2000)],UKF,2000,https://www.seas.harvard.edu/courses/cs281/papers/unscented.pdf,,,,0.0,0,6,n: 6,$O(n^3)$,n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,(can be easily derived? it's mostly square matrices here),1.0,0.0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,False
151,0.0,0.0,0,,,115.0,SLAM Algorithms,1.0,SLAM Algorithms,907.0,,0.0,1,0,O(n^3),^see above,(none),[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.206.999&rep=rep1&type=pdf Compressed Extended KF (2002)],Compressed Extended KF,2002,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.206.999&rep=rep1&type=pdf,,,,0.0,0,6,n: 6,$O(n^3)$,n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,(can be easily derived? it's mostly square matrices here),1.0,0.0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,False
152,0.0,1.0,1,Particle filter,,115.0,SLAM Algorithms,1.0,SLAM Algorithms,909.0,,0.0,1,1,O(n^2),^see above,(none),[https://papers.nips.cc/paper/1716-bayesian-map-learning-in-dynamic-environments.pdf Rao-Blackwellized Particle Filtering SLAM (2001)],Rao-Blackwellized Particle Filtering SLAM,2001,https://papers.nips.cc/paper/1716-bayesian-map-learning-in-dynamic-environments.pdf,,,,1.0,3->4,5,n: 5,$O(n^2)$,n: number of dimensions in state space,n,,,Real RAM?,words?,3,n: 3,O(n)?,(based on Section 4 of the paper?),0.0,1.0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000.0,1,,1E+12,1000000,,1.00E+18,1000000000,,3,,,Robotics,Particle_filter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Particle_filter/monthly/20150701/20230731,7939.0,7536.0,7980.0,9444.0,9780.0,7950.0,8386.0,9266.0,9662.0,10138.0,10078.0,9061.0,8140.0,7186.0,8095.0,9322.0,9917.0,8922.0,9091.0,9106.0,10552.0,9140.0,9978.0,8968.0,8273.0,8525.0,8509.0,10838.0,10813.0,8621.0,9417.0,8656.0,10003.0,10150.0,10654.0,8915.0,8248.0,7394.0,7474.0,9408.0,9651.0,9286.0,9427.0,8385.0,9589.0,9569.0,9634.0,8217.0,7966.0,7287.0,7698.0,9434.0,9299.0,7682.0,8199.0,7991.0,7977.0,8944.0,8657.0,7732.0,7220.0,6315.0,6674.0,7839.0,8294.0,8207.0,7568.0,7497.0,9194.0,8183.0,8382.0,7542.0,10414.0,8141.0,6976.0,7756.0,7938.0,7633.0,7220.0,7380.0,7830.0,7279.0,6968.0,6498.0,5656.0,5389.0,5843.0,6425.0,6711.0,5699.0,5767.0,6044.0,6607.0,5642.0,5861.0,5685.0,5112.0,8201.525773195875,2,False,3,True
153,0.0,0.0,0,,O(1.3289^n),7.0,Graph Coloring,2.0,3-Graph Coloring,96.0,,,1,1,O(nlogn),,,[https://www.sciencedirect.com/science/article/pii/0012365X89902148 Petford and Welsh (1989)],Petford and Welsh,1989,https://www.sciencedirect.com/science/article/pii/0012365X89902148,,,,1.0,1->5,4,n: 4,$O(n \log n)$,n: #vertices,n,,,Word RAM,words,3,n: 3,O(n),"Derived: we store the coloring of each vertex in a dictionary and the maximum size of this dictionary is equal to the number of vertices in the graph, n.",1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,9965.0,Inf,inf,,,inf,,,inf,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,True,3,True
154,0.0,1.0,1,Graph coloring,O(1.7272^n),8.0,Graph Coloring,2.0,4-Graph Coloring,101.0,,,1,1,O(1.7272^n),,,[https://link.springer.com/chapter/10.1007/978-3-540-73545-8_9 Fomin; Gaspers & Saurabh (2007)],Fomin; Gaspers & Saurabh,2007,https://link.springer.com/chapter/10.1007/978-3-540-73545-8_9,1,0.0,https://www.researchgate.net/publication/221426668_Improved_Exact_Algorithms_for_Counting_3-_and_4-Colorings,1.0,0,8,n: 8,$O(1.7272^n)$,"n: #vertices
m: #edges",n,,,Word RAM,words,3,n: 3,O(n),"Derived: we store the sets I and C (in algorithm enumIS), and the maximum size of these sets is equal to the number of vertices in the graph. The algorithm also stores the solution sets S1 and S2, which have a maximum size equal to the number of vertices in the graph. We also call a 3-coloring algorithm, which likely has O(n) space complexity",1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Graph_coloring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_coloring/monthly/20150701/20230731,8595.0,9704.0,10569.0,14397.0,18162.0,16327.0,12809.0,13019.0,14456.0,18490.0,16650.0,12019.0,8460.0,9375.0,11997.0,15343.0,18564.0,17243.0,15294.0,13597.0,16435.0,16459.0,16108.0,10991.0,9548.0,8849.0,10699.0,15654.0,19650.0,15924.0,12208.0,11554.0,15400.0,18167.0,15989.0,10890.0,8749.0,8990.0,11333.0,15340.0,17372.0,16382.0,12651.0,11333.0,14801.0,15602.0,14930.0,11109.0,9034.0,8019.0,10395.0,14844.0,18118.0,16018.0,12595.0,12815.0,12882.0,17872.0,17304.0,13292.0,10775.0,9098.0,11006.0,16481.0,19198.0,19340.0,16029.0,14510.0,17725.0,18458.0,16280.0,13563.0,12242.0,10132.0,10405.0,13796.0,16590.0,16085.0,14103.0,13315.0,13271.0,15728.0,16211.0,12798.0,10015.0,8391.0,9438.0,13519.0,17050.0,15558.0,13554.0,11785.0,14258.0,13430.0,13897.0,11289.0,9549.0,13713.886597938144,4,False,3,True
155,0.0,1.0,1,Closest pair of points problem,,15.0,Closest Pair Problem,1.0,,172.0,Randomized Sieve,,1,1,O(n),,,[https://www.sciencedirect.com/science/article/pii/S0890540185710498 Khuller; Matias (1995)],Khuller; Matias,1995,https://www.sciencedirect.com/science/article/pii/S0890540185710498,,,,0.0,0,3,n: 3,$O(n)$,n: #points,n,,,not mentioned,not mentioned,3,n: 3,"O(n), not sure if this is auxiliary","https://www.sciencedirect.com/science/article/pii/S0890540185710498, Theorem 2.3",0.0,1.0,,1,Las Vegas,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000.0,1000,0.412537545,1000000,1000000,0.995262315,1000000000,1000000000,1.818382931,4,,,Image Processing,Closest_pair_of_points_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Closest_pair_of_points_problem/monthly/20150701/20230731,3360.0,3511.0,4647.0,5899.0,5326.0,5200.0,5204.0,5850.0,6437.0,6173.0,5453.0,4700.0,4061.0,4621.0,6800.0,7634.0,7067.0,5231.0,5338.0,6416.0,6466.0,6262.0,5109.0,4112.0,3591.0,4173.0,6166.0,7149.0,6199.0,4439.0,4896.0,6041.0,5542.0,5394.0,4568.0,3600.0,3590.0,3436.0,4739.0,6125.0,4761.0,4512.0,4387.0,5157.0,5331.0,4648.0,4390.0,3873.0,3357.0,3768.0,5760.0,6198.0,6088.0,4101.0,4239.0,5301.0,4936.0,5355.0,4695.0,3598.0,3581.0,4436.0,5414.0,5383.0,4634.0,4175.0,4604.0,5144.0,6157.0,4325.0,3331.0,3408.0,2408.0,1941.0,2791.0,3415.0,3212.0,2237.0,2189.0,2674.0,2839.0,2596.0,2176.0,1819.0,1618.0,1480.0,2253.0,2832.0,3043.0,1770.0,2093.0,2359.0,2278.0,1892.0,1773.0,1661.0,1423.0,4292.20618556701,3,True,1,False
156,0.0,1.0,1,LU decomposition,,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,212.0,,,1,1,O(n^2.376),,,[https://dl.acm.org/citation.cfm?id=248979 Bunch; Hopcroft (1974)],Bunch; Hopcroft,1974,https://dl.acm.org/citation.cfm?id=248979,1,1.0,https://www.ams.org/journals/mcom/1974-28-125/S0025-5718-1974-0331751-8/,1.0,0,4.188,"n: 5.376,
n^2: 4.188",$O(n^{2.376})$,n: dimension of square matrix,n^2,,,Word RAM,words,4,"n: 5.01,
n^2: 4",$\tilde{O}(n^2)$,Derived: Uses Strassen multiplication and a constant number of $n \times n$ auxiliary matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,13427649.61,74.47319739,0.135164559,1.80302E+14,5546.25713,0.288598576,2.42E+21,413047.502,0.462771434,3,,,Numerical Analysis,LU_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/LU_decomposition/monthly/20150701/20230731,11093.0,10950.0,18335.0,23600.0,20505.0,16770.0,16285.0,21552.0,21401.0,19728.0,19675.0,13898.0,11062.0,13232.0,19887.0,27402.0,24450.0,18971.0,18374.0,24116.0,23179.0,20405.0,19578.0,14531.0,11697.0,13365.0,20231.0,27361.0,24053.0,18839.0,19273.0,22743.0,21803.0,22271.0,19855.0,14136.0,12219.0,13086.0,20207.0,26316.0,21299.0,17719.0,17570.0,21679.0,22133.0,19569.0,18469.0,13185.0,12007.0,12902.0,21366.0,27456.0,23257.0,18360.0,19126.0,22400.0,19266.0,20804.0,20748.0,16932.0,14170.0,13624.0,22417.0,28471.0,23644.0,19792.0,18518.0,21322.0,25066.0,20561.0,17630.0,15481.0,12562.0,12792.0,18719.0,23520.0,20961.0,17420.0,17790.0,20824.0,20572.0,18693.0,17331.0,13504.0,10472.0,11997.0,18137.0,22463.0,20058.0,15593.0,15479.0,17584.0,18537.0,15119.0,15431.0,12615.0,9957.0,18572.23711340206,2.51,False,1,False
157,1.0,0.0,1,Bitap algorithm,,22.0,String Search,2.0,Single String Search,242.0,,,1,1,O(mn),,,[https://en.wikipedia.org/wiki/Bitap_algorithm Bitap algorithm (1964)],Bitap algorithm,1964,https://en.wikipedia.org/wiki/Bitap_algorithm,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: text length",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
m+n: 3",$O(m)$,Derived: Uses a bit array of size $O(m)$,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics,Bitap_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bitap_algorithm/monthly/20150701/20230731,1521.0,1772.0,1569.0,1642.0,1465.0,1437.0,1507.0,1392.0,1706.0,1544.0,1612.0,1256.0,1182.0,1247.0,1165.0,1239.0,1472.0,1223.0,1113.0,1124.0,1421.0,1223.0,1300.0,1246.0,1173.0,1075.0,1113.0,1299.0,1334.0,1067.0,1507.0,1173.0,1400.0,1424.0,1512.0,1149.0,1040.0,1021.0,1055.0,1039.0,1094.0,1285.0,1258.0,985.0,1181.0,1259.0,1100.0,1115.0,1047.0,1228.0,988.0,1073.0,1138.0,1006.0,1111.0,1021.0,1099.0,1245.0,1233.0,1137.0,945.0,939.0,1007.0,1141.0,1102.0,955.0,942.0,963.0,1521.0,1094.0,1207.0,963.0,848.0,910.0,771.0,816.0,956.0,829.0,908.0,880.0,1035.0,927.0,1017.0,864.0,795.0,897.0,1204.0,1003.0,1119.0,1223.0,2092.0,1147.0,1374.0,1334.0,1288.0,1288.0,1044.0,1182.5773195876288,3,False,1,False
158,1.0,0.0,1,Tree sort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,4.0,,,1,1,O(n logn),uniform distribution over all possible permutations,(derive from lower + upper bounds),[https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4 Tree sort (1986)],Tree sort,1986,https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4,,,,0.0,0,4,n: 4,$O(n \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),"Derived: Need some way to store the tree of elements, so we need $O(n)$ auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics,Tree_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tree_sort/monthly/20150701/20230731,1683.0,1941.0,2503.0,2776.0,3122.0,2572.0,2117.0,2347.0,2716.0,2875.0,2782.0,2272.0,1910.0,2456.0,2445.0,3514.0,4053.0,3313.0,2776.0,2955.0,3656.0,3646.0,3762.0,2529.0,2227.0,2167.0,2711.0,4029.0,3391.0,3080.0,2272.0,2460.0,3019.0,3162.0,2925.0,2198.0,1823.0,1827.0,2269.0,2770.0,3008.0,2713.0,2148.0,2032.0,2384.0,2564.0,2305.0,1502.0,1358.0,1299.0,1545.0,2101.0,2376.0,1951.0,1666.0,1828.0,1879.0,2313.0,2386.0,2283.0,1764.0,1590.0,1946.0,2469.0,2616.0,2186.0,1883.0,2015.0,2667.0,2512.0,2255.0,2546.0,2113.0,1706.0,1647.0,2103.0,2360.0,2055.0,1786.0,1830.0,2371.0,1975.0,2011.0,2129.0,1663.0,1545.0,1595.0,1861.0,2225.0,1939.0,1725.0,1562.0,1970.0,1529.0,1700.0,1356.0,1050.0,2298.422680412371,2,False,1,False
159,1.0,0.0,1,Quicksort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,6.0,,,1,1,O(n logn),uniform distribution over all possible permutations,https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,[https://apps.dtic.mil/dtic/tr/fulltext/u2/740110.pdf Quick Sort (1961)],Quick Sort,1961,https://apps.dtic.mil/dtic/tr/fulltext/u2/740110.pdf,,,,0.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,2,n: 2,O(\log n),https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,0.0,0.0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,Quicksort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Quicksort/monthly/20150701/20230731,62198.0,69606.0,86096.0,104396.0,95699.0,81770.0,77130.0,91008.0,93669.0,97755.0,86825.0,68841.0,60209.0,68166.0,86634.0,102916.0,101909.0,81735.0,78614.0,89043.0,98726.0,87092.0,80637.0,64746.0,56443.0,57203.0,73464.0,99464.0,82464.0,65862.0,65117.0,71411.0,78946.0,78924.0,75396.0,55074.0,51273.0,56327.0,69334.0,83828.0,74820.0,58533.0,56982.0,61269.0,66724.0,62874.0,55841.0,40242.0,37910.0,39692.0,55141.0,61611.0,54572.0,47354.0,49314.0,57054.0,52874.0,51954.0,55490.0,51484.0,46235.0,47991.0,59655.0,69886.0,67459.0,61420.0,55940.0,58365.0,70050.0,60893.0,54272.0,49469.0,47958.0,45975.0,53996.0,64041.0,59714.0,48305.0,49905.0,50387.0,59322.0,52363.0,51588.0,44728.0,38262.0,37147.0,44967.0,48790.0,49615.0,40221.0,38064.0,39580.0,44454.0,38506.0,34726.0,29685.0,26750.0,62560.50515463918,2,False,1,False
160,1.0,0.0,1,Timsort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,9.0,,,1,1,O(n*log n),uniform distribution over all possible permutations (implicit; reference says runtime is O(n+n*log(rho)) where rho is number of runs but expected value of rho is Theta(n),https://drops.dagstuhl.de/opus/volltexte/2018/9467/,[- Tim Sort (2002)],Tim Sort,2002,-,,,,0.0,0,4,n: 4,$O(n logn)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Timsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics,Timsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Timsort/monthly/20150701/20230731,9568.0,8704.0,10146.0,12209.0,11123.0,9949.0,9661.0,10643.0,13750.0,11585.0,11313.0,9132.0,8817.0,8774.0,10389.0,11455.0,11917.0,11401.0,13743.0,11565.0,12619.0,9852.0,9332.0,10164.0,8494.0,9587.0,9849.0,16733.0,12184.0,9929.0,10091.0,12700.0,12645.0,11759.0,11639.0,9313.0,11909.0,12333.0,14678.0,18466.0,13926.0,11498.0,12504.0,14108.0,14174.0,15878.0,12007.0,9717.0,9736.0,9914.0,14963.0,16792.0,12676.0,11576.0,19316.0,14354.0,13277.0,13399.0,12962.0,11320.0,11722.0,10953.0,12957.0,14146.0,13707.0,12104.0,11269.0,11639.0,14578.0,12466.0,11975.0,10113.0,11112.0,10078.0,11659.0,14098.0,12311.0,10729.0,11835.0,11391.0,12902.0,13313.0,12960.0,13148.0,10983.0,10578.0,11044.0,11796.0,11665.0,9796.0,9445.0,10775.0,10968.0,9624.0,8940.0,7902.0,7225.0,11733.226804123711,2,False,1,False
161,1.0,0.0,1,Cubesort,O(n*logn),1.0,Sorting,1.0,Comparison Sorting,10.0,,,1,1,O(n logn),,,[https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub Cube Sort Parallel Implementation (1992)],Cube Sort Parallel Implementation,1992,https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub,,,,0.0,0,4,n: 4,$O(n logn)$,n: size of list,n,,,Parallel RAM,words,3,n: 3,O(n),(can be easily derived),1.0,0.0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Cubesort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Combinatorics,Cubesort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cubesort/monthly/20150701/20230731,420.0,416.0,451.0,549.0,585.0,508.0,580.0,565.0,695.0,616.0,603.0,399.0,692.0,914.0,1113.0,1305.0,1373.0,1136.0,1088.0,1337.0,1255.0,998.0,972.0,756.0,808.0,678.0,982.0,1406.0,1137.0,1017.0,946.0,1115.0,1184.0,1106.0,993.0,772.0,777.0,793.0,1000.0,1665.0,1127.0,1102.0,1073.0,1158.0,1119.0,1098.0,768.0,678.0,610.0,648.0,734.0,875.0,878.0,783.0,758.0,749.0,741.0,740.0,726.0,633.0,552.0,502.0,637.0,664.0,655.0,581.0,572.0,686.0,805.0,627.0,633.0,497.0,402.0,447.0,585.0,703.0,840.0,687.0,647.0,641.0,674.0,617.0,701.0,740.0,566.0,522.0,622.0,679.0,628.0,1048.0,577.0,536.0,760.0,512.0,620.0,506.0,395.0,781.1237113402062,2,False,1,False
162,0.0,1.0,1,Shellsort,O(n*logn),1.0,Sorting,1.0,Comparison Sorting,11.0,,,1,1,O( n² ),<= potentially open?,,[https://dl.acm.org/citation.cfm?doid=368370.368387 Shell Sort (Shell) (1959)],Shell Sort (Shell),1959,https://dl.acm.org/citation.cfm?doid=368370.368387,,,,0.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,Shellsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shellsort/monthly/20150701/20230731,7665.0,8005.0,11948.0,13429.0,14468.0,11645.0,9266.0,11687.0,13611.0,13103.0,11689.0,8436.0,6614.0,8391.0,11020.0,11135.0,16535.0,11964.0,9140.0,11596.0,13151.0,11544.0,10549.0,8489.0,7006.0,7726.0,9128.0,20791.0,13722.0,10827.0,8209.0,8785.0,10749.0,11213.0,9916.0,7597.0,6236.0,8140.0,9278.0,11417.0,11007.0,9175.0,7075.0,7567.0,8911.0,10198.0,8652.0,6223.0,5089.0,5640.0,9389.0,9550.0,9322.0,11743.0,6158.0,7355.0,7049.0,7927.0,7576.0,7189.0,6141.0,5691.0,8093.0,9347.0,10396.0,8817.0,7128.0,7968.0,8705.0,10685.0,7741.0,7330.0,6773.0,5236.0,6674.0,8657.0,7857.0,7798.0,6276.0,6025.0,7449.0,7096.0,6816.0,6792.0,4549.0,4048.0,5269.0,7211.0,7335.0,5666.0,5018.0,5384.0,6260.0,5537.0,5189.0,4455.0,3897.0,8659.01030927835,2,False,1,True
163,0.0,1.0,1,Shellsort,O(n*logn),1.0,Sorting,1.0,Comparison Sorting,12.0,,,1,1,O(n^1.5),<= I think this is an open problem to determine if there's a better average-case bound,,[https://dl.acm.org/citation.cfm?doid=366947.366957 Shell Sort (Frank & Lazarus) (1960)],Shell Sort (Frank & Lazarus),1960,https://dl.acm.org/citation.cfm?doid=366947.366957,,,,0.0,0,4.5,n: 4.5,$O(n^{1.5})$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,31622.0,31.62355322,,,,,,,,4,,,Combinatorics,Shellsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shellsort/monthly/20150701/20230731,7665.0,8005.0,11948.0,13429.0,14468.0,11645.0,9266.0,11687.0,13611.0,13103.0,11689.0,8436.0,6614.0,8391.0,11020.0,11135.0,16535.0,11964.0,9140.0,11596.0,13151.0,11544.0,10549.0,8489.0,7006.0,7726.0,9128.0,20791.0,13722.0,10827.0,8209.0,8785.0,10749.0,11213.0,9916.0,7597.0,6236.0,8140.0,9278.0,11417.0,11007.0,9175.0,7075.0,7567.0,8911.0,10198.0,8652.0,6223.0,5089.0,5640.0,9389.0,9550.0,9322.0,11743.0,6158.0,7355.0,7049.0,7927.0,7576.0,7189.0,6141.0,5691.0,8093.0,9347.0,10396.0,8817.0,7128.0,7968.0,8705.0,10685.0,7741.0,7330.0,6773.0,5236.0,6674.0,8657.0,7857.0,7798.0,6276.0,6025.0,7449.0,7096.0,6816.0,6792.0,4549.0,4048.0,5269.0,7211.0,7335.0,5666.0,5018.0,5384.0,6260.0,5537.0,5189.0,4455.0,3897.0,8659.01030927835,2,False,1,True
164,0.0,1.0,1,Shellsort,O(n*logn),1.0,Sorting,1.0,Comparison Sorting,13.0,,,1,1,O(n log² n),<= I think this is an open problem to determine if there's a better average-case bound,,[https://apps.dtic.mil/sti/pdfs/AD0740110.pdf Shell Sort (Pratt) (1971)],Shell Sort (Pratt),1971,https://apps.dtic.mil/sti/pdfs/AD0740110.pdf,,,,0.0,0,4.01,n: 4.01,$O(n \log^2 n)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,99301.0,10.07039204,,,,,,,,4,,,Combinatorics,Shellsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shellsort/monthly/20150701/20230731,7665.0,8005.0,11948.0,13429.0,14468.0,11645.0,9266.0,11687.0,13611.0,13103.0,11689.0,8436.0,6614.0,8391.0,11020.0,11135.0,16535.0,11964.0,9140.0,11596.0,13151.0,11544.0,10549.0,8489.0,7006.0,7726.0,9128.0,20791.0,13722.0,10827.0,8209.0,8785.0,10749.0,11213.0,9916.0,7597.0,6236.0,8140.0,9278.0,11417.0,11007.0,9175.0,7075.0,7567.0,8911.0,10198.0,8652.0,6223.0,5089.0,5640.0,9389.0,9550.0,9322.0,11743.0,6158.0,7355.0,7049.0,7927.0,7576.0,7189.0,6141.0,5691.0,8093.0,9347.0,10396.0,8817.0,7128.0,7968.0,8705.0,10685.0,7741.0,7330.0,6773.0,5236.0,6674.0,8657.0,7857.0,7798.0,6276.0,6025.0,7449.0,7096.0,6816.0,6792.0,4549.0,4048.0,5269.0,7211.0,7335.0,5666.0,5018.0,5384.0,6260.0,5537.0,5189.0,4455.0,3897.0,8659.01030927835,2,False,1,True
165,0.0,1.0,1,Shellsort,O(n*logn),1.0,Sorting,1.0,Comparison Sorting,14.0,,,1,1,O(n^1.33),<= I think this is an open problem to determine if there's a better average-case bound,,[https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub Shell Sort (Sedgewick) (1986)],Shell Sort (Sedgewick),1986,https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub,,,,0.0,0,4.33,n: 4.33,$O(n^{1.33})$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,9772.0,102.3331969,,,,,,,,4,,,Combinatorics,Shellsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shellsort/monthly/20150701/20230731,7665.0,8005.0,11948.0,13429.0,14468.0,11645.0,9266.0,11687.0,13611.0,13103.0,11689.0,8436.0,6614.0,8391.0,11020.0,11135.0,16535.0,11964.0,9140.0,11596.0,13151.0,11544.0,10549.0,8489.0,7006.0,7726.0,9128.0,20791.0,13722.0,10827.0,8209.0,8785.0,10749.0,11213.0,9916.0,7597.0,6236.0,8140.0,9278.0,11417.0,11007.0,9175.0,7075.0,7567.0,8911.0,10198.0,8652.0,6223.0,5089.0,5640.0,9389.0,9550.0,9322.0,11743.0,6158.0,7355.0,7049.0,7927.0,7576.0,7189.0,6141.0,5691.0,8093.0,9347.0,10396.0,8817.0,7128.0,7968.0,8705.0,10685.0,7741.0,7330.0,6773.0,5236.0,6674.0,8657.0,7857.0,7798.0,6276.0,6025.0,7449.0,7096.0,6816.0,6792.0,4549.0,4048.0,5269.0,7211.0,7335.0,5666.0,5018.0,5384.0,6260.0,5537.0,5189.0,4455.0,3897.0,8659.01030927835,2,False,1,True
166,1.0,0.0,1,Bitonic sorter,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,17.0,,,1,1,O(log² n),,,[https://epubs.siam.org/doi/abs/10.1137/0218014 Bitonic Merge Sort Parallel Implementation (1968)],Bitonic Merge Sort Parallel Implementation,1968,https://epubs.siam.org/doi/abs/10.1137/0218014,,,,0.0,0,2,n: 2,$O(\log^2 n)$,n: size of list,n,,,PRAC (shared-memory multiprocessor of the EREW PRAM variety),words,1,n: 1,O(1),"Paper claims ""logspace uniform"", so with O(log n) words, this is constant # of words",0.0,1.0,,0,,0,,0,1,n/log(n),0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,99.0,10101.0101,,,,,,,,4,,,Combinatorics,Bitonic_sorter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bitonic_sorter/monthly/20150701/20230731,2695.0,2558.0,3235.0,5649.0,4615.0,4886.0,3647.0,3108.0,5782.0,4969.0,4565.0,3243.0,2258.0,2297.0,2611.0,3593.0,4728.0,4397.0,3354.0,3758.0,4437.0,3597.0,4079.0,4132.0,2636.0,2167.0,2755.0,21146.0,5268.0,3991.0,3481.0,3240.0,4243.0,4153.0,4873.0,2957.0,2918.0,2478.0,2872.0,4036.0,3859.0,3501.0,3143.0,2814.0,4109.0,3961.0,3398.0,2582.0,2426.0,2239.0,2511.0,2953.0,3306.0,3066.0,3055.0,2793.0,4830.0,2958.0,4104.0,2724.0,2199.0,2267.0,2470.0,2692.0,2905.0,4190.0,2595.0,3152.0,4038.0,3268.0,2974.0,2730.0,2377.0,2065.0,2206.0,2361.0,2863.0,2544.0,2503.0,2449.0,3129.0,3039.0,3771.0,3168.0,2149.0,1902.0,1771.0,2160.0,2737.0,2445.0,2219.0,2777.0,3405.0,2772.0,2681.0,2820.0,2186.0,3399.1546391752577,2,True,1,True
167,0.0,1.0,1,Reachability,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,22.0,,,1,1,O(n loglogn),,,[https://www.sciencedirect.com/science/article/pii/S0196677402912113 Thorup's Sorting Algorithm (2002)],Thorup's Sorting Algorithm,2002,https://www.sciencedirect.com/science/article/pii/S0196677402912113,,,,0.0,0,4,n: 4,$O(n \log \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/S0196677402912113,0.0,1.0,,0,,0,,0,0,0,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,3316.0,301.5681544,,,,,,,,4,,,Combinatorics,Reachability,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Reachability/monthly/20150701/20230731,1326.0,1316.0,1542.0,1756.0,1818.0,1733.0,1644.0,1538.0,1705.0,1983.0,1819.0,1255.0,1055.0,1079.0,1381.0,1684.0,1929.0,1572.0,1420.0,1527.0,2043.0,1898.0,2110.0,1521.0,1261.0,1284.0,1481.0,1931.0,2032.0,1727.0,1477.0,1429.0,1625.0,1684.0,1634.0,1312.0,1163.0,1024.0,1259.0,1895.0,1943.0,1492.0,1431.0,1404.0,1668.0,1930.0,1646.0,1429.0,1128.0,1057.0,1306.0,1884.0,2028.0,1635.0,1407.0,1370.0,1457.0,1954.0,1534.0,1341.0,1141.0,1044.0,1291.0,1680.0,1633.0,1805.0,1648.0,1425.0,1873.0,1709.0,1721.0,1367.0,1414.0,1229.0,1178.0,1656.0,1870.0,1758.0,1553.0,1607.0,1637.0,1583.0,1628.0,1263.0,1159.0,1074.0,1700.0,1640.0,1998.0,1567.0,1520.0,1487.0,1643.0,1494.0,1557.0,1390.0,1240.0,1547.40206185567,2,False,1,False
168,0.0,0.0,0,,,1.0,Sorting,2.0,Non-Comparison Sorting,1500.0,,,1,1,O( n² ),uniform distribution over all possible permutations?,can consider expected number of swaps per element,[- Naive sorting (1940)],Naive sorting,1940,-,1,1.0,,1.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ sorting,1.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,1000000,1,,1000000000,1,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,True
169,1.0,0.0,1,Flashsort,,1.0,Sorting,2.0,Non-Comparison Sorting,15.0,,,1,1,O(n),uniform distribution over all sets of key values,(can be easily derived),[http://www.neubert.net/FSOIntro.html Flash Sort (1998)],Flash Sort,1998,http://www.neubert.net/FSOIntro.html,,,,0.0,0,5,n: 5,$O(n^2)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n),"http://www.neubert.net/FSOIntro.html, ""array of size # of different keys""",0.0,1.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics,Flashsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Flashsort/monthly/20150701/20230731,768.0,659.0,767.0,1083.0,888.0,869.0,776.0,852.0,900.0,1115.0,888.0,664.0,532.0,565.0,694.0,830.0,858.0,722.0,780.0,716.0,962.0,807.0,747.0,632.0,718.0,594.0,639.0,2033.0,871.0,745.0,1066.0,704.0,1344.0,1235.0,1064.0,626.0,491.0,499.0,637.0,1087.0,705.0,1423.0,596.0,584.0,760.0,2055.0,1194.0,721.0,657.0,633.0,794.0,1535.0,1302.0,1023.0,985.0,33600.0,1757.0,893.0,595.0,488.0,529.0,570.0,553.0,532.0,1899.0,1206.0,500.0,786.0,749.0,631.0,608.0,670.0,619.0,296.0,386.0,543.0,915.0,909.0,461.0,513.0,880.0,532.0,1394.0,2434.0,696.0,350.0,317.0,738.0,1029.0,477.0,471.0,483.0,808.0,1293.0,824.0,506.0,778.0,1171.2577319587629,2,False,1,False
170,1.0,0.0,1,Bead sort,,1.0,Sorting,1.0,Non-Comparison Sorting,18.0,,,1,1,O(n),uniform distribution over all sets of positive key values,(can be easily derived),[https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf Bead Sort (2002)],Bead Sort,2002,https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf,,,,0.0,0,3,n: 3,$O(n)$,n: size of list,n,,,Word RAM,words,5,n: 5,O(n^2),(wikipedia page?),0.0,0.0,,0,,0,,0,0,,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics,Bead_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bead_sort/monthly/20150701/20230731,722.0,565.0,637.0,814.0,825.0,680.0,855.0,968.0,1412.0,1496.0,1297.0,885.0,670.0,828.0,750.0,1608.0,2018.0,3087.0,1224.0,2273.0,3615.0,1462.0,1653.0,3793.0,2630.0,1946.0,2025.0,11419.0,4249.0,2630.0,1909.0,6337.0,3059.0,2444.0,2409.0,2631.0,2253.0,2042.0,2141.0,3317.0,3134.0,3881.0,3326.0,2968.0,2763.0,6372.0,2165.0,1173.0,1032.0,873.0,2668.0,2438.0,2032.0,2580.0,2769.0,1524.0,3386.0,1802.0,2837.0,1606.0,1434.0,1818.0,1581.0,4257.0,1484.0,2681.0,977.0,1290.0,1570.0,1510.0,1061.0,1243.0,920.0,582.0,1060.0,951.0,910.0,1021.0,783.0,706.0,1366.0,1367.0,2819.0,3621.0,1516.0,708.0,629.0,766.0,1543.0,892.0,829.0,1033.0,1346.0,2128.0,1265.0,638.0,1472.0,1965.8144329896909,2,False,1,False
171,1.0,0.0,1,Burstsort,,1.0,Sorting,1.0,Non-Comparison Sorting,20.0,,,1,1,O(wn),Any distribution (runtime is same regardless of input)?,(same behavior across all inputs),[https://dl.acm.org/citation.cfm?doid=1005813.1041517 Burst Sort (2004)],Burst Sort,2004,https://dl.acm.org/citation.cfm?doid=1005813.1041517,,,,0.0,0,4,"n: 4,
w: 3",$O(wn)$,"n: size of list
w: length of word",n,,,Word RAM,words,4,"n: 4,
w: 3",O(wn),(wikipedia page?),0.0,0.0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics,Burstsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Burstsort/monthly/20150701/20230731,776.0,826.0,719.0,901.0,803.0,677.0,655.0,696.0,746.0,893.0,831.0,591.0,499.0,616.0,651.0,674.0,716.0,548.0,610.0,589.0,702.0,603.0,647.0,579.0,576.0,540.0,583.0,1674.0,656.0,622.0,610.0,530.0,562.0,908.0,578.0,470.0,428.0,470.0,438.0,516.0,579.0,560.0,469.0,456.0,544.0,637.0,539.0,416.0,442.0,401.0,448.0,514.0,566.0,458.0,690.0,504.0,477.0,471.0,428.0,450.0,425.0,386.0,529.0,486.0,444.0,429.0,406.0,446.0,516.0,479.0,431.0,353.0,339.0,277.0,288.0,466.0,482.0,382.0,346.0,346.0,490.0,391.0,486.0,374.0,307.0,261.0,281.0,300.0,432.0,345.0,319.0,342.0,310.0,378.0,280.0,287.0,298.0,524.6907216494845,2,False,1,False
172,1.0,0.0,1,Spreadsort,,1.0,Sorting,1.0,Non-Comparison Sorting,23.0,,,1,1,O(n),"Lots of distributions (uniform, Gaussian, etc.)",https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,[https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52 Spreadsort (2002)],Spreadsort,2002,https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,,,,0.0,0,4,n: 4,$O(n \log n)$,n: size of list,n,,,Word RAM,words,3,n: 3,O(n)?,(can be easily derived?),1.0,0.0,,0,,0,,0,0,0,0,0,"https://en.wikipedia.org/wiki/Spreadsort#cite_note-1

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics,Spreadsort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Spreadsort/monthly/20150701/20230731,433.0,306.0,264.0,499.0,345.0,433.0,344.0,305.0,383.0,422.0,413.0,219.0,220.0,254.0,245.0,338.0,388.0,294.0,396.0,310.0,454.0,404.0,341.0,331.0,285.0,474.0,327.0,1322.0,427.0,371.0,380.0,346.0,396.0,314.0,331.0,268.0,289.0,211.0,249.0,359.0,246.0,287.0,259.0,229.0,312.0,315.0,334.0,240.0,235.0,159.0,304.0,235.0,328.0,241.0,273.0,222.0,226.0,226.0,215.0,184.0,324.0,146.0,256.0,198.0,201.0,160.0,191.0,155.0,199.0,172.0,142.0,171.0,92.0,110.0,102.0,194.0,138.0,194.0,154.0,112.0,176.0,209.0,171.0,154.0,144.0,109.0,151.0,170.0,165.0,138.0,146.0,152.0,191.0,144.0,167.0,140.0,120.0,266.16494845360825,2,False,1,False
173,0.0,0.0,0,,O(n),2.0,kth Order Statistic,1.0,kth Order Statistic,28.0,,,1,1,O(n),input values are uniformly distributed over a given range? wikipedia claims expected O(sqrt(n)),,[- Hashing (1940)],Hashing,1940,-,2,1.0,https://en.wikipedia.org/wiki/Selection_algorithm,1.0,5->6,3,n: 3,$O(n)$,n: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: size of hashtable,1.0,0.0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1.0,n is the size of the array,,,,,,,,1000.0,9.965,8.965,1000000,19.931568,18.931568,1000000000,29.89735285,28.89735285,5,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
174,0.0,1.0,1,Matrix chain multiplication,$O(n \log n)$,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Ordering Problem,31.0,,,1,1,O(nlogn),Any distribution (runtime is same regardless of input),(same behavior across inputs),[https://doi.org/10.1137/0211028 T. C. Hu ; M. T. Shing (1982)],T. C. Hu ; M. T. Shing,1982,https://doi.org/10.1137/0211028,3,1.0,http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/0213017.pdf,1.0,3->5,4,n: 4,$O(n \log n)$,n: number of matrices,n,,,Word RAM,words,3,n: 3,O(n),can be derived?,1.0,0.0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9965.0,Inf,inf,19931568,Inf,inf,29897352854,Inf,inf,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,True
175,1.0,0.0,1,Hunt–Szymanski algorithm,,4.0,Longest Common Subsequence,2.0,LCS,39.0,,,1,1,O((n^2/k) \log n),Average case value of $p$ is $n^2/k$ where $k = |\Sigma|$,https://dl.acm.org/doi/10.1145/74697.74702,[http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf Hunt and Szymanski (1977)],Hunt and Szymanski,1977,http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf,,,,1.0,-,3,"n: 4,
p: 3,
m+n: 3",$O((n + p) \log n)$,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$k$: $|\Sigma|$",m+n,,,Word RAM,words,3,"n: 3,
p: 3,
m+n: 3",$O(p + n)$,https://cse.hkust.edu.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,1000.0,9.0,1000000.0,99.0,1000000000.0,999.0,9965.784285,25.08583297,1.927360278,19931568.57,12542.91649,22.23447392,29897352854,8361944.324,201.9718253,4,,,Combinatorics,Hunt%E2%80%93Szymanski_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hunt%E2%80%93Szymanski_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,352.0,473.0,506.0,411.0,366.0,386.0,341.0,281.0,422.0,440.0,422.0,337.0,327.0,332.0,417.0,375.0,379.0,352.0,275.0,325.0,333.0,448.0,414.0,355.0,335.0,284.0,328.0,342.0,264.0,280.0,244.0,290.0,283.0,324.0,292.0,272.0,328.0,369.0,264.0,359.0,343.0,318.0,347.3333333333333,3,True,3,True
176,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,40.0,,,1,1,"1. O(m + n)

2. O((m+ n)\log(m+ n))","1. Finite alphabet

2. Infinite alphabet",https://www.sciencedirect.com/science/article/pii/0020025580900250,[https://www.sciencedirect.com/science/article/pii/0020025580900250 Mukhopadhyay (1980)],Mukhopadhyay,1980,https://www.sciencedirect.com/science/article/pii/0020025580900250,,,,0.0,-,3,"n: 4,
p: 3,
m+n: 3",$O((n + p) \log n)$,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$k$: $|\Sigma|$",m+n,,,Word RAM,words,3,"n: 3,
p: 3,
m+n: 3",$O(p + n)$,https://www.sciencedirect.com/science/article/pii/0020025580900250,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
177,0.0,1.0,1,George Dantzig,,5.0,Maximum Flow,1.0,,53.0,,,1,1,O(V^2EU),<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[ Dantzig (1951)],Dantzig,1951,,,,,1.0,0,7,"V: 7,
E: 3,
U: 3",$O(V^2EU)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,6,"V: 6,
E: 3",O(VE)?,"Assuming this is referring to translating maximum flow into linear programming and using the simplex algorithm, this requires $O(VE)$ space.",1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666666.667,,1666670000000.0,,1.67e+18,,7877875424.0,1,,7.88E+21,1,,7.88E+33,1,,2,,,Combinatorics,George_Dantzig,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/George_Dantzig/monthly/20150701/20230731,7302.0,10182.0,117814.0,10762.0,13227.0,8881.0,11768.0,7345.0,7364.0,7552.0,8292.0,7151.0,30049.0,9175.0,19931.0,12101.0,14665.0,17186.0,10336.0,8630.0,11663.0,18772.0,17922.0,10745.0,9643.0,8459.0,8164.0,9000.0,12592.0,8326.0,87435.0,17840.0,13695.0,9662.0,7414.0,6194.0,19260.0,9502.0,14351.0,11757.0,9690.0,11224.0,11222.0,9347.0,35525.0,11198.0,18027.0,9275.0,7410.0,13987.0,16528.0,12380.0,13849.0,11040.0,10024.0,10705.0,8474.0,30619.0,105646.0,16146.0,11700.0,9872.0,10745.0,72821.0,32307.0,17026.0,23180.0,16074.0,31389.0,20504.0,19231.0,12775.0,14142.0,25713.0,24327.0,18766.0,17926.0,20064.0,20753.0,19312.0,16961.0,12172.0,14306.0,11874.0,13646.0,13978.0,18277.0,18071.0,11787.0,10464.0,12182.0,16807.0,9958.0,7570.0,8435.0,7287.0,14852.0,17336.896907216495,5.66,False,5,False
178,0.0,1.0,1,Dinic's algorithm,,5.0,Maximum Flow,2.0,,57.0,,,1,1,O(VELogU),^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (with dynamic trees) (1973)],Dinitz (with dynamic trees),1973,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,,,0.0,0,6,"V: 6,
E: 3,
U: 2",$O(VE \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),"The dynamic tree should take $O(E)$ extra space, and that should be the only extra space (if any) compared to Dinitz's original algorithm. Thus, this requires $O(E)$ space.",1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,762183.964,10335.92387,0.522195462,1.64672E+12,4783976929,1.754167902,2.53E+18,3.11E+15,4.060932865,2,,,Combinatorics,Dinic%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dinic%27s_algorithm/monthly/20150701/20230731,1335.0,1130.0,1432.0,1923.0,1851.0,1601.0,1531.0,1730.0,2019.0,1687.0,2081.0,1663.0,1308.0,1328.0,1834.0,2206.0,2072.0,1997.0,1899.0,1836.0,2163.0,2006.0,2027.0,1935.0,1610.0,1352.0,1682.0,2347.0,2571.0,1935.0,1734.0,1713.0,1740.0,2323.0,1949.0,1747.0,1362.0,1273.0,1486.0,2196.0,2066.0,1715.0,1701.0,1578.0,1681.0,1968.0,1815.0,1697.0,1346.0,1141.0,1355.0,2036.0,2125.0,1943.0,1728.0,1571.0,1453.0,1860.0,2089.0,1742.0,1529.0,1307.0,1432.0,2281.0,2625.0,2512.0,2038.0,1682.0,2030.0,1913.0,2119.0,1818.0,1319.0,1145.0,1294.0,1856.0,2018.0,2227.0,1979.0,1651.0,2003.0,1811.0,1904.0,1962.0,1305.0,1259.0,1291.0,2271.0,2787.0,2024.0,1963.0,2006.0,2080.0,1784.0,1974.0,1812.0,1170.0,1797.9896907216496,5.66,False,5,True
179,0.0,1.0,1,Shortest path problem,,5.0,Maximum Flow,2.0,,59.0,,,1,1,O(V^2E^0.5),^ see above,,[https://www.sciencedirect.com/science/article/abs/pii/S037722179600269X Cherkassky (1977)],Cherkassky,1977,https://www.sciencedirect.com/science/article/abs/pii/S037722179600269X,,,,0.0,0,6,"V: 6,
E: 2.5",$O(V^2E^{0.5})$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),https://core.ac.uk/download/pdf/81946904.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1044405.0,7542.931549,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5.66,False,5,True
180,0.0,1.0,1,Splay tree,,5.0,Maximum Flow,1.0,,61.0,,,1,1,O(VELogV),^ see above,,[https://www.sciencedirect.com/science/article/pii/0022000083900065 Sleator & Tarjan (1983)],Sleator & Tarjan,1983,https://www.sciencedirect.com/science/article/pii/0022000083900065,,,,0.0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),can be derived?,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,761538.0,10344.69117,,,,,,,,2,,,Combinatorics,Splay_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Splay_tree/monthly/20150701/20230731,6100.0,6567.0,8240.0,10428.0,10499.0,9764.0,7418.0,8690.0,8264.0,8245.0,9091.0,7135.0,5808.0,6511.0,8071.0,11006.0,11756.0,9340.0,7809.0,7969.0,9748.0,8558.0,8525.0,6402.0,5526.0,5741.0,7284.0,10315.0,10594.0,9185.0,6998.0,7305.0,8297.0,7699.0,7946.0,6394.0,5078.0,5040.0,6701.0,8635.0,8363.0,8553.0,6244.0,6641.0,7943.0,7652.0,7430.0,5638.0,4316.0,5196.0,6184.0,8024.0,8448.0,7526.0,5288.0,5348.0,6366.0,7320.0,5898.0,5195.0,4238.0,3938.0,5059.0,7548.0,7180.0,6533.0,5712.0,5604.0,7869.0,5753.0,5796.0,5137.0,6242.0,5330.0,5587.0,7282.0,6715.0,6574.0,5322.0,6087.0,6125.0,5969.0,5354.0,4895.0,4480.0,3663.0,4624.0,5271.0,5878.0,8678.0,5374.0,4842.0,5591.0,4139.0,4084.0,3506.0,3091.0,6797.164948453608,5.66,False,5,True
181,0.0,1.0,1,Maximum flow problem,,5.0,Maximum Flow,1.0,,62.0,,,1,1,O(VELog(V^2/E)),^ see above,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf Goldberg & Tarjan (1986)],Goldberg & Tarjan,1986,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf,,,,0.0,0,6,"V: 6,
E: 3",$O(VE \log (V^2/E))$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E),can be derived? also hints of space complexity might be in the paper,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,753550.0,10454.34998,,,,,,,,2,,,Combinatorics,Maximum_flow_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_flow_problem/monthly/20150701/20230731,5556.0,5301.0,6745.0,11875.0,13009.0,11508.0,8076.0,8052.0,11656.0,11564.0,11536.0,7747.0,5273.0,8927.0,8022.0,11567.0,15323.0,15540.0,9361.0,8714.0,11752.0,11995.0,10826.0,8269.0,6337.0,5864.0,6665.0,10370.0,13106.0,10760.0,7796.0,7033.0,9276.0,10790.0,9783.0,6937.0,5441.0,5243.0,5965.0,9385.0,11558.0,10009.0,7706.0,7547.0,8854.0,10150.0,9659.0,6843.0,5448.0,4805.0,5844.0,9604.0,11780.0,9469.0,7054.0,7188.0,8451.0,10195.0,10577.0,7673.0,6659.0,6456.0,6953.0,9534.0,12828.0,12145.0,8308.0,7880.0,11130.0,10571.0,9890.0,8338.0,6025.0,5779.0,6221.0,9071.0,11745.0,10335.0,7115.0,7247.0,10591.0,9424.0,8993.0,8836.0,5463.0,5051.0,5966.0,8438.0,11161.0,9918.0,6798.0,6399.0,8425.0,7717.0,7890.0,6232.0,4632.0,8716.731958762886,5.66,False,5,True
182,0.0,1.0,1,Closure problem,,5.0,Maximum Flow,1.0,,63.0,,,1,1,O(VE + V^2LogU),^ see above,,[https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem Ahuja & Orlin (1987)],Ahuja & Orlin,1987,https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem,,,,0.0,0,6,"V: 6,
E: 3,
U: 2",$O(VE + V^2 \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3,
U: 2",O(ELogU),derived in sheet,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,545676.0,14436.91023,,,,,,,,2,,,Combinatorics,Closure_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Closure_problem/monthly/20150701/20230731,650.0,647.0,707.0,839.0,902.0,802.0,807.0,782.0,910.0,964.0,863.0,703.0,578.0,673.0,754.0,877.0,1090.0,956.0,849.0,887.0,1448.0,1138.0,1086.0,949.0,691.0,677.0,721.0,1285.0,1237.0,1043.0,1161.0,856.0,957.0,870.0,951.0,714.0,618.0,596.0,717.0,860.0,797.0,768.0,849.0,775.0,847.0,701.0,1015.0,646.0,687.0,477.0,742.0,741.0,758.0,876.0,737.0,725.0,744.0,790.0,730.0,594.0,457.0,475.0,614.0,638.0,793.0,731.0,637.0,503.0,668.0,748.0,573.0,472.0,418.0,405.0,510.0,682.0,673.0,816.0,470.0,608.0,593.0,644.0,639.0,433.0,482.0,345.0,378.0,501.0,521.0,526.0,536.0,549.0,428.0,483.0,510.0,456.0,378.0,722.7525773195877,5.66,False,5,True
183,0.0,0.0,0,,,5.0,Maximum Flow,2.0,st-Maximum Flow,65.0,Push-relabel method,,1,1,O(VE + V^2(LogV)^2),[some distribution in this paper],https://ieeexplore.ieee.org/document/63465,[https://ieeexplore.ieee.org/document/63465 Cheriyan & Hagerup (1989)],Cheriyan & Hagerup,1989,https://ieeexplore.ieee.org/document/63465,,,,0.0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://ieeexplore.ieee.org/document/63465,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: d_heap and e_heap are size O(V). Adjacency list of a given vertex is O(V). Dynamic trees data structure is size O(E).,1.0,0.0,,1,Las Vegas,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,3362046.0,2343.178952,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.66,False,5,True
184,0.0,0.0,0,,,5.0,Maximum Flow,2.0,st-Maximum Flow,66.0,Derandomization of Cheriyan & Hagerup,,1,1,O(V^3 / LogV),see 233,,[https://link.springer.com/chapter/10.1007/BFb0032035 Cheriyan et al. (1990)],Cheriyan et al.,1990,https://link.springer.com/chapter/10.1007/BFb0032035,,,,0.0,0,5.99,V: 5.99,$O(V^3 / \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://link.springer.com/chapter/10.1007/BFb0032035,0.0,Uniform-Cost RAM (is this the same as Word RAM?),words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1567523.0,5025.684104,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.66,False,5,True
185,0.0,0.0,0,,,5.0,Maximum Flow,2.0,st-Maximum Flow,67.0,Derandomization of Cheriyan & Hagerup,,1,1,O(VE + V^{(2.66)}LogV),^ see 233,,[https://www.sciencedirect.com/science/article/pii/002001909090024R Alon (1990)],Alon,1990,https://www.sciencedirect.com/science/article/pii/002001909090024R,,,,0.0,0,6,"V: 6,
E: 3",$O(VE + V^{2.66} \log V)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://www.sciencedirect.com/science/article/pii/002001909090024R,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,15237244.0,517.0144564,0.173753748,3.29E+15,2396247.828,0.457396549,4.90E+23,16091415411,0.826869582,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.66,False,5,True
186,0.0,1.0,1,Maximum flow problem,,5.0,Maximum Flow,2.0,st-Maximum Flow,68.0,Derandomization of Cheriyan & Hagerup,,1,1,O(VE + V^{(2+\epsilon)}),^ see 233,,[https://dl.acm.org/citation.cfm?id=139438 King et al. (KRT) (1992)],King et al. (KRT),1992,https://dl.acm.org/citation.cfm?id=139438,,,,0.0,0,6,"V: 6,
E: 3",$O(VE + V^{2+\epsilon})$,"V: number of vertices
E: number of edges
U: maximum edge capacity
eps: any positive real number",V,https://dl.acm.org/citation.cfm?id=139438,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,142011.0,55473.69869,,,,,,,,2,,,Combinatorics,Maximum_flow_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_flow_problem/monthly/20150701/20230731,5556.0,5301.0,6745.0,11875.0,13009.0,11508.0,8076.0,8052.0,11656.0,11564.0,11536.0,7747.0,5273.0,8927.0,8022.0,11567.0,15323.0,15540.0,9361.0,8714.0,11752.0,11995.0,10826.0,8269.0,6337.0,5864.0,6665.0,10370.0,13106.0,10760.0,7796.0,7033.0,9276.0,10790.0,9783.0,6937.0,5441.0,5243.0,5965.0,9385.0,11558.0,10009.0,7706.0,7547.0,8854.0,10150.0,9659.0,6843.0,5448.0,4805.0,5844.0,9604.0,11780.0,9469.0,7054.0,7188.0,8451.0,10195.0,10577.0,7673.0,6659.0,6456.0,6953.0,9534.0,12828.0,12145.0,8308.0,7880.0,11130.0,10571.0,9890.0,8338.0,6025.0,5779.0,6221.0,9071.0,11745.0,10335.0,7115.0,7247.0,10591.0,9424.0,8993.0,8836.0,5463.0,5051.0,5966.0,8438.0,11161.0,9918.0,6798.0,6399.0,8425.0,7717.0,7890.0,6232.0,4632.0,8716.731958762886,5.66,False,5,True
187,0.0,0.0,0,,,5.0,Maximum Flow,2.0,st-Maximum Flow,69.0,Derandomization of Cheriyan & Hagerup,,1,1,O(VE(Log(V;V/E)) + V^2(LogV)^2 ),^ see 233,,[https://dl.acm.org/citation.cfm?id=167201 Phillips & Westbrook (1993)],Phillips & Westbrook,1993,https://dl.acm.org/citation.cfm?id=167201,,,,1.0,0,6,"V: 6,
E: 3",$O(VE(\log(V;V/E)) + V^2(\log V)^2 )$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=167201,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: essentially the same as [CH89] above but derandomized,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,4524418.767,0.000221023,,2.60271E+13,0,,6.52E+19,0,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.66,False,5,True
188,0.0,1.0,1,Maximum flow problem,"O(min(VE, E^(1+o(1))*log(U)))",5.0,Maximum Flow,2.0,Integer Maximum Flow,71.0,Finding blocking flows,,1,1,O(E^{1.5} Log(V^2/E) LogU),^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,,,1.0,3->4,6,"V: 6,
E: 4.5,
U: 2",$O(E^{1.5} \log(V^2/E) \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,460753.7601,16.40695149,,75582472025,0,,5.82E+15,0,,2,,,Combinatorics,Maximum_flow_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_flow_problem/monthly/20150701/20230731,5556.0,5301.0,6745.0,11875.0,13009.0,11508.0,8076.0,8052.0,11656.0,11564.0,11536.0,7747.0,5273.0,8927.0,8022.0,11567.0,15323.0,15540.0,9361.0,8714.0,11752.0,11995.0,10826.0,8269.0,6337.0,5864.0,6665.0,10370.0,13106.0,10760.0,7796.0,7033.0,9276.0,10790.0,9783.0,6937.0,5441.0,5243.0,5965.0,9385.0,11558.0,10009.0,7706.0,7547.0,8854.0,10150.0,9659.0,6843.0,5448.0,4805.0,5844.0,9604.0,11780.0,9469.0,7054.0,7188.0,8451.0,10195.0,10577.0,7673.0,6659.0,6456.0,6953.0,9534.0,12828.0,12145.0,8308.0,7880.0,11130.0,10571.0,9890.0,8338.0,6025.0,5779.0,6221.0,9071.0,11745.0,10335.0,7115.0,7247.0,10591.0,9424.0,8993.0,8836.0,5463.0,5051.0,5966.0,8438.0,11161.0,9918.0,6798.0,6399.0,8425.0,7717.0,7890.0,6232.0,4632.0,8716.731958762886,5.66,False,5,True
189,0.0,1.0,1,Maximum flow problem,"O(min(VE, E^(1+o(1))*log(U)))",5.0,Maximum Flow,2.0,Integer Maximum Flow,72.0,Finding blocking flows,,1,1,O(V^{0.66}E Log(V^2/E) LogU),^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,,,0.0,0,5.66,"V: 5.66,
E: 3,
U: 2",$O(V^{0.66}E \log(V^2/E) \log U)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,851225.0,9254.751005,,,,,,,,2,,,Combinatorics,Maximum_flow_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_flow_problem/monthly/20150701/20230731,5556.0,5301.0,6745.0,11875.0,13009.0,11508.0,8076.0,8052.0,11656.0,11564.0,11536.0,7747.0,5273.0,8927.0,8022.0,11567.0,15323.0,15540.0,9361.0,8714.0,11752.0,11995.0,10826.0,8269.0,6337.0,5864.0,6665.0,10370.0,13106.0,10760.0,7796.0,7033.0,9276.0,10790.0,9783.0,6937.0,5441.0,5243.0,5965.0,9385.0,11558.0,10009.0,7706.0,7547.0,8854.0,10150.0,9659.0,6843.0,5448.0,4805.0,5844.0,9604.0,11780.0,9469.0,7054.0,7188.0,8451.0,10195.0,10577.0,7673.0,6659.0,6456.0,6953.0,9534.0,12828.0,12145.0,8308.0,7880.0,11130.0,10571.0,9890.0,8338.0,6025.0,5779.0,6221.0,9071.0,11745.0,10335.0,7115.0,7247.0,10591.0,9424.0,8993.0,8836.0,5463.0,5051.0,5966.0,8438.0,11161.0,9918.0,6798.0,6399.0,8425.0,7717.0,7890.0,6232.0,4632.0,8716.731958762886,5.66,True,5,True
190,0.0,1.0,1,Maximum flow problem,,5.0,Maximum Flow,2.0,st-Maximum Flow,73.0,Improvement of the KRT algorithm,,1,1,O(VE),^ see 233,,[https://dl.acm.org/citation.cfm?id=2488705 James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm (2013)],James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm,2013,https://dl.acm.org/citation.cfm?id=2488705,,,,1.0,0,6,"V: 6,
E: 3",$O(VE)$,"V: number of vertices
E: number of edges
U: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=2488705,0.0,Word RAM,words,5,"V: 5,
E: 3",O(V + E),Derived: creates and updates an auxiliary graph,1.0,0.0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,88757.0,88757.7929,0.201737967,88757396440,88757396408,0.501702641,8.88E+16,8.88E+16,0.876541347,2,,,Combinatorics,Maximum_flow_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_flow_problem/monthly/20150701/20230731,5556.0,5301.0,6745.0,11875.0,13009.0,11508.0,8076.0,8052.0,11656.0,11564.0,11536.0,7747.0,5273.0,8927.0,8022.0,11567.0,15323.0,15540.0,9361.0,8714.0,11752.0,11995.0,10826.0,8269.0,6337.0,5864.0,6665.0,10370.0,13106.0,10760.0,7796.0,7033.0,9276.0,10790.0,9783.0,6937.0,5441.0,5243.0,5965.0,9385.0,11558.0,10009.0,7706.0,7547.0,8854.0,10150.0,9659.0,6843.0,5448.0,4805.0,5844.0,9604.0,11780.0,9469.0,7054.0,7188.0,8451.0,10195.0,10577.0,7673.0,6659.0,6456.0,6953.0,9534.0,12828.0,12145.0,8308.0,7880.0,11130.0,10571.0,9890.0,8338.0,6025.0,5779.0,6221.0,9071.0,11745.0,10335.0,7115.0,7247.0,10591.0,9424.0,8993.0,8836.0,5463.0,5051.0,5966.0,8438.0,11161.0,9918.0,6798.0,6399.0,8425.0,7717.0,7890.0,6232.0,4632.0,8716.731958762886,5.66,False,5,True
191,0.0,1.0,1,Maximal independent set,O(1.3289^n),7.0,Graph Coloring,1.0,3-Graph Coloring,86.0,,,1,1,O(m*n*3^{(n/3)}) ~ O(mn(1.445)^n),,,[https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub Lawler (1976)],Lawler,1976,https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub,,,,1.0,0,8,"n: 8,
m: 3",$O(m*n*3^{(n/3)}) ~ O(mn(1.445)^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,"n: 3,
m: 1",O(n),(can be easily derived; see section 6 of ref),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Maximal_independent_set,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximal_independent_set/monthly/20150701/20230731,851.0,1006.0,1298.0,1783.0,2370.0,1961.0,1633.0,1457.0,1553.0,2268.0,2130.0,1472.0,1108.0,1170.0,1755.0,1895.0,2410.0,1926.0,1594.0,1617.0,2009.0,2246.0,2150.0,1269.0,1145.0,1167.0,1649.0,2664.0,2933.0,2829.0,1971.0,1825.0,2067.0,2561.0,2395.0,1474.0,1119.0,1078.0,1542.0,2160.0,3164.0,2361.0,2036.0,1786.0,2278.0,2533.0,2779.0,1623.0,1445.0,1170.0,1813.0,2476.0,3003.0,2504.0,1763.0,2119.0,2105.0,3352.0,3297.0,2915.0,1881.0,1495.0,1989.0,2651.0,3292.0,3258.0,2490.0,2485.0,3225.0,3172.0,3287.0,2530.0,2270.0,1920.0,1904.0,2946.0,3312.0,2848.0,2520.0,2555.0,2782.0,3242.0,2983.0,2290.0,1955.0,1686.0,2128.0,2442.0,3079.0,2742.0,2436.0,2452.0,2510.0,2807.0,2639.0,2125.0,1801.0,2187.226804123711,4,False,3,True
192,0.0,0.0,0,,O(1.3289^n),7.0,Graph Coloring,1.0,3-Graph Coloring,87.0,,,1,1,O(1.415^n),,,[https://link.springer.com/chapter/10.1007/3-540-57899-4_51 Schiermeyer (1994)],Schiermeyer,1994,https://link.springer.com/chapter/10.1007/3-540-57899-4_51,,,,0.0,0,8,n: 8,$O(1.415^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3","O(nm+n^2) loose bound, possibly O(n+m)?",(can be derived from steps of algorithm),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,3,False
193,0.0,0.0,0,,O(1.3289^n),7.0,Graph Coloring,1.0,3-Graph Coloring,88.0,,,1,1,O(1.3446^n),(unclear if there is a notable distribution where average runtime is faster),(none),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=492575 Beigel & Eppstein (1995)],Beigel & Eppstein,1995,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=492575,,,,0.0,0,8,n: 8,$O(1.3446^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,"can be derived from steps of algorithm? you add at most O(n^2) constraints, other info shouldn't take more than O(n^2) space, and you can reuse space during recursive steps",1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,3,False
194,0.0,1.0,1,Graph coloring,O(1.3289^n),7.0,Graph Coloring,1.0,3-Graph Coloring,89.0,,,1,1,O(1.3289^n),^see above,(none),[https://www.sciencedirect.com/science/article/pii/S0196677404001117?via%3Dihub Beigel & Eppstein (2000)],Beigel & Eppstein,2000,https://www.sciencedirect.com/science/article/pii/S0196677404001117?via%3Dihub,,,,0.0,0,8,n: 8,$O(1.3289^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,can be derived from steps of algorithm? similar to above,1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics,Graph_coloring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_coloring/monthly/20150701/20230731,8595.0,9704.0,10569.0,14397.0,18162.0,16327.0,12809.0,13019.0,14456.0,18490.0,16650.0,12019.0,8460.0,9375.0,11997.0,15343.0,18564.0,17243.0,15294.0,13597.0,16435.0,16459.0,16108.0,10991.0,9548.0,8849.0,10699.0,15654.0,19650.0,15924.0,12208.0,11554.0,15400.0,18167.0,15989.0,10890.0,8749.0,8990.0,11333.0,15340.0,17372.0,16382.0,12651.0,11333.0,14801.0,15602.0,14930.0,11109.0,9034.0,8019.0,10395.0,14844.0,18118.0,16018.0,12595.0,12815.0,12882.0,17872.0,17304.0,13292.0,10775.0,9098.0,11006.0,16481.0,19198.0,19340.0,16029.0,14510.0,17725.0,18458.0,16280.0,13563.0,12242.0,10132.0,10405.0,13796.0,16590.0,16085.0,14103.0,13315.0,13271.0,15728.0,16211.0,12798.0,10015.0,8391.0,9438.0,13519.0,17050.0,15558.0,13554.0,11785.0,14258.0,13430.0,13897.0,11289.0,9549.0,13713.886597938144,4,False,3,False
195,0.0,1.0,1,Graph coloring,O(1.7272^n),8.0,Graph Coloring,1.0,4-Graph Coloring,99.0,,,1,1,O((m + n)*2^n),,,[https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub Lawler (1976)],Lawler,1976,https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub,,,,1.0,0,8,"n: 8,
m: 3",$O((m + n)*2^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,"n: 3,
m: 1",O(n),(can be easily derived; see section 6 of ref),1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Graph_coloring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_coloring/monthly/20150701/20230731,8595.0,9704.0,10569.0,14397.0,18162.0,16327.0,12809.0,13019.0,14456.0,18490.0,16650.0,12019.0,8460.0,9375.0,11997.0,15343.0,18564.0,17243.0,15294.0,13597.0,16435.0,16459.0,16108.0,10991.0,9548.0,8849.0,10699.0,15654.0,19650.0,15924.0,12208.0,11554.0,15400.0,18167.0,15989.0,10890.0,8749.0,8990.0,11333.0,15340.0,17372.0,16382.0,12651.0,11333.0,14801.0,15602.0,14930.0,11109.0,9034.0,8019.0,10395.0,14844.0,18118.0,16018.0,12595.0,12815.0,12882.0,17872.0,17304.0,13292.0,10775.0,9098.0,11006.0,16481.0,19198.0,19340.0,16029.0,14510.0,17725.0,18458.0,16280.0,13563.0,12242.0,10132.0,10405.0,13796.0,16590.0,16085.0,14103.0,13315.0,13271.0,15728.0,16211.0,12798.0,10015.0,8391.0,9438.0,13519.0,17050.0,15558.0,13554.0,11785.0,14258.0,13430.0,13897.0,11289.0,9549.0,13713.886597938144,4,False,3,True
196,0.0,1.0,1,Graph coloring,O(1.7272^n),8.0,Graph Coloring,1.0,4-Graph Coloring,100.0,,,1,1,O(1.7504^n),,,[https://www.sciencedirect.com/science/article/abs/pii/S0167637704000409?via%3Dihub Byskov (2004)],Byskov,2004,https://www.sciencedirect.com/science/article/abs/pii/S0167637704000409?via%3Dihub,,,,0.0,0,8,n: 8,$O(1.7504^n)$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,can be derived from algo 89 plus the paper's algo for finding MIS's?,1.0,0.0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,inf,1,,,,,,,,1,,,Combinatorics,Graph_coloring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_coloring/monthly/20150701/20230731,8595.0,9704.0,10569.0,14397.0,18162.0,16327.0,12809.0,13019.0,14456.0,18490.0,16650.0,12019.0,8460.0,9375.0,11997.0,15343.0,18564.0,17243.0,15294.0,13597.0,16435.0,16459.0,16108.0,10991.0,9548.0,8849.0,10699.0,15654.0,19650.0,15924.0,12208.0,11554.0,15400.0,18167.0,15989.0,10890.0,8749.0,8990.0,11333.0,15340.0,17372.0,16382.0,12651.0,11333.0,14801.0,15602.0,14930.0,11109.0,9034.0,8019.0,10395.0,14844.0,18118.0,16018.0,12595.0,12815.0,12882.0,17872.0,17304.0,13292.0,10775.0,9098.0,11006.0,16481.0,19198.0,19340.0,16029.0,14510.0,17725.0,18458.0,16280.0,13563.0,12242.0,10132.0,10405.0,13796.0,16590.0,16085.0,14103.0,13315.0,13271.0,15728.0,16211.0,12798.0,10015.0,8391.0,9438.0,13519.0,17050.0,15558.0,13554.0,11785.0,14258.0,13430.0,13897.0,11289.0,9549.0,13713.886597938144,4,False,3,False
197,1.0,0.0,1,Conjugate gradient method,,9.0,Linear System,2.0,Positive Definite Matrix,104.0,,,1,0,O (m k^0.5),^see above (positive definite),^see above,[https://nvlpubs.nist.gov/nistpubs/jres/049/jresv49n6p409_A1b.pdf Conjugate Gradient (1952)],Conjugate Gradient,1952,https://nvlpubs.nist.gov/nistpubs/jres/049/jresv49n6p409_A1b.pdf,1,1.0,https://en.wikipedia.org/wiki/Conjugate_gradient_method,1.0,3->4,3,"m: 3,
k: 2.5,
n^2: 3",$O(m k^{0.5})$,"n: number of variables and number of equations
m: number of nonzero entries in matrix
k: ratio between largest and smallest eigenvalues",n^2,,,Word RAM,words,3,"m: 3,
n: 5,
n^2: 3",O(m),http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf,0.0,0.0,,0,,1,,0,0,,0,0,http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,6076.0,6077.359612,1.066852945,192450089.7,192450089.7,3.901848033,6.08581E+12,6.08581E+12,10.62411354,3,,,Numerical Analysis,Conjugate_gradient_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Conjugate_gradient_method/monthly/20150701/20230731,10418.0,9643.0,10268.0,13247.0,14312.0,13088.0,12511.0,13215.0,14476.0,15290.0,14327.0,12306.0,10027.0,10327.0,11440.0,13661.0,16438.0,13653.0,12669.0,13319.0,16391.0,15556.0,14694.0,12377.0,10919.0,10653.0,11394.0,14439.0,16662.0,13198.0,13619.0,12700.0,15650.0,15762.0,15212.0,11874.0,11226.0,10387.0,11696.0,14198.0,15656.0,13528.0,12507.0,12403.0,14683.0,14863.0,13206.0,10586.0,10194.0,9431.0,10889.0,14006.0,14256.0,11780.0,11757.0,12740.0,12580.0,13645.0,13618.0,11747.0,10022.0,9077.0,10164.0,12766.0,13636.0,12873.0,12187.0,11537.0,14605.0,13484.0,12508.0,11295.0,9628.0,8063.0,9715.0,12049.0,12592.0,11867.0,11086.0,11130.0,12188.0,11570.0,12286.0,10434.0,8867.0,8374.0,9687.0,11847.0,13239.0,12011.0,10668.0,11357.0,14028.0,12051.0,12929.0,11031.0,9193.0,12364.546391752578,2,False,2,False
198,0.0,1.0,1,Quantum algorithm,"O(n^2.37285956) deterministic, O(n^2.331642) randomized/roughly approximate",9.0,Linear System,2.0,Sparse Linear System,109.0,Quantum algorithm,,1,1,O (k^2*logn),,,[https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.103.150502 Harrow (Quantum) (2009)],Harrow (Quantum),2009,https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.103.150502,,,,0.0,0,2,"k: 5,
n: 2,
n^2: 2",$O(k^2*\log n)$,"n: number of variables and number of equations
k: ratio between largest and smallest eigenvalues",n^2,,,Quantum Computer,qubits,2,"n: 2,
n^2: 2",O(\log n),https://arxiv.org/pdf/0811.3171.pdf,0.0,1.0,,0,,0,,0,0,,1,0,https://en.wikipedia.org/wiki/Quantum_algorithm_for_linear_systems_of_equations,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,8.37,4411712.903,,,,,,,,3,,,Numerical Analysis,Quantum_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Quantum_algorithm/monthly/20150701/20230731,3044.0,3343.0,3611.0,4623.0,4042.0,5781.0,3555.0,3461.0,4312.0,4623.0,6126.0,3500.0,3339.0,4178.0,3856.0,3932.0,4078.0,3799.0,4565.0,4369.0,5851.0,4652.0,5076.0,4082.0,4562.0,3900.0,4596.0,5750.0,6053.0,6169.0,6259.0,5687.0,6519.0,5872.0,5266.0,5554.0,6213.0,5451.0,5059.0,6303.0,5940.0,5862.0,6689.0,5780.0,5786.0,5722.0,5877.0,4799.0,4764.0,5027.0,7508.0,11481.0,7686.0,7068.0,5979.0,4678.0,4564.0,4890.0,4852.0,4657.0,3686.0,4022.0,4281.0,4896.0,5273.0,6226.0,5828.0,5455.0,6738.0,6385.0,6248.0,6304.0,5878.0,5144.0,5145.0,6310.0,6929.0,5968.0,5804.0,5113.0,5479.0,5998.0,7511.0,6764.0,5724.0,6000.0,5584.0,6465.0,7805.0,6538.0,6721.0,5910.0,6436.0,5590.0,6332.0,5924.0,18111.0,5578.81443298969,2,True,2,True
199,1.0,0.0,1,Karmarkar's algorithm,,10.0,Linear Programming,1.0,,112.0,,,1,1,O(n^3.5 L^2 logL loglogL),,,[https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf Karmarkar's algorithm (1984)],Karmarkar's algorithm,1984,https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf,,,,1.0,0,6.5,"n: 6.5,
L: 5.02",$O(n^{3.5} L^2 logL loglogL)$,"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),can be derived from paper?,1.0,0.0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,389062000000.0,Inf,,1.23E+22,Inf,,3.89E+32,Inf,,1,,,Numerical Analysis,Karmarkar%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Karmarkar%27s_algorithm/monthly/20150701/20230731,1599.0,1582.0,1792.0,2198.0,2111.0,2124.0,2002.0,1813.0,1943.0,2156.0,3080.0,2030.0,1835.0,2076.0,1769.0,2289.0,2068.0,2253.0,2080.0,1860.0,2066.0,1986.0,1856.0,1597.0,1574.0,1665.0,1836.0,2078.0,2156.0,2118.0,2034.0,2062.0,2208.0,2142.0,1953.0,2081.0,1708.0,1543.0,1612.0,4246.0,1782.0,1919.0,1832.0,1799.0,1919.0,1941.0,1700.0,1538.0,1635.0,1581.0,1777.0,1894.0,2137.0,2266.0,2097.0,1985.0,2047.0,1785.0,1443.0,1261.0,1187.0,1036.0,1482.0,1445.0,1263.0,1759.0,1297.0,1344.0,1520.0,1405.0,1487.0,1273.0,1164.0,1041.0,1308.0,1497.0,1837.0,1654.0,1438.0,1301.0,1671.0,1338.0,1287.0,1427.0,1157.0,1257.0,1301.0,1399.0,1618.0,1542.0,1433.0,1549.0,1509.0,1502.0,1405.0,1190.0,1092.0,1741.5876288659797,5.5,False,3,True
200,1.0,0.0,1,Simplex algorithm,,10.0,Linear Programming,1.0,,113.0,,,1,1,"O(2^n*poly(n, m))? (previously O(2^n))",,,[- Simplex Algorithm (1947)],Simplex Algorithm,1947,-,,,,0.0,0,8,"n: 8,
m: 7","$O(2^n*poly(n, m))$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",O(nm),can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,http://www-leland.stanford.edu/group/SOL/reports/OR-80-27.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",333333.3333,inf,333333000000.0,inf,3.33e+17,inf,inf,1,,,,,,,,1,,,Numerical Analysis,Simplex_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Simplex_algorithm/monthly/20150701/20230731,12274.0,13305.0,19212.0,21469.0,19310.0,17225.0,55051.0,19017.0,18701.0,19173.0,18607.0,15729.0,14110.0,13639.0,17128.0,20760.0,20394.0,17543.0,18654.0,18354.0,20978.0,19563.0,20384.0,24545.0,14565.0,14094.0,16847.0,20694.0,20944.0,17792.0,32737.0,17478.0,19975.0,18352.0,19125.0,14515.0,16902.0,13568.0,16772.0,21592.0,19424.0,16160.0,16635.0,16959.0,20354.0,18353.0,17161.0,13628.0,11803.0,13522.0,16297.0,18246.0,18480.0,14961.0,16397.0,17069.0,17485.0,17292.0,20073.0,15712.0,12415.0,11439.0,16419.0,23705.0,20703.0,17693.0,17014.0,15910.0,21002.0,17812.0,15214.0,13929.0,12772.0,14119.0,15866.0,17953.0,19825.0,15383.0,14217.0,15201.0,16083.0,16362.0,14574.0,14209.0,10406.0,11149.0,14232.0,16777.0,17488.0,13743.0,13766.0,14155.0,15990.0,13173.0,13570.0,11414.0,11435.0,17259.845360824744,5.5,False,3,True
201,0.0,1.0,1,Criss-cross algorithm,,10.0,Linear Programming,1.0,,114.0,,,1,1,"O(2^n*poly(n, m))? (previously O(2^n))",,,[- Terlaky's Criss-cross algorithm (1985)],Terlaky's Criss-cross algorithm,1985,-,,,,0.0,0,8,"n: 8,
m: 7","$O(2^n*poly(n, m))$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",O(nm),can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/BF01585729.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis,Criss-cross_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Criss-cross_algorithm/monthly/20150701/20230731,532.0,492.0,635.0,672.0,755.0,697.0,671.0,624.0,717.0,647.0,649.0,517.0,675.0,443.0,512.0,569.0,657.0,595.0,598.0,598.0,726.0,598.0,720.0,559.0,476.0,447.0,496.0,603.0,587.0,499.0,514.0,470.0,585.0,471.0,494.0,402.0,399.0,465.0,421.0,451.0,460.0,438.0,481.0,483.0,466.0,551.0,436.0,431.0,435.0,377.0,462.0,470.0,454.0,453.0,474.0,488.0,787.0,550.0,475.0,392.0,325.0,324.0,314.0,441.0,358.0,555.0,465.0,392.0,424.0,423.0,370.0,308.0,297.0,228.0,291.0,350.0,365.0,353.0,369.0,382.0,323.0,381.0,433.0,390.0,338.0,295.0,348.0,360.0,394.0,365.0,326.0,337.0,397.0,327.0,305.0,296.0,351.0,469.08247422680415,5.5,False,3,True
202,1.0,0.0,1,Affine scaling,,10.0,Linear Programming,1.0,,115.0,,,1,1,? (originally O(n^{3.5} L) but seems unclear),,,[- Affine scaling (1967)],Affine scaling,1967,-,,,,0.0,0,6.5,"n: 6.5,
L: 3",? (originally $O(n^{3.5} L)$ but seems unclear),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 5",O(nm+m^2)?,can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/c23c/43d781da35b8314489d83ee8f3b5490541ea.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,316228000000.0,Inf,inf,,,inf,,,inf,1,,,Numerical Analysis,Affine_scaling,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Affine_scaling/monthly/20150701/20230731,,,,,,,,407.0,175.0,240.0,248.0,263.0,230.0,225.0,206.0,320.0,325.0,372.0,310.0,342.0,311.0,334.0,313.0,244.0,221.0,237.0,265.0,330.0,394.0,417.0,327.0,329.0,322.0,304.0,323.0,293.0,252.0,227.0,230.0,269.0,280.0,389.0,293.0,315.0,261.0,299.0,354.0,246.0,224.0,224.0,285.0,310.0,334.0,488.0,289.0,269.0,332.0,364.0,309.0,293.0,214.0,193.0,167.0,201.0,334.0,276.0,246.0,264.0,250.0,303.0,283.0,208.0,157.0,168.0,178.0,191.0,333.0,268.0,239.0,207.0,285.0,273.0,226.0,252.0,173.0,142.0,167.0,170.0,260.0,301.0,199.0,155.0,196.0,321.0,235.0,196.0,177.0,268.56666666666666,5.5,False,3,True
203,0.0,1.0,1,Linear programming,,10.0,Linear Programming,1.0,,116.0,,,1,1,"$O(n^{(max(omega, 2.5-alpha/2, 13/6))}*polylog(n, m, L))$, where omega is the exponent on matrix multiplication, alpha is the dual exponent of matrix multiplication;
currently $O(n^{2.37285956})$",,,[https://arxiv.org/abs/1810.07896 Cohen; Lee and Song (2018)],Cohen; Lee and Song,2018,https://arxiv.org/abs/1810.07896,1,1.0,https://arxiv.org/abs/1810.07896,1.0,2->3,6,n: 6,"$O(n^{max(omega, 2.5-alpha/2, 13/6)}*polylog(n, m, L))$, where omega is the exponent on matrix multiplication, alpha is the dual exponent of matrix multiplication;
currently $O(n^2.37285956)$","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",O(nm+n^2)?,"Not entirely sure about this, but it seems like each iteration manipulates a constant number of $O(m+n)\times O(n)$ matrices, along with a constant number of vectors of size $O(m+n)$, all of whose elements are of size $O(1)$ words.",1.0,0.0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,12971792.0,Inf,,1.68267E+14,Inf,,2.18E+21,Inf,,1,,,Numerical Analysis,Linear_programming,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Linear_programming/monthly/20150701/20230731,36256.0,39986.0,44960.0,48665.0,48648.0,47051.0,45093.0,45142.0,48318.0,48040.0,49003.0,45537.0,39300.0,38448.0,43651.0,49369.0,50994.0,45525.0,45599.0,45064.0,52329.0,47296.0,47632.0,38927.0,35178.0,36083.0,43575.0,49159.0,52400.0,43819.0,47240.0,45550.0,47859.0,47245.0,46942.0,36175.0,36467.0,35238.0,41292.0,46232.0,45410.0,39079.0,39704.0,37926.0,45890.0,44131.0,41897.0,32485.0,32544.0,31826.0,36714.0,42229.0,40159.0,34453.0,35764.0,38489.0,36382.0,39811.0,46474.0,39991.0,33370.0,32148.0,40040.0,44878.0,42530.0,40776.0,40288.0,37134.0,44099.0,38662.0,38513.0,31949.0,31011.0,29606.0,32052.0,35450.0,34535.0,29206.0,31799.0,29116.0,30559.0,28956.0,31910.0,25783.0,25195.0,24322.0,28052.0,29908.0,32742.0,27664.0,28133.0,27329.0,31169.0,26417.0,28296.0,24988.0,24914.0,38723.13402061856,5.5,False,3,False
204,0.0,1.0,1,Linear programming,,10.0,Linear Programming,1.0,,117.0,,,1,1,O((nnz(A) + n^2) n^{0.5}),,,[https://arxiv.org/abs/1503.01752 Lee and Sidford (2015)],Lee and Sidford,2015,https://arxiv.org/abs/1503.01752,,,,0.0,0,5.5,n: 5.5,$O((nnz(A) + n^2) n^{0.5})$,"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",O(nm+n^2)??,Same reasoning as ^,1.0,0.0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,31654399.0,Inf,inf,,,inf,,,inf,1,,,Numerical Analysis,Linear_programming,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Linear_programming/monthly/20150701/20230731,36256.0,39986.0,44960.0,48665.0,48648.0,47051.0,45093.0,45142.0,48318.0,48040.0,49003.0,45537.0,39300.0,38448.0,43651.0,49369.0,50994.0,45525.0,45599.0,45064.0,52329.0,47296.0,47632.0,38927.0,35178.0,36083.0,43575.0,49159.0,52400.0,43819.0,47240.0,45550.0,47859.0,47245.0,46942.0,36175.0,36467.0,35238.0,41292.0,46232.0,45410.0,39079.0,39704.0,37926.0,45890.0,44131.0,41897.0,32485.0,32544.0,31826.0,36714.0,42229.0,40159.0,34453.0,35764.0,38489.0,36382.0,39811.0,46474.0,39991.0,33370.0,32148.0,40040.0,44878.0,42530.0,40776.0,40288.0,37134.0,44099.0,38662.0,38513.0,31949.0,31011.0,29606.0,32052.0,35450.0,34535.0,29206.0,31799.0,29116.0,30559.0,28956.0,31910.0,25783.0,25195.0,24322.0,28052.0,29908.0,32742.0,27664.0,28133.0,27329.0,31169.0,26417.0,28296.0,24988.0,24914.0,38723.13402061856,5.5,True,3,False
205,0.0,1.0,1,Bentley–Ottmann algorithm,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, line segments",120.0,,,1,1,O( nlog n + k ),,,[https://dl.acm.org/doi/10.1145/147508.147511 Chazelle & Edelsbrunner (1992)],Chazelle & Edelsbrunner,1992,https://dl.acm.org/doi/10.1145/147508.147511,,,,0.0,0,4,"n: 4,
k: 3",$O( n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 3",O(n+k) total?,https://dl.acm.org/doi/10.1145/147508.147511,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,,,,,,,4,,,Image Processing,Bentley%E2%80%93Ottmann_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bentley%E2%80%93Ottmann_algorithm/monthly/20150701/20230731,1040.0,1161.0,1283.0,2058.0,1934.0,1611.0,1512.0,1718.0,2042.0,2009.0,1703.0,1456.0,1317.0,1383.0,1496.0,1948.0,2290.0,1825.0,1538.0,1630.0,1762.0,2313.0,1804.0,1489.0,1192.0,1353.0,1369.0,1882.0,1938.0,1666.0,1787.0,1568.0,1602.0,1718.0,2473.0,1430.0,1217.0,1307.0,1470.0,1707.0,1667.0,1530.0,1513.0,1548.0,2162.0,1919.0,1863.0,1549.0,1339.0,1162.0,1444.0,1756.0,1747.0,2244.0,1552.0,1433.0,2322.0,1907.0,1565.0,1351.0,1226.0,1209.0,1354.0,1880.0,1832.0,2163.0,1606.0,1353.0,1732.0,1712.0,1619.0,1609.0,1258.0,1215.0,1409.0,1545.0,1724.0,2355.0,1578.0,1448.0,1594.0,1578.0,1371.0,1498.0,1300.0,1214.0,1330.0,1475.0,1583.0,1301.0,1533.0,1613.0,1881.0,1453.0,1595.0,1265.0,1272.0,1610.8969072164948,2,False,1,False
206,0.0,1.0,1,Binary search algorithm,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, line segments",121.0,,,1,1,O( n*log^2(n)/(log log n) + k),,,[https://www.sciencedirect.com/science/article/pii/0022000086900255 CHAZELLE (1986)],CHAZELLE,1986,https://www.sciencedirect.com/science/article/pii/0022000086900255,,,,0.0,0,4,"n: 4,
k: 3",$O( n*log^2(n)/(log log n) + k)$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 3",O(n+k) total (and possibly auxiliary as well?),https://www.sciencedirect.com/science/article/pii/0022000086900255,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,3336.9,299.6793431,,,,,,,,4,,,Image Processing,Binary_search_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Binary_search_algorithm/monthly/20150701/20230731,35573.0,45538.0,52148.0,61845.0,54070.0,46536.0,49499.0,56139.0,60174.0,54484.0,58552.0,43265.0,39243.0,44645.0,57179.0,61878.0,62345.0,51670.0,53061.0,61835.0,65533.0,60327.0,52535.0,40809.0,38162.0,38899.0,51937.0,58742.0,58478.0,47251.0,50799.0,53847.0,58331.0,57198.0,53063.0,41130.0,43418.0,44468.0,54706.0,119790.0,53952.0,44770.0,51284.0,51982.0,54538.0,52311.0,50769.0,36920.0,38373.0,41434.0,52894.0,58601.0,52859.0,40141.0,41552.0,42803.0,41816.0,45081.0,45344.0,39607.0,36128.0,41790.0,53331.0,57008.0,53283.0,51609.0,50330.0,49025.0,55189.0,45905.0,43645.0,40495.0,49667.0,42930.0,50794.0,53696.0,52729.0,44400.0,48367.0,48235.0,51859.0,41974.0,41715.0,33517.0,32196.0,34682.0,43219.0,41261.0,44065.0,33633.0,33613.0,33038.0,35923.0,29470.0,27447.0,23416.0,22983.0,47924.74226804124,2,False,1,False
207,0.0,0.0,0,,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, convex polygons",122.0,,,1,1,O( nlog n + k ),,,[https://pdfs.semanticscholar.org/a571/cc92218132a1b0e65c2adbf663c79d015737.pdf NIEVERGELT. J.. AND PREPARATA (Section 3) (1982)],NIEVERGELT. J.. AND PREPARATA (Section 3),1982,https://pdfs.semanticscholar.org/a571/cc92218132a1b0e65c2adbf663c79d015737.pdf,3,1.0,https://dl.acm.org/doi/pdf/10.1145/358656.358681,1.0,0,4,"n: 4,
k: 3",$O( n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 1",O(n),https://courses.cs.duke.edu/cps234/spring04/papers/NP82.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,19932568,8441832.789,,29897384477,73007386768,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,False
208,0.0,0.0,0,,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, generalized segments",123.0,,,1,1,O( n log n + k log n),,,"[https://epubs.siam.org/doi/abs/10.1137/S0097539797329373 Jean-Daniel Boissonnat and Franco P.
Preparata.  (1997)]","Jean-Daniel Boissonnat and Franco P.
Preparata. ",1997,https://epubs.siam.org/doi/abs/10.1137/S0097539797329373,,,,0.0,0,4,"n: 4,
k: 3",$O(n \log n + k \log n)$,"n: number of line segments
k: number of points of intersection",n,,,"Real RAM, under more restrictions/considerations? (predicate arithmetic, exact arithmetic)",words,3,"n: 3,
k: 1",O(n),https://epubs.siam.org/doi/epdf/10.1137/S0097539797329373,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,10280.0,97.27626459,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,False
209,0.0,0.0,0,,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, generalized segments",124.0,,,1,1,O( nlog n + k ),,,[https://dl.acm.org/doi/pdf/10.1145/220279.220302 Balaban. (1995)],Balaban.,1995,https://dl.acm.org/doi/pdf/10.1145/220279.220302,,,,0.0,0,4,"n: 4,
k: 3",$O(n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 1",O(n),https://dl.acm.org/doi/pdf/10.1145/220279.220302,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,False
210,0.0,0.0,0,,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, generalized segments",125.0,,,1,1,O( nlog n + k ),,,[https://dl.acm.org/citation.cfm?id=304991 Boissonnat; Snoeyink (1999)],Boissonnat; Snoeyink,1999,https://dl.acm.org/citation.cfm?id=304991,,,,0.0,0,4,"n: 4,
k: 3",$O(n \log n + k )$,"n: number of line segments
k: number of points of intersection",n,,,"Real RAM, under more restrictions/considerations? (predicate arithmetic)",words,3,"n: 3,
k: 1",O(n),https://dl.acm.org/citation.cfm?id=304991,0.0,1.0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996.0,100.040016,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,False
211,0.0,0.0,0,,O(n*log(n)+k),11.0,Line segment intersection,1.0,"Reporting all intersection points, line segments",126.0,,,1,1,O(log^2(n)),,,[https://dl.acm.org/citation.cfm?id=72950 Goodrich (1989)],Goodrich,1989,https://dl.acm.org/citation.cfm?id=72950,,,,0.0,0,2,n: 2,$O(\log^2(n))$,"n: number of line segments
k: number of points of intersection",n,,,CREW PRAM,words,3,"n: 3,
k: 3",O(n+k) total?,"Seems to require creating/storing an O(n)-sized data structure (""segment tree""), and then computing the O(k) intersections using the data structure",1.0,0.0,,0,,0,,0,1,O(n + k/log n),0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,99.3,10070.49345,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,True,1,False
212,1.0,0.0,1,Graham scan,,12.0,Convex Hull,1.0,2-dimensional,129.0,,,1,1,O(nlogn),Any distribution (runtime is same regardless of input),https://link.springer.com/chapter/10.1007/978-1-4612-1098-6_3,[https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub Graham (1972)],Graham,1972,https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub,,,,1.0,3->5,4,n: 4,$O(n \log n)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,0.365137162,19931568.57,50171665944,0.946263248,29897352854,3.34E+16,1.796433658,3,,,Image Processing,Graham_scan,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graham_scan/monthly/20150701/20230731,2698.0,2590.0,3115.0,3900.0,4292.0,3521.0,3911.0,3082.0,3652.0,4486.0,3845.0,3439.0,2464.0,2699.0,4188.0,4583.0,4731.0,4250.0,3801.0,3513.0,3953.0,3960.0,4216.0,3479.0,2539.0,3344.0,3687.0,4312.0,4436.0,3850.0,3969.0,4288.0,4429.0,4168.0,3997.0,3015.0,2994.0,2543.0,2983.0,4249.0,3976.0,3780.0,3539.0,2885.0,3314.0,3798.0,3300.0,2569.0,2665.0,2269.0,2903.0,3432.0,3835.0,2936.0,3117.0,3017.0,2784.0,3220.0,2776.0,2852.0,3703.0,2245.0,3040.0,3226.0,3692.0,3315.0,2992.0,3031.0,3974.0,3289.0,3227.0,2874.0,2370.0,2648.0,4336.0,3561.0,3770.0,3501.0,3551.0,3019.0,2981.0,3010.0,3068.0,2618.0,2104.0,2168.0,2847.0,2984.0,4169.0,3033.0,3199.0,2981.0,3324.0,2992.0,3442.0,2552.0,2219.0,3352.505154639175,#VALUE!,False,1,False
213,0.0,1.0,1,Convex hull algorithms,,12.0,Convex Hull,1.0,2-dimensional,130.0,,,1,1,O(nh),(pseudorandom sampling; experimental),https://dl.acm.org/citation.cfm?id=355766,[https://dl.acm.org/citation.cfm?id=355766 W. Eddy Quickhull (1977)],W. Eddy Quickhull,1977,https://dl.acm.org/citation.cfm?id=355766,,,,0.0,0,5,"n: 5,
h: 3",$O(nh)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,"n: 3,
h: 3",O(h)?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing,Convex_hull_algorithms,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Convex_hull_algorithms/monthly/20150701/20230731,4588.0,4438.0,5464.0,6473.0,6989.0,5634.0,5483.0,6209.0,6430.0,6664.0,6773.0,5850.0,4657.0,5064.0,6230.0,7123.0,7514.0,6254.0,6628.0,6743.0,7448.0,6591.0,7539.0,6155.0,4962.0,5388.0,5780.0,7353.0,7627.0,6014.0,6157.0,5905.0,6688.0,6584.0,6807.0,4974.0,4609.0,4629.0,4941.0,6071.0,6337.0,5901.0,5642.0,5255.0,5903.0,5897.0,5558.0,4567.0,4778.0,4072.0,4704.0,5915.0,6084.0,4832.0,4807.0,5297.0,4992.0,5756.0,5241.0,5191.0,5163.0,4435.0,4860.0,5768.0,6268.0,5423.0,5647.0,5687.0,7129.0,6162.0,5524.0,5058.0,4300.0,4491.0,6940.0,5307.0,5644.0,4893.0,4649.0,4983.0,5251.0,5392.0,5390.0,4560.0,3909.0,3857.0,4745.0,5029.0,6438.0,4973.0,5152.0,5270.0,5722.0,5266.0,5412.0,4198.0,3857.0,5597.020618556701,#VALUE!,False,1,False
214,0.0,1.0,1,Convex hull algorithms,,12.0,Convex Hull,1.0,2-dimensional; 3-dimensional,131.0,,,1,1,O(nlogn),,,[https://dl.acm.org/citation.cfm?id=359430 Preparata and Hong (1977)],Preparata and Hong,1977,https://dl.acm.org/citation.cfm?id=359430,,,,0.0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n)?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing,Convex_hull_algorithms,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Convex_hull_algorithms/monthly/20150701/20230731,4588.0,4438.0,5464.0,6473.0,6989.0,5634.0,5483.0,6209.0,6430.0,6664.0,6773.0,5850.0,4657.0,5064.0,6230.0,7123.0,7514.0,6254.0,6628.0,6743.0,7448.0,6591.0,7539.0,6155.0,4962.0,5388.0,5780.0,7353.0,7627.0,6014.0,6157.0,5905.0,6688.0,6584.0,6807.0,4974.0,4609.0,4629.0,4941.0,6071.0,6337.0,5901.0,5642.0,5255.0,5903.0,5897.0,5558.0,4567.0,4778.0,4072.0,4704.0,5915.0,6084.0,4832.0,4807.0,5297.0,4992.0,5756.0,5241.0,5191.0,5163.0,4435.0,4860.0,5768.0,6268.0,5423.0,5647.0,5687.0,7129.0,6162.0,5524.0,5058.0,4300.0,4491.0,6940.0,5307.0,5644.0,4893.0,4649.0,4983.0,5251.0,5392.0,5390.0,4560.0,3909.0,3857.0,4745.0,5029.0,6438.0,4973.0,5152.0,5270.0,5722.0,5266.0,5412.0,4198.0,3857.0,5597.020618556701,#VALUE!,False,1,False
215,0.0,1.0,1,Convex hull algorithms,,12.0,Convex Hull,1.0,2-dimensional,132.0,,,1,1,O(nlogn),,,[https://www.sciencedirect.com/science/article/pii/0020019079900723 Andrew's algorithm (1979)],Andrew's algorithm,1979,https://www.sciencedirect.com/science/article/pii/0020019079900723,,,,0.0,0,4,n: 4,$O(nlogn)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Image Processing,Convex_hull_algorithms,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Convex_hull_algorithms/monthly/20150701/20230731,4588.0,4438.0,5464.0,6473.0,6989.0,5634.0,5483.0,6209.0,6430.0,6664.0,6773.0,5850.0,4657.0,5064.0,6230.0,7123.0,7514.0,6254.0,6628.0,6743.0,7448.0,6591.0,7539.0,6155.0,4962.0,5388.0,5780.0,7353.0,7627.0,6014.0,6157.0,5905.0,6688.0,6584.0,6807.0,4974.0,4609.0,4629.0,4941.0,6071.0,6337.0,5901.0,5642.0,5255.0,5903.0,5897.0,5558.0,4567.0,4778.0,4072.0,4704.0,5915.0,6084.0,4832.0,4807.0,5297.0,4992.0,5756.0,5241.0,5191.0,5163.0,4435.0,4860.0,5768.0,6268.0,5423.0,5647.0,5687.0,7129.0,6162.0,5524.0,5058.0,4300.0,4491.0,6940.0,5307.0,5644.0,4893.0,4649.0,4983.0,5251.0,5392.0,5390.0,4560.0,3909.0,3857.0,4745.0,5029.0,6438.0,4973.0,5152.0,5270.0,5722.0,5266.0,5412.0,4198.0,3857.0,5597.020618556701,#VALUE!,False,1,False
216,1.0,0.0,1,Kirkpatrick–Seidel algorithm,,12.0,Convex Hull,1.0,2-dimensional,134.0,,,1,1,O(n log h),,,[https://ecommons.cornell.edu/handle/1813/6417 The ultimate planar convex hull algorithm (1986)],The ultimate planar convex hull algorithm,1986,https://ecommons.cornell.edu/handle/1813/6417,2,1.0,https://www.cs.princeton.edu/~chazelle/temp/451/451-2019/KirkSeidel.pdf,1.0,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://ecommons.cornell.edu/handle/1813/6417,0.0,1.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.892142,2.006063891,,9965784.285,0,,14948676427,0,,3,,,Image Processing,Kirkpatrick%E2%80%93Seidel_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kirkpatrick%E2%80%93Seidel_algorithm/monthly/20150701/20230731,394.0,386.0,433.0,571.0,501.0,484.0,446.0,565.0,528.0,563.0,566.0,446.0,363.0,401.0,408.0,595.0,594.0,574.0,505.0,546.0,647.0,508.0,582.0,492.0,377.0,391.0,482.0,700.0,757.0,516.0,642.0,562.0,648.0,543.0,644.0,479.0,418.0,440.0,519.0,621.0,588.0,476.0,549.0,502.0,626.0,676.0,472.0,427.0,469.0,458.0,443.0,670.0,600.0,461.0,470.0,538.0,409.0,787.0,364.0,320.0,308.0,213.0,382.0,446.0,400.0,325.0,323.0,354.0,448.0,350.0,363.0,252.0,221.0,282.0,401.0,430.0,387.0,311.0,303.0,269.0,518.0,299.0,283.0,238.0,208.0,178.0,353.0,390.0,447.0,359.0,308.0,331.0,322.0,234.0,297.0,262.0,258.0,445.30927835051546,#VALUE!,False,1,False
217,1.0,0.0,1,Chan's algorithm,,12.0,Convex Hull,1.0,2-dimensional; 3-dimensional,135.0,,,1,1,O(n log h),,,[https://link.springer.com/article/10.1007/BF02712873 Chan's algorithm (1996)],Chan's algorithm,1996,https://link.springer.com/article/10.1007/BF02712873,,,,0.0,0,4,"n: 4,
h: 2",$O(n log h)$,"n: number of line segments
h: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,O(n),https://link.springer.com/article/10.1007/BF02712873,0.0,1.0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.0,200722.6014,,#VALUE!,#VALUE!,,#VALUE!,#VALUE!,,3,,,Image Processing,Chan%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Chan%27s_algorithm/monthly/20150701/20230731,765.0,799.0,884.0,1171.0,1191.0,941.0,1024.0,1005.0,1089.0,1215.0,1267.0,956.0,765.0,739.0,948.0,1081.0,1042.0,961.0,1177.0,1020.0,1113.0,1104.0,1227.0,1098.0,905.0,873.0,1087.0,1369.0,1463.0,1194.0,1347.0,1156.0,1645.0,1271.0,1449.0,1090.0,1016.0,926.0,1032.0,1106.0,1270.0,1097.0,1236.0,1124.0,1299.0,1250.0,1015.0,1026.0,1237.0,883.0,1182.0,1542.0,1331.0,1187.0,1060.0,1060.0,958.0,1203.0,911.0,808.0,749.0,643.0,746.0,1031.0,903.0,877.0,920.0,833.0,995.0,873.0,933.0,724.0,587.0,672.0,1037.0,957.0,1081.0,806.0,1070.0,821.0,889.0,904.0,924.0,784.0,609.0,551.0,871.0,937.0,1001.0,905.0,1351.0,937.0,1037.0,1201.0,909.0,776.0,762.0,1018.5154639175256,#VALUE!,False,1,False
218,0.0,0.0,0,,,12.0,Convex Hull,1.0,2-dimensional,136.0,,,1,1,"O(logn) time using
O(n) processors",,,[https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf Miller; Stout (1988)],Miller; Stout,1988,https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf,,,,1.0,5->7,#VALUE!,,"$O(logn)$ time using
$O(n)$ processors","n: number of line segments
h: number of points on the convex hull",n,,,"EREW PRAM, possibly others (see paper)",words,3,n: 3,O(n) total?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1.0,0.0,,0,,0,,0,1,O(n),0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9.965,100351229.3,,,,,,,,3,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#VALUE!,True,1,False
219,1.0,0.0,1,Kosaraju's algorithm,,13.0,Strongly Connected Components,1.0,SCCs,137.0,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/0898122181900080 Kosaraju's algorithm (1978)],Kosaraju's algorithm,1978,https://www.sciencedirect.com/science/article/pii/0898122181900080,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 3",O(V+E),auxiliary data structures take up at most that much space,1.0,0.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,https://www.sciencedirect.com/science/article/pii/B9780123743640500114,Combinatorics,Kosaraju%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kosaraju%27s_algorithm/monthly/20150701/20230731,2020.0,2816.0,2761.0,3372.0,4044.0,3141.0,2692.0,2613.0,3184.0,3884.0,3183.0,3003.0,2482.0,2505.0,3191.0,3717.0,4334.0,3781.0,2897.0,3193.0,4185.0,4226.0,4450.0,3492.0,2300.0,2371.0,2898.0,3590.0,4498.0,3436.0,2745.0,3123.0,4147.0,3963.0,3457.0,3186.0,2902.0,2464.0,3500.0,4348.0,5453.0,3424.0,3025.0,3688.0,4094.0,4450.0,4102.0,3075.0,2342.0,2311.0,2878.0,4184.0,4522.0,3443.0,3178.0,3512.0,4123.0,4017.0,11184.0,8628.0,6944.0,5860.0,5951.0,8378.0,6999.0,6850.0,5811.0,5706.0,6712.0,7204.0,6630.0,6009.0,5058.0,5029.0,6116.0,8062.0,6792.0,5465.0,5108.0,6271.0,7870.0,7750.0,6202.0,5701.0,4741.0,4463.0,4748.0,5928.0,5983.0,4226.0,4510.0,4394.0,5291.0,4883.0,4613.0,4064.0,3312.0,4467.639175257732,5,True,3,False
220,1.0,0.0,1,Tarjan's strongly connected components algorithm,,13.0,Strongly Connected Components,1.0,SCCs,138.0,,,1,1,O(V+E),,,[https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6 Tarjan's strongly connected components algorithm (1972)],Tarjan's strongly connected components algorithm,1972,https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6,2,1.0,https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/,1.0,5->6,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),https://www.sciencedirect.com/science/article/pii/S0020019015001532,0.0,0.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,183.673,,1000000,183673.4694,,1000000000,183673469.4,,4,,,Combinatorics,Tarjan%27s_strongly_connected_components_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tarjan%27s_strongly_connected_components_algorithm/monthly/20150701/20230731,5036.0,4821.0,6221.0,7883.0,7001.0,5878.0,5585.0,4939.0,6132.0,6732.0,7694.0,5201.0,4567.0,4548.0,4891.0,6080.0,6747.0,6502.0,5232.0,5680.0,7081.0,6601.0,7150.0,5464.0,4305.0,4079.0,4314.0,5340.0,6163.0,4678.0,4892.0,4829.0,6535.0,5494.0,5755.0,4430.0,4094.0,3751.0,3683.0,6035.0,5208.0,5333.0,4819.0,4266.0,5201.0,4703.0,4714.0,3906.0,3222.0,2967.0,4718.0,7200.0,7478.0,6933.0,7171.0,6090.0,7264.0,7149.0,7777.0,6237.0,5505.0,5629.0,5584.0,6633.0,5886.0,7312.0,6614.0,5939.0,6134.0,9470.0,6199.0,5330.0,4745.0,4367.0,4619.0,6050.0,6104.0,5937.0,5933.0,5164.0,6635.0,6234.0,9880.0,5330.0,4962.0,4906.0,4515.0,6382.0,5857.0,4602.0,5521.0,4471.0,4964.0,4853.0,4824.0,4219.0,3784.0,5623.628865979382,5,True,3,True
221,1.0,0.0,1,Path-based strong component algorithm,,13.0,Strongly Connected Components,1.0,SCCs,139.0,,,1,1,O(V+E),,,[https://www.worldcat.org/title/discipline-of-programming/oclc/1958445 Path-based strong components algorithm; Dijkstra (1976)],Path-based strong components algorithm; Dijkstra,1976,https://www.worldcat.org/title/discipline-of-programming/oclc/1958445,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),constant number of auxiliary stacks?,1.0,0.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics,Path-based_strong_component_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Path-based_strong_component_algorithm/monthly/20150701/20230731,596.0,684.0,783.0,860.0,833.0,629.0,641.0,537.0,721.0,731.0,828.0,578.0,567.0,492.0,527.0,558.0,756.0,605.0,622.0,634.0,834.0,662.0,954.0,659.0,414.0,384.0,453.0,564.0,669.0,480.0,624.0,680.0,649.0,588.0,587.0,895.0,798.0,687.0,415.0,523.0,496.0,467.0,503.0,594.0,569.0,518.0,488.0,709.0,361.0,295.0,397.0,655.0,487.0,398.0,402.0,461.0,419.0,538.0,683.0,545.0,459.0,418.0,380.0,527.0,511.0,552.0,452.0,441.0,607.0,599.0,598.0,437.0,412.0,445.0,362.0,358.0,443.0,393.0,367.0,420.0,434.0,497.0,554.0,483.0,381.0,377.0,326.0,517.0,451.0,330.0,325.0,370.0,436.0,374.0,314.0,349.0,288.0,532.7113402061856,5,True,3,True
222,0.0,1.0,1,Strongly connected component,,13.0,Strongly Connected Components,1.0,SCCs,140.0,,,1,1,O(ElogV+V),,,[https://ldhulipala.github.io/readings/sequential-scc.pdf Fleischer forward-backward (FB) algorithm (2003)],Fleischer forward-backward (FB) algorithm,2003,https://ldhulipala.github.io/readings/sequential-scc.pdf,,,,0.0,0,5.01,"E: 3,
V: 5.01",$O(E\log V+V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E),constructing recursive subgraphs? and reuse space across recursive calls,1.0,0.0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571.0,0.002333336,,,,,,,,4,,,Combinatorics,Strongly_connected_component,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Strongly_connected_component/monthly/20150701/20230731,5407.0,5814.0,7247.0,10714.0,10518.0,9026.0,6830.0,7007.0,8511.0,10094.0,8702.0,6683.0,5315.0,5880.0,7674.0,9414.0,10906.0,9142.0,7476.0,7880.0,9907.0,9552.0,9115.0,7405.0,5169.0,5158.0,6458.0,9300.0,10684.0,8047.0,7085.0,7931.0,9015.0,9521.0,8667.0,6094.0,5213.0,4684.0,6459.0,8012.0,8560.0,6435.0,6012.0,6249.0,7266.0,7314.0,7372.0,5748.0,4911.0,4227.0,5684.0,8434.0,9765.0,8000.0,7266.0,7424.0,7676.0,9569.0,10855.0,9181.0,7947.0,7183.0,7711.0,11362.0,12264.0,10954.0,9228.0,8310.0,11041.0,11755.0,9014.0,7933.0,6783.0,6211.0,6699.0,9847.0,9776.0,8618.0,7906.0,7918.0,9616.0,8783.0,7878.0,6818.0,5785.0,5093.0,6201.0,8994.0,10691.0,8206.0,7673.0,6777.0,7602.0,7180.0,7069.0,6116.0,5040.0,7893.257731958763,5,False,3,True
223,0.0,0.0,0,,,13.0,Strongly Connected Components,1.0,SCCs,141.0,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/S0020019015001532 Pearce (2016)],Pearce,2016,https://www.sciencedirect.com/science/article/pii/S0020019015001532,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V),https://www.sciencedirect.com/science/article/pii/S0020019015001532,0.0,1.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
224,0.0,1.0,1,Path-based strong component algorithm,,13.0,Strongly Connected Components,1.0,SCCs,142.0,,,1,1,O(V+E),,,[https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub Path-based depth-first search Gabow (2000)],Path-based depth-first search Gabow,2000,https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1","O(V+E) total, O(V) auxiliary?",https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,0.0,1.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics,Path-based_strong_component_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Path-based_strong_component_algorithm/monthly/20150701/20230731,596.0,684.0,783.0,860.0,833.0,629.0,641.0,537.0,721.0,731.0,828.0,578.0,567.0,492.0,527.0,558.0,756.0,605.0,622.0,634.0,834.0,662.0,954.0,659.0,414.0,384.0,453.0,564.0,669.0,480.0,624.0,680.0,649.0,588.0,587.0,895.0,798.0,687.0,415.0,523.0,496.0,467.0,503.0,594.0,569.0,518.0,488.0,709.0,361.0,295.0,397.0,655.0,487.0,398.0,402.0,461.0,419.0,538.0,683.0,545.0,459.0,418.0,380.0,527.0,511.0,552.0,452.0,441.0,607.0,599.0,598.0,437.0,412.0,445.0,362.0,358.0,443.0,393.0,367.0,420.0,434.0,497.0,554.0,483.0,381.0,377.0,326.0,517.0,451.0,330.0,325.0,370.0,436.0,374.0,314.0,349.0,288.0,532.7113402061856,5,True,3,True
225,0.0,1.0,1,Transitive closure,,13.0,Strongly Connected Components,1.0,Transitive Closure,143.0,,,1,1,O(V^2),"Each edge is selected with probability p, 0<p<1",https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,[https://link.springer.com/article/10.1007%2FBF01940892 Paul Purdom (1970)],Paul Purdom,1970,https://link.springer.com/article/10.1007%2FBF01940892,4,1.0,https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,1.0,0,6,"V: 6,
E: 3",$O(V^2+VE)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 1",O(V^2),https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000000.0,,1000000000000.0,,1e+18,,183673.0,0.005444458,,1.83673E+11,1,,1.84E+17,1,,4,,,Combinatorics,Transitive_closure,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Transitive_closure/monthly/20150701/20230731,3486.0,3838.0,4497.0,5592.0,6364.0,5448.0,4350.0,4625.0,4779.0,6075.0,5672.0,10733.0,3390.0,3888.0,4425.0,5916.0,6395.0,5350.0,4313.0,3939.0,4979.0,5249.0,5452.0,3756.0,2964.0,3335.0,3905.0,5269.0,6074.0,5212.0,4862.0,4023.0,4559.0,5218.0,4519.0,3428.0,2908.0,3765.0,4157.0,5657.0,6128.0,4771.0,4374.0,3843.0,5021.0,4781.0,4490.0,3578.0,3145.0,3224.0,4219.0,5932.0,6574.0,5050.0,4399.0,4402.0,4461.0,5588.0,5679.0,4436.0,3939.0,3578.0,4087.0,5741.0,6902.0,6699.0,5014.0,4876.0,5658.0,5721.0,5246.0,4341.0,4045.0,3650.0,4548.0,6123.0,5703.0,5063.0,4532.0,5169.0,5325.0,4661.0,4754.0,3922.0,3365.0,3364.0,3928.0,4869.0,5805.0,4907.0,4291.0,4128.0,3962.0,4038.0,4037.0,3034.0,2640.0,4722.948453608247,5,False,3,False
226,0.0,0.0,0,,,13.0,Strongly Connected Components,1.0,SCCs,144.0,,,1,1,O(V^2),,,[http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html Lowe’s Algorithm (2014)],Lowe’s Algorithm,2014,http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html,,,,0.0,0,5,"V: 5,
E: 3",$O(V^2)$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) per processor,(can be easily derived?),1.0,0.0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,184244.0,0.005427585,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
227,0.0,0.0,0,,,13.0,Strongly Connected Components,1.0,SCCs,145.0,,,1,1,"O(p*(V+E)*alpha(V, E))?",,,[https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44 Renault’s Algorithm (2009)],Renault’s Algorithm,2009,https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44,,,,0.0,0,5,"V: 5,
E: 3,
p: 3","$O(p*(V+E)*\alpha(V, E))$","V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) per processor,(can be easily derived?),1.0,0.0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,183673.0,0.005444458,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
228,0.0,0.0,0,,,13.0,Strongly Connected Components,1.0,SCCs,146.0,,,1,1,O(V+E),,,[https://link.springer.com/chapter/10.1007/3-540-48119-2_16 Couvreur (1999)],Couvreur,1999,https://link.springer.com/chapter/10.1007/3-540-48119-2_16,,,,0.0,0,5,"V: 5,
E: 3",$O(V+E)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V)?,can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000.0,1,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
229,0.0,1.0,1,Path-based strong component algorithm,,13.0,Strongly Connected Components,1.0,SCCs,147.0,,,1,1,O(E + VlogV),,,[https://www.sciencedirect.com/science/article/pii/0020019071900068 Munro’s algorithm (1971)],Munro’s algorithm,1971,https://www.sciencedirect.com/science/article/pii/0020019071900068,,,,1.0,4->5,5,"V: 5,
E: 3",$O(E + V \log V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V)?,can be easily derived?,1.0,0.0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000.0,999.0,1000000.0,999999.0,1000000000.0,999999999.0,4318.596513,42.53071558,41.53071558,8589646.921,21383.12216,21382.12216,12860697328,14281765.96,14281764.96,4,,,Combinatorics,Path-based_strong_component_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Path-based_strong_component_algorithm/monthly/20150701/20230731,596.0,684.0,783.0,860.0,833.0,629.0,641.0,537.0,721.0,731.0,828.0,578.0,567.0,492.0,527.0,558.0,756.0,605.0,622.0,634.0,834.0,662.0,954.0,659.0,414.0,384.0,453.0,564.0,669.0,480.0,624.0,680.0,649.0,588.0,587.0,895.0,798.0,687.0,415.0,523.0,496.0,467.0,503.0,594.0,569.0,518.0,488.0,709.0,361.0,295.0,397.0,655.0,487.0,398.0,402.0,461.0,419.0,538.0,683.0,545.0,459.0,418.0,380.0,527.0,511.0,552.0,452.0,441.0,607.0,599.0,598.0,437.0,412.0,445.0,362.0,358.0,443.0,393.0,367.0,420.0,434.0,497.0,554.0,483.0,381.0,377.0,326.0,517.0,451.0,330.0,325.0,370.0,436.0,374.0,314.0,349.0,288.0,532.7113402061856,5,True,3,True
230,0.0,0.0,0,,,13.0,Strongly Connected Components,1.0,SCCs,148.0,,,1,1,O(V(V+E)),,,[https://ieeexplore.ieee.org/document/8133154 OBF Algorithm (2011)],OBF Algorithm,2011,https://ieeexplore.ieee.org/document/8133154,,,,0.0,0,6,"E: 3,
V: 6",$O(V(V+E))$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E+V^2) total,https://ris.utwente.nl/ws/files/6872352/Barnat09distributed.pdf,0.0,1.0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571.0,0.002333336,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
231,1.0,0.0,1,Contraction hierarchies,,13.0,Strongly Connected Components,1.0,SCCs,149.0,,,1,1,O(VE),,,[https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution CH Algorithm (2004)],CH Algorithm,2004,https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution,,,,0.0,0,6,"E: 3,
V: 6",$O(VE)$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E)?,Each vertex needs to keep track of one color; then we need to build recursive subgraphs,1.0,0.0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,244897.0,0.004083349,,,,,,,,4,,,Combinatorics,Contraction_hierarchies,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Contraction_hierarchies/monthly/20150701/20230731,1169.0,900.0,986.0,959.0,1196.0,1085.0,1014.0,1178.0,1202.0,1231.0,999.0,965.0,949.0,1137.0,1036.0,1230.0,1095.0,1088.0,1305.0,1396.0,1115.0,1002.0,1118.0,956.0,949.0,1032.0,1030.0,1001.0,1089.0,1047.0,1148.0,1027.0,1157.0,1189.0,1384.0,1121.0,1223.0,1073.0,1384.0,1070.0,1048.0,1201.0,1244.0,1123.0,1261.0,1204.0,1202.0,1523.0,1232.0,1455.0,1227.0,1942.0,1283.0,1213.0,1150.0,1222.0,1278.0,1270.0,1319.0,1154.0,1257.0,988.0,1012.0,1132.0,1125.0,1152.0,1020.0,1048.0,1292.0,1306.0,1368.0,1237.0,1325.0,958.0,1089.0,991.0,1116.0,1146.0,1245.0,1139.0,1314.0,1244.0,1437.0,1293.0,1424.0,1243.0,1103.0,1132.0,1535.0,1236.0,1381.0,1308.0,1578.0,1670.0,1813.0,1455.0,1245.0,1197.3505154639174,5,False,3,True
232,0.0,0.0,0,,,13.0,Strongly Connected Components,1.0,SCCs,150.0,,,1,1,O(V(V+E)),,,[https://stanford-ppl.github.io/website/papers/sc13-hong.pdf Hong’s algorithm (2013)],Hong’s algorithm,2013,https://stanford-ppl.github.io/website/papers/sc13-hong.pdf,,,,0.0,0,6,"E: 3,
V: 6",$O(V(V+E))$,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E)?,Building recursive subgraphs,1.0,0.0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571.0,0.002333336,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
233,1.0,0.0,1,Borůvka's algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",151.0,,,1,1,O(ElogV),,,[- Borůvka's algorithm (1926)],Borůvka's algorithm,1926,-,1,1.0,https://www.geeksforgeeks.org/boruvkas-algorithm-greedy-algo-9/,1.0,0,5.01,"V: 5.01,
E: 3",$O(E \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5075.0,1,,10889978.26,1,,16703352428,1,,5,,https://scholarworks.rit.edu/cgi/viewcontent.cgi?article=1658&context=theses,Combinatorics,Bor%C5%AFvka%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bor%C5%AFvka%27s_algorithm/monthly/20150701/20230731,2073.0,2686.0,2197.0,2550.0,3592.0,2778.0,2246.0,2455.0,2894.0,3365.0,3210.0,2398.0,1473.0,1474.0,1690.0,2681.0,3375.0,2985.0,2767.0,2594.0,3516.0,3884.0,3411.0,2172.0,1661.0,1727.0,3143.0,3224.0,3667.0,3054.0,2250.0,2560.0,3141.0,3503.0,2842.0,2229.0,1524.0,1482.0,1911.0,2767.0,3277.0,2898.0,2488.0,2644.0,2835.0,3079.0,2422.0,2185.0,1753.0,1458.0,1879.0,2633.0,3667.0,3191.0,2793.0,2087.0,2541.0,3196.0,2662.0,2302.0,1827.0,1463.0,1996.0,2624.0,3039.0,3239.0,2864.0,1919.0,3040.0,3178.0,2521.0,2180.0,2192.0,1921.0,1873.0,2914.0,3009.0,3173.0,2619.0,1891.0,2729.0,3190.0,2724.0,2187.0,1641.0,1536.0,1588.0,2447.0,5286.0,2792.0,2613.0,1906.0,2276.0,2496.0,2373.0,2046.0,1655.0,2557.814432989691,5,False,3,True
234,0.0,1.0,1,Prim's algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",152.0,,,1,1,O(V^2),,,[https://ieeexplore.ieee.org/document/6773228 Prim's algorithm + adjacency matrix searching (1957)],Prim's algorithm + adjacency matrix searching,1957,https://ieeexplore.ieee.org/document/6773228,,,,0.0,0,5,V: 5,$O(V^2)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,173611.0,0.029232019,,,,,,,,5,,,Combinatorics,Prim%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Prim%27s_algorithm/monthly/20150701/20230731,11579.0,12821.0,16166.0,22212.0,27433.0,27698.0,15359.0,19094.0,22050.0,30792.0,28257.0,17285.0,12160.0,14068.0,17036.0,23644.0,33595.0,31260.0,19732.0,23019.0,27530.0,31938.0,29852.0,17796.0,13643.0,13250.0,18980.0,28161.0,33367.0,29078.0,16907.0,19242.0,24166.0,32252.0,27800.0,16944.0,12906.0,12020.0,15161.0,24069.0,24569.0,23132.0,13401.0,14352.0,18784.0,22170.0,20985.0,14119.0,10398.0,11164.0,14907.0,20760.0,26232.0,23721.0,15317.0,16386.0,16241.0,21596.0,20613.0,16857.0,13924.0,10823.0,13578.0,20175.0,26596.0,26460.0,18547.0,16642.0,21963.0,21901.0,19920.0,17385.0,17072.0,14916.0,12622.0,17366.0,22527.0,23586.0,16355.0,15643.0,19389.0,24191.0,22185.0,17655.0,13129.0,10668.0,11045.0,16238.0,21348.0,20580.0,13222.0,13185.0,14281.0,15569.0,16213.0,13214.0,8769.0,19328.94845360825,5,True,3,True
235,0.0,1.0,1,Prim's algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",153.0,,,1,1,O(E + VlogV),,,[https://dl.acm.org/citation.cfm?id=28874 Prim's algorithm + Fibonacci heaps; Fredman & Tarjan (1987)],Prim's algorithm + Fibonacci heaps; Fredman & Tarjan,1987,https://dl.acm.org/citation.cfm?id=28874,,,,0.0,0,5,"V: 5,
E: 3",$O(E + V \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) auxiliary?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,4208.0,1.206036122,,,,,,,,5,,,Combinatorics,Prim%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Prim%27s_algorithm/monthly/20150701/20230731,11579.0,12821.0,16166.0,22212.0,27433.0,27698.0,15359.0,19094.0,22050.0,30792.0,28257.0,17285.0,12160.0,14068.0,17036.0,23644.0,33595.0,31260.0,19732.0,23019.0,27530.0,31938.0,29852.0,17796.0,13643.0,13250.0,18980.0,28161.0,33367.0,29078.0,16907.0,19242.0,24166.0,32252.0,27800.0,16944.0,12906.0,12020.0,15161.0,24069.0,24569.0,23132.0,13401.0,14352.0,18784.0,22170.0,20985.0,14119.0,10398.0,11164.0,14907.0,20760.0,26232.0,23721.0,15317.0,16386.0,16241.0,21596.0,20613.0,16857.0,13924.0,10823.0,13578.0,20175.0,26596.0,26460.0,18547.0,16642.0,21963.0,21901.0,19920.0,17385.0,17072.0,14916.0,12622.0,17366.0,22527.0,23586.0,16355.0,15643.0,19389.0,24191.0,22185.0,17655.0,13129.0,10668.0,11045.0,16238.0,21348.0,20580.0,13222.0,13185.0,14281.0,15569.0,16213.0,13214.0,8769.0,19328.94845360825,5,True,3,True
236,1.0,0.0,1,Kruskal's algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",154.0,,,1,1,O(ElogE),,,[https://www.jstor.org/stable/2033241 Kruskal's algorithm (1956)],Kruskal's algorithm,1956,https://www.jstor.org/stable/2033241,,,,0.0,0,5.01,"V: 5.01,
E: 4",$O(E \log E)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5355.0,0.947712418,,,,,,,,5,,,Combinatorics,Kruskal%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kruskal%27s_algorithm/monthly/20150701/20230731,10054.0,49098.0,15201.0,21379.0,25247.0,24983.0,13903.0,17017.0,20878.0,28551.0,27166.0,16586.0,10721.0,11948.0,15358.0,22848.0,31005.0,29526.0,18307.0,20473.0,25348.0,29193.0,28817.0,17130.0,12081.0,13325.0,18602.0,87059.0,33388.0,29048.0,17462.0,20149.0,24852.0,30795.0,27550.0,16612.0,12347.0,11459.0,15670.0,24931.0,27139.0,27409.0,16511.0,16900.0,21113.0,27096.0,24563.0,14483.0,10873.0,11079.0,15711.0,23389.0,30332.0,26356.0,15934.0,16811.0,17294.0,22070.0,22142.0,18256.0,13263.0,11663.0,13950.0,21078.0,26779.0,25495.0,18195.0,16172.0,23372.0,23082.0,20655.0,16642.0,15966.0,14516.0,12417.0,17952.0,20852.0,20849.0,14454.0,14858.0,16036.0,20450.0,18864.0,14546.0,10316.0,8358.0,10218.0,14980.0,18803.0,17136.0,12865.0,10822.0,14043.0,14732.0,15033.0,11494.0,7460.0,19895.81443298969,5,False,3,False
237,1.0,0.0,1,Yao's principle,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",155.0,,,1,1,O(EloglogV),,,[https://www.sciencedirect.com/science/article/pii/0020019075900563 Yao's algorithm (1975)],Yao's algorithm,1975,https://www.sciencedirect.com/science/article/pii/0020019075900563,,,,1.0,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820.0,2.788461538,0.029733175,2463146.436,4.421165588,0.043383364,2823142793,5.916580794,0.052105197,5,,,Combinatorics,Yao%27s_principle,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Yao%27s_principle/monthly/20150701/20230731,356.0,326.0,415.0,517.0,475.0,393.0,385.0,475.0,505.0,524.0,525.0,477.0,411.0,436.0,412.0,382.0,517.0,440.0,402.0,957.0,631.0,534.0,497.0,451.0,359.0,460.0,515.0,641.0,835.0,425.0,534.0,515.0,644.0,458.0,532.0,538.0,530.0,444.0,412.0,562.0,640.0,593.0,482.0,621.0,606.0,661.0,600.0,480.0,434.0,535.0,572.0,556.0,762.0,516.0,537.0,662.0,614.0,544.0,636.0,514.0,542.0,407.0,567.0,566.0,608.0,591.0,522.0,606.0,696.0,645.0,697.0,555.0,457.0,430.0,518.0,678.0,800.0,749.0,695.0,593.0,469.0,615.0,613.0,516.0,500.0,499.0,583.0,588.0,661.0,496.0,635.0,584.0,733.0,549.0,638.0,544.0,482.0,546.7938144329897,5,False,3,False
238,0.0,1.0,1,Prim's algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",156.0,,,1,1,O(EloglogV),,,[https://epubs.siam.org/doi/abs/10.1137/0205051 Cheriton-Tarjan Algorithm (1976)],Cheriton-Tarjan Algorithm,1976,https://epubs.siam.org/doi/abs/10.1137/0205051,,,,0.0,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,keep track of copy of graph where edges may be deleted?,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820.0,2.788461538,,,,,,,,5,,,Combinatorics,Prim%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Prim%27s_algorithm/monthly/20150701/20230731,11579.0,12821.0,16166.0,22212.0,27433.0,27698.0,15359.0,19094.0,22050.0,30792.0,28257.0,17285.0,12160.0,14068.0,17036.0,23644.0,33595.0,31260.0,19732.0,23019.0,27530.0,31938.0,29852.0,17796.0,13643.0,13250.0,18980.0,28161.0,33367.0,29078.0,16907.0,19242.0,24166.0,32252.0,27800.0,16944.0,12906.0,12020.0,15161.0,24069.0,24569.0,23132.0,13401.0,14352.0,18784.0,22170.0,20985.0,14119.0,10398.0,11164.0,14907.0,20760.0,26232.0,23721.0,15317.0,16386.0,16241.0,21596.0,20613.0,16857.0,13924.0,10823.0,13578.0,20175.0,26596.0,26460.0,18547.0,16642.0,21963.0,21901.0,19920.0,17385.0,17072.0,14916.0,12622.0,17366.0,22527.0,23586.0,16355.0,15643.0,19389.0,24191.0,22185.0,17655.0,13129.0,10668.0,11045.0,16238.0,21348.0,20580.0,13222.0,13185.0,14281.0,15569.0,16213.0,13214.0,8769.0,19328.94845360825,5,False,3,False
239,0.0,1.0,1,Kruskal's algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",159.0,,,1,1,"O(E+Vlog(V)log(E/V)), equivalent to O(E + Vlog(V)loglog(V))","Arbitrary graph, random edge weights",https://dl.acm.org/doi/10.5555/2791220.2791225,[https://dl.acm.org/citation.cfm?id=2791225 Filter Kruskal algorithm (2009)],Filter Kruskal algorithm,2009,https://dl.acm.org/citation.cfm?id=2791225,,,,0.0,0,5.01,"V: 5.01,
E: 4",$O(E \log V)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,"Kruskal-based, with minimal overhead? filtering should only remove edges, and each edge should only require O(1) information",1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,12258.0,0.414015337,,,,,,,,5,,,Combinatorics,Kruskal%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kruskal%27s_algorithm/monthly/20150701/20230731,10054.0,49098.0,15201.0,21379.0,25247.0,24983.0,13903.0,17017.0,20878.0,28551.0,27166.0,16586.0,10721.0,11948.0,15358.0,22848.0,31005.0,29526.0,18307.0,20473.0,25348.0,29193.0,28817.0,17130.0,12081.0,13325.0,18602.0,87059.0,33388.0,29048.0,17462.0,20149.0,24852.0,30795.0,27550.0,16612.0,12347.0,11459.0,15670.0,24931.0,27139.0,27409.0,16511.0,16900.0,21113.0,27096.0,24563.0,14483.0,10873.0,11079.0,15711.0,23389.0,30332.0,26356.0,15934.0,16811.0,17294.0,22070.0,22142.0,18256.0,13263.0,11663.0,13950.0,21078.0,26779.0,25495.0,18195.0,16172.0,23372.0,23082.0,20655.0,16642.0,15966.0,14516.0,12417.0,17952.0,20852.0,20849.0,14454.0,14858.0,16036.0,20450.0,18864.0,14546.0,10316.0,8358.0,10218.0,14980.0,18803.0,17136.0,12865.0,10822.0,14043.0,14732.0,15033.0,11494.0,7460.0,19895.81443298969,5,False,3,False
240,0.0,1.0,1,Minimum spanning tree,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",160.0,,,1,1,"O(E*alpha(E, V))",,,[https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf Chazelle's algorithm (2000)],Chazelle's algorithm,2000,https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf,,,,0.0,0,5,"V: 5,
E: 3","$O(E*\alpha(E, V))$","V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary??,"Seems like it uses Boruvka phases and contracts the graph, which requires $O(E)$ space, and then additional information in the tree data structure/soft heap don't require space beyond that",,,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583.0,8.704974271,,,,,,,,5,,,Combinatorics,Minimum_spanning_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Minimum_spanning_tree/monthly/20150701/20230731,13618.0,14238.0,18604.0,24317.0,27624.0,25545.0,17857.0,21491.0,22689.0,28622.0,26283.0,18198.0,14098.0,15640.0,20628.0,26755.0,33149.0,28472.0,21382.0,22545.0,25639.0,28048.0,25944.0,17346.0,13943.0,13702.0,17654.0,25145.0,29942.0,25608.0,18458.0,19937.0,23720.0,29729.0,25716.0,17185.0,14528.0,13610.0,17734.0,25133.0,27780.0,25896.0,18918.0,19767.0,24230.0,25330.0,22196.0,15803.0,13102.0,12736.0,16744.0,25324.0,28846.0,25144.0,17886.0,19216.0,21299.0,26631.0,27873.0,22476.0,18410.0,15720.0,18993.0,29311.0,30833.0,31180.0,22588.0,20176.0,28405.0,28071.0,24588.0,24110.0,21334.0,20598.0,20008.0,24487.0,28688.0,28015.0,21850.0,23349.0,26528.0,28337.0,26919.0,20273.0,17238.0,14712.0,16523.0,23803.0,29603.0,26610.0,19869.0,19867.0,22136.0,21378.0,19445.0,16503.0,12263.0,22169.01030927835,5,True,3,False
241,1.0,0.0,1,Reverse-delete algorithm,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),1.0,"Undirected, General MST",161.0,,,1,1,O(E LogV (loglogV)^3),,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Thorup (reverse-delete) (2000)],Thorup (reverse-delete),2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,,,0.0,0,5.02,"V: 5.02,
E: 3",$O(E \log V (\log \log V)^3)$,"V: number of vertices
E: number of edges
U: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E) auxiliary?,can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,154134.0,0.032925896,,,,,,,,5,,,Combinatorics,Reverse-delete_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Reverse-delete_algorithm/monthly/20150701/20230731,553.0,690.0,793.0,1061.0,1084.0,830.0,686.0,984.0,1029.0,1531.0,1149.0,946.0,491.0,407.0,654.0,1044.0,1004.0,801.0,760.0,1070.0,1242.0,1225.0,1167.0,681.0,689.0,472.0,901.0,1123.0,1417.0,1271.0,694.0,1040.0,1527.0,1144.0,1017.0,667.0,554.0,401.0,944.0,1081.0,1299.0,932.0,732.0,834.0,1109.0,961.0,898.0,581.0,430.0,424.0,978.0,1068.0,1305.0,886.0,622.0,835.0,1092.0,1219.0,931.0,662.0,741.0,445.0,554.0,1019.0,1532.0,1227.0,690.0,717.0,1175.0,1163.0,904.0,754.0,681.0,362.0,600.0,915.0,1164.0,858.0,549.0,758.0,855.0,873.0,800.0,540.0,439.0,305.0,713.0,1058.0,1021.0,695.0,676.0,642.0,880.0,753.0,682.0,515.0,369.0,858.2061855670103,5,False,3,False
242,0.0,1.0,1,Closest pair of points problem,,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",165.0,,,1,1,O(kn loglogn+n*3^k),,,[https://www.sciencedirect.com/science/article/pii/0020019079900851 Fortune and Hopcroft (1979)],Fortune and Hopcroft,1979,https://www.sciencedirect.com/science/article/pii/0020019079900851,,,,0.0,0,4,"n: 4,
k: 8",$O(kn \log\log n+n*3^k)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived? (can re-use space from recursive calls),1.0,0.0,,0,,0,,0,0,,0,0,https://ecommons.cornell.edu/bitstream/handle/1813/7460/78-340.pdf,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,3316.0,301.5681544,,,,,,,,4,,,Image Processing,Closest_pair_of_points_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Closest_pair_of_points_problem/monthly/20150701/20230731,3360.0,3511.0,4647.0,5899.0,5326.0,5200.0,5204.0,5850.0,6437.0,6173.0,5453.0,4700.0,4061.0,4621.0,6800.0,7634.0,7067.0,5231.0,5338.0,6416.0,6466.0,6262.0,5109.0,4112.0,3591.0,4173.0,6166.0,7149.0,6199.0,4439.0,4896.0,6041.0,5542.0,5394.0,4568.0,3600.0,3590.0,3436.0,4739.0,6125.0,4761.0,4512.0,4387.0,5157.0,5331.0,4648.0,4390.0,3873.0,3357.0,3768.0,5760.0,6198.0,6088.0,4101.0,4239.0,5301.0,4936.0,5355.0,4695.0,3598.0,3581.0,4436.0,5414.0,5383.0,4634.0,4175.0,4604.0,5144.0,6157.0,4325.0,3331.0,3408.0,2408.0,1941.0,2791.0,3415.0,3212.0,2237.0,2189.0,2674.0,2839.0,2596.0,2176.0,1819.0,1618.0,1480.0,2253.0,2832.0,3043.0,1770.0,2093.0,2359.0,2278.0,1892.0,1773.0,1661.0,1423.0,4292.20618556701,3,False,1,False
243,0.0,1.0,1,Convex curve,,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",166.0,,,1,1,O(kn logn),,,[https://www.springer.com/gp/book/9780387961316 F. Preparata and M. Shamos (1986)],F. Preparata and M. Shamos,1986,https://www.springer.com/gp/book/9780387961316,,,,0.0,0,4,"k: 3,
n: 4",$O(kn \log n)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",O(kn)?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing,Convex_curve,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Convex_curve/monthly/20150701/20230731,868.0,1072.0,1424.0,1581.0,1515.0,1184.0,1367.0,1439.0,1469.0,1481.0,1955.0,1217.0,1018.0,972.0,1260.0,1377.0,1305.0,994.0,1187.0,1268.0,1437.0,1002.0,952.0,830.0,663.0,830.0,1027.0,1251.0,1082.0,862.0,1148.0,1108.0,1126.0,2345.0,1362.0,1018.0,1000.0,960.0,1096.0,1175.0,1076.0,862.0,1018.0,1157.0,1295.0,1107.0,1129.0,901.0,834.0,849.0,1120.0,1169.0,1063.0,842.0,999.0,964.0,972.0,1095.0,964.0,852.0,760.0,801.0,1069.0,1074.0,1093.0,1002.0,1103.0,1008.0,1993.0,1049.0,839.0,779.0,797.0,769.0,1038.0,1138.0,1217.0,930.0,978.0,1224.0,1242.0,911.0,866.0,849.0,754.0,867.0,1137.0,1399.0,1577.0,1137.0,8985.0,1378.0,1254.0,1106.0,1224.0,1188.0,1041.0,1196.6082474226805,3,False,1,False
244,0.0,1.0,1,Miller–Rabin primality test,,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",167.0,,,1,1,O(3^k*n),Randomness within the algorithm steps themselves,,[https://dl.acm.org/citation.cfm?id=540196 Rabin' Algorithm (1976)],Rabin' Algorithm,1976,https://dl.acm.org/citation.cfm?id=540196,,,,1.0,5->6,5,"k: 8,
n: 5",$O(3^k*n^2)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,n: 3,O(n),can be easily derived,1.0,0.0,,1,Las Vegas,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000.0,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Image Processing,Miller%E2%80%93Rabin_primality_test,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Miller%E2%80%93Rabin_primality_test/monthly/20150701/20230731,4352.0,4724.0,5367.0,7388.0,8637.0,7490.0,6422.0,7059.0,8577.0,10013.0,8217.0,5867.0,5476.0,5259.0,6404.0,8140.0,9891.0,7666.0,6579.0,8369.0,10014.0,9829.0,7472.0,8132.0,5314.0,5980.0,6708.0,9030.0,9724.0,8707.0,7363.0,6956.0,8474.0,8990.0,7990.0,5829.0,5194.0,5486.0,7186.0,10335.0,10485.0,8019.0,6809.0,6750.0,8345.0,8349.0,6921.0,5674.0,5530.0,5107.0,6723.0,8830.0,9659.0,7616.0,6566.0,6692.0,7459.0,8580.0,7845.0,6493.0,5800.0,5051.0,6602.0,9412.0,9058.0,9585.0,7976.0,6793.0,8918.0,8384.0,7750.0,6699.0,5887.0,5678.0,7394.0,9190.0,11225.0,9834.0,8292.0,7899.0,9114.0,9465.0,8830.0,6375.0,5070.0,5051.0,6892.0,10158.0,10099.0,8578.0,7579.0,7263.0,8841.0,8425.0,7486.0,6833.0,6260.0,7575.340206185567,3,False,1,False
245,1.0,0.0,1,Bentley–Ottmann algorithm,,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",168.0,,,1,1,O(kn logn),,,[https://dl.acm.org/citation.cfm?id=358850 Bentley (1980)],Bentley,1980,https://dl.acm.org/citation.cfm?id=358850,,,,0.0,0,4,"n: 4,
k: 3",$O(kn \log n)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",O(kn)?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing,Bentley%E2%80%93Ottmann_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bentley%E2%80%93Ottmann_algorithm/monthly/20150701/20230731,1040.0,1161.0,1283.0,2058.0,1934.0,1611.0,1512.0,1718.0,2042.0,2009.0,1703.0,1456.0,1317.0,1383.0,1496.0,1948.0,2290.0,1825.0,1538.0,1630.0,1762.0,2313.0,1804.0,1489.0,1192.0,1353.0,1369.0,1882.0,1938.0,1666.0,1787.0,1568.0,1602.0,1718.0,2473.0,1430.0,1217.0,1307.0,1470.0,1707.0,1667.0,1530.0,1513.0,1548.0,2162.0,1919.0,1863.0,1549.0,1339.0,1162.0,1444.0,1756.0,1747.0,2244.0,1552.0,1433.0,2322.0,1907.0,1565.0,1351.0,1226.0,1209.0,1354.0,1880.0,1832.0,2163.0,1606.0,1353.0,1732.0,1712.0,1619.0,1609.0,1258.0,1215.0,1409.0,1545.0,1724.0,2355.0,1578.0,1448.0,1594.0,1578.0,1371.0,1498.0,1300.0,1214.0,1330.0,1475.0,1583.0,1301.0,1533.0,1613.0,1881.0,1453.0,1595.0,1265.0,1272.0,1610.8969072164948,3,False,1,False
246,0.0,1.0,1,Bentley–Ottmann algorithm,,15.0,Closest Pair Problem,1.0,"k-dimensional space, l_m (or l_infty) norm",169.0,,,1,1,O(kn logn),,,[https://dl.acm.org/citation.cfm?id=803652 Bentley; Shamos (1976)],Bentley; Shamos,1976,https://dl.acm.org/citation.cfm?id=803652,,,,0.0,0,4,"n: 4,
k: 3",$O(kn \log n)$,"n: number of points
k: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",O(kn)?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing,Bentley%E2%80%93Ottmann_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bentley%E2%80%93Ottmann_algorithm/monthly/20150701/20230731,1040.0,1161.0,1283.0,2058.0,1934.0,1611.0,1512.0,1718.0,2042.0,2009.0,1703.0,1456.0,1317.0,1383.0,1496.0,1948.0,2290.0,1825.0,1538.0,1630.0,1762.0,2313.0,1804.0,1489.0,1192.0,1353.0,1369.0,1882.0,1938.0,1666.0,1787.0,1568.0,1602.0,1718.0,2473.0,1430.0,1217.0,1307.0,1470.0,1707.0,1667.0,1530.0,1513.0,1548.0,2162.0,1919.0,1863.0,1549.0,1339.0,1162.0,1444.0,1756.0,1747.0,2244.0,1552.0,1433.0,2322.0,1907.0,1565.0,1351.0,1226.0,1209.0,1354.0,1880.0,1832.0,2163.0,1606.0,1353.0,1732.0,1712.0,1619.0,1609.0,1258.0,1215.0,1409.0,1545.0,1724.0,2355.0,1578.0,1448.0,1594.0,1578.0,1371.0,1498.0,1300.0,1214.0,1330.0,1475.0,1583.0,1301.0,1533.0,1613.0,1881.0,1453.0,1595.0,1265.0,1272.0,1610.8969072164948,3,False,1,False
247,0.0,0.0,0,,,15.0,Closest Pair Problem,1.0,"2-dimensional space, l_m (or l_infty) norm",170.0,,,1,1,O(n logn),,,[https://www.sciencedirect.com/science/article/pii/0020019088901500 Hinrichs; Nievergelt; Schorn (1988)],Hinrichs; Nievergelt; Schorn,1988,https://www.sciencedirect.com/science/article/pii/0020019088901500,,,,0.0,0,4,n: 4,$O(n \log n)$,n: number of points,n,,,Real RAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/0020019088901500,0.0,1.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
248,0.0,1.0,1,Multiple line segment intersection,,15.0,Closest Pair Problem,1.0,"2-dimensional space, Euclidean metric",171.0,,,1,1,O(n logn),,,[https://ieeexplore.ieee.org/document/4567872 Shamos; Hoey (1975)],Shamos; Hoey,1975,https://ieeexplore.ieee.org/document/4567872,2,1.0,http://geomalgorithms.com/a09-_intersect-3.html,1.0,4->5,4,n: 4,$O(n \log n)$,n: number of points,n,,,Real RAM,words,3,n: 3,O(n),Voronoi diagrams require O(n) space,1.0,0.0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965.0,100.3512293,99.3512293,19931568.57,50171.66594,50170.66594,29897352854,33447777.3,33447776.3,4,,,Image Processing,Multiple_line_segment_intersection,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiple_line_segment_intersection/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,81.0,150.0,170.0,193.0,187.0,229.0,307.0,281.0,187.0,191.0,228.0,231.0,220.0,424.0,294.0,247.0,307.0,280.0,286.0,283.0,272.0,205.0,208.0,215.0,270.0,292.0,262.0,300.0,301.0,301.0,234.0,207.0,178.0,243.0606060606061,3,False,1,False
249,0.0,0.0,0,,,15.0,Closest Pair Problem,1.0,2-dimensional array representation,173.0,,,1,1,O(n) using O(n^2) processors,,,[https://www.sciencedirect.com/science/article/pii/0020019080900356 Dyer (1980)],Dyer,1980,https://www.sciencedirect.com/science/article/pii/0020019080900356,,,,0.0,0,3,n: 3,$O(n)$ using $O(n^2)$ processors,n: number of points,n,,,log-space pyramid cellular automaton,words,5,n: 5,O(n^2),https://www.sciencedirect.com/science/article/pii/0020019080900356,0.0,1.0,,0,,0,,0,1,O(n^2),0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000.0,1000,,,,,,,,4,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
250,1.0,0.0,1,Bellman–Ford algorithm,,16.0,Shortest Path (Directed Graphs),1.0,general weights,174.0,,,1,1,O( V² EL),,,[https://apps.dtic.mil/sti/pdfs/AD0422842.pdf Bellman–Ford algorithm (Ford 1956) (1956)],Bellman–Ford algorithm (Ford 1956),1956,https://apps.dtic.mil/sti/pdfs/AD0422842.pdf,1,1.0,https://www.rand.org/pubs/papers/P923.html,1.0,0,7,"V: 7,
E: 3,
L: 3",$O(V^2 EL)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",O(E),number of equations in LP; each equation has a constant number of variables,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",666.6666667,,666666.6667,,666666666.7,,7407407407.0,1,,7.41E+18,1,,7.41E+27,1,,2,,,Combinatorics,Bellman%E2%80%93Ford_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bellman%E2%80%93Ford_algorithm/monthly/20150701/20230731,10866.0,12150.0,14463.0,23689.0,26542.0,23022.0,15616.0,16899.0,21538.0,26348.0,24819.0,17399.0,12103.0,13151.0,16590.0,23704.0,30707.0,27407.0,17735.0,19665.0,22501.0,25417.0,24366.0,17426.0,12770.0,13157.0,18461.0,23305.0,31406.0,27001.0,18555.0,19600.0,22263.0,27840.0,24273.0,17571.0,13310.0,12695.0,15169.0,18749.0,22917.0,20522.0,14548.0,14918.0,18776.0,23596.0,22491.0,14959.0,11306.0,11474.0,15190.0,20981.0,26295.0,21364.0,14319.0,15996.0,15342.0,18876.0,20146.0,17445.0,13988.0,11295.0,13055.0,20323.0,22914.0,22875.0,18504.0,17331.0,22074.0,22556.0,19919.0,19152.0,16937.0,13978.0,13871.0,18592.0,22120.0,21010.0,16930.0,16061.0,18063.0,18838.0,19913.0,17393.0,11635.0,10511.0,13805.0,16260.0,21995.0,21168.0,15771.0,15487.0,17436.0,18699.0,16969.0,13476.0,9842.0,18582.01030927835,5,False,3,False
251,1.0,0.0,1,Bellman–Ford algorithm,,16.0,Shortest Path (Directed Graphs),1.0,general weights,175.0,,,1,1,O(VE),,,[https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959) (1959)],Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959),1959,https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf,,,,1.0,2->4,6,"V: 6,
E: 3",$O(VE)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),keeping track of distances,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",333.3333333,0.25992105,333333.3333,0.25992105,333333333.3,0.25992105,222222.0,33333.36667,31.18299021,2.22222E+11,33333333.33,320.8297949,2.22E+17,33333333333,3217.297949,2,,,Combinatorics,Bellman%E2%80%93Ford_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bellman%E2%80%93Ford_algorithm/monthly/20150701/20230731,10866.0,12150.0,14463.0,23689.0,26542.0,23022.0,15616.0,16899.0,21538.0,26348.0,24819.0,17399.0,12103.0,13151.0,16590.0,23704.0,30707.0,27407.0,17735.0,19665.0,22501.0,25417.0,24366.0,17426.0,12770.0,13157.0,18461.0,23305.0,31406.0,27001.0,18555.0,19600.0,22263.0,27840.0,24273.0,17571.0,13310.0,12695.0,15169.0,18749.0,22917.0,20522.0,14548.0,14918.0,18776.0,23596.0,22491.0,14959.0,11306.0,11474.0,15190.0,20981.0,26295.0,21364.0,14319.0,15996.0,15342.0,18876.0,20146.0,17445.0,13988.0,11295.0,13055.0,20323.0,22914.0,22875.0,18504.0,17331.0,22074.0,22556.0,19919.0,19152.0,16937.0,13978.0,13871.0,18592.0,22120.0,21010.0,16930.0,16061.0,18063.0,18838.0,19913.0,17393.0,11635.0,10511.0,13805.0,16260.0,21995.0,21168.0,15771.0,15487.0,17436.0,18699.0,16969.0,13476.0,9842.0,18582.01030927835,5,False,3,True
252,0.0,1.0,1,Bellman–Ford algorithm,O(E + V log V),16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,176.0,,,1,1,O( V² logV),,,[https://www.jstor.org/stable/pdf/2627005.pdf Bellman–Ford algorithm (Dantzig 1960) (1960)],Bellman–Ford algorithm (Dantzig 1960),1960,https://www.jstor.org/stable/pdf/2627005.pdf,,,,0.0,0,5.01,V: 5.01,$O(V^2 \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",O(E) (total),can be easily derived,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,931111.0,15910.90086,,,,,,,,2,,,Combinatorics,Bellman%E2%80%93Ford_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bellman%E2%80%93Ford_algorithm/monthly/20150701/20230731,10866.0,12150.0,14463.0,23689.0,26542.0,23022.0,15616.0,16899.0,21538.0,26348.0,24819.0,17399.0,12103.0,13151.0,16590.0,23704.0,30707.0,27407.0,17735.0,19665.0,22501.0,25417.0,24366.0,17426.0,12770.0,13157.0,18461.0,23305.0,31406.0,27001.0,18555.0,19600.0,22263.0,27840.0,24273.0,17571.0,13310.0,12695.0,15169.0,18749.0,22917.0,20522.0,14548.0,14918.0,18776.0,23596.0,22491.0,14959.0,11306.0,11474.0,15190.0,20981.0,26295.0,21364.0,14319.0,15996.0,15342.0,18876.0,20146.0,17445.0,13988.0,11295.0,13055.0,20323.0,22914.0,22875.0,18504.0,17331.0,22074.0,22556.0,19919.0,19152.0,16937.0,13978.0,13871.0,18592.0,22120.0,21010.0,16930.0,16061.0,18063.0,18838.0,19913.0,17393.0,11635.0,10511.0,13805.0,16260.0,21995.0,21168.0,15771.0,15487.0,17436.0,18699.0,16969.0,13476.0,9842.0,18582.01030927835,5,False,3,False
253,0.0,1.0,1,Shortest path problem,O(E + V log V),16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,177.0,,,1,1,O( V² ),,,[https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents Dijkstra's algorithm with list (Whiting & Hillier 1960) (1960)],Dijkstra's algorithm with list (Whiting & Hillier 1960),1960,https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents,,,,0.0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with list",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,111111.0,133333.4667,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,True,3,True
254,0.0,1.0,1,Shortest path problem,O(E + V log V),16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,178.0,,,1,1,O((E + V) log V),,,[https://dl.acm.org/citation.cfm?id=321993 Dijkstra's algorithm with binary heap (Johnson 1977) (1977)],Dijkstra's algorithm with binary heap (Johnson 1977),1977,https://dl.acm.org/citation.cfm?id=321993,,,,1.0,4->5,5.01,"V: 5.01,
E: 3",$O((E + V) \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with heap",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,8380.821784,883852.1566,0.919379865,18346606.07,4.03748E+11,2.570030516,28312390353,2.62E+17,5.75171023,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,False,3,True
255,0.0,1.0,1,Shortest path problem,O(E + V log V),16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,179.0,,,1,1,O(E + V log V),,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987) (1984)],Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987),1984,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf,,,,0.0,0,5,"E: 3,
V: 5",$O(E + V \log V)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,O(V),"keeping track of distances/previous node in path, along with heap",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,3460.0,4281738.386,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,True,3,True
256,0.0,1.0,1,Shortest path problem,"O(E + V min(log log V, log log L))",16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Integer Weights,180.0,,,1,1,O(E log log L),,,[https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983) (1981)],Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983),1981,https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,2,1.0,https://link.springer.com/article/10.1007/BF01786986,1.0,0,5,"E: 3,
V: 5,
L: 1.99",$O(E \log \log L)$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word RAM,words,3,"V: 3,
L: 3",O(V+L),https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,669.3,11067394.9,0.913206362,1821347.23,4.06699E+12,2.194264973,1821347230,4.07E+18,4.550996318,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,True,3,True
257,0.0,1.0,1,Shortest path problem,O(E + V log V),16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Weights,181.0,,,1,1,O(E logL/log(2+(E/V))),,,[https://ieeexplore.ieee.org/document/4568085 Gabow's algorithm (1983)],Gabow's algorithm,1983,https://ieeexplore.ieee.org/document/4568085,,,,0.0,0,5,"E: 3,
V: 5,
L: 2",$O(E \log L/\log(2+(E/V)))$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,"V: 3,
E: 3",O(V+E)?,(keeping track of new graphs?),1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,4426.0,3347224.314,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,True,3,True
258,0.0,1.0,1,Shortest path problem,"O(E + V min(log log V, log log L))",16.0,Shortest Path (Directed Graphs),2.0,Nonnegative Integer Weights,182.0,,,1,1,O(E + V*((log(L))^0.5) ),,,[https://dl.acm.org/doi/10.1145/77600.77615 Gabow Ahuja Algorithm (1990)],Gabow Ahuja Algorithm,1990,https://dl.acm.org/doi/10.1145/77600.77615,,,,0.0,0,5,"E: 3,
V: 5,
L: 1.5",$O(E + V*((\log(L))^{0.5}) )$,"V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word RAM,words,5,"V: 5,
E: 3
C: 2",O(E + \log C),https://dl.acm.org/doi/10.1145/77600.77615,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1525.0,9714632.665,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,True,3,False
259,0.0,1.0,1,Shortest path problem,"O(E + V min(log log V, log log L))",16.0,Shortest Path (Directed Graphs),1.0,Nonnegative Integer Weights,183.0,,,1,1,"O(E + V min(log log V, log log L))",,,[https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003 Thorup's algorithm (2004)],Thorup's algorithm,2004,https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,,,,0.0,0,5,"E: 3,
V: 5,
L: 1.99","$O(E + V min(log log V, log log L))$","V: number of vertices
E: number of edges
L: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,"O(V)? (""linear-space queue"")",https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1686.0,8786960.151,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5,True,3,True
260,0.0,1.0,1,Shortest path problem,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Directed Graphs with Arbitrary Weights,184.0,,,1,1,O(n^4),,,[https://link.springer.com/article/10.1007/BF02476438 Shimbel Algorithm (1953)],Shimbel Algorithm,1953,https://link.springer.com/article/10.1007/BF02476438,1,1.0,https://link.springer.com/content/pdf/10.1007/BF02476438.pdf,1.0,0,7,n: 7,$O(n^4)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,12345679012.0,1,,1.23E+22,1,,1.23E+34,1,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5.373,False,5,True
261,1.0,0.0,1,Floyd–Warshall algorithm,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP,185.0,,,1,1,O(n^3),,,[https://dl.acm.org/citation.cfm?id=368168 Floyd–Warshall algorithm (1962)],Floyd–Warshall algorithm,1962,https://dl.acm.org/citation.cfm?id=368168,,,,1.0,2->3,6,n: 6,$O(n^3)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,37037037.0,333.3333337,0.906864619,3.70E+16,333333.3333,3.108215283,3.70E+25,333333333.3,7.850881521,2,,,Combinatorics,Floyd%E2%80%93Warshall_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Floyd%E2%80%93Warshall_algorithm/monthly/20150701/20230731,11315.0,13713.0,15183.0,20885.0,23923.0,22820.0,15513.0,16971.0,20404.0,25133.0,25055.0,17127.0,11861.0,13167.0,15511.0,23338.0,29884.0,26102.0,19173.0,19021.0,24566.0,28976.0,25837.0,16889.0,12718.0,12309.0,17177.0,22553.0,31203.0,25483.0,16825.0,16553.0,22064.0,28622.0,25900.0,16155.0,12715.0,12493.0,14295.0,21972.0,24818.0,23519.0,15150.0,14301.0,19218.0,22542.0,21005.0,14402.0,11136.0,11073.0,12456.0,17473.0,22308.0,20544.0,13882.0,14074.0,15545.0,18260.0,18655.0,16140.0,15066.0,11886.0,11994.0,17693.0,25724.0,22956.0,18630.0,14169.0,17058.0,19990.0,18416.0,14997.0,16394.0,13751.0,11711.0,15481.0,19583.0,19592.0,14923.0,12444.0,15214.0,17952.0,18558.0,14748.0,12314.0,10115.0,10838.0,14895.0,19932.0,30807.0,16166.0,12907.0,15259.0,15863.0,16076.0,12549.0,9331.0,17875.123711340206,5.373,False,5,True
262,1.0,0.0,1,Seidel's algorithm,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Undirected Unweighted Graphs; APSP on Sparse Undirected Unweighted Graphs,186.0,,,1,1,O (n^{2.373} \log n),,,[https://www.sciencedirect.com/science/article/pii/S0022000085710781 Seidel's algorithm (1995)],Seidel's algorithm,1995,https://www.sciencedirect.com/science/article/pii/S0022000085710781,,,,1.0,0,5.373,n: 5.373,$O (n^{2.373} \log n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses four auxiliary $V \times V$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,8100011.0,1524.155833,0.190656298,2.34071E+14,52743383.02,0.527077726,4.75E+21,2.59865E+12,0.975100589,2,,,Combinatorics,Seidel%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Seidel%27s_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,91.0,98.0,105.0,101.0,99.0,116.0,193.0,188.0,173.0,137.0,112.0,119.0,199.0,407.0,208.0,205.0,285.0,302.0,271.0,367.0,238.0,189.0,168.0,160.0,161.0,274.0,336.0,284.0,225.0,346.0,268.0,269.0,335.0,176.0,188.0,137.0,169.0,935.0,762.0,325.0,320.0,235.0,308.0,249.0,321.0,299.0,131.0,159.0,177.0,287.0,261.0,317.0,245.0,233.0,180.0,202.0,204.0,229.0,187.0,183.0,215.0,222.0,298.0,493.0,328.0,267.0,217.0,188.0,228.0,201.0,183.0,243.49295774647888,5.373,True,5,True
263,0.0,1.0,1,Shortest path problem,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Directed Graphs with Arbitrary Weights,187.0,,,1,1,O(n^3 /2^{(\log n)^{0.5}}),,,[https://dl.acm.org/citation.cfm?id=2591811 Williams (2014)],Williams,2014,https://dl.acm.org/citation.cfm?id=2591811,,,,0.0,0,6,n: 6,$O(n^3 /2^{(\log n)^{0.5}})$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: discussed with Ryan, uses an auxiliary $V \times V$ matrix, and the space required for the matrix multiplication of $V \times d$ and $d \times V$ matrices is also $O(V^2)$",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,4998250.0,2470.000303,,,,,,,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5.373,False,5,True
264,0.0,1.0,1,Shortest path problem,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Undirected Graphs with Positive Integer Weights; APSP on Sparse Undirected Graphs with Positive Integer Weights,189.0,,,1,1,O(mn),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf Thorup (1999)],Thorup,1999,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,1,1.0,https://dl.acm.org/doi/pdf/10.1145/316542.316548,1.0,3->4,6,"n: 6,
m: 3",$O(mn)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3",$O(mn)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.22.7128&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222.0,55555.61111,,2.22222E+11,55555555556,,2.22E+17,5.56E+16,,2,,,Combinatorics,Shortest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_path_problem/monthly/20150701/20230731,13511.0,15395.0,17968.0,23236.0,25805.0,24443.0,19534.0,20897.0,23294.0,25578.0,25952.0,19706.0,16053.0,17908.0,20584.0,25479.0,31587.0,25844.0,20450.0,20700.0,25023.0,24294.0,22797.0,17059.0,13739.0,14563.0,17033.0,20014.0,23874.0,20173.0,17508.0,17499.0,20740.0,23726.0,22238.0,15648.0,15395.0,13846.0,16078.0,20306.0,23086.0,20710.0,17392.0,16958.0,20321.0,20478.0,20551.0,14494.0,12722.0,11835.0,15144.0,22336.0,23464.0,20476.0,16307.0,17463.0,19167.0,23941.0,24199.0,19364.0,17056.0,15448.0,18022.0,23027.0,25693.0,25426.0,19331.0,17045.0,22284.0,21408.0,20276.0,19201.0,18554.0,16466.0,15814.0,19319.0,22801.0,26050.0,18329.0,17084.0,18790.0,19855.0,19557.0,16034.0,13244.0,11879.0,13316.0,16256.0,22837.0,24513.0,16896.0,14899.0,16774.0,15774.0,16024.0,13462.0,11227.0,19338.72164948453,5.373,False,5,False
265,0.0,0.0,0,,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Geometrically Weighted Graphs,190.0,,,1,1,O(n^{2.844}),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (Geometrically Weighted) (2009)],Chan (Geometrically Weighted),2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0.0,0,5.844,n: 5.844,$O(n^{2.844})$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(l n^2)$,Derived: Compute and store $2l$ $V \times V$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,14964670.0,824.9883901,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.373,False,5,True
266,0.0,0.0,0,,,17.0,All-Pairs Shortest Paths (APSP),2.0,APSP on Dense Directed Graphs with Arbitrary Weights; APSP on Dense Undirected Graphs with Arbitrary Weights,191.0,,,1,1,O(n^3 \log^3 \log n / \log^2 n),,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (2009)],Chan,2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,,,0.0,0,6,n: 6,$O(n^3 \log^3 \log n / \log^2 n)$,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(n^2)$,"Derived: Dividing $A$ and $B$ into $V \times q$ and $q \times V$ matrices, in total using $O(V^2)$ space",1.0,0.0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,15111217.0,816.9877391,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.373,False,5,True
267,1.0,0.0,1,Trial division,,18.0,Integer Factoring,1.0,First Category Integer Factoring,192.0,,,1,1,O(2^{(n/2)}),,,[- Trial division (1202)],Trial division,1202,-,1,1.0,https://en.wikipedia.org/wiki/Trial_division,1.0,0,8,n: 8,$O(2^{n/2})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),need to keep track of what number you're currently checking,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Trial_division,whose running time depends on the size of smallest prime factor.,,,,1000.0,,1000000.0,,1000000000.0,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,Trial_division,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Trial_division/monthly/20150701/20230731,1750.0,1964.0,2525.0,2692.0,2680.0,2539.0,2913.0,2711.0,2661.0,3498.0,2342.0,2005.0,1848.0,1921.0,2491.0,2624.0,2791.0,2134.0,2581.0,2634.0,2875.0,2453.0,2129.0,1993.0,1944.0,2005.0,2393.0,2639.0,2496.0,2233.0,2579.0,2646.0,2800.0,2707.0,2227.0,1879.0,2003.0,1980.0,2406.0,2817.0,2890.0,2340.0,2095.0,2106.0,2682.0,2258.0,2074.0,1551.0,1897.0,1871.0,2618.0,2988.0,2550.0,1878.0,2249.0,2517.0,2645.0,2762.0,2314.0,1946.0,1830.0,1797.0,2326.0,2806.0,2692.0,2305.0,2420.0,2298.0,2729.0,2534.0,2060.0,1717.0,1718.0,1905.0,2309.0,2681.0,2471.0,1863.0,2194.0,1957.0,2827.0,1815.0,1819.0,1546.0,1647.0,1545.0,2110.0,2390.0,2364.0,1786.0,1843.0,1853.0,2379.0,1956.0,1834.0,1536.0,1609.0,2270.2061855670104,#VALUE!,False,2.66,False
268,1.0,0.0,1,Wheel factorization,,18.0,Integer Factoring,1.0,First Category Integer Factoring,193.0,,,1,1,O( 2^{(n/2)}),,,[ Wheel factorization (1940)],Wheel factorization,1940,,,,,0.0,0,8,n: 8,$O(2^{n/2})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),"need to keep track of what number you're currently checking, along with o(n) bits for the wheel (assuming it's small)",1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis,Wheel_factorization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Wheel_factorization/monthly/20150701/20230731,1641.0,1613.0,1715.0,1953.0,1886.0,2040.0,1987.0,1822.0,2329.0,2119.0,1644.0,1492.0,1362.0,1363.0,1860.0,1654.0,1762.0,1618.0,1752.0,1770.0,1981.0,1767.0,1739.0,1516.0,1618.0,1447.0,1633.0,2317.0,2176.0,1710.0,1794.0,1597.0,1738.0,1521.0,1445.0,1444.0,1519.0,1578.0,2438.0,1789.0,1805.0,1529.0,1588.0,1382.0,1593.0,1672.0,1725.0,1166.0,1652.0,1286.0,1487.0,1925.0,1767.0,1364.0,1479.0,1419.0,1645.0,1717.0,1747.0,1360.0,1289.0,1437.0,1425.0,2002.0,1950.0,1674.0,1387.0,1376.0,1688.0,1661.0,1450.0,1268.0,1613.0,1255.0,1291.0,1426.0,1333.0,1151.0,1259.0,1198.0,1697.0,1202.0,1157.0,1027.0,1075.0,1297.0,1215.0,1326.0,1500.0,1287.0,1093.0,1031.0,1210.0,1100.0,1109.0,1021.0,1052.0,1556.5876288659797,#VALUE!,False,2.66,False
269,1.0,0.0,1,Pollard's rho algorithm,,18.0,Integer Factoring,1.0,First Category Integer Factoring,194.0,,,1,1,-,,,[https://link.springer.com/article/10.1007%2FBF01933667 Pollard's rho algorithm (1975)],Pollard's rho algorithm,1975,https://link.springer.com/article/10.1007%2FBF01933667,,,,0.0,0,#VALUE!,,-,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),"keep track of g (the polynomial; O(1) space), x, y, and d (all O(n) space)",1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis,Pollard%27s_rho_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Pollard%27s_rho_algorithm/monthly/20150701/20230731,2453.0,2377.0,2574.0,4085.0,4352.0,4525.0,3103.0,3165.0,3724.0,4001.0,3100.0,2721.0,2312.0,2124.0,3248.0,3511.0,5051.0,3622.0,2945.0,2817.0,3634.0,4007.0,3289.0,2743.0,2778.0,2420.0,2760.0,3992.0,5009.0,3771.0,3160.0,3019.0,3132.0,3316.0,3350.0,2499.0,2452.0,2100.0,2721.0,4291.0,4036.0,3008.0,2994.0,2903.0,4142.0,4061.0,3011.0,2305.0,2618.0,2353.0,2739.0,4463.0,4298.0,3418.0,3286.0,2666.0,4307.0,4317.0,3387.0,2558.0,2211.0,2142.0,2202.0,3719.0,3826.0,2865.0,2606.0,2591.0,3604.0,3442.0,3208.0,2579.0,2385.0,2123.0,2499.0,3497.0,3143.0,2825.0,2638.0,2713.0,4632.0,2880.0,2993.0,2494.0,2497.0,1997.0,2309.0,3066.0,3247.0,3432.0,2931.0,3019.0,3820.0,2789.0,2690.0,2650.0,2208.0,3129.8453608247423,#VALUE!,True,2.66,False
270,1.0,0.0,1,Pollard's p − 1 algorithm,,18.0,Integer Factoring,1.0,First Category Integer Factoring,195.0,,,1,1,O(B*log B*log^2(n))?,,,[https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989 Pollard's p − 1 algorithm (1974)],Pollard's p − 1 algorithm,1974,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989,,,,0.0,0,8,n: 8,O(B*log B*log^2(n))?,"n: number of bits in the integer
B: smoothness bound (can be exponential)",n,,,Word RAM?,bits,8,"n: 8,
B: 3",O(n+B),"the number M requires O((log B)*pi(B)) = O(B) bits, and the other numbers require O(n) bits",1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis,Pollard%27s_p_%E2%88%92_1_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Pollard%27s_p_%E2%88%92_1_algorithm/monthly/20150701/20230731,745.0,651.0,912.0,1236.0,1510.0,1279.0,1023.0,1059.0,1429.0,1377.0,1210.0,868.0,693.0,652.0,938.0,1252.0,1695.0,1252.0,957.0,921.0,1387.0,1386.0,1315.0,1000.0,713.0,684.0,1152.0,1391.0,1506.0,1523.0,1193.0,1296.0,1430.0,1661.0,1502.0,1056.0,896.0,699.0,1125.0,1563.0,1592.0,1415.0,1498.0,1250.0,1665.0,2152.0,1462.0,1156.0,918.0,896.0,1048.0,1769.0,1897.0,1508.0,1512.0,1138.0,1285.0,1753.0,1375.0,1066.0,882.0,838.0,847.0,1530.0,1310.0,1375.0,1078.0,1053.0,1396.0,1454.0,1278.0,995.0,726.0,665.0,804.0,1517.0,1159.0,1337.0,1024.0,1005.0,3068.0,1369.0,1487.0,1082.0,1068.0,754.0,848.0,1246.0,1326.0,985.0,987.0,1084.0,1329.0,1294.0,1263.0,1038.0,997.0,1216.3917525773195,#VALUE!,False,2.66,False
271,1.0,0.0,1,Williams's p + 1 algorithm,,18.0,Integer Factoring,1.0,First Category Integer Factoring,196.0,,,1,1,O(2^{(n)}),,,[https://www.jstor.org/stable/2007633?origin=crossref Williams' p + 1 algorithm (1982)],Williams' p + 1 algorithm,1982,https://www.jstor.org/stable/2007633?origin=crossref,,,,0.0,0,8,n: 8,$O(2^n)$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which are expressed in mod N,1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis,Williams%27s_p_%2B_1_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Williams%27s_p_%2B_1_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120.0,210.0,214.0,290.0,335.0,333.0,200.0,201.0,216.0,242.0,278.0,259.0,282.0,333.0,245.0,346.0,261.0,,141.0,166.0,186.0,206.0,325.0,360.0,332.0,204.0,180.0,312.0,265.0,222.0,179.0,122.0,168.0,177.0,209.0,193.0,176.0,166.0,171.0,212.0,293.0,213.0,187.0,171.0,192.0,172.0,310.0,286.0,255.0,228.0,214.0,368.0,231.0,305.0,238.0,214.0,164.0,191.0,219.0,230.0,177.0,186.0,156.0,224.0,273.0,277.0,318.0,259.0,232.65671641791045,#VALUE!,False,2.66,False
272,1.0,0.0,1,Lenstra elliptic-curve factorization,,18.0,Integer Factoring,1.0,First Category Integer Factoring,197.0,,,1,1,O(e^{(sqrt((1+o(1))n*log n))}),,,[https://www.jstor.org/stable/1971363?origin=crossref&seq=1 Lenstra elliptic curve factorization (1987)],Lenstra elliptic curve factorization,1987,https://www.jstor.org/stable/1971363?origin=crossref&seq=1,,,,0.0,0,8,n: 8,$O(e^{(\sqrt((1+o(1))n*log n))})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which are expressed in mod N,1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22542392121.0,Inf,,,,,,,,1,,,Numerical Analysis,Lenstra_elliptic-curve_factorization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lenstra_elliptic-curve_factorization/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,380.0,849.0,1131.0,988.0,1717.0,1502.0,1555.0,1758.0,1812.0,1507.0,1424.0,1286.0,1243.0,1558.0,1756.0,1565.0,1523.0,1294.0,1636.0,1793.0,1762.0,1299.0,1307.0,1234.0,1505.0,1847.0,1809.0,1581.0,1444.0,1315.0,1476.0,1773.0,1779.0,1521.0,1243.0,1282.0,1287.0,1694.0,1507.0,1597.0,1438.0,1534.0,1963.0,1742.0,1688.0,1469.0,1563.0,1527.0,1297.0,1841.0,1670.0,1626.0,1390.0,1343.0,1553.0,1726.0,1749.0,1649.0,1457.0,1342.0,1378.0,1498.0,1779.0,1493.0,1794.0,1246.0,1874.0,1747.0,1550.0,1505.0,1624.0,1515.4084507042253,#VALUE!,False,2.66,False
273,1.0,0.0,1,Fermat's factorization method,,18.0,Integer Factoring,1.0,First Category Integer Factoring,198.0,,,1,1,O(2^n)?,,,[https://archive.org/details/oeuvresdefermat02ferm Fermat's factorization method (1894)],Fermat's factorization method,1894,https://archive.org/details/oeuvresdefermat02ferm,1,1.0,https://www.geeksforgeeks.org/fermats-factorization-method/,1.0,0,8,n: 8,$O(2^n)$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,constant number of values which require at most O(n) bits,1.0,0.0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22387211385.0,Inf,,5.01E+20,Inf,,1.12E+31,Inf,,1,,,Numerical Analysis,Fermat%27s_factorization_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fermat%27s_factorization_method/monthly/20150701/20230731,2284.0,2483.0,3231.0,3529.0,3202.0,2820.0,2668.0,2740.0,3245.0,3239.0,3089.0,2295.0,2109.0,2296.0,2507.0,2795.0,3406.0,2644.0,2417.0,2600.0,3185.0,2594.0,2528.0,1906.0,2323.0,2015.0,2494.0,2671.0,2929.0,2617.0,2195.0,2261.0,2858.0,2500.0,2245.0,1689.0,1782.0,1821.0,2084.0,2895.0,2578.0,2185.0,2036.0,1985.0,3146.0,3013.0,2333.0,1744.0,2946.0,1597.0,1934.0,2702.0,2630.0,2228.0,1911.0,1726.0,2874.0,2731.0,2130.0,1936.0,1698.0,1582.0,1759.0,2616.0,2542.0,2056.0,1909.0,1952.0,2635.0,2641.0,2320.0,2387.0,1737.0,1447.0,1602.0,2954.0,2010.0,2105.0,1780.0,1774.0,10988.0,2709.0,2757.0,1870.0,2109.0,1555.0,1700.0,2204.0,2279.0,1854.0,1844.0,1817.0,2079.0,1896.0,1912.0,1678.0,1532.0,2410.773195876289,#VALUE!,False,2.66,False
274,1.0,0.0,1,Euler's factorization method,,18.0,Integer Factoring,1.0,First Category Integer Factoring,199.0,,,1,1,O(2^{(n/2)})?,,,[- Euler's factorization method (1940)],Euler's factorization method,1940,-,,,,0.0,0,8,n: 8,$O(2^{(n/2)})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n),constant number of values which require at most O(n) bits,1.0,0.0,,0,,0,,0,0,,0,0,https://archive.org/details/numbertheoryitsh0000orey/page/59,whose running time depends on the size of smallest prime factor.,,,,,,,,,,inf,1,,,,,,,,1,,,Numerical Analysis,Euler%27s_factorization_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Euler%27s_factorization_method/monthly/20150701/20230731,812.0,890.0,1320.0,1260.0,1090.0,962.0,980.0,976.0,1073.0,1053.0,928.0,795.0,750.0,710.0,837.0,996.0,1131.0,844.0,927.0,1051.0,1079.0,1061.0,1050.0,817.0,826.0,779.0,868.0,962.0,1005.0,892.0,943.0,807.0,1137.0,883.0,950.0,675.0,789.0,716.0,1007.0,1284.0,1314.0,983.0,1060.0,1066.0,1296.0,1286.0,1137.0,957.0,1188.0,1063.0,1101.0,1205.0,1069.0,843.0,764.0,776.0,1006.0,879.0,935.0,796.0,692.0,566.0,589.0,897.0,757.0,659.0,635.0,543.0,765.0,735.0,710.0,624.0,542.0,625.0,728.0,951.0,677.0,536.0,583.0,535.0,795.0,572.0,696.0,529.0,535.0,547.0,668.0,646.0,832.0,620.0,584.0,483.0,728.0,581.0,575.0,488.0,560.0,849.7628865979382,#VALUE!,False,2.66,False
275,1.0,0.0,1,Dixon's factorization method,,19.0,Integer Factoring,1.0,Second Category Integer Factoring,201.0,,,1,1,O(e^{(2 sqrt(2) sqrt(n*logn))}),,,[https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html Dixon's algorithm (1981)],Dixon's algorithm,1981,https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html,,,,0.0,0,8,n: 8,$O(e^{(2 \sqrt(2) \sqrt(n*logn))})4,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,There are pi(B) = O(B/log B) primes in the factor base; need pi(B)+1=O(B/log B) relations involving an integer (which doesn't need to be kept track of) and a pi(B)-bit string of exponents. Also need O(n) bits to perform other computations. Rest is irrelevant asymptotically,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis,Dixon%27s_factorization_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dixon%27s_factorization_method/monthly/20150701/20230731,489.0,421.0,497.0,778.0,765.0,768.0,522.0,485.0,659.0,922.0,563.0,454.0,411.0,390.0,391.0,602.0,1055.0,593.0,545.0,463.0,682.0,951.0,580.0,469.0,401.0,416.0,581.0,703.0,854.0,699.0,610.0,447.0,528.0,593.0,595.0,540.0,581.0,396.0,414.0,778.0,747.0,595.0,539.0,438.0,505.0,608.0,580.0,347.0,424.0,370.0,464.0,631.0,657.0,566.0,499.0,420.0,692.0,576.0,631.0,454.0,360.0,303.0,399.0,604.0,615.0,483.0,412.0,356.0,495.0,636.0,569.0,386.0,367.0,361.0,319.0,502.0,586.0,464.0,369.0,385.0,518.0,558.0,677.0,376.0,327.0,376.0,386.0,469.0,538.0,446.0,476.0,327.0,530.0,508.0,456.0,601.0,348.0,528.0618556701031,#VALUE!,False,2.66,False
276,1.0,0.0,1,Continued fraction factorization,,19.0,Integer Factoring,1.0,Second Category Integer Factoring,202.0,,,1,1,O(e^{sqrt(2n*logn)}),,,[https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html Continued fraction factorization (CFRAC) (1931)],Continued fraction factorization (CFRAC),1931,https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html,,,,1.0,0,8,n: 8,$O(e^{\sqrt(2n*logn)})$,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same as above? assuming there is a bound parameter implemented,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,3395.232193,1,,497271.0145,1,,27199045.33,1,,4,,,Numerical Analysis,Continued_fraction_factorization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Continued_fraction_factorization/monthly/20150701/20230731,385.0,333.0,504.0,535.0,492.0,523.0,476.0,422.0,466.0,554.0,380.0,364.0,315.0,306.0,356.0,371.0,462.0,412.0,403.0,301.0,432.0,450.0,346.0,378.0,305.0,339.0,350.0,432.0,471.0,557.0,449.0,339.0,419.0,487.0,388.0,288.0,306.0,292.0,344.0,435.0,586.0,447.0,359.0,299.0,424.0,465.0,432.0,321.0,382.0,296.0,343.0,465.0,683.0,418.0,380.0,280.0,449.0,456.0,350.0,318.0,240.0,267.0,240.0,375.0,359.0,314.0,349.0,291.0,358.0,303.0,332.0,294.0,231.0,280.0,335.0,384.0,361.0,340.0,329.0,340.0,391.0,429.0,407.0,322.0,287.0,280.0,281.0,359.0,391.0,324.0,276.0,239.0,294.0,229.0,287.0,412.0,313.0,372.8144329896907,#VALUE!,False,2.66,False
277,1.0,0.0,1,Quadratic sieve,,19.0,Integer Factoring,1.0,Second Category Integer Factoring,203.0,,,1,1,-,,,[https://www.semanticscholar.org/paper/Analysis-and-comparison-of-some-integer-factoring-Pomerance/134b7b065a73d4ca00bb16c7b8bebbde951b0ba0 Quadratic sieve (1981)],Quadratic sieve,1981,https://www.semanticscholar.org/paper/Analysis-and-comparison-of-some-integer-factoring-Pomerance/134b7b065a73d4ca00bb16c7b8bebbde951b0ba0,,,,0.0,0,#VALUE!,,-,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same general approach as Dixon's algorithm,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,Quadratic_sieve,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Quadratic_sieve/monthly/20150701/20230731,2789.0,2555.0,2558.0,3354.0,4093.0,3757.0,3443.0,3034.0,3389.0,3856.0,3277.0,2535.0,2281.0,2288.0,2537.0,2922.0,3566.0,2915.0,2860.0,2913.0,3307.0,3404.0,2826.0,2658.0,2501.0,2208.0,2456.0,3051.0,3151.0,2875.0,2464.0,2338.0,2631.0,2671.0,2402.0,1966.0,1938.0,1850.0,2036.0,2766.0,2740.0,2486.0,2566.0,2165.0,2982.0,3212.0,2580.0,1945.0,2035.0,1805.0,2244.0,3128.0,2701.0,2586.0,2360.0,2410.0,3177.0,3180.0,2608.0,2202.0,1996.0,2021.0,1890.0,2898.0,2681.0,2477.0,2153.0,2181.0,3152.0,2920.0,2805.0,2341.0,1858.0,1802.0,1832.0,2610.0,2587.0,2129.0,2020.0,1948.0,2594.0,2590.0,2422.0,2267.0,2073.0,2175.0,2287.0,2465.0,3099.0,2245.0,2148.0,1769.0,2759.0,2791.0,2284.0,2134.0,2030.0,2576.969072164949,#VALUE!,True,2.66,False
278,1.0,0.0,1,Rational sieve,,19.0,Integer Factoring,1.0,Second Category Integer Factoring,204.0,,,1,1,O(e^{sqrt((2+o(1))n*logn)}),,,[https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf Rational sieve (1993)],Rational sieve,1993,https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf,,,,0.0,0,8,n: 8,O(e^{sqrt((2+o(1))n*logn)}),"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same general approach as Dixon's algorithm,1.0,0.0,,0,,0,,0,1,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,Rational_sieve,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Rational_sieve/monthly/20150701/20230731,326.0,301.0,398.0,468.0,447.0,428.0,406.0,358.0,379.0,401.0,351.0,299.0,315.0,331.0,322.0,416.0,362.0,317.0,371.0,373.0,433.0,420.0,339.0,289.0,364.0,274.0,319.0,375.0,352.0,371.0,349.0,318.0,386.0,354.0,323.0,306.0,283.0,281.0,271.0,390.0,362.0,435.0,307.0,261.0,376.0,407.0,458.0,285.0,363.0,279.0,343.0,422.0,390.0,416.0,417.0,259.0,503.0,379.0,307.0,276.0,229.0,256.0,245.0,402.0,309.0,320.0,256.0,293.0,355.0,371.0,309.0,295.0,281.0,268.0,232.0,293.0,343.0,286.0,287.0,287.0,398.0,257.0,274.0,271.0,295.0,247.0,305.0,328.0,377.0,328.0,293.0,215.0,360.0,293.0,352.0,252.0,334.0,335.12371134020617,#VALUE!,False,2.66,False
279,1.0,0.0,1,Shanks's square forms factorization,,19.0,Integer Factoring,1.0,Second Category Integer Factoring,206.0,,,1,1,O(2^{(n/4)}),,,[https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf Shanks's square forms factorization (SQUFOF) (2007)],Shanks's square forms factorization (SQUFOF),2007,https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf,,,,0.0,0,8,n: 8,$O(2^{n/4})$,n: number of bits in the integer,n,,,Word RAM?,bits,3,n: 3,O(n)?,Constant number of O(n)-bit integers,1.0,0.0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,Shanks%27s_square_forms_factorization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shanks%27s_square_forms_factorization/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,74.0,242.0,200.0,181.0,163.0,248.0,247.0,247.0,245.0,286.0,931.0,351.0,367.0,368.0,341.0,340.0,425.0,426.0,261.0,391.0,343.0,320.0,403.0,285.0,310.0,342.0,235.0,364.0,339.0,276.0,269.0,199.0,255.0,227.0,401.0,269.0,252.0,253.0,213.0,429.0,384.0,288.0,234.0,214.0,264.0,249.0,289.0,235.0,255.0,265.0,204.0,375.0,238.0,310.0,256.0,213.0,246.0,239.0,309.0,285.0,281.0,281.0,214.0,317.0,237.0,271.0,351.0,291.0,292.8382352941176,#VALUE!,False,2.66,False
280,0.0,0.0,0,,,20.0,LU Decomposition,2.0,Rectangular Matrix LU Decomposition,211.0,,,1,0,O(n^3),,,[https://www.sciencedirect.com/science/article/pii/S1063520316300069 Randomized LU Decomposition (2016)],Randomized LU Decomposition,2016,https://www.sciencedirect.com/science/article/pii/S1063520316300069,,,,0.0,0,4.5,"n: 6,
mn: 4.5",O(n^3),"$m$: number of rows in input matrix
$n$: number of columns in input matrix
$l$: number of columns chosen to use in the decomposition ($l \geq k$)
$k$: desired rank of decomposition",mn,,,Word RAM,words,3,"n: 3,
m: 3,
l: 3,
mn: 3",$\tilde{O}(nl + ml)$,Derived: Two intermediate auxiliary matrices of sizes $n \times l$ and $m \times l$ for the input matrix of size $m \times n$,1.0,0.0,,1,Monte Carlo,1,See Theorem 4.3 in original paper for error bound,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000.0,1,,,,,,,,3,There are 4 different algorithms in this paper,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.51,False,1,False
281,0.0,1.0,1,Numerical Recipes,,20.0,LU Decomposition,2.0,Square Matrix LU Decomposition,214.0,,,1,1,O(n^3),,,"[https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false Press, Teukolsky, Flannery (2007)]","Press, Teukolsky, Flannery",2007,https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false,,,,0.0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,n: dimension of square matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$\tilde{O}(n)$,"Derived: The only auxiliary structure used is a list called ""vv"" that has one entry per row of the input matrix to store some sort of scaling metric",1.0,0.0,,0,,0,,1,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965.0,100351.2293,,,,,,,,3,,,Numerical Analysis,Numerical_Recipes,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Numerical_Recipes/monthly/20150701/20230731,1517.0,1340.0,1476.0,1558.0,1575.0,1760.0,1605.0,1557.0,1495.0,1411.0,1430.0,1344.0,1383.0,1357.0,1431.0,1352.0,1318.0,1278.0,1470.0,1262.0,1361.0,1297.0,1481.0,1424.0,1260.0,1305.0,1366.0,1530.0,1625.0,1295.0,1455.0,1326.0,1616.0,1532.0,1634.0,1477.0,1412.0,1258.0,1441.0,1555.0,1473.0,1290.0,1589.0,1490.0,1882.0,1753.0,1553.0,1494.0,1484.0,1627.0,1654.0,1990.0,1745.0,1762.0,1769.0,1700.0,1885.0,2121.0,1677.0,1501.0,1335.0,1262.0,1403.0,1598.0,1374.0,1370.0,1378.0,1224.0,1650.0,1367.0,1225.0,1220.0,1114.0,1101.0,1142.0,1334.0,1254.0,1055.0,1217.0,1030.0,1334.0,1206.0,1077.0,1055.0,985.0,1236.0,1207.0,1219.0,1266.0,1067.0,1456.0,971.0,1782.0,1320.0,1162.0,1190.0,1371.0,1418.1958762886595,2.51,False,1,False
282,0.0,1.0,1,Best-first search,O(b^d),21.0,Informed Search,2.0,Informed Search,216.0,,,1,1,O(b^d),,,[ Greedy Best-First Search (1959)],Greedy Best-First Search,1959,,1,1.0,https://www.cs.cmu.edu/afs/cs/project/jair/pub/volume28/coles07a-html/node11.html,1.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),https://en.wikipedia.org/wiki/Breadth-first_search: Stores all generated nodes in memory,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Breadth-first_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Robotics,Best-first_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Best-first_search/monthly/20150701/20230731,7995.0,9360.0,9015.0,8826.0,8186.0,6642.0,6017.0,7052.0,7350.0,7802.0,7599.0,5455.0,3385.0,4602.0,6535.0,7711.0,7975.0,6966.0,6391.0,7372.0,8241.0,8082.0,7806.0,4908.0,3666.0,4757.0,7733.0,9076.0,7181.0,5717.0,5326.0,6144.0,6509.0,6624.0,6204.0,4638.0,3496.0,4051.0,6488.0,7794.0,6618.0,5739.0,5639.0,6197.0,6826.0,7020.0,6241.0,4197.0,3247.0,3437.0,4785.0,5475.0,5490.0,4466.0,4655.0,5238.0,4627.0,4584.0,4867.0,4467.0,3323.0,3292.0,5595.0,6283.0,5602.0,5427.0,4710.0,5035.0,6384.0,5040.0,4692.0,4533.0,3289.0,3781.0,4757.0,5681.0,5387.0,4515.0,4207.0,5518.0,5702.0,4827.0,4728.0,3874.0,2571.0,2982.0,4299.0,5107.0,4639.0,4353.0,3559.0,3741.0,3401.0,2865.0,2909.0,2372.0,1727.0,5476.278350515464,8,True,8,True
283,0.0,1.0,1,Any-angle path planning,O(b^d),21.0,Informed Search,2.0,Informed Search,220.0,,,1,1,O(b^d),,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf for experimental results,[https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf Block A* (2011)],Block A*,2011,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Any-angle_path_planning,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Any-angle_path_planning/monthly/20150701/20230731,831.0,2249.0,1496.0,1256.0,1161.0,902.0,816.0,920.0,1031.0,961.0,941.0,723.0,706.0,815.0,802.0,783.0,1068.0,1035.0,1077.0,975.0,949.0,764.0,998.0,830.0,767.0,947.0,2605.0,3897.0,1114.0,940.0,994.0,811.0,1022.0,866.0,830.0,788.0,794.0,747.0,713.0,897.0,748.0,632.0,698.0,629.0,863.0,865.0,800.0,677.0,802.0,847.0,1026.0,1050.0,910.0,916.0,902.0,917.0,966.0,1104.0,1103.0,828.0,810.0,726.0,824.0,948.0,864.0,855.0,939.0,839.0,1035.0,1085.0,932.0,712.0,698.0,745.0,739.0,899.0,836.0,947.0,756.0,780.0,764.0,824.0,747.0,666.0,604.0,709.0,833.0,1154.0,1308.0,971.0,813.0,999.0,1041.0,816.0,876.0,800.0,706.0,945.40206185567,8,True,8,True
284,1.0,0.0,1,D*,O(b^d),21.0,Informed Search,2.0,Informed Search,221.0,,,1,1,O(b^d),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.15.3683 D* (1994)],D*,1994,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.15.3683,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,D%2A,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/D%2A/monthly/20150701/20230731,4363.0,3480.0,2841.0,3453.0,3284.0,3095.0,2777.0,2850.0,3088.0,3136.0,3092.0,2424.0,2065.0,1968.0,2389.0,2678.0,2801.0,2825.0,2828.0,3071.0,3305.0,3324.0,2979.0,2489.0,2604.0,2052.0,3431.0,3271.0,2807.0,2371.0,2575.0,2460.0,3041.0,3097.0,3156.0,2475.0,2216.0,2320.0,2301.0,2994.0,2989.0,2729.0,3048.0,2702.0,3147.0,3545.0,2940.0,2345.0,2243.0,2015.0,2474.0,3203.0,3004.0,2639.0,2890.0,2865.0,2568.0,2997.0,2866.0,2416.0,2350.0,2278.0,2369.0,2585.0,2901.0,2624.0,2435.0,2382.0,3126.0,2925.0,2575.0,2106.0,2285.0,2280.0,2281.0,2619.0,2615.0,2510.0,2634.0,2217.0,2671.0,2829.0,2714.0,2193.0,2079.0,2488.0,2308.0,2634.0,3303.0,2908.0,2915.0,2739.0,2735.0,2320.0,2362.0,1858.0,1570.0,2702.309278350516,8,True,8,True
285,0.0,1.0,1,Any-angle path planning,O(b^d),21.0,Informed Search,2.0,Informed Search,222.0,,,1,1,O(b^d),,,[https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf Field D* (2006)],Field D*,2006,https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Any-angle_path_planning,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Any-angle_path_planning/monthly/20150701/20230731,831.0,2249.0,1496.0,1256.0,1161.0,902.0,816.0,920.0,1031.0,961.0,941.0,723.0,706.0,815.0,802.0,783.0,1068.0,1035.0,1077.0,975.0,949.0,764.0,998.0,830.0,767.0,947.0,2605.0,3897.0,1114.0,940.0,994.0,811.0,1022.0,866.0,830.0,788.0,794.0,747.0,713.0,897.0,748.0,632.0,698.0,629.0,863.0,865.0,800.0,677.0,802.0,847.0,1026.0,1050.0,910.0,916.0,902.0,917.0,966.0,1104.0,1103.0,828.0,810.0,726.0,824.0,948.0,864.0,855.0,939.0,839.0,1035.0,1085.0,932.0,712.0,698.0,745.0,739.0,899.0,836.0,947.0,756.0,780.0,764.0,824.0,747.0,666.0,604.0,709.0,833.0,1154.0,1308.0,971.0,813.0,999.0,1041.0,816.0,876.0,800.0,706.0,945.40206185567,8,True,8,True
286,1.0,0.0,1,Fringe search,O(b^d),21.0,Informed Search,2.0,Informed Search,223.0,,,1,1,O(b^d),,,[ Fringe (2005)],Fringe,2005,,,,,0.0,0,8,"b: 7,
d: 8",$O(b^d)$,"b: branching factor (the average number of successors per state)
d: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",O(b^d),Stores all generated nodes in memory,1.0,0.0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,inf,1,,,,,,,,1,,,Robotics,Fringe_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fringe_search/monthly/20150701/20230731,1035.0,1608.0,1043.0,860.0,748.0,651.0,604.0,694.0,751.0,754.0,778.0,570.0,458.0,455.0,773.0,881.0,749.0,672.0,760.0,797.0,856.0,820.0,758.0,674.0,485.0,504.0,1521.0,1026.0,692.0,610.0,639.0,723.0,718.0,692.0,584.0,417.0,436.0,443.0,614.0,688.0,553.0,501.0,593.0,562.0,612.0,745.0,531.0,462.0,436.0,379.0,588.0,692.0,624.0,459.0,562.0,611.0,502.0,529.0,484.0,376.0,377.0,441.0,638.0,744.0,563.0,350.0,428.0,495.0,549.0,579.0,436.0,434.0,326.0,392.0,613.0,499.0,467.0,546.0,392.0,404.0,426.0,406.0,342.0,293.0,330.0,296.0,373.0,428.0,572.0,698.0,414.0,372.0,323.0,316.0,247.0,222.0,240.0,580.5463917525773,8,True,8,True
287,0.0,1.0,1,Boyer–Moore–Horspool algorithm,,22.0,String Search,2.0,Single String Search,236.0,,,1,1,O(n/m),,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf Tuned Boyer-Moore algorithm (1991)],Tuned Boyer-Moore algorithm,1991,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"m: pattern length
n: length of searchable text
s: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",O(m + s),https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm/monthly/20150701/20230731,1156.0,1034.0,1339.0,1620.0,2082.0,1687.0,1298.0,1229.0,1668.0,1746.0,1962.0,1698.0,1041.0,1208.0,1230.0,1992.0,1825.0,1399.0,1279.0,1332.0,1998.0,1999.0,1710.0,1500.0,1046.0,1446.0,1416.0,1996.0,1907.0,1693.0,1262.0,1306.0,1689.0,1779.0,1561.0,1316.0,1008.0,1077.0,1270.0,1779.0,1700.0,1441.0,1169.0,1152.0,1883.0,2021.0,1626.0,1641.0,1133.0,921.0,1443.0,1484.0,1710.0,1352.0,1140.0,1131.0,1201.0,1844.0,1493.0,1236.0,1984.0,917.0,1473.0,1408.0,1374.0,1473.0,1125.0,991.0,1420.0,1527.0,1362.0,1472.0,1494.0,1038.0,963.0,1307.0,1537.0,1293.0,1175.0,1081.0,1231.0,1374.0,1390.0,1128.0,1076.0,894.0,1515.0,1423.0,1573.0,1148.0,936.0,955.0,1195.0,1273.0,1190.0,1075.0,855.0,1401.5360824742268,3,False,1,False
288,0.0,1.0,1,Needleman–Wunsch algorithm,,23.0,Sequence Alignment,1.0,"Edit sequence, global alignment",261.0,,,1,1,O(mn),,,[https://www.nature.com/articles/srep01746 FOGSAA (2013)],FOGSAA,2013,https://www.nature.com/articles/srep01746,,,,0.0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",O(mn)?,"Upper bounded by runtime, though likely there's a better bound?",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,Needleman%E2%80%93Wunsch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Needleman%E2%80%93Wunsch_algorithm/monthly/20150701/20230731,3411.0,3683.0,5514.0,8881.0,6514.0,5455.0,4974.0,6092.0,6934.0,9699.0,5954.0,4592.0,3844.0,3936.0,6054.0,7288.0,7289.0,5934.0,5699.0,6564.0,7727.0,7134.0,6232.0,4954.0,4008.0,3840.0,6040.0,8288.0,7306.0,5698.0,5915.0,6692.0,8146.0,7067.0,6887.0,4929.0,4147.0,4023.0,6237.0,8162.0,7591.0,6202.0,5733.0,6194.0,7888.0,7977.0,6764.0,5026.0,4227.0,4136.0,6124.0,8368.0,7091.0,5715.0,5673.0,6795.0,6048.0,7066.0,7100.0,6173.0,4716.0,4273.0,6198.0,8239.0,7407.0,6808.0,6141.0,6473.0,7941.0,7132.0,6613.0,5931.0,4332.0,4079.0,5419.0,7575.0,7526.0,5703.0,6397.0,6051.0,6993.0,6427.0,7001.0,5553.0,4161.0,3595.0,5458.0,6982.0,7459.0,5790.0,5282.0,5790.0,6419.0,5919.0,6829.0,5419.0,3881.0,6119.030927835051,4.99,False,3,False
289,0.0,1.0,1,Line clipping,O(n*log(p)),25.0,Line Clipping,1.0,convex polygonal window,270.0,,,1,1,O(n*logp),^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849394900647/pdf?md5=06bd1f11031af17d1fd34626c4e2f49b&pid=1-s2.0-0097849394900647-main.pdf O(lg N) algorithm (1994)],O(lg N) algorithm,1994,https://www.sciencedirect.com/science/article/pii/0097849394900647/pdf?md5=06bd1f11031af17d1fd34626c4e2f49b&pid=1-s2.0-0097849394900647-main.pdf,376,0.0,https://www.sciencedirect.com/science/article/pii/0097849394900647,0.0,0,3,"n: 3,
p: 2",$O(n*\log p)$,"n: number of lines
p: number of edges on polygon",n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary??,"Easily derived? (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Image Processing,Line_clipping,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Line_clipping/monthly/20150701/20230731,1076.0,1424.0,1749.0,1838.0,1800.0,1591.0,1425.0,1560.0,2461.0,2213.0,2084.0,1293.0,927.0,1354.0,1719.0,1624.0,2126.0,1736.0,1413.0,1606.0,2608.0,2478.0,2250.0,1236.0,1060.0,1472.0,2157.0,2011.0,2715.0,2132.0,1608.0,1408.0,2235.0,2335.0,2050.0,1160.0,1402.0,1283.0,1517.0,1939.0,2309.0,1974.0,1354.0,1425.0,2145.0,2520.0,2186.0,1303.0,1002.0,1151.0,1681.0,2128.0,2662.0,1899.0,1255.0,1553.0,1827.0,2344.0,2121.0,1665.0,1206.0,1083.0,2062.0,2227.0,2120.0,2392.0,2221.0,2113.0,2275.0,2036.0,1416.0,2357.0,2106.0,1380.0,1243.0,1348.0,2186.0,2439.0,1871.0,1547.0,1412.0,1538.0,1766.0,2037.0,1325.0,993.0,987.0,1100.0,1627.0,1685.0,1413.0,1128.0,1138.0,1006.0,1597.0,1030.0,777.0,1719.2371134020618,3,True,1,True
290,0.0,0.0,0,,,25.0,Line Clipping,1.0,convex and non-convex polyhedral window,271.0,,,1,1,O(np)?,^ see above,^ see above,[https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061 Skala (1996)],Skala,1996,https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061,,,,0.0,0,3,"n: 3,
p: 3",O(np)?,"n: number of lines
p: number of faces on polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary?,"Easily derived? (O(1) per segment, space can be re-used)",1.0,0.0,,0,,0,,0,1,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1.0,1000,,,,,,,,6,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
291,1.0,0.0,1,Schönhage–Strassen algorithm,,27.0,Multiplication,1.0,,276.0,,,1,1,O(n logn loglogn),^see above,^see above,[https://link.springer.com/article/10.1007/BF02242355 Schönhage–Strassen algorithm (1971)],Schönhage–Strassen algorithm,1971,https://link.springer.com/article/10.1007/BF02242355,,,,1.0,0,4.001,n: 4.001,$O(n \log n \log\log n)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,Depends on DFT/FFT algorithm? but all vectors/numbers are of size O(n) and there are a constant number of such objects,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,32984.0,30.31772981,0.116340464,86044249.58,11621.92715,0.352502277,1.46555E+11,6823367.361,0.661313418,4,,,Numerical Analysis,Sch%C3%B6nhage%E2%80%93Strassen_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sch%C3%B6nhage%E2%80%93Strassen_algorithm/monthly/20150701/20230731,1994.0,1936.0,2452.0,2705.0,2540.0,2240.0,2553.0,2608.0,3319.0,2670.0,2974.0,2504.0,2338.0,2205.0,2476.0,2290.0,2453.0,2154.0,2515.0,2653.0,2604.0,2427.0,2467.0,2819.0,1958.0,2054.0,2231.0,2551.0,2641.0,2249.0,2523.0,2232.0,2636.0,2479.0,2399.0,1819.0,1929.0,1921.0,2860.0,2651.0,2496.0,2480.0,3556.0,3265.0,4396.0,10375.0,3832.0,2385.0,2014.0,1979.0,2755.0,24266.0,3568.0,2659.0,2900.0,2524.0,2509.0,2942.0,2695.0,2336.0,2448.0,2265.0,2505.0,3433.0,3549.0,3191.0,2921.0,2530.0,3284.0,2795.0,2642.0,2295.0,2025.0,3432.0,3665.0,3084.0,7463.0,5517.0,2863.0,2773.0,3010.0,2716.0,2595.0,2456.0,19730.0,3285.0,3459.0,3461.0,4132.0,2857.0,3321.0,2752.0,3226.0,3687.0,3444.0,2654.0,3632.0,3278.948453608248,4,False,3,True
292,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,1.0,,277.0,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf Furer's algorithm (2007)],Furer's algorithm,2007,https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf,,,,0.0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,Depends on DFT/FFT algorithm (though original source describes its own algorithm)? but all vectors/numbers are of size O(n) and there are a constant number of such objects,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640.0,0.024499812,,,,,,,,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,False,3,True
293,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,1.0,,278.0,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://arxiv.org/abs/0801.1416 De (2008)],De,2008,https://arxiv.org/abs/0801.1416,,,,0.0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary?,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640.0,0.024499812,,,,,,,,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,False,3,True
294,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,1.0,,279.0,,,1,1,O(nlogn),^see above,^see above,[https://hal.archives-ouvertes.fr/hal-02070778 Harvey; Hoeven (2019)],Harvey; Hoeven,2019,https://hal.archives-ouvertes.fr/hal-02070778,,,,1.0,4->5,4,n: 4,$O(n \log n)$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,[this one is kind of a mess to read but it seems generally the same as above - objects like polynomials/vectors and other numbers are of size O(n) and there are constantly many?],1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,9965.784285,100.3433319,0.060071839,19931568.57,50171.66594,0.146831135,29897352854,33447777.3,0.245217327,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,True,3,True
295,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,1.0,,280.0,,,1,1,O(nlogn 2^{(3log*n)}),^see above,^see above,[https://arxiv.org/abs/1407.3360 Harvey; Hoeven; Lecerf (2015)],Harvey; Hoeven; Lecerf,2015,https://arxiv.org/abs/1407.3360,,,,0.0,0,7,n: 7,$O(n \log n 2^{(3 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720.0,12.54390366,,,,,,,,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,False,3,True
296,0.0,0.0,0,,,27.0,Multiplication,1.0,,281.0,,,1,1,O(nlogn 2^{O(log*n)}),^see above,^see above,[https://hal.inria.fr/hal-01108166v1/document Covanov and Thomé (2015)],Covanov and Thomé,2015,https://hal.inria.fr/hal-01108166v1/document,,,,0.0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640.0,0.024499812,,,,,,,,4,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,3,True
297,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,1.0,,282.0,,,1,1,O(nlogn 2^{(3log*n)}),^see above,^see above,[https://arxiv.org/abs/1502.02800 Covanov and Thomé (2016)],Covanov and Thomé,2016,https://arxiv.org/abs/1502.02800,,,,0.0,0,7,n: 7,$O(n \log n 2^{(3 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720.0,12.54390366,,,,,,,,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,False,3,True
298,0.0,1.0,1,Multiplication algorithm,,27.0,Multiplication,1.0,,283.0,,,1,1,O(nlogn 2^{(2log*n)}),^see above,^see above,[https://arxiv.org/abs/1802.07932 Harvey; Hoeven; Lecerf (2018)],Harvey; Hoeven; Lecerf,2018,https://arxiv.org/abs/1802.07932,,,,0.0,0,7,n: 7,$O(n \log n 2^{(2 \log*n)})$,"n: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,O(n) auxiliary??,^ same as above,1.0,0.0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,39860.0,25.08780733,,,,,,,,4,,,Numerical Analysis,Multiplication_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiplication_algorithm/monthly/20150701/20230731,7636.0,7027.0,9535.0,11214.0,9552.0,7961.0,12755.0,9786.0,9915.0,9627.0,8992.0,7580.0,6619.0,7663.0,11274.0,10942.0,10032.0,8342.0,9372.0,11642.0,10851.0,9259.0,9262.0,7980.0,7283.0,7756.0,9916.0,12251.0,12014.0,8493.0,10572.0,10304.0,10634.0,9609.0,9243.0,7347.0,7460.0,7852.0,10679.0,11768.0,10374.0,9149.0,9518.0,8993.0,11704.0,12512.0,9281.0,7075.0,6487.0,7426.0,10105.0,13235.0,10595.0,8175.0,9284.0,10147.0,9389.0,10343.0,8293.0,7161.0,7071.0,8020.0,10590.0,12467.0,11748.0,10290.0,9659.0,10328.0,11609.0,9117.0,8021.0,7258.0,7674.0,7934.0,10065.0,10777.0,10326.0,8699.0,9837.0,9703.0,11184.0,7685.0,6519.0,5722.0,5605.0,6016.0,7462.0,8158.0,8216.0,6283.0,6809.0,6426.0,7577.0,6274.0,6380.0,5282.0,4993.0,9020.917525773197,4,False,3,True
299,1.0,0.0,1,Lamport's bakery algorithm,,30.0,Mutual Exclusion,1.0,,298.0,,,1,1,O(n),^see above,(none),[http://lamport.azurewebsites.net/pubs/bakery.pdf Lamport's bakery algorithm (1974)],Lamport's bakery algorithm,1974,http://lamport.azurewebsites.net/pubs/bakery.pdf,,,,0.0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,1000000,,,1000000000,,,6,,,Operating Systems,Lamport%27s_bakery_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lamport%27s_bakery_algorithm/monthly/20150701/20230731,1626.0,1759.0,2215.0,3423.0,2736.0,2348.0,1993.0,3013.0,3298.0,2599.0,2504.0,1924.0,1383.0,1843.0,2334.0,3036.0,2791.0,3063.0,2393.0,3481.0,3223.0,2839.0,2745.0,2093.0,1511.0,1660.0,2253.0,2831.0,2791.0,2216.0,2397.0,2331.0,3088.0,2466.0,2143.0,1801.0,1330.0,1437.0,1577.0,2325.0,2406.0,1576.0,1675.0,1820.0,2680.0,2171.0,1992.0,1860.0,1561.0,1542.0,2014.0,2551.0,2155.0,1746.0,1912.0,2734.0,2093.0,2509.0,2927.0,2165.0,1884.0,1866.0,2080.0,2326.0,2270.0,1908.0,2181.0,2182.0,2808.0,2235.0,2437.0,2357.0,1786.0,1873.0,1603.0,1865.0,1940.0,1549.0,1790.0,1432.0,1597.0,1359.0,12188.0,5343.0,2769.0,2757.0,2169.0,2990.0,2840.0,2424.0,2058.0,2702.0,2670.0,1805.0,2010.0,1933.0,1595.0,2355.556701030928,2,False,3,True
300,1.0,0.0,1,Szymański's algorithm,,30.0,Mutual Exclusion,1.0,,299.0,,,1,1,O(n),^see above,(none),[https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait Szymanski's algorithm (1988)],Szymanski's algorithm,1988,https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait,,,,0.0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",http://cs.rpi.edu/~szymansk/papers/jerus.93.pdf (kinda),0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems,Szyma%C5%84ski%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Szyma%C5%84ski%27s_algorithm/monthly/20150701/20230731,124.0,112.0,92.0,196.0,184.0,99.0,105.0,83.0,70.0,133.0,122.0,92.0,73.0,95.0,181.0,217.0,267.0,152.0,127.0,231.0,206.0,132.0,309.0,99.0,92.0,107.0,152.0,202.0,166.0,323.0,214.0,146.0,220.0,142.0,133.0,115.0,86.0,113.0,97.0,247.0,552.0,154.0,187.0,177.0,327.0,235.0,60214.0,241.0,196.0,174.0,216.0,206.0,222.0,164.0,211.0,415.0,187.0,172.0,205.0,118.0,141.0,191.0,140.0,212.0,192.0,287.0,209.0,294.0,240.0,241.0,185.0,210.0,142.0,160.0,170.0,275.0,281.0,223.0,158.0,388.0,273.0,178.0,408.0,278.0,184.0,171.0,157.0,288.0,216.0,187.0,164.0,229.0,267.0,223.0,329.0,266.0,212.0,814.4123711340206,2,False,3,True
301,0.0,1.0,1,Mutual exclusion,,30.0,Mutual Exclusion,1.0,,300.0,,,1,1,O(n),^see above,(none),[https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5 Taubenfeld's black-white bakery algorithm (2004)],Taubenfeld's black-white bakery algorithm,2004,https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5,,,,0.0,0,3,n: 3,$O(n)$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://link.springer.com/content/pdf/10.1007/b101206.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems,Mutual_exclusion,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Mutual_exclusion/monthly/20150701/20230731,9904.0,14254.0,14148.0,15275.0,14863.0,13746.0,12691.0,14462.0,14662.0,14208.0,14912.0,11197.0,8757.0,9888.0,10760.0,13355.0,12840.0,11582.0,11216.0,12055.0,14880.0,12457.0,13281.0,9707.0,8076.0,9029.0,9950.0,12707.0,13096.0,11123.0,10491.0,10827.0,12433.0,13056.0,13321.0,11220.0,9585.0,10947.0,11326.0,13994.0,13458.0,12118.0,11051.0,11000.0,13123.0,12912.0,12274.0,8219.0,7398.0,7403.0,8591.0,11009.0,10344.0,8632.0,9191.0,9106.0,8980.0,9733.0,9333.0,8735.0,6497.0,6216.0,8484.0,10361.0,9774.0,10249.0,8779.0,10439.0,11325.0,9860.0,9547.0,9909.0,8463.0,7867.0,7813.0,9245.0,10087.0,8869.0,8144.0,9593.0,8038.0,8013.0,7888.0,7092.0,5533.0,5481.0,6025.0,7269.0,7671.0,6876.0,5854.0,5286.0,6560.0,5715.0,6150.0,5060.0,4974.0,10102.030927835052,2,False,3,True
302,1.0,0.0,1,Maekawa's algorithm,,30.0,Mutual Exclusion,1.0,,301.0,,,1,1,O(n^{0.5}),^see above,(none),[https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf Maekawa's algorithm (1985)],Maekawa's algorithm,1985,https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf,,,,1.0,0,2.5,n: 2.5,$O(n^{0.5})$,n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,31.6227766,31.6227766,0.36887451,1000,1000,0.873817423,31622.7766,31622.7766,1.565020906,6,,,Operating Systems,Maekawa%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maekawa%27s_algorithm/monthly/20150701/20230731,185.0,214.0,400.0,358.0,438.0,369.0,225.0,484.0,564.0,637.0,491.0,199.0,104.0,172.0,461.0,514.0,582.0,502.0,346.0,674.0,653.0,581.0,574.0,344.0,167.0,253.0,396.0,441.0,700.0,555.0,514.0,537.0,764.0,690.0,721.0,327.0,218.0,306.0,394.0,586.0,924.0,929.0,363.0,547.0,1259.0,795.0,801.0,404.0,197.0,240.0,339.0,473.0,585.0,456.0,370.0,491.0,369.0,441.0,448.0,382.0,158.0,213.0,502.0,715.0,337.0,394.0,315.0,440.0,523.0,637.0,456.0,433.0,303.0,119.0,200.0,261.0,283.0,264.0,289.0,482.0,393.0,427.0,618.0,293.0,241.0,117.0,158.0,193.0,363.0,251.0,196.0,254.0,298.0,397.0,509.0,365.0,131.0,422.4845360824742,2,False,3,True
303,1.0,0.0,1,Raymond's algorithm,,30.0,Mutual Exclusion,1.0,,302.0,,,1,1,O(logn)? (originally this had O(n)),^see above,(none),[https://dl.acm.org/doi/abs/10.1145/58564.59295 Raymond's algorithm (1997)],Raymond's algorithm,1997,https://dl.acm.org/doi/abs/10.1145/58564.59295,,,,0.0,0,2,n: 2,O(\log n)? (originally this had O(n)),n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems,Raymond%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Raymond%27s_algorithm/monthly/20150701/20230731,84.0,49.0,200.0,188.0,227.0,156.0,153.0,209.0,261.0,300.0,217.0,101.0,69.0,48.0,205.0,272.0,4070.0,292.0,130.0,184.0,499.0,284.0,263.0,125.0,91.0,112.0,266.0,388.0,430.0,263.0,270.0,229.0,355.0,290.0,216.0,123.0,65.0,114.0,146.0,245.0,354.0,286.0,157.0,203.0,301.0,379.0,272.0,95.0,58.0,46.0,84.0,171.0,193.0,168.0,210.0,188.0,105.0,126.0,111.0,112.0,64.0,35.0,152.0,260.0,121.0,111.0,98.0,136.0,196.0,137.0,171.0,93.0,113.0,52.0,65.0,143.0,105.0,68.0,80.0,215.0,137.0,108.0,171.0,78.0,81.0,59.0,59.0,93.0,168.0,74.0,83.0,149.0,180.0,283.0,227.0,87.0,96.0,209.8556701030928,2,True,3,True
304,1.0,0.0,1,Suzuki–Kasami algorithm,,30.0,Mutual Exclusion,1.0,,304.0,,,1,1,O(n)? (originally this had O(logn)),^see above,(none),[https://cse.iitkgp.ac.in/~agupta/distsys/Mutex-SuzukiKasami.pdf Suzuki-Kasami's algorithm (1985)],Suzuki-Kasami's algorithm,1985,https://cse.iitkgp.ac.in/~agupta/distsys/Mutex-SuzukiKasami.pdf,2,1.0,,1.0,6->7,3,n: 3,O(n)? (originally this had O(logn)),n: number of processes,n,,,,communication variables?,3,n: 3,"O(1) per process, O(n) total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Operating Systems,Suzuki%E2%80%93Kasami_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Suzuki%E2%80%93Kasami_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,786.0,811.0,412.0,382.0,677.0,814.0,707.0,212.0,134.0,216.0,456.0,823.0,921.0,912.0,333.0,476.0,629.0,853.0,554.0,268.0,115.0,112.0,579.0,484.0,578.0,434.0,272.0,637.0,335.0,328.0,456.0,374.0,103.0,107.0,606.0,918.0,276.0,419.0,387.0,314.0,500.0,450.0,437.0,419.0,228.0,108.0,280.0,219.0,259.0,126.0,108.0,231.0,296.0,347.0,478.0,290.0,171.0,102.0,139.0,277.0,329.0,211.0,175.0,210.0,223.0,397.0,355.0,240.0,116.0,390.3043478260869,2,False,3,True
305,1.0,0.0,1,Newell's algorithm,,45.0,Shown Surface Determination,1.0,,385.0,,0.0,0,1,O(n*log(n)+np),"??? I think there is not really a ""good sense"" of average case distribution here since real-world images should make sense","(none, though http://medialab.di.unipi.it/web/IUM/Waterloo/node64.html is a good one for runtimes)",[https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf Painter's algorithm/Newell's algorithm (1972)],Painter's algorithm/Newell's algorithm,1972,https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf,,,,0.0,0,4,"n: 4,
p: 3",O(n*log(n)+np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n),(can be easily derived),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Newell%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Newell%27s_algorithm/monthly/20150701/20230731,289.0,279.0,273.0,404.0,409.0,406.0,368.0,406.0,375.0,319.0,380.0,385.0,310.0,269.0,306.0,354.0,383.0,299.0,280.0,365.0,307.0,305.0,373.0,333.0,317.0,246.0,266.0,327.0,333.0,278.0,303.0,284.0,292.0,322.0,307.0,242.0,249.0,258.0,209.0,268.0,272.0,292.0,281.0,262.0,350.0,285.0,300.0,256.0,240.0,176.0,222.0,303.0,248.0,275.0,271.0,245.0,333.0,350.0,283.0,260.0,247.0,186.0,213.0,270.0,274.0,273.0,253.0,220.0,279.0,288.0,214.0,243.0,157.0,161.0,157.0,162.0,252.0,216.0,266.0,255.0,216.0,211.0,272.0,240.0,209.0,220.0,254.0,259.0,290.0,223.0,204.0,254.0,254.0,239.0,278.0,234.0,203.0,276.5773195876289,3,False,3,True
306,1.0,0.0,1,Warnock algorithm,,45.0,Shown Surface Determination,1.0,,386.0,,0.0,0,1,O(np),^see above,(none),[https://dl.acm.org/doi/book/10.5555/905316?dl=ACM Warnock's algorithm (1969)],Warnock's algorithm,1969,https://dl.acm.org/doi/book/10.5555/905316?dl=ACM,,,,1.0,0,3,"n: 3,
p: 3",O(np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n)?,(can be easily derived?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Warnock_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Warnock_algorithm/monthly/20150701/20230731,432.0,411.0,586.0,649.0,641.0,610.0,509.0,455.0,534.0,626.0,663.0,462.0,343.0,385.0,501.0,583.0,839.0,597.0,480.0,374.0,557.0,767.0,785.0,467.0,317.0,397.0,515.0,576.0,930.0,849.0,454.0,421.0,534.0,852.0,830.0,374.0,289.0,349.0,439.0,561.0,777.0,470.0,330.0,388.0,519.0,803.0,885.0,350.0,316.0,281.0,393.0,439.0,759.0,437.0,431.0,391.0,458.0,608.0,393.0,325.0,290.0,231.0,360.0,537.0,483.0,510.0,480.0,407.0,429.0,908.0,494.0,355.0,486.0,264.0,244.0,307.0,638.0,459.0,435.0,417.0,366.0,454.0,461.0,375.0,249.0,241.0,341.0,300.0,434.0,644.0,613.0,413.0,383.0,372.0,665.0,493.0,243.0,489.45360824742266,3,True,3,True
307,1.0,0.0,1,Ray tracing (graphics),,45.0,Shown Surface Determination,1.0,,387.0,,0.0,0,1,O(np),^see above,(none),[ Ray tracing (1982)],Ray tracing,1982,,,,,0.0,0,3,"n: 3,
p: 3",O(np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n)?,(can be easily derived?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Ray_tracing_%28graphics%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ray_tracing_%28graphics%29/monthly/20150701/20230731,10845.0,11134.0,12818.0,14894.0,15369.0,17937.0,14503.0,13645.0,14560.0,14718.0,16633.0,12048.0,9950.0,10628.0,11705.0,14408.0,16275.0,13673.0,13684.0,13556.0,14606.0,13973.0,15777.0,11623.0,10578.0,10930.0,11460.0,13676.0,14811.0,12922.0,12463.0,10887.0,31597.0,19720.0,18621.0,13098.0,11278.0,85526.0,36949.0,26608.0,30718.0,23979.0,38490.0,27763.0,32448.0,57324.0,41628.0,43413.0,30214.0,37387.0,35438.0,45091.0,37877.0,35754.0,36842.0,29545.0,34002.0,46051.0,47629.0,46571.0,38222.0,33751.0,61186.0,51303.0,60985.0,70562.0,38764.0,31692.0,31822.0,26882.0,27996.0,28119.0,23493.0,22450.0,22034.0,23593.0,23544.0,24746.0,25617.0,24337.0,24175.0,22431.0,19691.0,19582.0,18712.0,19517.0,24732.0,28219.0,31289.0,35465.0,28385.0,27561.0,31548.0,28228.0,25333.0,22362.0,20805.0,26261.680412371134,3,True,3,True
308,1.0,0.0,1,Binary space partitioning,,45.0,Shown Surface Determination,1.0,,388.0,,0.0,0,1,O(n^2+p)? (previously said O(n^2logn),^see above,(none),[https://apps.dtic.mil/dtic/tr/fulltext/u2/700375.pdf Binary space partitioning (BSP) (1969)],Binary space partitioning (BSP),1969,https://apps.dtic.mil/dtic/tr/fulltext/u2/700375.pdf,,,,1.0,0,5,"n: 5,
p: 3",O(n^2+p)? (previously said O(n^2logn),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,5,"n: 5,
p: 3",O(n^2+p)?,(can be easily derived?),1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Binary_space_partitioning

http://library.msri.org/books/Book52/files/29toth.pdf

(6.856 Spring 2020 Lecture 1)",,,,,,,,,,,,,,,,,,,,4,,,Image Processing,Binary_space_partitioning,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Binary_space_partitioning/monthly/20150701/20230731,6365.0,5674.0,5535.0,6670.0,6724.0,7941.0,6566.0,6841.0,7263.0,7437.0,11102.0,6893.0,5444.0,5589.0,5960.0,6425.0,6821.0,5946.0,6423.0,6314.0,7193.0,6834.0,7334.0,5424.0,5728.0,5451.0,5561.0,7013.0,7005.0,5780.0,7215.0,5663.0,6773.0,6698.0,6649.0,6196.0,5210.0,6017.0,5356.0,6108.0,6609.0,6614.0,6419.0,6167.0,6474.0,6381.0,6818.0,5437.0,5374.0,5397.0,5941.0,6035.0,7329.0,7214.0,7333.0,5815.0,6893.0,7274.0,6927.0,5636.0,5443.0,5123.0,5816.0,6345.0,6312.0,10603.0,6823.0,5705.0,6811.0,6470.0,6254.0,6518.0,5653.0,6638.0,5386.0,5694.0,5849.0,6275.0,5706.0,5758.0,5586.0,5803.0,5830.0,5056.0,5196.0,8620.0,6892.0,6701.0,7450.0,8744.0,6574.0,6094.0,6641.0,6445.0,7416.0,5923.0,5055.0,6416.865979381443,3,False,3,False
309,1.0,0.0,1,Z-buffering,,45.0,Shown Surface Determination,1.0,,389.0,,0.0,0,1,O(np),^see above,(none),[http://isgwww.cs.uni-magdeburg.de/graphics/misc/Wolfgang_Stra%C3%9Fer_Schnelle_Kurven-_und_Flaechendarstellung_auf_grafischen_Sichtgeraeten.pdf Z-buffering (1974)],Z-buffering,1974,http://isgwww.cs.uni-magdeburg.de/graphics/misc/Wolfgang_Stra%C3%9Fer_Schnelle_Kurven-_und_Flaechendarstellung_auf_grafischen_Sichtgeraeten.pdf,,,,1.0,4->6,3,"n: 3,
p: 3",O(np),"n: number of polygons
p: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n),"https://www.geeksforgeeks.org/z-buffer-depth-buffer-method/#:~:text=Z%2Dbuffer%2C%20which%20is%20also,pixels%20times%20number%20of%20objects.",0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Image Processing,Z-buffering,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Z-buffering/monthly/20150701/20230731,3883.0,3834.0,4148.0,5613.0,6525.0,5740.0,4892.0,4539.0,5513.0,5884.0,6811.0,5123.0,3656.0,3587.0,4115.0,4785.0,6082.0,5494.0,5274.0,4255.0,5136.0,5592.0,6106.0,4660.0,3549.0,3688.0,3784.0,4752.0,6101.0,7075.0,4917.0,4113.0,4921.0,5541.0,5787.0,4520.0,3756.0,4163.0,3872.0,4556.0,5081.0,5132.0,4217.0,3811.0,4265.0,4870.0,4802.0,3864.0,3137.0,3020.0,3121.0,3775.0,3837.0,3766.0,4550.0,4661.0,5643.0,5091.0,4992.0,4547.0,4557.0,3946.0,4288.0,4267.0,4490.0,5686.0,5224.0,4261.0,5161.0,4480.0,4446.0,4254.0,3724.0,3576.0,3834.0,3778.0,4686.0,4741.0,4839.0,4581.0,4231.0,4077.0,4551.0,4561.0,3932.0,3846.0,3999.0,4118.0,5195.0,4850.0,4726.0,4272.0,3978.0,3989.0,4364.0,3864.0,3575.0,4571.865979381443,3,True,3,True
310,1.0,0.0,1,Scanline rendering,,45.0,Shown Surface Determination,1.0,,390.0,,0.0,0,1,O(E+p)?,^see above,(none),[ S-buffer/Scanline Rendering (1980)],S-buffer/Scanline Rendering,1980,,,,,0.0,0,3,"n: 3,
p: 3,
E: 3",O(E+p)?,"n: number of polygons
p: number of pixels in viewport
E: total number of edges across all polygons",n,,,Word RAM?,words?,3,"n: 3,
p: 3",O(p+n)?,(can be easily derived?),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Scanline_rendering,,,,,,,,,,,1000.0,,,,,,,,,4,,,Image Processing,Scanline_rendering,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Scanline_rendering/monthly/20150701/20230731,2037.0,1984.0,2406.0,2738.0,3135.0,2774.0,2733.0,2839.0,3107.0,3061.0,3054.0,2420.0,1891.0,2089.0,2361.0,2589.0,2980.0,2471.0,2455.0,2597.0,2872.0,2952.0,3034.0,2452.0,1876.0,2268.0,2284.0,2672.0,3048.0,2679.0,2430.0,2317.0,3773.0,3112.0,3036.0,1970.0,1904.0,5535.0,3174.0,3032.0,3059.0,2782.0,3131.0,2743.0,3167.0,4216.0,3614.0,2817.0,2319.0,2587.0,2371.0,2956.0,2719.0,2590.0,2617.0,2366.0,2480.0,3141.0,3096.0,2677.0,2230.0,2054.0,3008.0,2789.0,2835.0,3621.0,2498.0,2008.0,2418.0,2100.0,2136.0,2016.0,1934.0,1675.0,1564.0,1888.0,2064.0,1886.0,1854.0,1908.0,1664.0,1848.0,2043.0,2751.0,2775.0,2731.0,2865.0,2689.0,2919.0,2862.0,2411.0,2241.0,2506.0,2844.0,2855.0,2270.0,1787.0,2599.340206185567,3,True,3,True
311,1.0,0.0,1,Power iteration,,47.0,Eigenvalues (Iterative Methods),2.0,Eigenpair with the Largest Eigenvalue,397.0,,0.0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk Power Iteration (1929)],Power Iteration,1929,https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk,1,1.0,https://en.wikipedia.org/wiki/Power_iteration,1.0,0,3,"n: 5,
n^2: 3",$O(n^2)$,n: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Stores an auxiliary vector,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Numerical Analysis,Power_iteration,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Power_iteration/monthly/20150701/20230731,2941.0,3064.0,4462.0,5557.0,6028.0,5206.0,4283.0,4636.0,5816.0,6425.0,5340.0,3540.0,2605.0,2845.0,3812.0,4942.0,6718.0,5620.0,4418.0,4780.0,6433.0,6380.0,5394.0,4141.0,3068.0,3158.0,4408.0,6233.0,7173.0,5935.0,4898.0,4815.0,5809.0,6647.0,5761.0,3969.0,3380.0,3219.0,4285.0,6117.0,6683.0,6315.0,4730.0,5033.0,6224.0,7415.0,5658.0,4079.0,3461.0,3564.0,5100.0,6878.0,8401.0,6764.0,4990.0,5353.0,6031.0,7219.0,6640.0,5282.0,4033.0,3790.0,4838.0,6505.0,7582.0,6649.0,5626.0,5200.0,7865.0,6546.0,5741.0,4285.0,3977.0,3548.0,4293.0,6017.0,7080.0,5946.0,5007.0,5095.0,6987.0,5841.0,6012.0,4271.0,3765.0,3180.0,4444.0,5658.0,7352.0,5704.0,5501.0,4311.0,7699.0,5667.0,6602.0,4671.0,3741.0,5269.175257731959,2.5,False,2.5,True
312,1.0,0.0,1,Fortune's algorithm,,64.0,Delaunay Triangulation,1.0,,527.0,,,1,1,O(nlogn),,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune (1987)],Fortune,1987,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,,,0.0,0,4,n: 4,$O(n \log n)$,n: number of vertices,n,,,Real RAM?,words,3,n: 3,O(n),See Fortune's Algorithm (Voronoi diagrams); Voronoi diagram gives us O(n) circumcenters which can be used to find the O(n) triangles,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,Fortune%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fortune%27s_algorithm/monthly/20150701/20230731,2783.0,2414.0,3045.0,2904.0,3095.0,2892.0,3312.0,3163.0,3236.0,3176.0,3109.0,2826.0,2452.0,2991.0,2640.0,2940.0,3374.0,3091.0,2970.0,2673.0,3042.0,2943.0,3510.0,2815.0,2820.0,2659.0,2617.0,3034.0,3048.0,2614.0,3337.0,2762.0,2872.0,3025.0,3307.0,2755.0,2722.0,2430.0,2660.0,3081.0,3679.0,3968.0,2877.0,2439.0,2704.0,2625.0,2633.0,2412.0,2376.0,2032.0,2113.0,2571.0,2460.0,2062.0,2133.0,1944.0,2027.0,3044.0,2438.0,2111.0,1847.0,1650.0,1693.0,2166.0,2245.0,2131.0,2014.0,1797.0,2261.0,2217.0,2279.0,1835.0,1923.0,1747.0,1918.0,2197.0,2200.0,1927.0,1830.0,2052.0,1963.0,1873.0,1909.0,1864.0,1697.0,1788.0,1638.0,1703.0,2257.0,1994.0,2142.0,1704.0,2087.0,1764.0,1816.0,1891.0,1652.0,2468.639175257732,3,False,3,True
313,1.0,0.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,1.0,1D Maximum Subarray,626.0,,,1,1,O(n),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0167642383900151?via%3Dihub Gries (1982)],Gries,1982,https://www.sciencedirect.com/science/article/pii/0167642383900151?via%3Dihub,,,,0.0,0,3,n: 3,$O(n)$,n: length of array,n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,True
314,0.0,1.0,1,Maximum subarray problem,O(n),80.0,Maximum Subarray Problem,1.0,1D Maximum Subarray,627.0,,,1,1,O(n),^see above,^see above,[https://dl.acm.org/doi/10.1093/comjnl/32.2.122 Bird (1989)],Bird,1989,https://dl.acm.org/doi/10.1093/comjnl/32.2.122,,,,0.0,0,3,n: 3,$O(n)$,n: length of array,n,,,???,???,1,n: 1,O(1) auxiliary,keep track of current tail sum and best sum,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics,Maximum_subarray_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_subarray_problem/monthly/20150701/20230731,8139.0,10511.0,13039.0,13753.0,11067.0,9267.0,12422.0,14209.0,14198.0,12269.0,14437.0,11888.0,12391.0,13300.0,16150.0,17087.0,14058.0,10396.0,12005.0,13089.0,13094.0,11313.0,10519.0,9690.0,10275.0,10634.0,14259.0,16292.0,14795.0,9788.0,12817.0,11572.0,11615.0,10400.0,9360.0,8340.0,9098.0,9093.0,12758.0,13692.0,10014.0,9613.0,9932.0,9953.0,10169.0,8598.0,8246.0,7932.0,7777.0,8286.0,10102.0,10392.0,8903.0,7693.0,9675.0,11490.0,10882.0,19165.0,18357.0,11390.0,11472.0,13785.0,14717.0,16183.0,14929.0,13497.0,14582.0,16239.0,17638.0,15418.0,13465.0,12153.0,17489.0,17433.0,17753.0,18872.0,17749.0,15139.0,19712.0,18582.0,18178.0,14016.0,14005.0,14387.0,12673.0,12497.0,12655.0,14349.0,12174.0,9091.0,15287.0,9218.0,10087.0,7443.0,7878.0,6773.0,9221.0,12457.59793814433,2,False,1,True
315,0.0,0.0,0,,O(n),80.0,Maximum Subarray Problem,1.0,1D Maximum Subarray,629.0,,,1,1,O(log n),^see above,^see above,"[https://ieeexplore.ieee.org/document/6972008 Ferreira, Camargo, Song (2014)]","Ferreira, Camargo, Song",2014,https://ieeexplore.ieee.org/document/6972008,,,,0.0,0,2,n: 2,O(\log n),n: length of array,n,,,EREW PRAM?,words,3,n: 3,O(n) auxiliary,constant number of arrays as outlined in algorithm,1.0,0.0,,0,,0,,0,1,O(n/log n),0,1,,,,,,,,,,,,9965.0,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,True,1,False
316,0.0,1.0,1,Integer relation algorithm,,120.0,Integer Relation,1.0,,923.0,,,1,1,O(n^3(n+k)),,,[https://epubs.siam.org/doi/pdf/10.1137/0218059 HJLS algorithm (1986)],HJLS algorithm,1986,https://epubs.siam.org/doi/pdf/10.1137/0218059,,,,0.0,0,7,"n: 7,
k: 3",$O(n^3(n+k))$,"n: dimensionality of vector
k: relation size parameter",n,https://epubs.siam.org/doi/pdf/10.1137/0218059,0.0,bit complexity,bits,5,n: 5,O(n^2) -- but requires infinite precision with large n or else it becomes unstable,"Derived: Store Gram-Schmidt basis vectors b_i (n n-dimensional vectors) and Gram-Schmidt numbers \mu_{i,j} (i and j both from 1 to n), not sure how to take into account the ""bit complexity"" part",1.0,0.0,,0,,0,,0,0,,0,0,,"Given a vector in n-space, is there a non-zero integral vector that is orthogonal to that vector?",,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis,Integer_relation_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Integer_relation_algorithm/monthly/20150701/20230731,678.0,565.0,742.0,670.0,601.0,501.0,619.0,547.0,686.0,570.0,468.0,495.0,461.0,471.0,509.0,622.0,629.0,518.0,529.0,554.0,716.0,577.0,545.0,541.0,496.0,538.0,466.0,453.0,473.0,453.0,595.0,438.0,649.0,459.0,485.0,396.0,412.0,372.0,380.0,398.0,384.0,411.0,417.0,379.0,785.0,490.0,485.0,415.0,462.0,370.0,399.0,484.0,455.0,404.0,423.0,437.0,391.0,516.0,488.0,415.0,336.0,383.0,617.0,455.0,359.0,453.0,447.0,395.0,576.0,456.0,425.0,317.0,291.0,342.0,326.0,497.0,528.0,358.0,363.0,354.0,440.0,398.0,441.0,554.0,504.0,449.0,466.0,612.0,611.0,547.0,650.0,527.0,534.0,555.0,548.0,477.0,505.0,488.4845360824742,6,False,5,True
317,0.0,1.0,1,Dining philosophers problem,,147.0,Deadlock Avoidance,1.0,Dining Philosophers Problem,1017.0,,0.0,0,1,O(2^n),,,[https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution Resource hierarchy solution (1965)],Resource hierarchy solution,1965,https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution,2,1.0,,1.0,0,8,n: 8,O(2^n),n: number of philosophers,n,,,,,3,n: 3,O(n),each fork has a mutex and there are O(n) forks,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Operating Systems,Dining_philosophers_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dining_philosophers_problem/monthly/20150701/20230731,9368.0,10319.0,15343.0,15605.0,14856.0,12681.0,11605.0,14189.0,17814.0,16713.0,14317.0,11712.0,8556.0,10350.0,12832.0,15496.0,16847.0,13079.0,11955.0,15289.0,17516.0,15504.0,14654.0,9749.0,9425.0,9999.0,12265.0,16253.0,15907.0,10926.0,10605.0,12357.0,15537.0,15402.0,12685.0,9421.0,8492.0,9629.0,11264.0,14253.0,13309.0,10340.0,9597.0,11236.0,13731.0,11883.0,10783.0,7642.0,7051.0,7055.0,10441.0,11716.0,11051.0,9515.0,8818.0,10756.0,9967.0,10694.0,11214.0,10373.0,6756.0,6403.0,7869.0,11329.0,11821.0,9299.0,8816.0,9985.0,12753.0,11642.0,10833.0,9468.0,8551.0,7936.0,8580.0,11131.0,11399.0,9441.0,9340.0,9440.0,11977.0,10944.0,13811.0,11783.0,7189.0,7030.0,8734.0,9816.0,11673.0,14929.0,8672.0,8972.0,12295.0,11390.0,9918.0,8707.0,7954.0,11304.40206185567,8,True,1,False
318,0.0,1.0,1,Dining philosophers problem,,147.0,Deadlock Avoidance,1.0,Dining Philosophers Problem,1018.0,,0.0,0,1,O(2^n),,,[https://en.wikipedia.org/wiki/Dining_philosophers_problem#Arbitrator_solution Arbitrator solution (1965)],Arbitrator solution,1965,https://en.wikipedia.org/wiki/Dining_philosophers_problem#Arbitrator_solution,,,,0.0,0,8,n: 8,O(2^n),n: number of philosophers,n,,,,,1,n: 1,O(1),"adding 1 arbitrator, which is of constant size",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Operating Systems,Dining_philosophers_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dining_philosophers_problem/monthly/20150701/20230731,9368.0,10319.0,15343.0,15605.0,14856.0,12681.0,11605.0,14189.0,17814.0,16713.0,14317.0,11712.0,8556.0,10350.0,12832.0,15496.0,16847.0,13079.0,11955.0,15289.0,17516.0,15504.0,14654.0,9749.0,9425.0,9999.0,12265.0,16253.0,15907.0,10926.0,10605.0,12357.0,15537.0,15402.0,12685.0,9421.0,8492.0,9629.0,11264.0,14253.0,13309.0,10340.0,9597.0,11236.0,13731.0,11883.0,10783.0,7642.0,7051.0,7055.0,10441.0,11716.0,11051.0,9515.0,8818.0,10756.0,9967.0,10694.0,11214.0,10373.0,6756.0,6403.0,7869.0,11329.0,11821.0,9299.0,8816.0,9985.0,12753.0,11642.0,10833.0,9468.0,8551.0,7936.0,8580.0,11131.0,11399.0,9441.0,9340.0,9440.0,11977.0,10944.0,13811.0,11783.0,7189.0,7030.0,8734.0,9816.0,11673.0,14929.0,8672.0,8972.0,12295.0,11390.0,9918.0,8707.0,7954.0,11304.40206185567,8,True,1,True
319,0.0,1.0,1,Travelling salesman problem,,61.0,The Traveling-Salesman Problem,2.0,Approximate TSP,494.0,Nearest neighbor search,,1,0,O(V^2),,,[https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3 Rosenkrantz; D. J.; Stearns; R. E.; Lewis; P. M. (1974)],Rosenkrantz; D. J.; Stearns; R. E.; Lewis; P. M.,1974,https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3,,,,0.0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges",V,https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3,0.0,Word RAM,words,1,V: 1,O(1),Derived: Nearest neighbor search can be done with constant auxiliary space,1.0,0.0,,0,,1,1/2\log n + 1/2,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Travelling_salesman_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Travelling_salesman_problem/monthly/20150701/20230731,33179.0,33429.0,40727.0,47755.0,51864.0,59613.0,38495.0,39366.0,44316.0,55940.0,58069.0,44550.0,32674.0,37569.0,42534.0,48274.0,60958.0,54064.0,47470.0,48912.0,53865.0,59912.0,53719.0,41735.0,38045.0,40434.0,41061.0,59567.0,59739.0,52944.0,46718.0,44624.0,55256.0,60487.0,51910.0,37370.0,34775.0,37367.0,40759.0,48491.0,55592.0,56915.0,46021.0,42385.0,47732.0,49871.0,46844.0,35741.0,46523.0,33160.0,48213.0,50209.0,51177.0,48668.0,48759.0,45420.0,45552.0,54586.0,53487.0,43115.0,37141.0,35854.0,42381.0,63099.0,57454.0,59757.0,50736.0,44917.0,56742.0,57065.0,53720.0,46870.0,40064.0,39780.0,43609.0,46594.0,50842.0,53076.0,45347.0,42865.0,47174.0,55965.0,59944.0,44312.0,39148.0,41295.0,39629.0,48467.0,62284.0,57443.0,46066.0,43694.0,49117.0,47297.0,49822.0,41469.0,34465.0,47464.0206185567,#VALUE!,False,1,True
320,1.0,0.0,1,Lin–Kernighan heuristic,,61.0,The Traveling-Salesman Problem,2.0,Approximate TSP,495.0,Heuristic,,1,0,O(V^2),,,[https://www.cs.princeton.edu/~bwk/btl.mirror/tsp.pdf Lin–Kernighan (1981)],Lin–Kernighan,1981,https://www.cs.princeton.edu/~bwk/btl.mirror/tsp.pdf,,,,0.0,0,5,V: 5,O(V^2),"V: number of vertices
E: number of edges",V,https://doi.org/10.1016/S0377-2217(99)00284-2,0.0,Word RAM,words,3,V: 3,O(V),https://doi.org/10.1016/S0377-2217(99)00284-2,0.0,0.0,,0,,1,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Lin%E2%80%93Kernighan_heuristic,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lin%E2%80%93Kernighan_heuristic/monthly/20150701/20230731,465.0,451.0,597.0,760.0,1070.0,955.0,639.0,526.0,822.0,967.0,841.0,714.0,563.0,475.0,561.0,966.0,1006.0,857.0,617.0,682.0,934.0,742.0,924.0,765.0,549.0,560.0,631.0,819.0,950.0,838.0,705.0,563.0,780.0,1140.0,934.0,689.0,671.0,583.0,574.0,1051.0,1494.0,1731.0,1149.0,868.0,985.0,953.0,1038.0,790.0,695.0,593.0,714.0,1011.0,1075.0,1081.0,952.0,903.0,1013.0,1047.0,927.0,912.0,816.0,678.0,749.0,1036.0,1090.0,1144.0,886.0,777.0,1190.0,1039.0,950.0,885.0,754.0,721.0,688.0,907.0,1248.0,1049.0,841.0,667.0,953.0,981.0,892.0,789.0,775.0,958.0,767.0,1038.0,1526.0,1345.0,1073.0,919.0,1089.0,1198.0,1276.0,1144.0,821.0,881.7113402061856,#VALUE!,False,1,False
321,0.0,1.0,1,Sequence assembly,,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,534.0,,,1,0,O(n^2),,,[ Overlap Layout Consensus (1987)],Overlap Layout Consensus,1987,,,,,0.0,0,5,n: 5,O(n^2),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,5,n: 5,O(n^2)?,"Computes and stores all acceptable overlaps among all fragment pairs, along with detailed information regarding alignment, during one of the steps. Overlap graph has size at most O(n^2), layout and consensus should not take up more than O(n^2) space",1.0,0.0,,0,,1,,0,0,,0,0,https://www.cs.jhu.edu/~langmea/resources/lecture_notes/assembly_olc.pdf,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Bioinformatics,Sequence_assembly,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sequence_assembly/monthly/20150701/20230731,2848.0,2686.0,3405.0,4044.0,4167.0,3584.0,3468.0,3392.0,4039.0,3857.0,3796.0,2819.0,2294.0,2572.0,3379.0,3914.0,4206.0,3407.0,3559.0,3355.0,4072.0,3457.0,3481.0,2777.0,2313.0,2198.0,2818.0,3263.0,3361.0,2755.0,3253.0,2850.0,3299.0,3106.0,3159.0,2553.0,2265.0,2218.0,2879.0,3235.0,3497.0,2915.0,2859.0,3004.0,3286.0,3394.0,2904.0,2262.0,1899.0,47625.0,2182.0,2785.0,3154.0,2436.0,2441.0,2501.0,2480.0,2765.0,2692.0,2260.0,1849.0,1684.0,2125.0,2535.0,2596.0,2386.0,2255.0,2204.0,2919.0,2254.0,2354.0,2082.0,1547.0,1493.0,1525.0,1820.0,1867.0,1917.0,1949.0,1927.0,1922.0,1741.0,1938.0,1621.0,1336.0,1370.0,1692.0,1574.0,1763.0,1440.0,1573.0,1432.0,1759.0,1443.0,1558.0,1251.0,1156.0,3044.340206185567,3,False,3,False
322,0.0,1.0,1,De novo sequence assemblers,,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,537.0,,,1,0,O(nlogn),,,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC321006/ Greedy SEQAID (1984)],Greedy SEQAID,1984,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC321006/,,,,0.0,0,5,n: 5,O(n^2)?,"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,5,n: 5,O(n^2)?,"Computes and stores all acceptable overlaps among all fragment pairs, along with detailed information regarding alignment, during one of the steps",1.0,0.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Bioinformatics,De_novo_sequence_assemblers,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/De_novo_sequence_assemblers/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,14.0,11.0,193.0,445.0,466.0,336.0,370.0,471.0,678.0,664.0,622.0,689.0,678.0,735.0,854.0,806.0,679.0,626.0,550.0,691.0,832.0,930.0,661.0,898.0,977.0,1082.0,1207.0,958.0,787.0,769.0,731.0,958.0,1299.0,1399.0,1165.0,1334.0,1254.0,1212.0,1383.0,1279.0,1060.0,936.0,770.0,1166.0,1381.0,1342.0,1227.0,1012.0,1132.0,1432.0,1134.0,1197.0,1071.0,839.0,743.0,959.0,1207.0,1237.0,1121.0,1129.0,1202.0,1306.0,903.0,859.0,868.0,773.0,632.0,720.0,838.0,1607.0,734.0,766.0,783.0,1063.0,729.0,843.0,798.0,752.0,896.974358974359,3,False,3,False
323,1.0,0.0,1,Digital differential analyzer (graphics algorithm),,112.0,Rasterization,2.0,Rasterization,895.0,Scan-conversion line algorithm,,0,0,O(n^1.45 logn),,,"[Hearn, Baker (1997) pg. 87 Digital Differential Analyzer (DDA) (1983)]",Digital Differential Analyzer (DDA),1983,"Hearn, Baker (1997) pg. 87",,,,1.0,0,3,n: 3,O(n),n: dimension of image,n,,,Word RAM,Words,1,n: 1,O(1),"Derived: for each iteration (i.e. each step along the line), only need to store a constant number of variables that are then overwritten in the next iteration.",1.0,0.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,223088.0,,,,,,,,,4,,,Image Processing,Digital_differential_analyzer_%28graphics_algorithm%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Digital_differential_analyzer_%28graphics_algorithm%29/monthly/20150701/20230731,5065.0,5896.0,4300.0,4416.0,4320.0,5139.0,5510.0,5392.0,4059.0,3920.0,3771.0,3008.0,3609.0,4482.0,3778.0,3904.0,4799.0,4366.0,5465.0,5272.0,4740.0,4495.0,4730.0,3190.0,3788.0,4540.0,3961.0,4191.0,5100.0,5667.0,5621.0,5247.0,4652.0,4883.0,5549.0,2718.0,3857.0,5085.0,3421.0,3541.0,4368.0,4936.0,4840.0,5338.0,4619.0,5296.0,4675.0,3069.0,2661.0,3908.0,3939.0,3488.0,4371.0,4178.0,4080.0,4152.0,3055.0,2851.0,3110.0,3249.0,2964.0,4401.0,5489.0,4208.0,3921.0,5643.0,3922.0,4249.0,5582.0,3886.0,3739.0,4036.0,3692.0,3522.0,4535.0,3853.0,3614.0,4362.0,3337.0,3608.0,4045.0,3832.0,4086.0,3963.0,2807.0,3180.0,3506.0,3027.0,4958.0,3630.0,3115.0,3085.0,3167.0,2319.0,2670.0,2530.0,1740.0,4101.577319587629,3,True,1,True
324,1.0,0.0,1,Bresenham's line algorithm,,112.0,Rasterization,2.0,Rasterization,896.0,,,0,0,O(n^2),,,"[Hearn, Baker (1997) pg. 88 Bresenham Algorithm (1962)]",Bresenham Algorithm,1962,"Hearn, Baker (1997) pg. 88",,,,1.0,0,3,n: 3,O(n),n: dimension of image,n,,,Word RAM,Words,1,n: 1,O(1),"Derived: for each iteration (i.e. each step along the line), only need to store a constant number of variables that are then overwritten in the next iteration.",1.0,0.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Bresenham%27s_line_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bresenham%27s_line_algorithm/monthly/20150701/20230731,18336.0,14801.0,15244.0,15587.0,13790.0,13563.0,15907.0,16663.0,16069.0,15606.0,14736.0,12669.0,12121.0,14480.0,15050.0,16071.0,16816.0,16555.0,25342.0,18033.0,17717.0,15762.0,17013.0,13261.0,13753.0,16293.0,16655.0,17846.0,19623.0,16309.0,18220.0,17251.0,18596.0,18042.0,21368.0,12823.0,14399.0,17103.0,16503.0,17274.0,17777.0,16479.0,16527.0,17903.0,19253.0,18811.0,16813.0,11567.0,12343.0,14561.0,16260.0,16905.0,16910.0,16452.0,16249.0,17091.0,16571.0,15153.0,16158.0,13489.0,12262.0,14175.0,20263.0,17297.0,15431.0,15821.0,16628.0,15542.0,18123.0,15606.0,14647.0,15025.0,14084.0,13819.0,16757.0,16171.0,14500.0,16856.0,14929.0,15705.0,16995.0,14156.0,14236.0,13409.0,12304.0,12762.0,15350.0,14942.0,16391.0,15017.0,14274.0,13955.0,16299.0,13472.0,13973.0,11748.0,10671.0,15774.40206185567,3,True,1,True
325,0.0,1.0,1,Simultaneous localization and mapping,,115.0,SLAM Algorithms,1.0,SLAM Algorithms,908.0,,0.0,1,0,O(m*log n) per iteration,^see above,(none),[http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf FastSlam (2003)],FastSlam,2003,http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf,,,,0.0,0,2,"m: 3,
n: 2",O(m*\log n) per iteration,"n: number of dimensions in state space
m: number of particles in particle filter",n,http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf,0.0,Real RAM?,words?,3,"m: 3,
n: 3",O(mn)?,Stores and updates a balanced binary tree of n elements/dimensions per particle,1.0,0.0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Robotics,Simultaneous_localization_and_mapping,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Simultaneous_localization_and_mapping/monthly/20150701/20230731,9151.0,8575.0,9633.0,11109.0,11367.0,10156.0,13051.0,12444.0,14572.0,12906.0,13838.0,13344.0,13615.0,14127.0,14866.0,19240.0,15730.0,13773.0,15950.0,16475.0,18254.0,18021.0,18118.0,17261.0,16361.0,15971.0,16517.0,17700.0,18592.0,15616.0,18443.0,16296.0,19060.0,18055.0,19190.0,17292.0,16278.0,15868.0,17046.0,21691.0,18692.0,16955.0,19509.0,18222.0,20824.0,20634.0,19120.0,16309.0,16344.0,16181.0,17984.0,20191.0,17972.0,15534.0,17548.0,17145.0,16458.0,17145.0,17411.0,16209.0,14988.0,14442.0,15845.0,17142.0,16523.0,15147.0,16606.0,14923.0,17882.0,16554.0,15848.0,14397.0,14027.0,12757.0,14512.0,16089.0,15300.0,13016.0,13491.0,12957.0,14091.0,13655.0,13982.0,12552.0,10648.0,11311.0,11884.0,12808.0,13496.0,11660.0,11843.0,11580.0,12458.0,10326.0,10484.0,9928.0,9116.0,15218.62886597938,2,True,3,True
326,0.0,0.0,0,,,115.0,SLAM Algorithms,1.0,SLAM Algorithms,910.0,,0.0,1,0,O(n^2),^see above,(none),[http://ingmec.ual.es/~jlblanco/papers/blanco2013rba.pdf srba (2002)],srba,2002,http://ingmec.ual.es/~jlblanco/papers/blanco2013rba.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,O(n^2)?,"Seems to store a constant number of O(n)*O(n)-sized matrices and O(n)*O(n)-sized tables (see section II, part C)",1.0,0.0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000.0,,,,,,,,,3,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,False
327,0.0,1.0,1,Change-making problem,O(nS),130.0,Change-Making Problem,2.0,Change-Making Problem,962.0,,,1,0,O(n log n),,,[https://www.ncbi.nlm.nih.gov/pubmed/24626234 Probabilistic Convolution Tree (2014)],Probabilistic Convolution Tree,2014,https://www.ncbi.nlm.nih.gov/pubmed/24626234,,,,0.0,0,4,n: 4,O(n \log n),n: number of coins,n,,,Word RAM,words,4,n: 4,O(n log n),https://pubmed.ncbi.nlm.nih.gov/24626234/,0.0,1.0,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Change-making_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Change-making_problem/monthly/20150701/20230731,2640.0,3111.0,3850.0,4812.0,4597.0,3529.0,3660.0,4190.0,4379.0,4922.0,4310.0,3647.0,3177.0,3153.0,4198.0,5493.0,5453.0,4968.0,5301.0,5828.0,6030.0,5469.0,4662.0,4006.0,3975.0,4143.0,5388.0,6113.0,5272.0,4278.0,4789.0,4690.0,5370.0,5069.0,4389.0,3115.0,5184.0,3275.0,4073.0,4743.0,4272.0,3094.0,3466.0,3571.0,3922.0,3678.0,3705.0,3039.0,2986.0,3220.0,4242.0,6044.0,5824.0,4265.0,4626.0,5025.0,4312.0,5556.0,4334.0,4581.0,3547.0,3852.0,4841.0,5456.0,5641.0,4773.0,4380.0,4314.0,4819.0,4204.0,3520.0,3115.0,3639.0,3673.0,3801.0,4437.0,5062.0,3496.0,3106.0,3219.0,3248.0,3083.0,2785.0,2518.0,2385.0,2556.0,2418.0,2825.0,3085.0,2391.0,2326.0,2081.0,2948.0,2201.0,2012.0,1709.0,1909.0,4004.0,4,True,3,False
328,1.0,0.0,1,Odd–even sort,O(n*logn),1.0,Sorting,2.0,Comparison Sorting,19.0,,,1,1,O( n² ),Any distribution,Same general behavior across inputs,[https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce Odd Even Sort Parallel  Implementation (1972)],Odd Even Sort Parallel  Implementation,1972,https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce,,,,0.0,0,5,n: 5,O(n^2),n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ,0.0,1.0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,Odd%E2%80%93even_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Odd%E2%80%93even_sort/monthly/20150701/20230731,888.0,850.0,1315.0,2050.0,1793.0,2244.0,2218.0,2012.0,3243.0,4755.0,2017.0,1134.0,766.0,907.0,1259.0,1601.0,2056.0,1375.0,1608.0,2042.0,2625.0,4282.0,2262.0,1133.0,810.0,769.0,1108.0,2596.0,1730.0,2709.0,1707.0,1599.0,2029.0,2583.0,1922.0,1190.0,1008.0,963.0,1296.0,1890.0,1702.0,1560.0,1337.0,1259.0,1574.0,2166.0,1612.0,1106.0,772.0,876.0,1289.0,1371.0,1488.0,1206.0,1258.0,1092.0,2209.0,1338.0,1491.0,1401.0,837.0,883.0,1177.0,1518.0,1273.0,1477.0,1196.0,1177.0,1673.0,1737.0,1433.0,1253.0,780.0,986.0,1035.0,1513.0,1363.0,1249.0,1143.0,941.0,1349.0,1125.0,1331.0,1239.0,756.0,529.0,732.0,1100.0,1234.0,1173.0,1859.0,1053.0,1305.0,1294.0,1194.0,968.0,691.0,1484.8144329896909,2,False,1,True
329,0.0,1.0,1,Spaghetti sort,,1.0,Sorting,1.0,Non-Comparison Sorting,25.0,,,1,1,O(n),Any distribution,need to read entire input,[https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11 Spaghetti Sort Parallel Implementation (1984)],Spaghetti Sort Parallel Implementation,1984,https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11,,,,0.0,0,3,n: 3,O(n),n: size of list,n,,,???,words,1,n: 1,O(1) auxiliary? per processor?,"Assuming getting the spaghetti rods doesn't take up any auxiliary space, the only auxiliary space in this algorithm involves the table and the hands, each using O(1) space",1.0,0.0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Spaghetti_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1.0,n is the size of the array to be sorted.,,,,,,,,1000.0,1000,,,,,,,,4,,,Combinatorics,Spaghetti_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Spaghetti_sort/monthly/20150701/20230731,3437.0,14670.0,35015.0,6008.0,14752.0,12879.0,1662.0,2910.0,2209.0,2551.0,5179.0,3231.0,3498.0,4261.0,2447.0,1801.0,1768.0,1561.0,1671.0,2033.0,2125.0,1788.0,2106.0,2004.0,4651.0,1253.0,1906.0,3886.0,2045.0,1551.0,1561.0,1594.0,1887.0,4449.0,1665.0,1886.0,1081.0,1074.0,1149.0,1555.0,1511.0,1939.0,1345.0,1917.0,1612.0,2038.0,1255.0,932.0,755.0,756.0,1163.0,1479.0,1043.0,918.0,1198.0,1004.0,1086.0,906.0,984.0,712.0,709.0,761.0,801.0,1524.0,899.0,792.0,819.0,849.0,1087.0,808.0,1277.0,714.0,558.0,554.0,746.0,1179.0,887.0,750.0,810.0,668.0,982.0,925.0,878.0,839.0,806.0,973.0,842.0,764.0,887.0,979.0,777.0,702.0,1305.0,1496.0,726.0,644.0,522.0,2284.0309278350514,2,False,1,True
330,0.0,1.0,1,Matrix chain multiplication,$O(n^2)$,3.0,Matrix Chain Multiplication,1.0,Approximate MCSP,32.0,,,1,1,O(n^2),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.222&rep=rep1&type=pdf Heejo Lee; Jong Kim; Sungje Hong; and Sunggu Lee (1997)],Heejo Lee; Jong Kim; Sungje Hong; and Sunggu Lee,1997,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.222&rep=rep1&type=pdf,,,,0.0,0,5,n: 5,$O(n^2)$,"$P$: number of processors
$n$: number of matrices",n,,,Word RAM?,words,5,n: 5,$O(n^2)$?,Derived: two $n \times n$ size tables ($S$ and $W$),1.0,0.0,,0,,1,near optimal,0,0?,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000000.0,Inf,,,,,,,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,False
331,0.0,0.0,0,,$O(\log \log n)$,3.0,Matrix Chain Multiplication,2.0,Approximate MCOP,33.0,,,1,1,O(log^4 n),,,[https://epubs.siam.org/doi/abs/10.1137/0225039 Prakesh Ramanan (1996)],Prakesh Ramanan,1996,https://epubs.siam.org/doi/abs/10.1137/0225039,,,,0.0,0,2.03,n: 2.03,O(log^4 n),$n$: number of matrices,n,,,CREW PRAM,words,3,n: 3,$O(n)$?,Derived: $n$ subtrees and each one has a $O(1)$ size trunk,1.0,0.0,,0,,0,,0,1,$n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,99.0,Inf,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1.99,False,3,True
332,0.0,1.0,1,Matrix chain multiplication,$O(\log^3 n)$,3.0,Matrix Chain Multiplication,2.0,Matrix Chain Scheduling Problem,34.0,,,1,1,O (log^3 n),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf Czumaj (1993)],Czumaj,1993,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf,,,,0.0,0,2.02,n: 2.02,O(log^3 n),$n$: number of matrices,n,,,CREW PRAM,words,5,n: 5,$O(n^2)$?,Derived: uses two arrays ($D$ and $c$) both of size $O(n^2)$,1.0,0.0,,0,,0,,0,1,$O(n^2 / \log^3 n)$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,989.0,Inf,,,,,,,,1,,,Combinatorics,Matrix_chain_multiplication,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_chain_multiplication/monthly/20150701/20230731,2498.0,3053.0,4626.0,6254.0,6720.0,5261.0,3668.0,4656.0,4982.0,5916.0,5071.0,3371.0,2356.0,3067.0,4620.0,6511.0,7664.0,6077.0,4138.0,4638.0,5887.0,5702.0,5330.0,3166.0,2480.0,3410.0,4812.0,7105.0,7852.0,5802.0,4342.0,4399.0,5608.0,5768.0,4558.0,2916.0,2397.0,3142.0,4224.0,5590.0,5975.0,4998.0,2933.0,2863.0,4506.0,5678.0,3852.0,2526.0,2089.0,2438.0,3961.0,4591.0,6001.0,4511.0,2812.0,3186.0,3262.0,3904.0,3702.0,2982.0,2260.0,2163.0,3199.0,4347.0,4185.0,4104.0,3038.0,2807.0,3450.0,3348.0,3315.0,3349.0,3437.0,3843.0,4159.0,4417.0,4825.0,4909.0,3334.0,3266.0,4110.0,4362.0,4203.0,3599.0,2626.0,2056.0,2567.0,3269.0,4401.0,3527.0,3162.0,3217.0,3546.0,3234.0,3025.0,2289.0,1691.0,4052.020618556701,1.99,False,3,False
333,0.0,0.0,0,,,4.0,Longest Common Subsequence,1.0,LCS,41.0,,,1,1,O(rm \log(n/r) + rm),,,[https://www.sciencedirect.com/science/article/pii/0022000084900254 Hsu and Du (Scheme 2) (1984)],Hsu and Du (Scheme 2),1984,https://www.sciencedirect.com/science/article/pii/0022000084900254,,,,1.0,-,5.01,"m: 3,
r: 3,
n: 2,
m+n: 5.01",O(rm \log(n/r) + rm),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"r: 3,
m: 3,
m+n: 5",$O(rm)$,https://www.sciencedirect.com/science/article/pii/0022000084900254,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
334,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,42.0,,,1,1,O(m \log n +n^2 \log(2m/n)),"On average, $p = n^2 / s$",https://dl.acm.org/doi/10.1145/74697.74702,[https://link.springer.com/article/10.1007/BF01840365 Apostolico and Guerra (HS1 Algorithm) (1987)],Apostolico and Guerra (HS1 Algorithm),1987,https://link.springer.com/article/10.1007/BF01840365,,,,0.0,-,5,"m: 3,
n: 2,
p: 3,
m+n: 5",O(m \log n +p \log(2mn/p)),"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,https://link.springer.com/article/10.1007/BF01840365,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
335,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,43.0,,,1,1,O(n^2 + n(r+\log n)),"On average, $p = n^2 / s$",https://dl.acm.org/doi/10.1145/74697.74702,[https://dl.acm.org/citation.cfm?id=74702 Kuo and Cross (1989)],Kuo and Cross,1989,https://dl.acm.org/citation.cfm?id=74702,,,,0.0,-,5,"p: 3,
n: 4,
r: 3,
m+n: 5",O(p + n(r+\log n)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,"https://dl.acm.org/doi/10.1145/74697.74702, Same space complexity as Hunt and Szymanski.",0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
336,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,44.0,,,1,1,"O(sn + \min\{r(n - r ), rm\})",,,[https://link.springer.com/chapter/10.1007/3-540-60044-2_53 Rick (1995)],Rick,1995,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,,,,1.0,-,5,"s: 3,
n: 3,
r: 3,
m: 3,
m+n: 5","O(sn + \min\{r(n - r ), rm\})","$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(sn + p)$,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
337,0.0,0.0,0,,,4.0,Longest Common Subsequence,0.001,LCS,45.0,,,1,1,"O(sn + \min\{rm, sd\})",,,[https://link.springer.com/chapter/10.1007/3-540-60044-2_53 Rick (1995)],Rick,1995,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,,,,0.0,-,5,"s: 3,
n: 3,
r: 3,
m: 3,
m+n: 5","O(sn + \min\{rm, sd\})","$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(sn + p)$,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
338,1.0,0.0,1,Hirschberg's algorithm,,4.0,Longest Common Subsequence,2.0,LCS,46.0,,,1,1,O(rn + n \log n),,,[https://dl.acm.org/citation.cfm?id=322044 Hirschberg (1977)],Hirschberg,1977,https://dl.acm.org/citation.cfm?id=322044,,,,1.0,-,5,"r: 3,
n: 4,
m+n: 5",O(rn + n \log n),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(n + p)$,https://link.springer.com/content/pdf/10.1007/BF01840365.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,Hirschberg%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hirschberg%27s_algorithm/monthly/20150701/20230731,909.0,1029.0,1158.0,1728.0,2048.0,1846.0,1927.0,1875.0,2273.0,2292.0,1668.0,1439.0,1395.0,1349.0,1501.0,2086.0,2113.0,1816.0,1613.0,1562.0,1641.0,1456.0,1516.0,1275.0,961.0,1021.0,1327.0,2162.0,1948.0,1374.0,1978.0,1308.0,1348.0,1553.0,1349.0,1150.0,973.0,955.0,1063.0,1868.0,1820.0,1460.0,1422.0,1122.0,1203.0,1180.0,1226.0,1194.0,854.0,910.0,1092.0,1618.0,2042.0,1479.0,1056.0,1200.0,1105.0,1787.0,1360.0,1012.0,910.0,802.0,955.0,1628.0,1848.0,1371.0,1073.0,1174.0,1419.0,1328.0,993.0,924.0,744.0,622.0,841.0,1363.0,2039.0,1297.0,801.0,1044.0,1091.0,1523.0,1841.0,1137.0,733.0,702.0,946.0,1203.0,1325.0,961.0,797.0,992.0,1183.0,1122.0,1064.0,771.0,661.0,1332.1958762886595,3,False,3,True
339,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,47.0,,,1,1,O(rm \log(n/m) + rm),,,[https://www.sciencedirect.com/science/article/pii/0022000084900254 Hsu and Du (Scheme 1) (1984)],Hsu and Du (Scheme 1),1984,https://www.sciencedirect.com/science/article/pii/0022000084900254,,,,0.0,-,5,"r: 3,
m: 3,
n: 2,
m+n: 5",O(rm \log(n/m) + rm),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"r: 3,
m: 3,
m+n: 5",$O(rm)$,https://www.sciencedirect.com/science/article/pii/0022000084900254,0.0,1.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
340,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,48.0,,,1,1,O(rm + sn + n \log s),,,[https://link.springer.com/article/10.1007/BF01840365 Apostolico and Guerra (Algorithm 2) (1987)],Apostolico and Guerra (Algorithm 2),1987,https://link.springer.com/article/10.1007/BF01840365,,,,1.0,-,5,"r: 3,
m: 3,
s: 3,
n: 3,
m+n: 5",O(rm + sn + n \log s),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(p + sn)$,https://link.springer.com/content/pdf/10.1007/BF01840365.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
341,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,49.0,,,1,1,"O(sn + \min\{sp, rm\})",,,[https://dl.acm.org/doi/abs/10.5555/105582.105592 Chin and Poon (1991)],Chin and Poon,1991,https://dl.acm.org/doi/abs/10.5555/105582.105592,,,,0.0,-,5,"r: 3,
m: 3,
s: 3,
n: 3,
p: 4,
m+n: 5","O(sn + \min\{sp, rm\})","$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,"https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf, Fig. 3",0.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
342,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,50.0,,,1,1,O(n(m-r)),,,[https://link.springer.com/article/10.1007/BF00264437 Nakatsu et al. (1982)],Nakatsu et al.,1982,https://link.springer.com/article/10.1007/BF00264437,,,,0.0,-,5,"n: 3,
m: 3,
m+n: 5",O(n(m-r)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$,"https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf, Fig. 3",0.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
343,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,51.0,,,1,1,O(n(m-r)),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380151102 Miller and Myers (1985)],Miller and Myers,1985,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380151102,,,,0.0,-,5,"n: 3,
m: 3,
m+n: 5",O(n(m-r)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$,Derived: Uses an upper triangular matrix $M$ that is size $(m + 1) \times (m + 1)$,1.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
344,0.0,0.0,0,,,4.0,Longest Common Subsequence,2.0,LCS,52.0,,,1,1,O(n(m-r)),,,[https://publications.mpi-cbg.de/Wu_1990_6334.pdf Wu et al. (1990)],Wu et al.,1990,https://publications.mpi-cbg.de/Wu_1990_6334.pdf,,,,0.0,-,5,"n: 3,
m: 3,
m+n: 5",O(n(m-r)),"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$?,Derived: Same as the above two,1.0,0.0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
345,0.0,1.0,1,Parallel algorithms for minimum spanning trees,Unknown but matches lower bound,14.0,Minimum Spanning Tree (MST),2.0,"Undirected, General MST",163.0,Parallel algorithm,,1,1,O(E log(V)/p),,,[https://www.sciencedirect.com/science/article/pii/S0743731506001262 Bader & Cong Parallel Implementation  (2006)],Bader & Cong Parallel Implementation,2006,https://www.sciencedirect.com/science/article/pii/S0743731506001262,,,,0.0,0,5.01,"E: 3,
V: 5.01",O(E \log(V)/p),"V: number of vertices
E: number of edges
U: maximum edge weight
p: number of processors",V,https://www.sciencedirect.com/science/article/pii/S0743731506001262,0.0,PRAM/SMPs?,words,3,"V: 3,
E: 1",O(V) total,Initializes and uses a constant number of arrays of size O(V) (and does work similar to work done in Boruvka/Prim algorithm),1.0,0.0,,0,,0,,0,1,p,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,8.7,583.3333333,,,,,,,,5,,,Combinatorics,Parallel_algorithms_for_minimum_spanning_trees,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Parallel_algorithms_for_minimum_spanning_trees/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,34.0,42.0,53.0,53.0,153.0,263.0,281.0,324.0,165.0,184.0,199.0,329.0,313.0,683.0,186.0,131.0,157.0,256.0,460.0,306.0,223.0,211.0,421.0,1391.0,288.0,146.0,199.0,136.0,631.0,325.0,496.0,380.0,215.0,170.0,257.0,349.0,423.0,199.0,175.0,113.0,174.0,336.0,376.0,238.0,226.0,178.0,218.0,297.0,313.0,151.0,110.0,273.27450980392155,5,False,3,True
346,1.0,0.0,1,Special number field sieve,,18.0,Integer Factoring,2.0,First Category Integer Factoring,200.0,"For integers of the form $r^e \pm s$, for r and s relatively small",,1,1,$O(exp((1+o(1))(32n/9)^{(1/3)}(log n)^{(2/3)})$ heuristically?,,http://www.ams.org/notices/199612/pomerance.pdf,[ Special number field sieve (1940)],Special number field sieve,1940,,,,,0.0,0,8,n: 8,O(exp((1+o(1))(32n/9)^{(1/3)}(log n)^{(2/3)}) heuristically?,n: number of bits in number to factor,n,,,,bits,2.66,n: 2.66,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0.0,0.0,,0,,0,,1,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,100.0,,10000.0,,1000000.0,,inf,1,,,,,,,,1,,,Numerical Analysis,Special_number_field_sieve,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Special_number_field_sieve/monthly/20150701/20230731,571.0,595.0,580.0,710.0,692.0,716.0,649.0,588.0,634.0,644.0,600.0,511.0,540.0,502.0,495.0,986.0,688.0,709.0,664.0,630.0,764.0,712.0,603.0,629.0,715.0,470.0,569.0,596.0,603.0,679.0,674.0,625.0,547.0,581.0,618.0,501.0,558.0,478.0,475.0,584.0,622.0,668.0,674.0,482.0,624.0,705.0,619.0,542.0,572.0,524.0,552.0,745.0,617.0,656.0,654.0,538.0,710.0,645.0,499.0,482.0,427.0,445.0,434.0,620.0,496.0,480.0,521.0,439.0,645.0,570.0,545.0,444.0,493.0,445.0,413.0,484.0,467.0,422.0,433.0,375.0,586.0,442.0,663.0,467.0,416.0,425.0,411.0,413.0,481.0,439.0,478.0,367.0,575.0,609.0,602.0,431.0,488.0,563.979381443299,#VALUE!,False,2.66,True
347,1.0,0.0,1,General number field sieve,,19.0,Integer Factoring,2.0,Second Category Integer Factoring,205.0,,,1,1,$O(exp((1+o(1))(64n/9)^{(1/3)}(log n)^{(2/3)})$ heuristically?,,,[http://www.ams.org/notices/199612/pomerance.pdf General number field sieve (1996)],General number field sieve,1996,http://www.ams.org/notices/199612/pomerance.pdf,,,,0.0,0,8,n: 8,O(exp((1+o(1))(64n/9)^{(1/3)}(log n)^{(2/3)}) heuristically?,n: number of bits in number to factor,n,,,,bits,2.66,n: 2.66,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0.0,1.0,,0,,0,,1,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,General_number_field_sieve,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/General_number_field_sieve/monthly/20150701/20230731,3453.0,3151.0,3512.0,5731.0,4783.0,4820.0,4465.0,3955.0,4748.0,4680.0,4317.0,3557.0,3238.0,4562.0,3722.0,4756.0,4531.0,3953.0,3772.0,4285.0,4876.0,4796.0,4173.0,3603.0,3467.0,3161.0,3406.0,4017.0,4203.0,4013.0,3957.0,3882.0,3977.0,4068.0,3719.0,3306.0,3527.0,3168.0,3208.0,4041.0,3887.0,3700.0,3688.0,3358.0,4100.0,4478.0,4109.0,3251.0,3396.0,3324.0,3837.0,5289.0,4517.0,4545.0,3556.0,3513.0,3965.0,4078.0,3714.0,3131.0,2896.0,2918.0,2944.0,4153.0,3570.0,3534.0,4137.0,3236.0,5014.0,3826.0,3727.0,3135.0,3368.0,2928.0,3070.0,3723.0,3853.0,3429.0,3278.0,3138.0,3629.0,3570.0,3727.0,3182.0,3177.0,3125.0,2994.0,3656.0,3822.0,3125.0,3618.0,3195.0,6299.0,4596.0,5214.0,3836.0,4056.0,3842.19587628866,#VALUE!,False,2.66,True
348,1.0,0.0,1,Shor's algorithm,,19.0,Integer Factoring,2.0,Second Category Integer Factoring,207.0,Quantum algorithm,,1,1,O(n),,,[https://ieeexplore.ieee.org/document/365700/ Shor's algorithm Quantum Implementation (1994)],Shor's algorithm Quantum Implementation,1994,https://ieeexplore.ieee.org/document/365700/,,,,0.0,0,3,n: 3,O(n),n: number of bits in number to factor,n,,,Quantum Computer,qubits,3,n: 3,O(n),https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm,0.0,0.0,,0,,0,,0,0,,1,0,https://quantum-computing.ibm.com/composer/docs/iqx/guide/shors-algorithm,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,O(n^2) gates,,Numerical Analysis,Shor%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shor%27s_algorithm/monthly/20150701/20230731,11887.0,21007.0,16086.0,26876.0,18357.0,25458.0,14534.0,13840.0,25651.0,19587.0,24698.0,13301.0,14137.0,21327.0,15537.0,15028.0,17464.0,15933.0,16986.0,18729.0,21740.0,21383.0,21758.0,15648.0,18974.0,15547.0,19519.0,21033.0,23798.0,24940.0,24629.0,20801.0,23244.0,20921.0,19823.0,22502.0,26802.0,19767.0,17824.0,28364.0,24318.0,21434.0,23801.0,18260.0,21432.0,20472.0,26537.0,18741.0,17995.0,20368.0,27967.0,41533.0,27442.0,22581.0,20526.0,18194.0,17889.0,19851.0,19581.0,17560.0,15495.0,14513.0,15971.0,17049.0,18047.0,20634.0,19141.0,19279.0,24205.0,21885.0,21913.0,19506.0,36941.0,22652.0,20225.0,19645.0,24383.0,20284.0,19965.0,18746.0,17986.0,19397.0,21678.0,20622.0,22690.0,17992.0,20415.0,22276.0,22112.0,18496.0,23791.0,20286.0,25156.0,22747.0,22152.0,18105.0,22878.0,20733.81443298969,#VALUE!,False,2.66,False
349,1.0,0.0,1,Two-way string-matching algorithm,,22.0,String Search,2.0,Single String Search,238.0,,,1,1,O(n + m),,,[http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf Two-way String-Matching Algorithm (1991)],Two-way String-Matching Algorithm,1991,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3",O(n + m),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",$O(1)$,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,Two-way_string-matching_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Two-way_string-matching_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,1.0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.0,143.0,337.0,303.0,376.0,547.0,550.0,480.0,451.0,663.0,395.0,612.0,672.0,449.0,341.0,411.0,367.0,426.0,503.0,445.0,497.0,441.0,363.0,340.0,378.0,386.0,372.0,363.0,333.0,395.0,621.0,673.0,625.0,755.0,529.0,592.0,613.0,648.0,776.0,542.0,549.0,682.0,577.0,619.0,548.0,809.0,478.7234042553192,3,True,1,True
350,0.0,0.0,0,,,22.0,String Search,2.0,Single String Search,239.0,,,1,1,O(mn),,,[- String-Matching with Finite Automata (1940)],String-Matching with Finite Automata,1940,-,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,Derived: $O(m)$ states in the DFA,1.0,0.0,,0,,0,,0,0,,0,0,https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
351,0.0,0.0,0,,,22.0,String Search,2.0,Single String Search,240.0,,,1,1,O(mn),,,[http://www.ijcte.org/papers/462-G1278.pdf Quick-Skip Searching (2012)],Quick-Skip Searching,2012,http://www.ijcte.org/papers/462-G1278.pdf,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses two tables, both of size $O(m)$",1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
352,0.0,0.0,0,,,22.0,String Search,2.0,Single String Search,241.0,,,1,1,O(n+m)+ O(m+s),,,[https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf Fast Hybrid Algorithm (2017)],Fast Hybrid Algorithm,2017,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,4,1.0,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,1.0,4->6,3,"n: 3,
m: 3,
m+n: 3,
s: 3",O(n+m)+ O(m+s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses three tables, each of size $O(m)$",1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,1150.0,69.65217391,0.056657443,1100050,72724.058,0.156481465,1100000050,72727269.51,0.265027495,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
353,0.0,1.0,1,String-searching algorithm,,22.0,String Search,2.0,Single String Search,243.0,,,1,1,O(n (\log_s m)/m),,,[https://link.springer.com/chapter/10.1007/BFb0030778 Backward Non-Deterministic DAWG Matching (BNDM) (1998)],Backward Non-Deterministic DAWG Matching (BNDM),1998,https://link.springer.com/chapter/10.1007/BFb0030778,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3",O(n+m),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",$O(sm)$,https://link.springer.com/chapter/10.1007/BFb0030778,0.0,1.0,,0,,0,,0,1,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics,String-searching_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/String-searching_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2773.0,5263.0,5188.0,5778.0,7167.0,7633.0,7099.0,6495.0,6400.0,7677.0,7688.0,7414.0,6259.0,6848.0,6563.0,7323.0,8254.0,8999.0,7680.0,7173.0,7619.0,10836.0,10133.0,9082.0,8474.0,7050.0,7302.0,9614.0,8399.0,8704.0,8516.0,7626.0,7167.0,8127.0,7699.0,7421.0,6913.0,7063.0,6528.0,6548.0,7653.0,8204.0,7028.0,7192.0,6346.0,6913.0,7034.0,7020.0,5817.0,5014.0,4938.0,5339.0,5890.0,6620.0,5914.0,5488.0,5214.0,6168.0,4961.0,5130.0,4386.0,4032.0,6916.064516129032,3,True,1,False
354,1.0,0.0,1,Commentz-Walter algorithm,$O(n + m + z)$,22.0,String Search,2.0,Multiple String Search,244.0,"Automaton-based, constructs a converse state machine from the given patterns",,1,1,O(mn),,,[https://link.springer.com/chapter/10.1007/3-540-09510-1_10 Commentz-Walter Algorithm (1979)],Commentz-Walter Algorithm,1979,https://link.springer.com/chapter/10.1007/3-540-09510-1_10,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,Commentz-Walter_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Commentz-Walter_algorithm/monthly/20150701/20230731,619.0,556.0,509.0,605.0,477.0,434.0,376.0,389.0,494.0,409.0,459.0,334.0,363.0,433.0,470.0,469.0,454.0,431.0,408.0,315.0,450.0,444.0,434.0,414.0,332.0,351.0,350.0,452.0,376.0,437.0,345.0,334.0,377.0,408.0,376.0,360.0,306.0,353.0,318.0,364.0,378.0,400.0,322.0,325.0,413.0,427.0,388.0,295.0,317.0,310.0,272.0,375.0,382.0,316.0,311.0,338.0,380.0,453.0,512.0,386.0,406.0,437.0,504.0,492.0,400.0,439.0,401.0,377.0,576.0,564.0,454.0,458.0,505.0,356.0,344.0,380.0,414.0,338.0,412.0,420.0,391.0,455.0,546.0,334.0,390.0,394.0,403.0,349.0,386.0,353.0,340.0,342.0,385.0,446.0,355.0,442.0,446.0,405.35051546391753,3,False,1,False
355,1.0,0.0,1,Aho–Corasick algorithm,$O(n + m + z)$,22.0,String Search,2.0,Multiple String Search,245.0,"Automaton-based, finite automaton that tracks the partial prefix match",,1,1,O(n + m + z),,,[https://cr.yp.to/bib/1975/aho.pdf Aho–Corasick (AC) Algorithm (1975)],Aho–Corasick (AC) Algorithm,1975,https://cr.yp.to/bib/1975/aho.pdf,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3,
z: 3",O(n + m + z),"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords
$z$: number of matches",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,Aho%E2%80%93Corasick_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Aho%E2%80%93Corasick_algorithm/monthly/20150701/20230731,2549.0,2524.0,2530.0,4224.0,3004.0,2622.0,2484.0,2913.0,3482.0,3014.0,3553.0,3203.0,3037.0,3367.0,3504.0,4516.0,4166.0,3905.0,3386.0,3303.0,3769.0,4182.0,3823.0,3343.0,3239.0,4269.0,3834.0,3688.0,5998.0,6628.0,3998.0,3860.0,4377.0,4191.0,4279.0,3710.0,6446.0,4790.0,3863.0,4485.0,4406.0,3944.0,3907.0,4019.0,5217.0,4734.0,4233.0,3815.0,4402.0,4215.0,5069.0,5121.0,4607.0,3988.0,4223.0,4296.0,5236.0,4716.0,5560.0,4179.0,3969.0,4354.0,6937.0,7027.0,5565.0,5442.0,4963.0,5196.0,6833.0,6741.0,5370.0,5123.0,5296.0,4868.0,4711.0,5716.0,5624.0,4739.0,4523.0,4936.0,5271.0,4619.0,5600.0,4213.0,4455.0,4698.0,3947.0,4504.0,4334.0,3774.0,3756.0,3937.0,4397.0,3968.0,4736.0,3625.0,4284.0,4371.092783505154,3,True,1,False
356,1.0,0.0,1,Boyer–Moore–Horspool algorithm,,22.0,String Search,2.0,Single String Search,246.0,Bad-character heuristic,,1,1,O(n),Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608 Boyer-Moore-Horspool (BMH) (1980)],Boyer-Moore-Horspool (BMH),1980,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn + s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Boyer%E2%80%93Moore%E2%80%93Horspool_algorithm/monthly/20150701/20230731,1156.0,1034.0,1339.0,1620.0,2082.0,1687.0,1298.0,1229.0,1668.0,1746.0,1962.0,1698.0,1041.0,1208.0,1230.0,1992.0,1825.0,1399.0,1279.0,1332.0,1998.0,1999.0,1710.0,1500.0,1046.0,1446.0,1416.0,1996.0,1907.0,1693.0,1262.0,1306.0,1689.0,1779.0,1561.0,1316.0,1008.0,1077.0,1270.0,1779.0,1700.0,1441.0,1169.0,1152.0,1883.0,2021.0,1626.0,1641.0,1133.0,921.0,1443.0,1484.0,1710.0,1352.0,1140.0,1131.0,1201.0,1844.0,1493.0,1236.0,1984.0,917.0,1473.0,1408.0,1374.0,1473.0,1125.0,991.0,1420.0,1527.0,1362.0,1472.0,1494.0,1038.0,963.0,1307.0,1537.0,1293.0,1175.0,1081.0,1231.0,1374.0,1390.0,1128.0,1076.0,894.0,1515.0,1423.0,1573.0,1148.0,936.0,955.0,1195.0,1273.0,1190.0,1075.0,855.0,1401.5360824742268,3,False,1,True
357,1.0,0.0,1,Raita algorithm,,22.0,String Search,2.0,Single String Search,247.0,Slight variation of BMH,,1,1,O(n),Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf Raita Algorithm (1991)],Raita Algorithm,1991,https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5,
s: 3",O(mn + s),"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1.0,0.0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,Raita_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Raita_algorithm/monthly/20150701/20230731,,,,,,,,,168.0,177.0,157.0,142.0,118.0,166.0,122.0,142.0,135.0,172.0,129.0,141.0,202.0,154.0,130.0,160.0,115.0,119.0,102.0,94.0,99.0,111.0,132.0,100.0,120.0,125.0,100.0,90.0,102.0,125.0,83.0,124.0,120.0,83.0,89.0,88.0,145.0,126.0,136.0,107.0,97.0,93.0,93.0,118.0,206.0,166.0,125.0,128.0,131.0,151.0,109.0,107.0,88.0,96.0,146.0,109.0,94.0,83.0,75.0,86.0,119.0,75.0,82.0,95.0,213.0,128.0,65.0,88.0,76.0,117.0,50.0,68.0,113.0,88.0,121.0,81.0,110.0,66.0,87.0,83.0,84.0,92.0,68.0,134.0,91.0,97.0,117.0,180.0,124.0,115.31460674157304,3,False,1,True
358,0.0,1.0,1,String-searching algorithm,,22.0,String Search,2.0,Single String Search,248.0,Automaton-based oracle,,1,1,O(m) + O(mn),,,[https://link.springer.com/chapter/10.1007/3-540-47849-3_18 BOM (Backward Oracle Matching) (1999)],BOM (Backward Oracle Matching),1999,https://link.springer.com/chapter/10.1007/3-540-47849-3_18,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(m) + O(mn),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://link.springer.com/content/pdf/10.1007/3-540-47849-3_18.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://www-igm.univ-mlv.fr/~lecroq/string/bom.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,String-searching_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/String-searching_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2773.0,5263.0,5188.0,5778.0,7167.0,7633.0,7099.0,6495.0,6400.0,7677.0,7688.0,7414.0,6259.0,6848.0,6563.0,7323.0,8254.0,8999.0,7680.0,7173.0,7619.0,10836.0,10133.0,9082.0,8474.0,7050.0,7302.0,9614.0,8399.0,8704.0,8516.0,7626.0,7167.0,8127.0,7699.0,7421.0,6913.0,7063.0,6528.0,6548.0,7653.0,8204.0,7028.0,7192.0,6346.0,6913.0,7034.0,7020.0,5817.0,5014.0,4938.0,5339.0,5890.0,6620.0,5914.0,5488.0,5214.0,6168.0,4961.0,5130.0,4386.0,4032.0,6916.064516129032,3,False,1,False
359,1.0,0.0,1,Apostolico–Giancarlo algorithm,,22.0,String Search,2.0,Single String Search,249.0,Variant of BM,,1,1,O(m + s) + O(n),,,[https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1 Apostolico–Giancarlo Algorithm (1986)],Apostolico–Giancarlo Algorithm,1986,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,,,,0.0,0,3,"n: 3,
m: 3,
m+n: 3,
s: 3",O(m + s) + O(n),"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,0.0,1.0,,0,,0,,0,0,,0,0,http://www.darkridge.com/~jpr5/mirror/string/node16.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,Apostolico%E2%80%93Giancarlo_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Apostolico%E2%80%93Giancarlo_algorithm/monthly/20150701/20230731,147.0,145.0,216.0,238.0,318.0,341.0,318.0,264.0,303.0,261.0,282.0,211.0,243.0,323.0,223.0,237.0,248.0,260.0,229.0,203.0,392.0,269.0,230.0,265.0,185.0,239.0,226.0,258.0,247.0,190.0,277.0,357.0,236.0,239.0,230.0,203.0,191.0,184.0,204.0,214.0,216.0,215.0,209.0,190.0,233.0,233.0,235.0,165.0,167.0,164.0,131.0,180.0,230.0,208.0,249.0,263.0,262.0,351.0,148.0,168.0,130.0,132.0,185.0,143.0,155.0,135.0,102.0,112.0,167.0,121.0,151.0,140.0,124.0,124.0,119.0,101.0,110.0,80.0,104.0,121.0,160.0,114.0,158.0,113.0,212.0,171.0,172.0,191.0,163.0,174.0,122.0,141.0,146.0,145.0,162.0,110.0,112.0,197.7835051546392,3,True,1,False
360,0.0,1.0,1,BLAST (biotechnology),O(mn/log^2(n)),23.0,Sequence Alignment,1.0,"Edit Sequence, constant-size alphabet",258.0,,,1,1,O(mn),,,[https://www.ncbi.nlm.nih.gov/pubmed/9254694 Gapped BLAST (1997)],Gapped BLAST,1997,https://www.ncbi.nlm.nih.gov/pubmed/9254694,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",O(mn)?,"Uses at most a constant number of O(m)*O(n) arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,BLAST_%28biotechnology%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/BLAST_%28biotechnology%29/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3550.0,7131.0,11025.0,13446.0,16120.0,13943.0,12256.0,12561.0,11885.0,13443.0,10900.0,10189.0,8432.0,8242.0,12489.0,14342.0,11316.0,11839.0,10830.0,10658.0,12312.0,11596.0,10015.0,10382.0,10796.0,8921.0,9277.0,9854.0,10678.0,10519.0,9383.0,10260.0,11613.0,11029.0,11010.0,10055.0,7693.0,6892.0,8005.0,8065.0,9816.0,8684.0,8018.0,7470.0,9950.0,8860.0,11159.0,8093.0,7300.0,10251.061224489797,4.99,False,3,False
361,1.0,0.0,1,BLAST (biotechnology),O(mn/log^2(n)),23.0,Sequence Alignment,1.0,"Edit Sequence, constant-size alphabet",259.0,,,1,1,O(mn),,,[https://www.ncbi.nlm.nih.gov/pubmed/2231712 Basic Local Alignment Search Tool (BLAST) (1990)],Basic Local Alignment Search Tool (BLAST),1990,https://www.ncbi.nlm.nih.gov/pubmed/2231712,,,,0.0,0,5,"n: 3,
m: 3,
m+n: 5",O(mn),"n, m: lengths of input strings; assume n≥m",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",O(mn)?,"Uses at most a constant number of O(m)*O(n) arrays, whose contents are of size O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000.0,1,,,,,,,,4,,,Bioinformatics,BLAST_%28biotechnology%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/BLAST_%28biotechnology%29/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3550.0,7131.0,11025.0,13446.0,16120.0,13943.0,12256.0,12561.0,11885.0,13443.0,10900.0,10189.0,8432.0,8242.0,12489.0,14342.0,11316.0,11839.0,10830.0,10658.0,12312.0,11596.0,10015.0,10382.0,10796.0,8921.0,9277.0,9854.0,10678.0,10519.0,9383.0,10260.0,11613.0,11029.0,11010.0,10055.0,7693.0,6892.0,8005.0,8065.0,9816.0,8684.0,8018.0,7470.0,9950.0,8860.0,11159.0,8093.0,7300.0,10251.061224489797,4.99,False,3,False
362,1.0,0.0,1,Nested loop join,,24.0,Joins,1.0,,262.0,,,1,1,O(nm),,,[- Nested loop join (1960)],Nested loop join,1960,-,1,1.0,https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/nested-loop-joins.html,1.0,0,5,"n: 3,
m: 3,
m+n: 5",O(nm),"n, m: sizes of input tables",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",O(1),Just need to keep track of which rows are being checked,1.0,0.0,,0,,0,,0,0,,0,0,https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/nested-loop-joins.html,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,250000.0,1,,2.5E+11,1,,2.50E+17,1,,4,,,Databases,Nested_loop_join,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Nested_loop_join/monthly/20150701/20230731,988.0,918.0,1065.0,1402.0,1571.0,1463.0,1189.0,1502.0,1246.0,1292.0,1181.0,1091.0,816.0,1008.0,1023.0,1256.0,1696.0,1438.0,1338.0,1266.0,1325.0,1278.0,1138.0,1054.0,878.0,831.0,1051.0,1346.0,1576.0,1201.0,1336.0,1047.0,1111.0,1348.0,1262.0,1233.0,1037.0,1088.0,1019.0,1435.0,1342.0,1341.0,1359.0,1012.0,1142.0,1307.0,1190.0,936.0,919.0,792.0,996.0,1146.0,1386.0,1134.0,1139.0,1108.0,945.0,947.0,960.0,935.0,1310.0,919.0,1091.0,1307.0,1166.0,1273.0,1195.0,1200.0,1356.0,1134.0,953.0,1022.0,1016.0,1072.0,799.0,1113.0,1186.0,1163.0,1258.0,1147.0,1111.0,1209.0,956.0,942.0,819.0,731.0,866.0,1156.0,1331.0,1058.0,1035.0,1026.0,860.0,702.0,647.0,666.0,578.0,1121.1546391752577,3,False,1,True
363,1.0,0.0,1,Sort-merge join,,24.0,Joins,1.0,,263.0,,,1,1,O(nlogn + mlogm),,,[- Sort merge join (1960)],Sort merge join,1960,-,,,,1.0,4->5,4,"n: 3,
m: 3,
m+n: 4",O(nlogn + mlogm),"n, m: sizes of input tables",m+n,,,Word RAM,words,3,"n: 3,
m: 3,
m+n: 3",O(n+m)?,Need sorted lists of indices of input tables,1.0,0.0,,0,,0,,0,0,,0,0,https://use-the-index-luke.com/sql/join/sort-merge-join,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,8960.0,27.90178571,26.90178571,18931568.57,13205.45622,13204.45622,28897352854,8651311.463,8651310.463,4,,,Databases,Sort-merge_join,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sort-merge_join/monthly/20150701/20230731,1263.0,1060.0,1148.0,1491.0,1755.0,1547.0,1293.0,1516.0,1369.0,1736.0,1600.0,1236.0,1018.0,1010.0,994.0,1382.0,1518.0,1444.0,1308.0,1495.0,1826.0,1821.0,1767.0,1504.0,1083.0,1078.0,1279.0,1694.0,1821.0,1432.0,1431.0,1354.0,1678.0,1937.0,1765.0,1516.0,1368.0,1844.0,1298.0,1725.0,1845.0,1684.0,1513.0,1401.0,1558.0,1969.0,1787.0,1251.0,1005.0,842.0,1029.0,1513.0,1474.0,1440.0,1501.0,1391.0,1197.0,1389.0,1351.0,1256.0,1446.0,1308.0,1084.0,1240.0,1571.0,1157.0,1276.0,1290.0,1898.0,1520.0,1376.0,1364.0,1943.0,1180.0,943.0,1180.0,1372.0,1191.0,1274.0,1260.0,1242.0,1323.0,1341.0,1049.0,942.0,890.0,923.0,1083.0,1508.0,1083.0,1132.0,1110.0,1201.0,1096.0,1093.0,926.0,845.0,1365.5670103092784,3,False,1,False
364,1.0,0.0,1,Hash join,,24.0,Joins,1.0,,264.0,,,1,1,O(n+m),,,[- Hash join (1960)],Hash join,1960,-,2,1.0,http://neuyilan.github.io/2018/01/04/hash%20join算法总结/Hash%20Join%20Algorithms.pdf,1.0,5->6,3,"n: 3,
m: 3,
m+n: 3",O(n+m),"n, m: sizes of input tables",m+n,,,Word RAM,words,3,"n: 3,
m: 3,
m+n: 3",O(n+m)?,Need a hash table of at least that size,1.0,0.0,,0,,0,,0,0,,0,0,https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,1000.0,250,249.0,1000000,250000,249999.0,1000000000,250000000,249999999.0,4,,,Databases,Hash_join,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hash_join/monthly/20150701/20230731,2070.0,2026.0,2166.0,2779.0,2709.0,2951.0,2327.0,2839.0,2765.0,3017.0,2736.0,2517.0,3620.0,2438.0,2779.0,3417.0,3490.0,3183.0,2855.0,3210.0,3876.0,3350.0,3421.0,3145.0,3040.0,2923.0,2556.0,3969.0,3837.0,3068.0,3685.0,3517.0,3733.0,3814.0,4189.0,3853.0,3567.0,3942.0,3168.0,4141.0,4039.0,3500.0,3396.0,3388.0,3807.0,3743.0,3374.0,2409.0,2618.0,2020.0,2534.0,3169.0,3262.0,2906.0,2908.0,2870.0,2444.0,3045.0,2363.0,2021.0,1852.0,1629.0,1897.0,2234.0,2365.0,2112.0,2143.0,2234.0,2650.0,2078.0,1880.0,2050.0,1756.0,1625.0,1442.0,2132.0,2312.0,2072.0,1963.0,1823.0,2714.0,2212.0,1785.0,1775.0,1610.0,1344.0,1708.0,2085.0,2606.0,2517.0,1704.0,1771.0,1862.0,1733.0,1581.0,1537.0,1279.0,2665.7319587628867,3,True,1,False
365,1.0,0.0,1,Ford–Fulkerson algorithm,,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,284.0,,,1,1,O(VE),,,[https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/maximal-flow-through-a-network/5D6E55D3B06C4F7B1043BC1D82D40764 Ford–Fulkerson algorithm (1956)],Ford–Fulkerson algorithm,1956,https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/maximal-flow-through-a-network/5D6E55D3B06C4F7B1043BC1D82D40764,,,,1.0,0,6,"V: 6,
E: 3",O(VE),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),creating new graph and using it as input to the Ford-Fulkerson algorithm,1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,"V:E
1:1",500.0,,500000.0,,500000000.0,,250000.0,1,,2.5E+11,1,,2.50E+17,1,,4,,"http://www.cs.kent.edu/~dragan/GraphAn/p23-galil.pdf

https://hal.archives-ouvertes.fr/hal-01740403/document",Combinatorics,Ford%E2%80%93Fulkerson_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ford%E2%80%93Fulkerson_algorithm/monthly/20150701/20230731,4829.0,4452.0,6009.0,9965.0,13498.0,12017.0,7113.0,6870.0,11003.0,12625.0,13133.0,8465.0,4574.0,4672.0,5844.0,11080.0,13968.0,12913.0,8929.0,7516.0,12727.0,12459.0,11210.0,8623.0,5645.0,4609.0,5803.0,10856.0,13603.0,11333.0,7695.0,6369.0,10167.0,12132.0,10418.0,7495.0,4803.0,4632.0,8729.0,10933.0,13682.0,12072.0,7702.0,6601.0,8701.0,11643.0,9412.0,6594.0,4473.0,3865.0,5122.0,9601.0,12861.0,10187.0,6480.0,6151.0,7171.0,11178.0,9761.0,6805.0,5299.0,4450.0,5486.0,9772.0,13639.0,12641.0,8122.0,6404.0,10793.0,11429.0,9850.0,7231.0,5443.0,4815.0,4963.0,8880.0,11437.0,10271.0,6974.0,6294.0,8696.0,9551.0,9363.0,7159.0,4751.0,4260.0,4717.0,9147.0,12176.0,10558.0,7549.0,6568.0,8859.0,9146.0,8084.0,6495.0,4472.0,8510.536082474227,3,False,3,False
366,1.0,0.0,1,Hopcroft–Karp algorithm,,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,285.0,,,1,1,$O((V^0.5)E)$,,,[https://epubs.siam.org/doi/10.1137/0202019 Hopcroft–Karp algorithm (1973)],Hopcroft–Karp algorithm,1973,https://epubs.siam.org/doi/10.1137/0202019,,,,1.0,0,5.5,"V: 5.5,
E: 3",O((V^0.5)E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,V: 3,O(V),"maximal set of vertex-disjoint shortest augmenting paths uses O(V) space to store, taking symmetric difference also uses O(V) space",1.0,0.0,,0,,0,,0,0,,0,0,for PDF: https://web.eecs.umich.edu/~pettie/matching/Hopcroft-Karp-bipartite-matching.pdf,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,500.0,,500000.0,,500000000.0,,,,,,,,,,,4,,,Combinatorics,Hopcroft%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hopcroft%E2%80%93Karp_algorithm/monthly/20150701/20230731,1720.0,1816.0,2402.0,2989.0,3162.0,3148.0,2535.0,2404.0,2772.0,3408.0,4049.0,2485.0,1657.0,2033.0,2392.0,3271.0,2940.0,2764.0,2903.0,2592.0,3376.0,3374.0,3774.0,3468.0,2301.0,2299.0,2487.0,3462.0,3392.0,2847.0,2901.0,2859.0,2809.0,2534.0,2782.0,2145.0,1553.0,1796.0,1872.0,2563.0,2780.0,2051.0,2024.0,1937.0,2237.0,2383.0,2181.0,1905.0,1517.0,1757.0,1792.0,3075.0,2644.0,2344.0,2767.0,2200.0,2125.0,2597.0,2492.0,1820.0,1631.0,1667.0,1793.0,2365.0,2335.0,2820.0,1932.0,1858.0,2594.0,2124.0,2436.0,1929.0,1665.0,1511.0,1601.0,1870.0,1781.0,1870.0,1882.0,1674.0,2277.0,1775.0,2358.0,1480.0,1395.0,1397.0,1465.0,1775.0,1914.0,1897.0,1792.0,2144.0,2422.0,2036.0,2199.0,1729.0,1482.0,2304.5257731958764,3,False,3,True
367,0.0,1.0,1,Maximum cardinality matching,,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,287.0,,,1,1,$O(V^{(omega/2)})$ where omega is the exponent on matrix multiplication,,,[https://link.springer.com/article/10.1007/s00453-005-1187-5 Mucha; Sankowski (planar) (2006)],Mucha; Sankowski (planar),2006,https://link.springer.com/article/10.1007/s00453-005-1187-5,,,,1.0,0,4.1864298,V: 4.1864298,O(V^{(\omega/2)}) where omega is the exponent on matrix multiplication,"V: number of vertices
E: number of edges",V,,,Word RAM,words,4,V: 4,O(V \log V)???,Paper mentions matrices with O(VlogV) nonempty entries; unclear if there are any other space-consuming objects (on first passthrough) as planar graphs only require O(V) space,0.0,1.0,,1,Monte Carlo,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,1608.334452,155.4403063,0.106193935,5893541.76,42419.31426,0.237517283,21596151485,11576136.62,0.384430864,4,,,Combinatorics,Maximum_cardinality_matching,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_cardinality_matching/monthly/20150701/20230731,67.0,104.0,73.0,80.0,106.0,100.0,72.0,76.0,125.0,82.0,86.0,56.0,59.0,42.0,61.0,87.0,82.0,65.0,79.0,41.0,53.0,74.0,75.0,67.0,53.0,36.0,64.0,60.0,55.0,56.0,44.0,46.0,63.0,50.0,55.0,42.0,41.0,44.0,45.0,63.0,69.0,53.0,59.0,179.0,573.0,745.0,831.0,578.0,470.0,451.0,496.0,1117.0,823.0,907.0,800.0,694.0,822.0,1122.0,815.0,616.0,555.0,616.0,678.0,845.0,1198.0,1257.0,804.0,746.0,1120.0,978.0,894.0,873.0,574.0,504.0,815.0,769.0,915.0,795.0,767.0,746.0,828.0,1159.0,1601.0,1357.0,1060.0,895.0,1233.0,1398.0,1820.0,1433.0,1293.0,1416.0,1747.0,1562.0,1484.0,1158.0,1024.0,554.2886597938144,3,False,3,False
368,0.0,1.0,1,Maximum cardinality matching,,28.0,Maximum Cardinality Matching,2.0,Bipartite Graph MCM,288.0,Based on electric flows,,1,1,O(E^{(10/7)}*polylog(V)),,,[https://arxiv.org/abs/1307.2205 Madry's algorithm (2013)],Madry's algorithm,2013,https://arxiv.org/abs/1307.2205,,,,0.0,0,5.857,"V: 5.857,
E: 4.42857",O(E^{10/7}*polylog(V)),"V: number of vertices
E: number of edges",V,https://arxiv.org/abs/1307.2205,0.0,Word RAM,words,5,"V: 5,
E: 3",O(E + V),Derived: Uses an augmented graph (copy of the original graph plus an additional node with edges between it and all other nodes),1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,Maximum_cardinality_matching,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_cardinality_matching/monthly/20150701/20230731,67.0,104.0,73.0,80.0,106.0,100.0,72.0,76.0,125.0,82.0,86.0,56.0,59.0,42.0,61.0,87.0,82.0,65.0,79.0,41.0,53.0,74.0,75.0,67.0,53.0,36.0,64.0,60.0,55.0,56.0,44.0,46.0,63.0,50.0,55.0,42.0,41.0,44.0,45.0,63.0,69.0,53.0,59.0,179.0,573.0,745.0,831.0,578.0,470.0,451.0,496.0,1117.0,823.0,907.0,800.0,694.0,822.0,1122.0,815.0,616.0,555.0,616.0,678.0,845.0,1198.0,1257.0,804.0,746.0,1120.0,978.0,894.0,873.0,574.0,504.0,815.0,769.0,915.0,795.0,767.0,746.0,828.0,1159.0,1601.0,1357.0,1060.0,895.0,1233.0,1398.0,1820.0,1433.0,1293.0,1416.0,1747.0,1562.0,1484.0,1158.0,1024.0,554.2886597938144,3,False,3,False
369,0.0,1.0,1,Maximum cardinality matching,,28.0,Maximum Cardinality Matching,1.0,Bipartite Graph MCM,289.0,,,1,1,"$O(min(V*k, E)+sqrt(k)*min(k^2, E))$",,,[https://arxiv.org/abs/1105.1569 Chandran and Hochbaum (2011)],Chandran and Hochbaum,2011,https://arxiv.org/abs/1105.1569,,,,0.0,0,3,"V: 3,
E: 3,
k: 5.5","O(min(V*k, E)+sqrt(k)*min(k^2, E))","V: number of vertices
E: number of edges
(k: size of maximum matching)",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E)??,Designs a flow network and runs pseudoflow algorithms on graph; space can be reused if too many residual graphs are created,1.0,0.0,,1,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,Maximum_cardinality_matching,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_cardinality_matching/monthly/20150701/20230731,67.0,104.0,73.0,80.0,106.0,100.0,72.0,76.0,125.0,82.0,86.0,56.0,59.0,42.0,61.0,87.0,82.0,65.0,79.0,41.0,53.0,74.0,75.0,67.0,53.0,36.0,64.0,60.0,55.0,56.0,44.0,46.0,63.0,50.0,55.0,42.0,41.0,44.0,45.0,63.0,69.0,53.0,59.0,179.0,573.0,745.0,831.0,578.0,470.0,451.0,496.0,1117.0,823.0,907.0,800.0,694.0,822.0,1122.0,815.0,616.0,555.0,616.0,678.0,845.0,1198.0,1257.0,804.0,746.0,1120.0,978.0,894.0,873.0,574.0,504.0,815.0,769.0,915.0,795.0,767.0,746.0,828.0,1159.0,1601.0,1357.0,1060.0,895.0,1233.0,1398.0,1820.0,1433.0,1293.0,1416.0,1747.0,1562.0,1484.0,1158.0,1024.0,554.2886597938144,3,True,3,False
370,0.0,0.0,0,,,28.0,Maximum Cardinality Matching,1.0,General Graph MCM,290.0,,,1,1,O((V^{0.5})E),,,[https://web.eecs.umich.edu/~pettie/matching/Blum-matching-ICALP90.pdf Blum (1990)],Blum,1990,https://web.eecs.umich.edu/~pettie/matching/Blum-matching-ICALP90.pdf,,,,0.0,0,5.5,"V: 5.5,
E: 3",O((V^{0.5})E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E)??,"Each phase, creates a separate directed graph and solves a reachability problem on it. Can reuse space across phases",1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
371,0.0,1.0,1,Tarjan's off-line lowest common ancestors algorithm,,28.0,Maximum Cardinality Matching,1.0,General Graph MCM,291.0,,,1,1,O((V^{0.5})E),,,[https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf Gabow; Tarjan (1991)],Gabow; Tarjan,1991,https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf,,,,0.0,0,5.5,"V: 5.5,
E: 3",O((V^{0.5})E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E)?,https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,Tarjan%27s_off-line_lowest_common_ancestors_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tarjan%27s_off-line_lowest_common_ancestors_algorithm/monthly/20150701/20230731,670.0,590.0,806.0,860.0,921.0,700.0,601.0,665.0,868.0,807.0,889.0,740.0,642.0,558.0,1167.0,713.0,781.0,654.0,769.0,690.0,820.0,611.0,599.0,814.0,809.0,585.0,706.0,744.0,776.0,731.0,808.0,797.0,690.0,531.0,572.0,599.0,523.0,557.0,619.0,719.0,759.0,619.0,621.0,735.0,618.0,611.0,629.0,625.0,690.0,609.0,560.0,724.0,732.0,795.0,725.0,691.0,576.0,727.0,1019.0,693.0,634.0,911.0,822.0,728.0,661.0,510.0,563.0,479.0,682.0,685.0,554.0,676.0,463.0,447.0,831.0,635.0,617.0,495.0,626.0,431.0,460.0,495.0,484.0,414.0,413.0,468.0,408.0,410.0,413.0,379.0,376.0,385.0,362.0,330.0,316.0,228.0,276.0,634.2886597938144,3,False,3,False
372,0.0,1.0,1,Maximum cardinality matching,,28.0,Maximum Cardinality Matching,1.0,General Graph MCM,292.0,,,1,1,O(V^{2.376}),,,"[https://ieeexplore.ieee.org/document/1366244 Mucha, Sankowski (general) (2004)]","Mucha, Sankowski (general)",2004,https://ieeexplore.ieee.org/document/1366244,,,,0.0,0,5.376,V: 5.376,O(V^{2.376}),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,V: 5,O(V^2)??,Algorithm uses/manipulates constant number of matrices and graphs?,1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,Maximum_cardinality_matching,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_cardinality_matching/monthly/20150701/20230731,67.0,104.0,73.0,80.0,106.0,100.0,72.0,76.0,125.0,82.0,86.0,56.0,59.0,42.0,61.0,87.0,82.0,65.0,79.0,41.0,53.0,74.0,75.0,67.0,53.0,36.0,64.0,60.0,55.0,56.0,44.0,46.0,63.0,50.0,55.0,42.0,41.0,44.0,45.0,63.0,69.0,53.0,59.0,179.0,573.0,745.0,831.0,578.0,470.0,451.0,496.0,1117.0,823.0,907.0,800.0,694.0,822.0,1122.0,815.0,616.0,555.0,616.0,678.0,845.0,1198.0,1257.0,804.0,746.0,1120.0,978.0,894.0,873.0,574.0,504.0,815.0,769.0,915.0,795.0,767.0,746.0,828.0,1159.0,1601.0,1357.0,1060.0,895.0,1233.0,1398.0,1820.0,1433.0,1293.0,1416.0,1747.0,1562.0,1484.0,1158.0,1024.0,554.2886597938144,3,False,3,False
373,0.0,0.0,0,,,28.0,Maximum Cardinality Matching,2.0,Planar Bipartite Graph Perfect Matching,293.0,,,1,1,O(V^{(4/3)} logV),,,[http://theory.stanford.edu/~virgi/cs267/papers/planar-sssp.pdf Klein (section 5) (1997)],Klein (section 5),1997,http://theory.stanford.edu/~virgi/cs267/papers/planar-sssp.pdf,,,,1.0,0,4.33,V: 4.33,O(V^{(4/3)} logV),"V: number of vertices
E: number of edges",V,,,Word RAM,words,4.33,V: 4.33,O(V^{(4/3)})?,"Considers and operates on a graph partition (which still takes up $O(E)=O(V)$ space), and computes shortest-path distances within each graph partition, the total of which requires $O(V^{(4/3)})$ space",1.0,0.0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,34851.25256,7.173343327,0.049231351,719145396.2,347.6348473,0.153396468,1.07272E+13,23305.14675,0.277977523,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
374,1.0,0.0,1,Diffie–Hellman key exchange,,29.0,Key Exchange,1.0,Key Exchange,294.0,,,1,1,O(mult(n)*n) where mult(n) is running time on n-bit multiplication,"Not sure if ""average case"" distribution makes sense here",(none),[https://ieeexplore.ieee.org/document/1055638 Diffie–Hellman key exchange (1978)],Diffie–Hellman key exchange,1978,https://ieeexplore.ieee.org/document/1055638,2,1.0,https://dl.acm.org/doi/10.1145/359460.359473,1.0,0,7,n: 7,O(mult(n)*n) where mult(n) is running time on n-bit multiplication,"n: maximum size of numbers (prime, base, keys), in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Each party only keeps track of a constant number of n-bit integers,1.0,0.0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,62500000000.0,1,,6.25E+22,1,,6.25E+34,1,,2,,,Cryptography,Diffie%E2%80%93Hellman_key_exchange,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Diffie%E2%80%93Hellman_key_exchange/monthly/20150701/20230731,33044.0,30330.0,46277.0,57761.0,49652.0,43099.0,47060.0,45410.0,61972.0,48120.0,45743.0,39979.0,35502.0,38069.0,36235.0,43680.0,43132.0,39531.0,37749.0,38380.0,46398.0,43039.0,42869.0,35531.0,32637.0,31044.0,34319.0,41290.0,42673.0,41711.0,41117.0,39513.0,43494.0,46826.0,43154.0,33699.0,32849.0,36039.0,34688.0,46612.0,41911.0,38928.0,38465.0,38091.0,43404.0,45016.0,43916.0,34981.0,33915.0,35701.0,37164.0,46899.0,48916.0,42243.0,42068.0,43405.0,44217.0,50442.0,47405.0,43619.0,38853.0,37088.0,41008.0,47399.0,47714.0,47724.0,47141.0,44064.0,50819.0,46165.0,44777.0,40547.0,36007.0,34374.0,37578.0,47748.0,43942.0,43094.0,41104.0,40771.0,47216.0,43071.0,45334.0,39116.0,33836.0,34231.0,38124.0,44519.0,48750.0,41256.0,41205.0,38155.0,42479.0,40332.0,46501.0,38307.0,34583.0,41709.948453608245,7,True,3,True
375,1.0,0.0,1,Elliptic-curve Diffie–Hellman,,29.0,Key Exchange,1.0,Key Exchange,295.0,,,1,1,O(mult(n)*n^2)? where mult(n) is running time on n-bit multiplication,^see above,(none),[https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14 Elliptic-curve Diffie-Hellman (ECDH) (2006)],Elliptic-curve Diffie-Hellman (ECDH),2006,https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14,2,1.0,,0.0,0,7,n: 7,O(mult(n)*n^2)? where mult(n) is running time on n-bit multiplication,"n: maximum size of numbers (prime, parameters, keys), in bits",n,,,Word RAM?,bits,3,n: 3,O(n),Each party only keeps track of a constant number of n-bit integers,1.0,0.0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,125000000.0,500,,1.25E+17,500000,,1.25E+26,500000000,,2,,,Cryptography,Elliptic-curve_Diffie%E2%80%93Hellman,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Elliptic-curve_Diffie%E2%80%93Hellman/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,1324.0,5059.0,5860.0,6218.0,6672.0,6465.0,6850.0,6794.0,6889.0,6155.0,6354.0,6229.0,6087.0,7167.0,7203.0,6308.0,6776.0,6564.0,7113.0,7104.0,7082.0,6015.0,6555.0,6008.0,5932.0,7124.0,7289.0,6283.0,6946.0,6518.0,6639.0,7652.0,7456.0,7063.0,6246.0,5736.0,6476.0,6855.0,7556.0,6763.0,8013.0,6990.0,8992.0,7932.0,8110.0,7889.0,6887.0,6765.0,6749.0,7517.0,7972.0,8147.0,7592.0,7543.0,8696.0,7887.0,7998.0,7014.0,6174.0,6287.0,6216.0,6922.0,7850.0,7128.0,8127.0,7381.0,8681.0,7580.0,8389.0,7179.0,6580.0,6937.633802816901,7,True,3,True
376,1.0,0.0,1,Peterson's algorithm,,30.0,Mutual Exclusion,1.0,,297.0,,,1,1,O(n),^see above,(none),[https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf Peterson's algorithm (1981)],Peterson's algorithm,1981,https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf,,,,0.0,0,3,n: 3,O(n),n: number of processes,n,,,,communication variables?,3,n: 3,$O(n)$ total,"see original paper (""requires $2n-1$ shared variables of size $n$"")",0.0,1.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000.0,1,,,,,,,,6,,,Operating Systems,Peterson%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Peterson%27s_algorithm/monthly/20150701/20230731,2895.0,3883.0,5024.0,6870.0,5967.0,4564.0,3682.0,5895.0,6630.0,5584.0,4875.0,3480.0,2500.0,3513.0,5092.0,6556.0,24812.0,5095.0,4372.0,6104.0,7130.0,6310.0,6656.0,3918.0,3400.0,4482.0,5713.0,7026.0,7020.0,4882.0,4813.0,5778.0,6729.0,6246.0,5532.0,4030.0,3056.0,3761.0,4979.0,6647.0,5817.0,4574.0,3914.0,5219.0,5903.0,5756.0,5147.0,3724.0,2678.0,3374.0,5583.0,6666.0,5769.0,4608.0,4424.0,5204.0,4696.0,5457.0,5308.0,4471.0,3275.0,2759.0,4060.0,6158.0,5824.0,5455.0,4873.0,4670.0,6729.0,5106.0,4851.0,5003.0,4539.0,3771.0,4052.0,5780.0,5221.0,4692.0,4362.0,4772.0,5821.0,5405.0,6199.0,4832.0,4296.0,3556.0,3767.0,5111.0,4952.0,4133.0,3678.0,3898.0,5676.0,5970.0,3956.0,3255.0,2656.0,5122.742268041237,2,False,3,True
377,1.0,0.0,1,Naimi–Trehel algorithm,,30.0,Mutual Exclusion,1.0,,303.0,,,1,1,O(logn),^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416 Naimi-Trehel's algorithm (1996)],Naimi-Trehel's algorithm,1996,https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416,,,,0.0,0,2,n: 2,O(\log n),n: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process keeps track of a constant number of variables (see algorithm description),1.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,,,,,,,6,,,Operating Systems,Naimi%E2%80%93Trehel_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Naimi%E2%80%93Trehel_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,16.0,20.0,23.0,11.0,17.5,2,True,3,True
378,0.0,0.0,0,,,30.0,Mutual Exclusion,1.0,,305.0,,,1,1,O(logn),^see above,(none),[https://ieeexplore.ieee.org/document/113817 Chan-Singhal-Liu (1990)],Chan-Singhal-Liu,1990,https://ieeexplore.ieee.org/document/113817,,,,0.0,0,2,n: 2,O(\log n),n: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process seems to keep track of a constant number of variables (see algorithm description),1.0,0.0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,0.333813684,19.93156857,50171.66594,0.966883593,29.89735285,33447777.3,1.953064644,6,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,True,3,True
379,0.0,1.0,1,Gödel Prize,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,306.0,Spectral Sparsification,,1,0,O(m log^c n),,,"[https://dl.acm.org/doi/pdf/10.1145/1007352.1007372?casa_token=k60CrC_UJp0AAAAA:yGVve4fRNbftRM0P7aaEbq8OIlxa4nRy8-CjZErlGrBwBfPEt0ECHGYc8Ei48rdA9W9NoY73xC2W Spielman, Teng  (2004)]","Spielman, Teng",2004,https://dl.acm.org/doi/pdf/10.1145/1007352.1007372?casa_token=k60CrC_UJp0AAAAA:yGVve4fRNbftRM0P7aaEbq8OIlxa4nRy8-CjZErlGrBwBfPEt0ECHGYc8Ei48rdA9W9NoY73xC2W,,,,0.0,0,4,"m: 3,
n: 5.01,
n^2: 4",O(m \log^c n),"n: dimension of matrix
m: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Uses spanning trees and sparse Cholesky factorization which both take $O(n)$ space,1.0,0.0,,0,,1,\epsilon,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,G%C3%B6del_Prize,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/G%C3%B6del_Prize/monthly/20150701/20230731,1933.0,2271.0,2541.0,2620.0,3037.0,2586.0,2516.0,2495.0,2475.0,2395.0,2784.0,2213.0,2226.0,2138.0,2356.0,2517.0,2474.0,2391.0,2476.0,2637.0,3500.0,3001.0,2713.0,2513.0,2457.0,2488.0,2487.0,2997.0,2709.0,2679.0,3214.0,2637.0,3596.0,2877.0,2764.0,2391.0,2475.0,2875.0,2395.0,3150.0,2568.0,2351.0,2576.0,2565.0,3196.0,2669.0,2380.0,2345.0,2177.0,2135.0,2429.0,2730.0,2715.0,2743.0,2700.0,2287.0,2323.0,2770.0,2652.0,1880.0,1905.0,1935.0,1728.0,2170.0,1985.0,2065.0,1933.0,2085.0,3320.0,2908.0,3648.0,2275.0,2086.0,1897.0,2182.0,2296.0,2061.0,2090.0,2530.0,2306.0,2055.0,2266.0,3011.0,2166.0,2224.0,1800.0,1981.0,2072.0,1953.0,1894.0,2453.0,2185.0,3316.0,2638.0,2524.0,2549.0,2190.0,2472.907216494845,2.5,False,2.5,True
380,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,307.0,Using maximum-weight spanning trees,,1,0,O(mn^{(3/4)}),,,[ Vaidya (1990)],Vaidya,1990,,,,,1.0,0,4.375,"n: 5.75,
m: 3,
n^2: 4.375",O(mn^{(3/4)}),"n: dimension of matrix
m: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Uses a spanning tree (size $O(n)$),1.0,0.0,,0,,1,\epsilon,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,2732020.846,Inf,,2.73202E+12,Inf,,2.73E+18,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,True
381,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,308.0,Support Tree Conjugate Gradients (STCG),,1,1,O(n^2),,,[https://www.cs.cmu.edu/~glmiller/Publications/Papers/GrMiZa94-tr.pdf Gremban; Miller; Zagha (1995)],Gremban; Miller; Zagha,1995,https://www.cs.cmu.edu/~glmiller/Publications/Papers/GrMiZa94-tr.pdf,,,,1.0,3->4,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),https://www.cs.cmu.edu/~glmiller/Publications/Papers/GrMiZa94-tr.pdf,0.0,1.0,,0,,1,?,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000000.0,Inf,,1E+12,Inf,,1.00E+18,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,False
382,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,311.0,Maximum-weight-basis (MWB) preconditioners,,1,0,O(n  log(1/ϵ) ),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/nla.343 Boman; Chen; Hendrickson; Toledo (2004)],Boman; Chen; Hendrickson; Toledo,2004,https://onlinelibrary.wiley.com/doi/abs/10.1002/nla.343,,,,0.0,0,2.5,"n: 3,
n^2: 2.5",O(n  \log(1/ϵ) ),"n: dimension of matrix
m: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: The preconditioners used have $O(n)$ non-zero entries,1.0,0.0,,0,,1,\epsilon,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,True,2.5,True
383,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,312.0,Incremental sparsifier,,1,0,$\tilde{O}(m log n)$,,,[https://arxiv.org/abs/1102.4842 Koutis; Miller and Peng (2010)],Koutis; Miller and Peng,2010,https://arxiv.org/abs/1102.4842,,,,0.0,0,4,"m: 3,
n: 5.01,
n^2: 4",$\tilde{O}(m \log n)$,"n: dimension of matrix
m: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Derived: Uses an auxiliary chain of graphs, which can be kept track of with a single spanning tree",1.0,0.0,,0,,1,\epsilon,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,True
384,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,313.0,Incremental sparsifier,,1,0,$\tilde{O}(m log n)$,,,[https://arxiv.org/abs/1003.2958 Koutis; Miller and Peng (2011)],Koutis; Miller and Peng,2011,https://arxiv.org/abs/1003.2958,,,,0.0,0,4,"m: 3,
n: 5.01,
n^2: 4",$\tilde{O}(m \log n)$,"n: dimension of matrix
m: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Derived: Uses an auxiliary chain of graphs, which can be kept track of with a single spanning tree",1.0,0.0,,0,,1,\epsilon,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,True
385,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,314.0,Combinatorial multigrid,,1,0,O(n logn),,,[https://ieeexplore.ieee.org/document/5644892 Blelloch; Koutis;  Miller; Tangwongsan (2010)],Blelloch; Koutis;  Miller; Tangwongsan,2010,https://ieeexplore.ieee.org/document/5644892,,,,1.0,4->5,2.51,"n: 4,
n^2: 2.51",O(n \log n),"n: dimension of matrix
m: number of non-zero entries",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5,
m: 3",m + O(n/\log n),https://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/jkoutis/papers/SC10-paper.pdf,0.0,1.0,,0,,1,?,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,9965.784285,Inf,,19931568.57,Inf,,29897352854,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,True
386,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,316.0,Low-stretch spanning tree,,1,0,$O(m log^2 (n) loglogn log(1/ϵ) )$,,,[https://arxiv.org/pdf/1301.6628.pdf Kelner; Orecchia; Sidford; Zhu (2013)],Kelner; Orecchia; Sidford; Zhu,2013,https://arxiv.org/pdf/1301.6628.pdf,,,,0.0,0,4.011,"n: 5.021,
m: 3,
n^2: 4.011",O(m \log^2 (n) \log \log n),"n: dimension of matrix
m: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Uses a spanning tree of the graph that the Laplacian is for,1.0,0.0,,0,,1,\epsilon,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,True
387,0.0,1.0,1,Ramanujan graph,,31.0,SDD Systems Solvers,2.0,Inexact Laplacian Solver,317.0,Recursive algorithm with sparse Cholesky factorization of Laplacian,,1,0,O(n),,,[https://arxiv.org/abs/1506.08204 Lee; Peng; Spielman (2015)],Lee; Peng; Spielman,2015,https://arxiv.org/abs/1506.08204,2,1.0,https://arxiv.org/pdf/1506.08204.pdf,1.0,5->6,2.5,"n: 3,
n^2: 2.5",O(n),n: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Uses an auxiliary sparse Cholesky decomposition which has $O(n)$ non-zero entries,1.0,0.0,,0,,1,The sparse Cholesky decomposition is a 2-approximation,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000.0,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Numerical Analysis,Ramanujan_graph,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ramanujan_graph/monthly/20150701/20230731,670.0,578.0,673.0,752.0,838.0,1039.0,807.0,855.0,1236.0,1560.0,1863.0,1018.0,826.0,1806.0,1679.0,1278.0,1174.0,1424.0,1099.0,1024.0,1176.0,1091.0,872.0,779.0,783.0,702.0,777.0,936.0,829.0,1048.0,884.0,785.0,885.0,774.0,882.0,848.0,809.0,870.0,746.0,833.0,771.0,1028.0,992.0,870.0,893.0,866.0,815.0,792.0,912.0,895.0,897.0,962.0,949.0,1140.0,975.0,753.0,811.0,883.0,723.0,710.0,735.0,606.0,608.0,700.0,686.0,1129.0,1750.0,982.0,1008.0,818.0,855.0,795.0,632.0,651.0,684.0,733.0,868.0,2635.0,1301.0,1146.0,1009.0,826.0,932.0,900.0,746.0,790.0,817.0,770.0,831.0,2037.0,886.0,846.0,906.0,801.0,863.0,1005.0,746.0,950.2886597938144,2.5,True,2.5,True
388,0.0,0.0,0,,,31.0,SDD Systems Solvers,1.0,Inexact Laplacian Solver,318.0,Support Theory (Trusses and Stiffness Matrices),,1,0,$O(n^{5/4} (log^2 (n) loglogn)^{3/4} log(1/ϵ))$,,,[https://arxiv.org/abs/cs/0703119 Daitch; Spielman (2007)],Daitch; Spielman,2007,https://arxiv.org/abs/cs/0703119,,,,0.0,0,2.635,"n: 4.25,
n^2: 2.635",O(n^{5/4} (\log^2 (n) \log\log n)^{3/4} \log(1/ϵ)),n: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),Derived: Uses an auxiliary sparse Cholesky decomposition which has $O(n)$ non-zero entries,1.0,0.0,,0,,1,\epsilon,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,True
389,1.0,0.0,1,Gaussian elimination,,31.0,SDD Systems Solvers,2.0,Exact Laplacian Solver,319.0,Use Gaussian elimination to compute the inverse of the Laplacian to solve for x,,1,1,O(n^3),,,[- Gaussian Elimination (-150)],Gaussian Elimination,-150,-,1,1.0,,1.0,1->3,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of the matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",O(n^2),Derived: Storing the inverse of the Laplacian,1.0,0.0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/e31c/0ce119f452e1804461c375f9814a6050519b.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000000000.0,Inf,,1.00E+18,Inf,,1.00E+27,Inf,,1,,,Numerical Analysis,Gaussian_elimination,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Gaussian_elimination/monthly/20150701/20230731,15718.0,18251.0,31192.0,33843.0,31236.0,25689.0,26522.0,29663.0,29500.0,28482.0,25850.0,17963.0,14537.0,20206.0,31157.0,36059.0,35924.0,25426.0,27779.0,30919.0,32654.0,30338.0,30035.0,19964.0,17397.0,21278.0,33339.0,38649.0,36315.0,28428.0,31472.0,33819.0,35398.0,37122.0,31551.0,18818.0,16758.0,21660.0,36074.0,40546.0,36621.0,31146.0,31395.0,34144.0,35808.0,30730.0,26582.0,18804.0,18064.0,22081.0,34593.0,37075.0,35316.0,28111.0,30437.0,30844.0,27609.0,31577.0,32235.0,25616.0,20464.0,22798.0,36561.0,40045.0,37827.0,32568.0,31988.0,32124.0,37719.0,32258.0,26482.0,23534.0,20020.0,23377.0,31353.0,34387.0,32118.0,25530.0,28008.0,27300.0,28962.0,27081.0,25393.0,18963.0,15535.0,18079.0,28520.0,33621.0,32247.0,22699.0,23865.0,24857.0,28613.0,26085.0,26843.0,19624.0,16170.0,28246.77319587629,2.5,False,2.5,False
390,0.0,0.0,0,,,31.0,SDD Systems Solvers,2.0,Exact Laplacian Solver,320.0,Explicitly calculating the inverse of the Laplacian to solve for x,,1,1,O(n!),,,[- Naive Implementation (1940)],Naive Implementation,1940,-,1,1.0,,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: dimension of matrix,n^2,,,Word RAM,Word RAM,3,"n: 5,
n^2: 3",O(n^2),Derived: The Leibniz formula for the determinant of the Laplacian can be computed with constant space. The adjugate matrix of the Laplacian takes $n^2$ space.,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,False
391,0.0,1.0,1,Cycle detection,,32.0,Cycle Detection,1.0,,321.0,,,1,1,O((\lambda + \mu) t_f),"S = {0, ..., N-1}
F = {f | f: S -> S}
f chosen randomly from the N^N functions in F
",,[http://pds7.egloos.com/pds/200801/07/29/p636-floyd.pdf Floyd's tortoise and hare algorithm (1967)],Floyd's tortoise and hare algorithm,1967,http://pds7.egloos.com/pds/200801/07/29/p636-floyd.pdf,3,0.0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,1.0,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",O((\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,O(1),Algorithmic Cryptanalysis,0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Cycle_detection,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,Cycle_detection,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cycle_detection/monthly/20150701/20230731,20214.0,59522.0,7905.0,9453.0,8264.0,7573.0,7251.0,8500.0,8136.0,7663.0,7985.0,6426.0,6358.0,6584.0,7286.0,8531.0,8114.0,6478.0,7160.0,7304.0,7630.0,6840.0,7098.0,6595.0,6574.0,6036.0,6556.0,7432.0,8830.0,6817.0,6734.0,6199.0,6684.0,6707.0,6298.0,6443.0,6192.0,6659.0,5975.0,6980.0,5818.0,6163.0,6091.0,5773.0,6902.0,6549.0,6603.0,5790.0,5328.0,5735.0,6133.0,6450.0,5997.0,6905.0,6327.0,20925.0,26268.0,16389.0,10591.0,10482.0,8477.0,11223.0,9550.0,10598.0,8803.0,8987.0,9228.0,8503.0,9354.0,9125.0,8777.0,8503.0,9214.0,9042.0,9406.0,8736.0,7700.0,7997.0,9586.0,8632.0,10138.0,7893.0,7483.0,7788.0,8946.0,9271.0,8879.0,8318.0,8926.0,7529.0,6782.0,6379.0,7493.0,5600.0,6280.0,6141.0,6057.0,8665.453608247422,3,True,1,True
392,1.0,0.0,1,Cycle detection,,32.0,Cycle Detection,1.0,,322.0,,,1,1,O((\lambda + \mu) t_f),,,[https://maths-people.anu.edu.au/~brent/pd/rpb005.pdf Brent's algorithm (1973)],Brent's algorithm,1973,https://maths-people.anu.edu.au/~brent/pd/rpb005.pdf,,,,0.0,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",O((\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,O(1),Algorithmic Cryptanalysis,0.0,0.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics,Cycle_detection,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cycle_detection/monthly/20150701/20230731,20214.0,59522.0,7905.0,9453.0,8264.0,7573.0,7251.0,8500.0,8136.0,7663.0,7985.0,6426.0,6358.0,6584.0,7286.0,8531.0,8114.0,6478.0,7160.0,7304.0,7630.0,6840.0,7098.0,6595.0,6574.0,6036.0,6556.0,7432.0,8830.0,6817.0,6734.0,6199.0,6684.0,6707.0,6298.0,6443.0,6192.0,6659.0,5975.0,6980.0,5818.0,6163.0,6091.0,5773.0,6902.0,6549.0,6603.0,5790.0,5328.0,5735.0,6133.0,6450.0,5997.0,6905.0,6327.0,20925.0,26268.0,16389.0,10591.0,10482.0,8477.0,11223.0,9550.0,10598.0,8803.0,8987.0,9228.0,8503.0,9354.0,9125.0,8777.0,8503.0,9214.0,9042.0,9406.0,8736.0,7700.0,7997.0,9586.0,8632.0,10138.0,7893.0,7483.0,7788.0,8946.0,9271.0,8879.0,8318.0,8926.0,7529.0,6782.0,6379.0,7493.0,5600.0,6280.0,6141.0,6057.0,8665.453608247422,3,True,1,True
393,1.0,0.0,1,Gosper's algorithm,,32.0,Cycle Detection,1.0,,323.0,,,1,1,O((\lambda + \mu) log(\lambda + \mu) t_f),,,[https://www.inwap.com/pdp10/hbaker/hakmem/flows.html#item132 Gosper's algorithm (1978)],Gosper's algorithm,1978,https://www.inwap.com/pdp10/hbaker/hakmem/flows.html#item132,,,,0.0,0,4,"\lambda: 4,
\mu: 4,
t_f: 3",O((\lambda + \mu) log(\lambda + \mu) t_f),"t_f: time to perform one evaluation of f
\mu: the starting index of the cycle
\lambda: the period of the cycle",\mu,,,,,2,"\mu: 2,
\lambda: 2",\Theta(log(\mu + \lambda)),https://en.wikipedia.org/wiki/Cycle_detection#Gosper's_algorithm,0.0,0.0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics,Gosper%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Gosper%27s_algorithm/monthly/20150701/20230731,221.0,220.0,210.0,236.0,239.0,231.0,299.0,288.0,253.0,255.0,240.0,213.0,200.0,199.0,203.0,209.0,211.0,234.0,236.0,229.0,282.0,201.0,218.0,211.0,198.0,233.0,255.0,222.0,204.0,183.0,260.0,245.0,194.0,234.0,236.0,260.0,181.0,165.0,194.0,234.0,281.0,287.0,261.0,259.0,304.0,248.0,260.0,242.0,225.0,237.0,233.0,283.0,293.0,300.0,294.0,263.0,252.0,387.0,276.0,274.0,213.0,219.0,265.0,252.0,257.0,253.0,210.0,258.0,262.0,239.0,244.0,213.0,176.0,207.0,267.0,277.0,236.0,376.0,352.0,251.0,325.0,317.0,329.0,282.0,317.0,290.0,297.0,478.0,465.0,316.0,347.0,236.0,264.0,321.0,312.0,269.0,327.0,257.87628865979383,3,False,1,False
394,1.0,0.0,1,Fisher–Yates shuffle,O(n),33.0,Generating Random Permutations,2.0,General Permutations,326.0,,,1,1,O(n^2),From randomness in the algorithm itself,(none),[https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135 Fisher–Yates/Knuth shuffle (1938)],Fisher–Yates/Knuth shuffle,1938,https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135,,,,0.0,0,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of which elements have been struck out already,1.0,0.0,,1,??,0,,0,0,,0,0,https://digital.library.adelaide.edu.au/dspace/handle/2440/10701,Generating random permutation of an input string.,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Fisher%E2%80%93Yates_shuffle,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fisher%E2%80%93Yates_shuffle/monthly/20150701/20230731,10904.0,10957.0,11771.0,15935.0,15454.0,13330.0,13453.0,13284.0,13336.0,12885.0,12169.0,10090.0,9838.0,11779.0,13636.0,14350.0,14498.0,12054.0,16055.0,12175.0,14140.0,25791.0,13077.0,11254.0,11308.0,12884.0,12687.0,15111.0,15427.0,11994.0,12150.0,12360.0,15302.0,16529.0,12978.0,11531.0,11168.0,12292.0,15087.0,15919.0,14001.0,12902.0,14295.0,15774.0,13879.0,12592.0,12748.0,10149.0,11065.0,10152.0,11536.0,14637.0,13197.0,11201.0,12752.0,13211.0,13567.0,16512.0,14894.0,12222.0,12032.0,11265.0,13861.0,14996.0,13720.0,12771.0,13143.0,12365.0,15371.0,14103.0,13326.0,12274.0,12497.0,11422.0,12675.0,14691.0,16632.0,11644.0,12707.0,14153.0,16991.0,13485.0,12648.0,12571.0,11721.0,11679.0,12494.0,14216.0,18379.0,13451.0,12545.0,12519.0,14229.0,14454.0,11869.0,10824.0,10451.0,13282.494845360823,3,False,1,False
395,0.0,1.0,1,Fisher–Yates shuffle,O(n),33.0,Generating Random Permutations,2.0,General Permutations,327.0,,,1,1,O(n),^see above,(none),[https://dl.acm.org/doi/10.1145/364520.364540 Durstenfeld's Algorithm 235 (1964)],Durstenfeld's Algorithm 235,1964,https://dl.acm.org/doi/10.1145/364520.364540,,,,0.0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,1,n: 1,O(1),Essentially in-situ,1.0,0.0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,1.0,0.333521432,1.0,0.77827941,1.0,1.371373706,1000.0,,,,,,,,,6,,,Numerical Analysis,Fisher%E2%80%93Yates_shuffle,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fisher%E2%80%93Yates_shuffle/monthly/20150701/20230731,10904.0,10957.0,11771.0,15935.0,15454.0,13330.0,13453.0,13284.0,13336.0,12885.0,12169.0,10090.0,9838.0,11779.0,13636.0,14350.0,14498.0,12054.0,16055.0,12175.0,14140.0,25791.0,13077.0,11254.0,11308.0,12884.0,12687.0,15111.0,15427.0,11994.0,12150.0,12360.0,15302.0,16529.0,12978.0,11531.0,11168.0,12292.0,15087.0,15919.0,14001.0,12902.0,14295.0,15774.0,13879.0,12592.0,12748.0,10149.0,11065.0,10152.0,11536.0,14637.0,13197.0,11201.0,12752.0,13211.0,13567.0,16512.0,14894.0,12222.0,12032.0,11265.0,13861.0,14996.0,13720.0,12771.0,13143.0,12365.0,15371.0,14103.0,13326.0,12274.0,12497.0,11422.0,12675.0,14691.0,16632.0,11644.0,12707.0,14153.0,16991.0,13485.0,12648.0,12571.0,11721.0,11679.0,12494.0,14216.0,18379.0,13451.0,12545.0,12519.0,14229.0,14454.0,11869.0,10824.0,10451.0,13282.494845360823,3,True,1,True
396,1.0,0.0,1,Radix sort,O(n),33.0,Generating Random Permutations,2.0,General Permutations,328.0,,,1,1,O(n),^see above,(none),[- Radix sorting method (1887)],Radix sorting method,1887,-,4,1.0,https://www.geeksforgeeks.org/radix-sort/,1.0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,3,n: 3,O(n),"Need to keep track of randomly generated numbers, but otherwise see radix sort",1.0,0.0,,1,??,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Radix_sort,Generating random permutation of an input string.,,,,1000.0,,1000000.0,,1000000000.0,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,Radix_sort,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Radix_sort/monthly/20150701/20230731,16496.0,16782.0,20369.0,30866.0,26609.0,24005.0,20248.0,23582.0,29390.0,27029.0,24206.0,18195.0,15760.0,18321.0,22898.0,29164.0,31033.0,27379.0,25534.0,52081.0,27932.0,22949.0,21810.0,19452.0,15803.0,14860.0,20542.0,43718.0,29796.0,21454.0,18845.0,22187.0,28177.0,25843.0,23122.0,16751.0,15320.0,16103.0,19723.0,26869.0,24433.0,19748.0,16926.0,16618.0,21718.0,23336.0,18490.0,12886.0,11624.0,12896.0,21223.0,21387.0,17421.0,14226.0,14693.0,16403.0,15774.0,15376.0,16004.0,13198.0,12925.0,12337.0,21144.0,18904.0,18139.0,17491.0,15121.0,16299.0,22952.0,18906.0,16221.0,14153.0,12294.0,11894.0,13384.0,18249.0,20051.0,19138.0,14308.0,15129.0,18336.0,15637.0,18745.0,15279.0,12113.0,9871.0,12390.0,14703.0,14954.0,13348.0,10690.0,12805.0,13552.0,11682.0,11672.0,10445.0,8748.0,19067.9587628866,3,True,1,False
397,0.0,1.0,1,Fisher–Yates shuffle,O(n),33.0,Generating Random Permutations,2.0,Cyclic Permutations,329.0,,,1,1,O(n),^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/0020019086900736 Sattolo's algorithm (1986)],Sattolo's algorithm,1986,https://www.sciencedirect.com/science/article/abs/pii/0020019086900736,,,,0.0,0,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,1,n: 1,O(1),Essentially in-situ,1.0,0.0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,,,,,,,1000000.0,,,,,,,,,6,,,Numerical Analysis,Fisher%E2%80%93Yates_shuffle,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fisher%E2%80%93Yates_shuffle/monthly/20150701/20230731,10904.0,10957.0,11771.0,15935.0,15454.0,13330.0,13453.0,13284.0,13336.0,12885.0,12169.0,10090.0,9838.0,11779.0,13636.0,14350.0,14498.0,12054.0,16055.0,12175.0,14140.0,25791.0,13077.0,11254.0,11308.0,12884.0,12687.0,15111.0,15427.0,11994.0,12150.0,12360.0,15302.0,16529.0,12978.0,11531.0,11168.0,12292.0,15087.0,15919.0,14001.0,12902.0,14295.0,15774.0,13879.0,12592.0,12748.0,10149.0,11065.0,10152.0,11536.0,14637.0,13197.0,11201.0,12752.0,13211.0,13567.0,16512.0,14894.0,12222.0,12032.0,11265.0,13861.0,14996.0,13720.0,12771.0,13143.0,12365.0,15371.0,14103.0,13326.0,12274.0,12497.0,11422.0,12675.0,14691.0,16632.0,11644.0,12707.0,14153.0,16991.0,13485.0,12648.0,12571.0,11721.0,11679.0,12494.0,14216.0,18379.0,13451.0,12545.0,12519.0,14229.0,14454.0,11869.0,10824.0,10451.0,13282.494845360823,3,True,1,True
398,0.0,1.0,1,Cutting-plane method,,34.0,Convex Optimization (Non-linear),1.0,ILP;MILPs,330.0,,0.0,1,1,"O(2^n*poly(n, m))? (previously O(n^3))",,,[https://www.cs.uleth.ca/~benkoczi/OR/read/cutting-stock-LP.pdf Gomory's cutting method (1953)],Gomory's cutting method,1953,https://www.cs.uleth.ca/~benkoczi/OR/read/cutting-stock-LP.pdf,2,1.0,http://www.math.wsu.edu/faculty/genz/364/lessons/l603.pdf,1.0,0,8,"n: 8,
m: 7","O(2^n*poly(n, m))? (previously O(n^3))","n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
m: 5",O(nm+m^2),"See simplex algorithm, but also O(m) variables and constraints are introduced",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Ralph_E._Gomory,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis,Cutting-plane_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cutting-plane_method/monthly/20150701/20230731,1685.0,1759.0,2025.0,3099.0,3279.0,3150.0,2640.0,2570.0,2814.0,3248.0,2990.0,2401.0,1860.0,1747.0,1925.0,2435.0,3276.0,3055.0,3038.0,2505.0,3166.0,3342.0,2946.0,2335.0,1887.0,1825.0,2038.0,2427.0,3546.0,2950.0,3188.0,2434.0,2740.0,3832.0,3388.0,2172.0,1894.0,1692.0,1879.0,2376.0,3417.0,3072.0,2602.0,2111.0,2655.0,3484.0,3277.0,2151.0,1976.0,1870.0,2409.0,2753.0,3113.0,3367.0,2733.0,2442.0,2698.0,2986.0,2698.0,2362.0,1873.0,1753.0,2444.0,2876.0,3628.0,3415.0,2849.0,2277.0,2695.0,2840.0,2505.0,2529.0,2877.0,3260.0,1893.0,2385.0,2874.0,2751.0,2111.0,2174.0,2225.0,2429.0,2296.0,2177.0,1610.0,1414.0,1554.0,1803.0,2718.0,2195.0,2141.0,2232.0,2375.0,2070.0,2281.0,1925.0,1776.0,2525.40206185567,5,False,3,True
399,0.0,1.0,1,Convex optimization,,34.0,Convex Optimization (Non-linear),1.0,"General, Constrained optimization",331.0,,0.0,1,1,O(n^4),,,[https://link.springer.com/content/pdf/10.1007/BFb0120703.pdf Wolfe; Lemaréchal; Kiwiel (1964)],Wolfe; Lemaréchal; Kiwiel,1964,https://link.springer.com/content/pdf/10.1007/BFb0120703.pdf,,,,0.0,0,7,n: 7,O(n^4),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
L: 3",O(n+L)??,"keeps track of current guess x^{(k)}, and computes bundle G^{(k)}, direction d^{(k)}, and scalar t^{(k)}?",1.0,0.0,,0,,0,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000000000.0,,,,,,,,,3,,,Numerical Analysis,Convex_optimization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Convex_optimization/monthly/20150701/20230731,6807.0,11074.0,8078.0,9617.0,9278.0,8305.0,8980.0,8886.0,9546.0,8923.0,9067.0,7453.0,6789.0,11055.0,8288.0,9958.0,10366.0,8683.0,9753.0,10208.0,11413.0,10955.0,10712.0,9348.0,8369.0,8839.0,9867.0,11401.0,11404.0,9313.0,10576.0,9345.0,10314.0,10558.0,10222.0,8635.0,9730.0,8863.0,8891.0,10693.0,9755.0,8825.0,9725.0,8932.0,9901.0,9951.0,9079.0,7989.0,8249.0,7901.0,8834.0,10794.0,9716.0,8401.0,9042.0,9232.0,8550.0,9647.0,9758.0,8244.0,7917.0,7648.0,8564.0,10304.0,9526.0,8777.0,8896.0,8521.0,11406.0,9273.0,9168.0,8126.0,8454.0,10589.0,8705.0,9671.0,9680.0,8360.0,8991.0,7991.0,8754.0,9247.0,9936.0,8381.0,7157.0,7693.0,8649.0,9670.0,10271.0,8918.0,9141.0,9000.0,9352.0,8045.0,8100.0,7481.0,7402.0,9184.030927835052,5,False,3,True
400,1.0,0.0,1,Ellipsoid method,,34.0,Convex Optimization (Non-linear),1.0,"General, Constrained optimization",332.0,,0.0,1,1,O(n^2 logn),,,[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Ellipsoid method (1971)],Ellipsoid method,1971,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,,,1.0,0,5.01,n: 5.01,O(n^2 \log n),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",O(nmL),see orginal paper (noting that O(alpha*log(H*alpha)) = O(L)),0.0,1.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Ellipsoid_method,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,9965784.285,100.3433319,0.291795617,1.99316E+13,50171.66594,0.824469403,2.99E+19,33447777.3,1.618306015,3,,,Numerical Analysis,Ellipsoid_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ellipsoid_method/monthly/20150701/20230731,1146.0,972.0,1207.0,1600.0,1566.0,1475.0,1473.0,1295.0,1527.0,1474.0,1583.0,1515.0,1039.0,1012.0,1076.0,1420.0,1459.0,1397.0,1404.0,1369.0,1646.0,1411.0,1440.0,1270.0,1150.0,1052.0,1313.0,1495.0,1711.0,1252.0,1397.0,1375.0,1481.0,1579.0,1392.0,1136.0,1007.0,944.0,1151.0,1444.0,1691.0,1363.0,1332.0,1146.0,1613.0,1655.0,1348.0,1152.0,1259.0,1129.0,1235.0,1464.0,1673.0,1657.0,1481.0,1483.0,1521.0,1553.0,1387.0,1341.0,1118.0,976.0,1130.0,1435.0,1367.0,1485.0,1249.0,1278.0,1485.0,1561.0,1406.0,1163.0,1204.0,836.0,990.0,1298.0,1375.0,1229.0,2057.0,1381.0,1375.0,1419.0,1191.0,1136.0,1034.0,965.0,1017.0,1419.0,1600.0,1244.0,1139.0,1134.0,1598.0,1146.0,1359.0,1140.0,989.0,1330.5773195876288,5,False,3,True
401,1.0,0.0,1,Subgradient method,,34.0,Convex Optimization (Non-linear),1.0,"General, Constrained optimization",333.0,,0.0,1,1,O(n^2 ),,,[https://www.springer.com/gp/book/9783642821202 Subgradient method (1981)],Subgradient method,1981,https://www.springer.com/gp/book/9783642821202,1,1.0,https://en.wikipedia.org/wiki/Subgradient_method,1.0,3->4,5,n: 5,O(n^2 ),"n: number of variables
m: number of constraints
L: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
L: 3",O(n+L)?,"keep track of current guess x^{(k)}, and needs to compute subgradient g^{(k)}",1.0,0.0,,0,,0,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000.0,1000,0.279802214,1E+12,1000000,0.637893707,1.00E+18,1000000000,1.096179992,3,,,Numerical Analysis,Subgradient_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Subgradient_method/monthly/20150701/20230731,1756.0,1476.0,1827.0,2161.0,2151.0,1905.0,1917.0,2169.0,2426.0,2450.0,2439.0,1917.0,1784.0,1658.0,1779.0,2499.0,2485.0,2085.0,2044.0,2425.0,2807.0,2479.0,2484.0,2080.0,1895.0,1905.0,2124.0,2341.0,2606.0,2080.0,2237.0,2040.0,2357.0,2363.0,2554.0,2005.0,1944.0,1816.0,1910.0,2573.0,2617.0,2120.0,2183.0,2219.0,2329.0,2434.0,2152.0,1964.0,1997.0,1822.0,2023.0,2397.0,2501.0,1994.0,2348.0,2434.0,2228.0,2352.0,2230.0,1889.0,1807.0,1660.0,2060.0,2261.0,2221.0,2216.0,2191.0,1960.0,2294.0,1977.0,1870.0,1816.0,1484.0,1326.0,1643.0,1890.0,2002.0,1568.0,1762.0,1960.0,1903.0,1913.0,1976.0,2497.0,1479.0,1321.0,1649.0,2024.0,2297.0,1677.0,1686.0,1829.0,2181.0,1925.0,1999.0,1809.0,1664.0,2061.680412371134,5,True,3,True
402,0.0,1.0,1,Convex optimization,,34.0,Convex Optimization (Non-linear),1.0,Stochastic optimization,334.0,,0.0,1,1,O(n^2),,,[ Dual subgradients and the drift-plus-penalty method (1993)],Dual subgradients and the drift-plus-penalty method,1993,,,,,0.0,0,5,n: 5,O(n^2),"n: number of variables
m: number of constraints
V: weight parameter (and average queue size)
L: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
m: 3,
V: 3",O(Vmn)????,involves minimizing an expression with up to O(Vmn) terms per iteration?,1.0,0.0,,0,,0,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000.0,,,,,,,,,3,,,Numerical Analysis,Convex_optimization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Convex_optimization/monthly/20150701/20230731,6807.0,11074.0,8078.0,9617.0,9278.0,8305.0,8980.0,8886.0,9546.0,8923.0,9067.0,7453.0,6789.0,11055.0,8288.0,9958.0,10366.0,8683.0,9753.0,10208.0,11413.0,10955.0,10712.0,9348.0,8369.0,8839.0,9867.0,11401.0,11404.0,9313.0,10576.0,9345.0,10314.0,10558.0,10222.0,8635.0,9730.0,8863.0,8891.0,10693.0,9755.0,8825.0,9725.0,8932.0,9901.0,9951.0,9079.0,7989.0,8249.0,7901.0,8834.0,10794.0,9716.0,8401.0,9042.0,9232.0,8550.0,9647.0,9758.0,8244.0,7917.0,7648.0,8564.0,10304.0,9526.0,8777.0,8896.0,8521.0,11406.0,9273.0,9168.0,8126.0,8454.0,10589.0,8705.0,9671.0,9680.0,8360.0,8991.0,7991.0,8754.0,9247.0,9936.0,8381.0,7157.0,7693.0,8649.0,9670.0,10271.0,8918.0,9141.0,9000.0,9352.0,8045.0,8100.0,7481.0,7402.0,9184.030927835052,5,True,3,True
403,1.0,0.0,1,Buchberger's algorithm,,35.0,Gröbner Bases,1.0,Gröbner Bases,335.0,,,1,1,d^{(2^{(n+o(1)))}},,,[https://dl.acm.org/doi/10.1145/1088216.1088219 Buchberger's algorithm (1976)],Buchberger's algorithm,1976,https://dl.acm.org/doi/10.1145/1088216.1088219,2,0.0,https://dl.acm.org/doi/pdf/10.1145/1088216.1088219,1.0,0,8,n: 8,d^{(2^{(n+o(1)})}),"n: number of variables in each polynomial
d: maximal total degree of the polynomials",n,,,Word RAM,words,8,"n: 8,
d: 7",d^{(2^{(n+o(1))})}??,"Output may contain that many elements. However, this bound seems very crude/loose",1.0,0.0,,0,,0,,0,0,,0,0,"EXPSPACE-hard reference: ""Complexity of Gröbner basis detection and border basis detection""","In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,turns out this is EXPSPACE hard: https://www.sciencedirect.com/science/article/pii/S0304397512007505,,Numerical Analysis,Buchberger%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Buchberger%27s_algorithm/monthly/20150701/20230731,557.0,543.0,762.0,612.0,709.0,584.0,545.0,711.0,694.0,697.0,654.0,553.0,558.0,531.0,729.0,683.0,832.0,806.0,762.0,707.0,822.0,733.0,831.0,665.0,608.0,471.0,682.0,784.0,864.0,696.0,873.0,760.0,735.0,837.0,883.0,615.0,548.0,764.0,639.0,799.0,773.0,703.0,848.0,731.0,844.0,861.0,911.0,860.0,682.0,722.0,707.0,887.0,803.0,818.0,828.0,770.0,762.0,933.0,900.0,824.0,805.0,626.0,904.0,842.0,766.0,801.0,772.0,716.0,1057.0,966.0,1121.0,782.0,689.0,715.0,685.0,703.0,752.0,636.0,725.0,744.0,775.0,795.0,841.0,921.0,578.0,654.0,668.0,758.0,803.0,764.0,687.0,724.0,889.0,930.0,843.0,763.0,604.0,750.6082474226804,8,True,8,True
404,1.0,0.0,1,Faugère's F4 and F5 algorithms,,35.0,Gröbner Bases,1.0,Gröbner Bases,336.0,,,1,1,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication",,,[https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055 Faugère F4 algorithm (1999)],Faugère F4 algorithm,1999,https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055,1,1.0,https://reader.elsevier.com/reader/sd/pii/S0022404999000055?token=DC73BE34D9F12491D472CE3BBE70B5745448C6F5A27E99595808DA4B6E66531C37C9B7D23A7AFD7419D27DC7F06396F7,1.0,0,8,n: 8,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication","n: number of variables in each polynomial
D_reg: smallest degree for which a nontrivial relation occurs",n,,,Word RAM,words,8,n: 8,"O(C(n+D_{reg}, D_{reg})^2)?","Seems to keep track of a square matrix (for monomials) of size $O(C(n+D_{reg}, D_{reg})^2$)",1.0,0.0,,0,,0,,0,0,,0,0,https://eprint.iacr.org/2021/051.pdf,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K.",,,"d:n
1:400",,,,,,,1000000000.0,Inf,,1.00E+18,Inf,,1.00E+27,Inf,,1,,,Numerical Analysis,Faug%C3%A8re%27s_F4_and_F5_algorithms,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Faug%C3%A8re%27s_F4_and_F5_algorithms/monthly/20150701/20230731,228.0,236.0,309.0,251.0,247.0,259.0,228.0,263.0,325.0,282.0,282.0,302.0,354.0,200.0,284.0,211.0,292.0,295.0,326.0,277.0,334.0,267.0,310.0,321.0,203.0,203.0,263.0,228.0,260.0,294.0,300.0,257.0,297.0,293.0,322.0,234.0,257.0,270.0,241.0,292.0,241.0,277.0,339.0,262.0,292.0,240.0,282.0,253.0,273.0,223.0,230.0,271.0,275.0,246.0,269.0,284.0,228.0,271.0,307.0,314.0,428.0,201.0,241.0,278.0,270.0,250.0,261.0,206.0,332.0,251.0,252.0,247.0,284.0,236.0,267.0,201.0,334.0,204.0,242.0,257.0,320.0,278.0,307.0,264.0,155.0,180.0,199.0,224.0,255.0,201.0,202.0,219.0,285.0,219.0,199.0,199.0,187.0,261.9484536082474,8,True,8,True
405,1.0,0.0,1,Faugère's F4 and F5 algorithms,,35.0,Gröbner Bases,1.0,Gröbner Bases,337.0,,,1,1,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication",,,[https://dl.acm.org/doi/10.1145/780506.780516 Faugère F5 algorithm (2002)],Faugère F5 algorithm,2002,https://dl.acm.org/doi/10.1145/780506.780516,,,,0.0,0,8,n: 8,"O(C(n+D_{reg}, D_{reg})^{\omega}) where omega is the exponent on matrix multiplication","n: number of variables in each polynomial
D_reg: smallest degree for which a nontrivial relation occurs",n,,,Word RAM,words,8,n: 8,"O(C(n+D_{reg}, D_{reg})^2)?","Seems to keep track of a square matrix (for monomials) of size $O(C(n+D_{reg}, D_{reg})^2$)",1.0,0.0,,0,,0,,0,0,,0,0,https://hal.inria.fr/hal-01064519/document,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,Faug%C3%A8re%27s_F4_and_F5_algorithms,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Faug%C3%A8re%27s_F4_and_F5_algorithms/monthly/20150701/20230731,228.0,236.0,309.0,251.0,247.0,259.0,228.0,263.0,325.0,282.0,282.0,302.0,354.0,200.0,284.0,211.0,292.0,295.0,326.0,277.0,334.0,267.0,310.0,321.0,203.0,203.0,263.0,228.0,260.0,294.0,300.0,257.0,297.0,293.0,322.0,234.0,257.0,270.0,241.0,292.0,241.0,277.0,339.0,262.0,292.0,240.0,282.0,253.0,273.0,223.0,230.0,271.0,275.0,246.0,269.0,284.0,228.0,271.0,307.0,314.0,428.0,201.0,241.0,278.0,270.0,250.0,261.0,206.0,332.0,251.0,252.0,247.0,284.0,236.0,267.0,201.0,334.0,204.0,242.0,257.0,320.0,278.0,307.0,264.0,155.0,180.0,199.0,224.0,255.0,201.0,202.0,219.0,285.0,219.0,199.0,199.0,187.0,261.9484536082474,8,True,8,True
406,0.0,0.0,0,,,36.0,Minimum value in each row of an implicitly-defined totally monotone matrix,1.0,,338.0,,,1,1,O(nm),,,[- Naive algorithm (1940)],Naive algorithm,1940,-,1,1.0,,1.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n, m: dimensions of matrix; assume m≥n
possibly uses a function f to define entries; assume evaluation of f takes time O(1)",mn,,,Word RAM,words,1,"n: 1,
mn: 1",$O(1)$,"Only needs to keep track of current minimum in current row - once done with a row, can send stored minimum to output and recycle space",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,250000.0,1,,2.5E+11,1,,2.50E+17,1,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.51,False,1,True
407,1.0,0.0,1,SMAWK algorithm,,36.0,Minimum value in each row of an implicitly-defined totally monotone matrix,1.0,,339.0,,,1,1,O(n(1+log(n/m))),,,[https://link.springer.com/article/10.1007/BF01840359 SMAWK algorithm (1987)],SMAWK algorithm,1987,https://link.springer.com/article/10.1007/BF01840359,0.25,0.0,https://link.springer.com/content/pdf/10.1007/BF01840359.pdf,1.0,4->6,2.51,"n: 4,
m: 1.5,
mn: 2.51",O(n(1+\log(n/m))),"n, m: dimensions of matrix; assume m≥n
possibly uses a function f to define entries; assume evaluation of f takes time O(1)",mn,,,Word RAM,words,2.5,"n: 3,
mn: 2.5",$O(n)$?,Need to keep track of which columns aren't pruned. Also uses $O(n)$ auxiliary space during prune-and-search?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,250,0.124656766,1000000,250000,0.302716121,1000000000,250000000,0.508966418,4,,,Combinatorics,SMAWK_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SMAWK_algorithm/monthly/20150701/20230731,147.0,132.0,363.0,282.0,198.0,273.0,181.0,245.0,217.0,141.0,171.0,157.0,151.0,133.0,194.0,224.0,265.0,223.0,213.0,205.0,250.0,260.0,146.0,240.0,212.0,238.0,231.0,263.0,224.0,191.0,223.0,246.0,222.0,203.0,177.0,161.0,171.0,172.0,191.0,148.0,171.0,163.0,189.0,162.0,184.0,215.0,154.0,248.0,167.0,128.0,147.0,229.0,214.0,164.0,202.0,322.0,189.0,617.0,300.0,216.0,169.0,202.0,679.0,612.0,369.0,216.0,210.0,196.0,198.0,235.0,176.0,163.0,199.0,154.0,307.0,335.0,233.0,243.0,230.0,193.0,178.0,163.0,182.0,157.0,187.0,178.0,180.0,170.0,208.0,292.0,281.0,197.0,251.0,172.0,261.0,201.0,171.0,220.75257731958763,2.51,True,1,False
408,1.0,0.0,1,Steinhaus–Johnson–Trotter algorithm,O(1) per permutation,37.0,All Permutations,2.0,All Permutations,340.0,,,1,1,amortized O(1) per permutation,averaged over all permutations,https://dl.acm.org/doi/10.1145/356689.356692,[https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html Steinhaus–Johnson–Trotter algorithm (1963)],Steinhaus–Johnson–Trotter algorithm,1963,https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html,2,1.0,https://en.wikipedia.org/wiki/Steinhaus–Johnson–Trotter_algorithm,1.0,4->6,3,n: 3,O(n) on specific permutations,n: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Determining $x_i$ and $y_i$ each iteration can be done in constant space,1.0,0.0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1.0,1.682695795,1.0,6.19685673,1.0,18.30697729,1000.0,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Numerical Analysis,Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Steinhaus%E2%80%93Johnson%E2%80%93Trotter_algorithm/monthly/20150701/20230731,1705.0,1494.0,1812.0,2266.0,1857.0,2249.0,1835.0,2189.0,2163.0,2190.0,2178.0,1482.0,1402.0,1601.0,1844.0,1951.0,1889.0,1703.0,1755.0,1853.0,2322.0,1927.0,1749.0,1732.0,1880.0,1483.0,1552.0,2094.0,1896.0,1636.0,1737.0,1483.0,1919.0,1791.0,1555.0,1377.0,1135.0,1249.0,1527.0,1820.0,2095.0,1475.0,1406.0,1590.0,1738.0,1328.0,1337.0,1262.0,1089.0,1137.0,1393.0,1516.0,1571.0,1503.0,1293.0,1470.0,1350.0,1511.0,2654.0,1768.0,1192.0,1055.0,1267.0,1529.0,1289.0,1253.0,1107.0,1267.0,1477.0,1350.0,1379.0,1172.0,1113.0,991.0,1219.0,1439.0,1107.0,1218.0,933.0,1113.0,1308.0,1146.0,1140.0,787.0,903.0,940.0,1063.0,1141.0,1099.0,995.0,1036.0,1014.0,1067.0,996.0,953.0,836.0,798.0,1478.9690721649486,3,True,1,True
409,1.0,0.0,1,Tompkins–Paige algorithm,O(1) per permutation,37.0,All Permutations,2.0,All Permutations,341.0,,,1,1,amortized O(1) per permutation,averaged over all permutations,(napkin math - number of iterations is approximately e*n!),[https://mathscinet.ams.org/mathscinet-getitem?mr=0080380 Tompkins–Paige algorithm (1956)],Tompkins–Paige algorithm,1956,https://mathscinet.ams.org/mathscinet-getitem?mr=0080380,1,1.0,https://en.wikipedia.org/wiki/Tompkins–Paige_algorithm,1.0,0,3,n: 3,O(n) on specific permutations,n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of auxiliary counting array,1.0,0.0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1000.0,,1000000.0,,1000000000.0,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Numerical Analysis,Tompkins%E2%80%93Paige_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tompkins%E2%80%93Paige_algorithm/monthly/20150701/20230731,35.0,31.0,46.0,30.0,33.0,42.0,39.0,39.0,22.0,22.0,33.0,27.0,27.0,23.0,30.0,19.0,48.0,31.0,34.0,41.0,51.0,50.0,44.0,22.0,31.0,21.0,31.0,35.0,41.0,44.0,44.0,34.0,33.0,39.0,50.0,31.0,35.0,42.0,26.0,21.0,39.0,35.0,63.0,34.0,44.0,40.0,36.0,27.0,18.0,8.0,12.0,27.0,23.0,19.0,26.0,16.0,21.0,25.0,27.0,8.0,11.0,5.0,15.0,16.0,16.0,11.0,11.0,4.0,11.0,11.0,12.0,11.0,5.0,12.0,18.0,16.0,16.0,3.0,16.0,15.0,18.0,19.0,19.0,11.0,9.0,12.0,17.0,9.0,6.0,18.0,15.0,9.0,8.0,16.0,7.0,28.0,14.0,24.690721649484537,3,True,1,False
410,1.0,0.0,1,Heap's algorithm,O(1) per permutation,37.0,All Permutations,2.0,All Permutations,342.0,,,1,1,O(1) per permutation,averaged over all permutations,Easily derived (each permutation takes O(1) time),[https://academic.oup.com/comjnl/article/6/3/293/360213 Heap's algorithm (1963)],Heap's algorithm,1963,https://academic.oup.com/comjnl/article/6/3/293/360213,,,,0.0,0,3,n: 3,O(n) per permutation,n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,$O(n)$-sized stack or array necessary,1.0,0.0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,,,,,,,1000.0,,,,,,,,,4,,,Numerical Analysis,Heap%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Heap%27s_algorithm/monthly/20150701/20230731,3016.0,2552.0,3139.0,3256.0,3258.0,3144.0,3412.0,4287.0,4141.0,4656.0,4226.0,3455.0,3804.0,3701.0,4796.0,4945.0,4962.0,4393.0,4463.0,5040.0,4970.0,4402.0,4449.0,4669.0,5102.0,4003.0,4911.0,5504.0,28593.0,4333.0,4429.0,4720.0,4920.0,4937.0,4505.0,3393.0,3081.0,3372.0,4239.0,5087.0,6769.0,3911.0,4077.0,4484.0,5502.0,4604.0,4590.0,3829.0,3698.0,3741.0,6368.0,4981.0,5738.0,7525.0,4964.0,5658.0,5109.0,5592.0,6300.0,4763.0,4268.0,4643.0,5791.0,5316.0,5345.0,5231.0,4667.0,4972.0,5311.0,4492.0,4856.0,4173.0,3782.0,4511.0,4177.0,4451.0,4279.0,3976.0,3688.0,3398.0,3864.0,3580.0,3358.0,2822.0,3338.0,3082.0,3216.0,3684.0,3405.0,3219.0,3272.0,3280.0,3695.0,2999.0,3030.0,2740.0,2442.0,4544.546391752578,3,True,1,False
411,1.0,0.0,1,Garsia–Wachs algorithm,,38.0,Optimal Binary Search Trees,2.0,Alphabetic Tree Problem,343.0,,,1,1,O(n \log n),,,[https://epubs.siam.org/doi/abs/10.1137/0206045 Garsia–Wachs algorithm (1977)],Garsia–Wachs algorithm,1977,https://epubs.siam.org/doi/abs/10.1137/0206045,,,,0.0,0,4,n: 4,O(n \log n),n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,"https://epubs.siam.org/doi/epdf/10.1137/0206045, See implementation of MINTREE",0.0,1.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,9965.0,,,,,,,,,1,,,Combinatorics,Garsia%E2%80%93Wachs_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Garsia%E2%80%93Wachs_algorithm/monthly/20150701/20230731,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122.0,118.0,129.0,99.0,94.0,232.0,129.0,137.0,147.0,652.0,453.0,158.0,172.0,167.0,146.0,143.0,267.0,193.0,214.0,200.0,138.0,128.0,183.0,156.0,145.0,149.0,114.0,109.0,105.0,146.0,142.0,145.0,119.0,68.0,137.0,141.0,129.0,94.0,120.0,104.0,174.0,137.0,140.0,118.0,94.0,135.0,94.0,89.0,123.0,153.0,115.0,170.0,100.0,151.0,130.0,475.0,206.0,133.0,160.01724137931035,2.6,False,1,False
412,0.0,1.0,1,Huffman coding,,38.0,Optimal Binary Search Trees,2.0,Alphabetic Tree Problem,344.0,,,1,1,O(n \log n),,,[https://epubs.siam.org/doi/10.1137/0121057 Hu–Tucker algorithm (1971)],Hu–Tucker algorithm,1971,https://epubs.siam.org/doi/10.1137/0121057,4,0.0,https://epubs.siam.org/doi/10.1137/0121057,1.0,4->5,4,n: 4,O(n \log n),n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,https://epubs.siam.org/doi/10.1137/0121057,0.0,1.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,9965.0,Inf,,19931568.57,Inf,,29897352854,Inf,,1,,,Combinatorics,Huffman_coding,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Huffman_coding/monthly/20150701/20230731,20751.0,20846.0,24611.0,33629.0,37371.0,34058.0,27884.0,29177.0,31068.0,37543.0,35274.0,27090.0,23032.0,23743.0,27432.0,35939.0,41399.0,37912.0,30550.0,28928.0,39992.0,35802.0,36410.0,25439.0,20473.0,21223.0,27070.0,35257.0,38384.0,33738.0,31067.0,27777.0,33449.0,35134.0,34643.0,22944.0,20780.0,22235.0,23080.0,31339.0,33048.0,28322.0,24693.0,23303.0,30127.0,32258.0,31067.0,22213.0,18823.0,17997.0,21416.0,30316.0,34546.0,27662.0,25915.0,26523.0,28309.0,34813.0,32577.0,28282.0,23045.0,21084.0,24943.0,33253.0,37134.0,34144.0,29196.0,27338.0,33610.0,32682.0,28996.0,26520.0,27299.0,23645.0,22050.0,29253.0,33235.0,31187.0,27741.0,26045.0,29817.0,30670.0,30606.0,24845.0,24015.0,20039.0,22416.0,26658.0,33941.0,27134.0,24256.0,22804.0,26627.0,25861.0,27572.0,22244.0,20338.0,28545.628865979383,2.6,False,1,False
413,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,OBST,345.0,,,1,1,O(n^2),,,[https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf Modified Knuth's DP algorithm (1970)],Modified Knuth's DP algorithm,1970,https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf,,,,1.0,3->4,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492658,0.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000.0,Inf,,1E+12,Inf,,1.00E+18,Inf,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
414,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,OBST,346.0,,,1,1,O(n^3),,,[https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf Knuth's DP algorithm (1970)],Knuth's DP algorithm,1970,https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf,,,,1.0,1->3,6,n: 6,O(n^3),n: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492658,0.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000000.0,Inf,,1.00E+18,Inf,,1.00E+27,Inf,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
415,0.0,1.0,1,Optimal binary search tree,,38.0,Optimal Binary Search Trees,1.0,OBST,347.0,,,1,1,O(4^n /n \sqrt{n}),,,[https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf Naive algorithm (1940)],Naive algorithm,1940,https://www.cs.bgu.ac.il/~michaluz/seminar/Knuth71.pdf,1,1.0,,1.0,0,8,n: 8,O(4^n /n \sqrt{n}),n: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Derived: Constant space to verify optimality. Constant space if you can enumerate the trees in-situ.,1.0,0.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Optimal_binary_search_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Optimal_binary_search_tree/monthly/20150701/20230731,1290.0,1469.0,1882.0,2265.0,2834.0,2413.0,1713.0,1675.0,2944.0,4603.0,2693.0,1509.0,1154.0,1614.0,2030.0,2626.0,3610.0,2939.0,1934.0,2170.0,4404.0,4634.0,2291.0,1687.0,1136.0,1353.0,2349.0,2440.0,3358.0,2300.0,1586.0,1854.0,3231.0,4131.0,2142.0,1437.0,1140.0,1169.0,1447.0,2461.0,2900.0,1986.0,1094.0,1453.0,3072.0,4210.0,2676.0,1394.0,921.0,1112.0,1965.0,2712.0,4295.0,2833.0,1511.0,2073.0,2305.0,2833.0,2365.0,2063.0,1148.0,1069.0,1607.0,2351.0,3527.0,3234.0,2856.0,1603.0,2322.0,2039.0,2510.0,2891.0,2700.0,2701.0,1582.0,2344.0,2571.0,2298.0,1867.0,2126.0,1947.0,2119.0,2999.0,2606.0,1495.0,1368.0,1271.0,1703.0,2488.0,2998.0,2480.0,1369.0,1629.0,1542.0,1908.0,1684.0,820.0,2221.257731958763,2.6,False,1,True
416,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,OBST,349.0,,,1,1,O(n^2),,,[https://doi.org/10.1137/0603055 Yao (1982)],Yao,1982,https://doi.org/10.1137/0603055,,,,0.0,0,5,n: 5,O(n^2),n: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://doi.org/10.1137/0603055,0.0,1.0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
417,0.0,1.0,1,Polygon partition,,38.0,Optimal Binary Search Trees,2.0,Approximate OBST,353.0,,,1,0,O(n),,,[https://www.sciencedirect.com/science/article/pii/0304397589901345 Levcopoulos; Lingas; Sack (1989)],Levcopoulos; Lingas; Sack,1989,https://www.sciencedirect.com/science/article/pii/0304397589901345,,,,1.0,5->6,3,n: 3,O(n),n: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Uses an auxiliary list of initial size $4n$,1.0,0.0,,0,,1,$1 + \epsilon$,1,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000.0,,,,,,,,,1,,,Combinatorics,Polygon_partition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Polygon_partition/monthly/20150701/20230731,,,,49.0,75.0,109.0,106.0,121.0,124.0,169.0,148.0,112.0,126.0,147.0,191.0,162.0,157.0,159.0,203.0,299.0,387.0,337.0,310.0,284.0,262.0,223.0,262.0,345.0,319.0,297.0,328.0,315.0,394.0,363.0,329.0,236.0,315.0,316.0,291.0,353.0,313.0,341.0,335.0,353.0,326.0,399.0,347.0,361.0,361.0,352.0,305.0,452.0,574.0,344.0,440.0,411.0,400.0,544.0,409.0,353.0,328.0,297.0,383.0,341.0,313.0,280.0,349.0,411.0,591.0,461.0,409.0,409.0,369.0,360.0,357.0,339.0,485.0,381.0,406.0,386.0,511.0,433.0,356.0,408.0,344.0,334.0,317.0,424.0,428.0,416.0,442.0,386.0,655.0,427.0,504.0,438.0,407.0,333.27659574468083,2.6,False,1,False
418,0.0,0.0,0,,,38.0,Optimal Binary Search Trees,2.0,Approximate OBST,354.0,,,1,0,O(n),,,[https://www.sciencedirect.com/science/article/pii/002001909390212R de Prisco (1993)],de Prisco,1993,https://www.sciencedirect.com/science/article/pii/002001909390212R,,,,0.0,0,3,n: 3,O(n),"$n$: number of elements
$H$: entropy of the given distribution
$p_0$: first element
$p_n$: last element
$p_{max}$: largest element",n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: Uses an auxiliary probability distribution, and three phases that alter a single tree that eventually is the result",1.0,0.0,,0,,1,Upper bound: $H + 1 - p_0 - p_n + p_{max}$,1,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.6,False,1,False
419,1.0,0.0,1,Lemke–Howson algorithm,,39.0,Nash Equilibria,1.0,2-player,355.0,,,1,1,2^{(O(n+m))} (previously O(n^4)????),,,[https://epubs.siam.org/doi/abs/10.1137/0112033?journalCode=smjmap.1 Lemke–Howson algorithm (1964)],Lemke–Howson algorithm,1964,https://epubs.siam.org/doi/abs/10.1137/0112033?journalCode=smjmap.1,1,1.0,"https://web.stanford.edu/~saberi/lecture4.pdf
https://ieeexplore.ieee.org/document/4031395",1.0,0,8,"n: 8,
m: 8,
mn: 8",2^{(O(n+m))} (previously O(n^4)????),"n, m: dimensions of payoff matrices",mn,,,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",O(mn)?,,1.0,0.0,,0,,0,,0,0,,0,0,,"In game theory, the Nash equilibrium, named after the mathematician John Forbes Nash Jr., is a proposed solution of a non-cooperative game involving two or more players in which each player is assumed to know the equilibrium strategies of the other players, and no player has anything to gain by changing only his own strategy.",,,,,,,,,,1000000000000.0,1,,1.00E+24,1,,1.00E+36,1,,2,,,Robotics,Lemke%E2%80%93Howson_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lemke%E2%80%93Howson_algorithm/monthly/20150701/20230731,110.0,144.0,205.0,304.0,398.0,278.0,217.0,281.0,242.0,303.0,289.0,234.0,154.0,162.0,231.0,322.0,356.0,272.0,269.0,222.0,301.0,228.0,356.0,254.0,158.0,220.0,252.0,431.0,465.0,283.0,271.0,275.0,322.0,371.0,428.0,274.0,218.0,201.0,292.0,348.0,369.0,329.0,326.0,288.0,474.0,476.0,312.0,242.0,197.0,198.0,214.0,346.0,521.0,273.0,305.0,352.0,342.0,387.0,376.0,322.0,211.0,212.0,256.0,398.0,346.0,329.0,254.0,354.0,501.0,274.0,290.0,291.0,240.0,224.0,282.0,274.0,276.0,285.0,314.0,330.0,447.0,304.0,270.0,228.0,183.0,162.0,184.0,326.0,329.0,275.0,255.0,343.0,394.0,341.0,323.0,285.0,211.0,292.69072164948454,8,True,3,True
420,1.0,0.0,1,Hungarian algorithm,,40.0,Maximum-Weight Matching,1.0,Bipartite Maximum-Weight Matching,357.0,,,1,1,O(n^4),,,[https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf Hungarian algorithm (1955)],Hungarian algorithm,1955,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,2,1.0,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,1.0,0,7,n: 7,O(n^4),n: number of vertices,n,,,Word RAM,words,5,n: 5,O(n^2),Either graph interpretation maintains O(n^2) orientations and O(n) potential or matrix interpretation manipulates an O(n)*O(n) auxiliary matrix,1.0,0.0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000000.0,1,,1.00E+24,1,,1.00E+36,1,,2,,,Combinatorics,Hungarian_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Hungarian_algorithm/monthly/20150701/20230731,6439.0,6413.0,7362.0,9046.0,8973.0,8514.0,7971.0,8024.0,10122.0,11843.0,10120.0,8098.0,6652.0,7128.0,8137.0,10619.0,9935.0,8636.0,8658.0,9215.0,11562.0,10774.0,11147.0,8618.0,7353.0,7747.0,8801.0,11578.0,11429.0,10246.0,10099.0,9102.0,10590.0,11421.0,11527.0,9540.0,8814.0,10769.0,8978.0,11770.0,11781.0,11138.0,10562.0,9859.0,12572.0,12325.0,12897.0,9547.0,10808.0,9830.0,10783.0,12727.0,12922.0,10798.0,11030.0,10870.0,10928.0,12165.0,13271.0,11611.0,9994.0,9607.0,10527.0,12327.0,12338.0,11738.0,11204.0,10044.0,13810.0,12268.0,12866.0,11193.0,11166.0,9458.0,9593.0,13007.0,11713.0,10343.0,9963.0,10427.0,12465.0,11818.0,11936.0,10718.0,9800.0,9357.0,9579.0,10631.0,12351.0,9977.0,10024.0,10330.0,11862.0,11226.0,11616.0,11432.0,9908.0,10420.721649484536,6,False,5,True
421,1.0,0.0,1,Edmonds' algorithm,,40.0,Maximum-Weight Matching,1.0,Maximum-Weight Matching,358.0,,,1,1,O(mn^2),,,[https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf Edmonds (1965)],Edmonds,1965,https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf,1,1.0,,0.0,0,7,"n: 7,
m: 3",O(mn^2),"n: number of vertices
m: number of edges",n,,,Word RAM,words,7,"n: 7,
m: 3",O(mn^2)??,"At worst, keeps track of the entire sequence of graphs created; it's possible this can be improved?",1.0,0.0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000.0,1000,,1.00E+18,1000000,,1.00E+27,1000000000,,2,,,Combinatorics,Edmonds%27_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Edmonds%27_algorithm/monthly/20150701/20230731,1474.0,2128.0,1356.0,1254.0,1551.0,1134.0,910.0,1086.0,1234.0,1297.0,1154.0,897.0,832.0,817.0,949.0,1470.0,1631.0,1208.0,1357.0,1239.0,1502.0,1350.0,1375.0,1016.0,858.0,860.0,1822.0,1739.0,2054.0,1308.0,1149.0,1318.0,1101.0,1362.0,1287.0,949.0,785.0,733.0,1180.0,1773.0,1677.0,1237.0,1136.0,1201.0,1395.0,1351.0,1156.0,904.0,911.0,737.0,1038.0,1467.0,2134.0,1319.0,952.0,1161.0,1076.0,1190.0,1611.0,1351.0,1036.0,786.0,942.0,1486.0,2023.0,1259.0,1278.0,1314.0,1306.0,1309.0,1336.0,1138.0,980.0,995.0,1088.0,1335.0,1661.0,1372.0,1285.0,977.0,1324.0,1320.0,1322.0,1158.0,947.0,712.0,884.0,1357.0,1528.0,1346.0,1093.0,1095.0,1213.0,1222.0,1109.0,896.0,819.0,1234.5773195876288,6,False,5,False
422,0.0,1.0,1,Eulerian path,,41.0,Constructing Eulerian Trails in a Graph,1.0,Constructing Eulerian Trails in a Graph,362.0,,,1,1,O(E^2),,,[https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph Fleury's algorithm + Tarjan (1974)],Fleury's algorithm + Tarjan,1974,https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph,,,,0.0,0,7,"V: 7,
E: 5",O(E^2),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1.0,0.0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics,Eulerian_path,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Eulerian_path/monthly/20150701/20230731,7003.0,7449.0,10131.0,13467.0,15018.0,14259.0,11058.0,12729.0,14099.0,15401.0,15869.0,16160.0,7516.0,8243.0,11493.0,14804.0,17403.0,16807.0,15220.0,12269.0,14716.0,14583.0,16052.0,11201.0,7510.0,8095.0,11032.0,14023.0,17331.0,14354.0,11618.0,11431.0,13786.0,16537.0,14515.0,10995.0,8442.0,9219.0,12525.0,14873.0,16635.0,15743.0,11619.0,11461.0,14274.0,13892.0,13879.0,9921.0,7753.0,7549.0,10960.0,12948.0,15583.0,13662.0,10795.0,12790.0,15941.0,23819.0,20136.0,18725.0,16297.0,13203.0,14347.0,18137.0,21902.0,22897.0,17195.0,15253.0,17824.0,17545.0,17341.0,12953.0,13297.0,12550.0,11411.0,15594.0,17616.0,19162.0,14313.0,13664.0,15885.0,16976.0,15647.0,12205.0,9508.0,9370.0,9968.0,13465.0,18436.0,15304.0,12542.0,11265.0,12970.0,12370.0,20483.0,10958.0,8215.0,13766.896907216496,5,False,5,True
423,0.0,1.0,1,Eulerian path,,41.0,Constructing Eulerian Trails in a Graph,2.0,Constructing Eulerian Trails in a Graph,363.0,,,1,1,O(E),Any distribution of values,(need to read entire input),[- Hierholzer's algorithm (1873)],Hierholzer's algorithm,1873,-,3,1.0,https://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/,1.0,0,5,"V: 5,
E: 3",O(E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Eulerian_path#Fleury's_algorithm,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,Eulerian_path,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Eulerian_path/monthly/20150701/20230731,7003.0,7449.0,10131.0,13467.0,15018.0,14259.0,11058.0,12729.0,14099.0,15401.0,15869.0,16160.0,7516.0,8243.0,11493.0,14804.0,17403.0,16807.0,15220.0,12269.0,14716.0,14583.0,16052.0,11201.0,7510.0,8095.0,11032.0,14023.0,17331.0,14354.0,11618.0,11431.0,13786.0,16537.0,14515.0,10995.0,8442.0,9219.0,12525.0,14873.0,16635.0,15743.0,11619.0,11461.0,14274.0,13892.0,13879.0,9921.0,7753.0,7549.0,10960.0,12948.0,15583.0,13662.0,10795.0,12790.0,15941.0,23819.0,20136.0,18725.0,16297.0,13203.0,14347.0,18137.0,21902.0,22897.0,17195.0,15253.0,17824.0,17545.0,17341.0,12953.0,13297.0,12550.0,11411.0,15594.0,17616.0,19162.0,14313.0,13664.0,15885.0,16976.0,15647.0,12205.0,9508.0,9370.0,9968.0,13465.0,18436.0,15304.0,12542.0,11265.0,12970.0,12370.0,20483.0,10958.0,8215.0,13766.896907216496,5,True,5,True
424,0.0,0.0,0,,,41.0,Constructing Eulerian Trails in a Graph,1.0,Constructing Eulerian Trails in a Graph,364.0,,,1,1,O(E log^3(E) loglogE),,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Fleury's algorithm + Thorup (2000)],Fleury's algorithm + Thorup,2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,,,0.0,0,5.03,"V: 5.03,
E: 4.01",O(E \log^3(E) \log\log E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",O(E),Keep track of current path + remaining edges needed to be traversed,1.0,0.0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,5,True
425,0.0,0.0,0,,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,365.0,,,1,1,O(n^2),Any distribution of values,(same general behavior for all inputs),[- Naive algorithm (1965)],Naive algorithm,1965,-,1,1.0,https://ccrma.stanford.edu/~jos/mdft/,1.0,0,5,n: 5,O(n^2),$n$: length of the input data set,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,Derived: You only need a constant number of variables that are of $O(1)$ size at any given time,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Signal Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,True
426,1.0,0.0,1,Cooley–Tukey FFT algorithm,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,366.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf Cooley–Tukey algorithm (1965)],Cooley–Tukey algorithm,1965,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,3,0.0,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,1.0,4->5,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1055938,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,100.3512293,0.202433059,19931568.57,50171.66594,0.541765563,29897352854,33447777.3,0.999745327,4,,,Signal Processing,Cooley%E2%80%93Tukey_FFT_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cooley%E2%80%93Tukey_FFT_algorithm/monthly/20150701/20230731,6103.0,6139.0,7507.0,9037.0,9228.0,7851.0,7620.0,7767.0,9034.0,9188.0,9230.0,7495.0,6290.0,6103.0,7094.0,8474.0,9707.0,9244.0,8483.0,8050.0,9106.0,9410.0,8732.0,7527.0,6596.0,6532.0,7015.0,9290.0,9632.0,8466.0,8415.0,8080.0,8756.0,9613.0,9739.0,8187.0,7475.0,7003.0,7766.0,10694.0,9816.0,10028.0,8792.0,8031.0,8532.0,8865.0,8630.0,6527.0,6606.0,5713.0,6610.0,9819.0,8724.0,8341.0,7577.0,7420.0,7025.0,8098.0,8686.0,7528.0,6260.0,5567.0,6330.0,8905.0,8209.0,8574.0,7382.0,7203.0,7890.0,7876.0,7452.0,6783.0,6798.0,5893.0,6154.0,7636.0,7408.0,6403.0,6469.0,6304.0,7495.0,6698.0,7187.0,6585.0,6170.0,6642.0,6468.0,7087.0,15547.0,8493.0,8677.0,7994.0,9111.0,7487.0,8760.0,7433.0,6850.0,7888.927835051546,4,True,1,False
427,0.0,1.0,1,Fast Fourier transform,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,367.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162805 Rader–Brenner algorithm (1976)],Rader–Brenner algorithm,1976,https://ieeexplore.ieee.org/document/1162805,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing,Fast_Fourier_transform,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fast_Fourier_transform/monthly/20150701/20230731,38972.0,38057.0,43945.0,51477.0,50971.0,54904.0,45237.0,47682.0,52552.0,51268.0,50387.0,43646.0,38487.0,38076.0,43462.0,50910.0,54318.0,49044.0,48616.0,49360.0,55009.0,53280.0,51150.0,42085.0,39077.0,39067.0,44248.0,52901.0,57097.0,48602.0,57217.0,51512.0,57063.0,58748.0,56972.0,47416.0,44356.0,44259.0,45338.0,57095.0,54931.0,47742.0,47715.0,48271.0,54115.0,56628.0,52321.0,41755.0,40651.0,38273.0,44632.0,57139.0,54295.0,48636.0,44487.0,44636.0,43701.0,46012.0,46319.0,40467.0,37203.0,34246.0,39949.0,45348.0,45992.0,50617.0,43709.0,43241.0,52047.0,47761.0,44198.0,40348.0,37645.0,35446.0,39670.0,45053.0,45230.0,41478.0,40778.0,39779.0,42789.0,42243.0,43893.0,40404.0,34732.0,35880.0,40487.0,45508.0,101617.0,49296.0,50209.0,45643.0,50979.0,42872.0,46078.0,38592.0,37772.0,46755.886597938144,4,True,1,False
428,1.0,0.0,1,Bruun's FFT algorithm,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,368.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1163036/ Bruun's FFT algorithm (1978)],Bruun's FFT algorithm,1978,https://ieeexplore.ieee.org/document/1163036/,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes O(n) remainders per stage; storage space can be reused across stages,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing,Bruun%27s_FFT_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bruun%27s_FFT_algorithm/monthly/20150701/20230731,236.0,210.0,259.0,265.0,276.0,248.0,249.0,283.0,308.0,362.0,321.0,244.0,272.0,222.0,238.0,256.0,258.0,260.0,207.0,234.0,270.0,265.0,288.0,241.0,189.0,240.0,245.0,214.0,279.0,258.0,283.0,264.0,261.0,335.0,326.0,247.0,192.0,205.0,232.0,294.0,322.0,311.0,251.0,220.0,299.0,326.0,244.0,192.0,157.0,176.0,198.0,260.0,237.0,267.0,211.0,175.0,190.0,237.0,210.0,172.0,163.0,176.0,138.0,169.0,170.0,190.0,122.0,169.0,191.0,185.0,157.0,112.0,99.0,111.0,101.0,150.0,126.0,125.0,133.0,140.0,133.0,177.0,162.0,115.0,173.0,139.0,119.0,173.0,298.0,167.0,155.0,141.0,180.0,184.0,165.0,168.0,113.0,213.1958762886598,4,True,1,False
429,1.0,0.0,1,Split-radix FFT algorithm,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,369.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/citation.cfm?id=1476610 Yavne Split Radix FFT algorithm (1968)],Yavne Split Radix FFT algorithm,1968,https://dl.acm.org/citation.cfm?id=1476610,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing,Split-radix_FFT_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Split-radix_FFT_algorithm/monthly/20150701/20230731,543.0,574.0,573.0,645.0,595.0,534.0,565.0,687.0,701.0,720.0,678.0,561.0,427.0,420.0,489.0,592.0,611.0,558.0,617.0,625.0,780.0,578.0,604.0,476.0,509.0,441.0,479.0,560.0,624.0,474.0,599.0,672.0,648.0,643.0,688.0,519.0,413.0,453.0,468.0,471.0,486.0,470.0,466.0,454.0,573.0,564.0,493.0,394.0,442.0,400.0,448.0,516.0,575.0,571.0,532.0,529.0,590.0,583.0,459.0,475.0,434.0,429.0,407.0,402.0,428.0,404.0,466.0,450.0,518.0,483.0,504.0,513.0,532.0,404.0,414.0,477.0,469.0,435.0,495.0,411.0,496.0,445.0,455.0,470.0,396.0,343.0,396.0,426.0,495.0,447.0,474.0,438.0,512.0,524.0,534.0,473.0,445.0,512.1443298969073,4,True,1,False
430,0.0,1.0,1,Fast Fourier transform,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,370.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf Gentleman; Morven and Gordon Sande radix-4 algorithm (1966)],Gentleman; Morven and Gordon Sande radix-4 algorithm,1966,http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing,Fast_Fourier_transform,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fast_Fourier_transform/monthly/20150701/20230731,38972.0,38057.0,43945.0,51477.0,50971.0,54904.0,45237.0,47682.0,52552.0,51268.0,50387.0,43646.0,38487.0,38076.0,43462.0,50910.0,54318.0,49044.0,48616.0,49360.0,55009.0,53280.0,51150.0,42085.0,39077.0,39067.0,44248.0,52901.0,57097.0,48602.0,57217.0,51512.0,57063.0,58748.0,56972.0,47416.0,44356.0,44259.0,45338.0,57095.0,54931.0,47742.0,47715.0,48271.0,54115.0,56628.0,52321.0,41755.0,40651.0,38273.0,44632.0,57139.0,54295.0,48636.0,44487.0,44636.0,43701.0,46012.0,46319.0,40467.0,37203.0,34246.0,39949.0,45348.0,45992.0,50617.0,43709.0,43241.0,52047.0,47761.0,44198.0,40348.0,37645.0,35446.0,39670.0,45053.0,45230.0,41478.0,40778.0,39779.0,42789.0,42243.0,43893.0,40404.0,34732.0,35880.0,40487.0,45508.0,101617.0,49296.0,50209.0,45643.0,50979.0,42872.0,46078.0,38592.0,37772.0,46755.886597938144,4,True,1,False
431,0.0,0.0,0,,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,371.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162043 Bergland; Glenn radix-8 algorithm (1969)],Bergland; Glenn radix-8 algorithm,1969,https://ieeexplore.ieee.org/document/1162043,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://ieeexplore.ieee.org/document/1162043,0.0,1.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,True,1,False
432,0.0,0.0,0,,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,372.0,,,1,1,O(nlogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/917698 Extended Split Radix FFT algorithm (2001)],Extended Split Radix FFT algorithm,2001,https://ieeexplore.ieee.org/document/917698,,,,0.0,0,4,n: 4,O(n \log n),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes and keeps track of DFTs for recursive subcases,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965.0,,,,,,,,,4,,,Signal Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,True,1,False
433,0.0,0.0,0,,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,373.0,,,1,1,O(n (logn)^2),Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/doi/10.1145/236869.236882  Von zur Gathen-Gerhard additive FFT (1996)],Von zur Gathen-Gerhard additive FFT,1996,https://dl.acm.org/doi/10.1145/236869.236882,,,,0.0,0,4.01,n: 4.01,O(n (\log n)^2),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://dl.acm.org/doi/10.1145/236869.236882,0.0,1.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,False
434,0.0,0.0,0,,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,374.0,,,1,1,O(n(logn)^{1.585}),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1926/ Wang-Zhu-Cantor additive FFT (1988)],Wang-Zhu-Cantor additive FFT,1988,https://ieeexplore.ieee.org/document/1926/,,,,0.0,0,4.00585,n: 4.00585,O(n(\log n)^{1.585}),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n)?,Computes O(n) remainders per stage; storage space can be reused across stages,1.0,0.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,False
435,0.0,0.0,0,,,42.0,Discrete Fourier Transform,2.0,Discrete Fourier Transform,375.0,,,1,1,O(n logn loglogn),Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613 Gao’s additive FFT (2010)],Gao’s additive FFT,2010,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,,,,0.0,0,4.001,n: 4.001,O(n logn loglogn),$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,O(n),https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,0.0,1.0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,False
436,0.0,1.0,1,Line drawing algorithm,O(n),43.0,Line Drawing,2.0,Line Drawing,376.0,,,1,1,O(n),not well-defined,(none),[- Naive algorithm (1940)],Naive algorithm,1940,-,1,1.0,,1.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Line_drawing_algorithm,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Image Processing,Line_drawing_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Line_drawing_algorithm/monthly/20150701/20230731,2714.0,2826.0,2880.0,2810.0,2680.0,2859.0,3538.0,3738.0,3000.0,2885.0,2673.0,2053.0,2149.0,2366.0,2719.0,3012.0,3327.0,3171.0,3460.0,3626.0,4064.0,3658.0,3365.0,2627.0,3012.0,3026.0,3197.0,3931.0,3630.0,3506.0,3575.0,3191.0,3291.0,3063.0,3421.0,2423.0,3187.0,3174.0,3093.0,3320.0,3662.0,3318.0,3364.0,3296.0,3406.0,3381.0,3455.0,2564.0,2563.0,3196.0,3114.0,3241.0,3841.0,3540.0,3627.0,3806.0,3122.0,3262.0,3176.0,2712.0,2604.0,3355.0,4054.0,3598.0,3604.0,3954.0,3556.0,3781.0,4347.0,3845.0,3325.0,3555.0,4198.0,4022.0,3283.0,3330.0,3504.0,4185.0,3450.0,3594.0,3512.0,3311.0,3521.0,3860.0,2853.0,3030.0,3249.0,3391.0,4063.0,3890.0,3272.0,3491.0,3370.0,3075.0,3342.0,2461.0,2397.0,3289.8762886597938,3,True,1,True
437,1.0,0.0,1,Digital differential analyzer,O(n),43.0,Line Drawing,2.0,Line Drawing,377.0,,,1,1,O(n),not well-defined,(none),[- Digital Differential Analyzer (1940)],Digital Differential Analyzer,1940,-,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Digital_differential_analyzer_(graphics_algorithm),,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,Digital_differential_analyzer,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Digital_differential_analyzer/monthly/20150701/20230731,458.0,575.0,563.0,590.0,534.0,597.0,468.0,591.0,504.0,537.0,494.0,366.0,369.0,398.0,459.0,474.0,491.0,473.0,412.0,475.0,410.0,422.0,408.0,285.0,295.0,354.0,328.0,329.0,354.0,440.0,512.0,449.0,397.0,476.0,449.0,222.0,243.0,316.0,248.0,299.0,311.0,292.0,273.0,271.0,342.0,314.0,281.0,273.0,218.0,179.0,195.0,215.0,301.0,220.0,248.0,265.0,218.0,262.0,246.0,257.0,224.0,141.0,191.0,208.0,197.0,273.0,262.0,190.0,294.0,253.0,221.0,234.0,221.0,222.0,165.0,156.0,276.0,265.0,193.0,143.0,157.0,474.0,181.0,226.0,185.0,192.0,175.0,125.0,161.0,171.0,184.0,154.0,228.0,171.0,213.0,197.0,173.0,308.6701030927835,3,True,1,True
438,1.0,0.0,1,Bresenham's line algorithm,O(n),43.0,Line Drawing,2.0,Line Drawing,378.0,,,1,1,O(n),not well-defined,(none),[https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf Bresenham's line algorithm (1965)],Bresenham's line algorithm,1965,https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,Bresenham%27s_line_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bresenham%27s_line_algorithm/monthly/20150701/20230731,18336.0,14801.0,15244.0,15587.0,13790.0,13563.0,15907.0,16663.0,16069.0,15606.0,14736.0,12669.0,12121.0,14480.0,15050.0,16071.0,16816.0,16555.0,25342.0,18033.0,17717.0,15762.0,17013.0,13261.0,13753.0,16293.0,16655.0,17846.0,19623.0,16309.0,18220.0,17251.0,18596.0,18042.0,21368.0,12823.0,14399.0,17103.0,16503.0,17274.0,17777.0,16479.0,16527.0,17903.0,19253.0,18811.0,16813.0,11567.0,12343.0,14561.0,16260.0,16905.0,16910.0,16452.0,16249.0,17091.0,16571.0,15153.0,16158.0,13489.0,12262.0,14175.0,20263.0,17297.0,15431.0,15821.0,16628.0,15542.0,18123.0,15606.0,14647.0,15025.0,14084.0,13819.0,16757.0,16171.0,14500.0,16856.0,14929.0,15705.0,16995.0,14156.0,14236.0,13409.0,12304.0,12762.0,15350.0,14942.0,16391.0,15017.0,14274.0,13955.0,16299.0,13472.0,13973.0,11748.0,10671.0,15774.40206185567,3,True,1,True
439,1.0,0.0,1,Xiaolin Wu's line algorithm,O(n),43.0,Line Drawing,2.0,Line Drawing,379.0,,,1,1,O(n),not well-defined,(none),[http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf Xiaolin Wu's line algorithm (1991)],Xiaolin Wu's line algorithm,1991,http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,Xiaolin_Wu%27s_line_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Xiaolin_Wu%27s_line_algorithm/monthly/20150701/20230731,1772.0,1798.0,2069.0,2615.0,1952.0,1682.0,2057.0,2221.0,2213.0,1967.0,2065.0,1808.0,1632.0,1897.0,2166.0,2335.0,2035.0,2323.0,2563.0,2102.0,2458.0,2113.0,2251.0,1936.0,1781.0,2104.0,2081.0,2331.0,2124.0,1854.0,2052.0,2025.0,2515.0,2021.0,2416.0,1830.0,1777.0,1702.0,2105.0,2463.0,2150.0,2504.0,2477.0,2326.0,2419.0,2367.0,2029.0,1830.0,1883.0,1786.0,2117.0,2608.0,2139.0,1942.0,2267.0,2198.0,2665.0,2379.0,2166.0,1725.0,1650.0,1649.0,2101.0,2118.0,2022.0,2034.0,1997.0,2000.0,2485.0,2205.0,2118.0,2277.0,1886.0,1877.0,2206.0,1907.0,1850.0,2016.0,2037.0,2266.0,2000.0,1859.0,1875.0,1725.0,1861.0,1902.0,1939.0,1957.0,2074.0,3660.0,2336.0,1907.0,2025.0,1867.0,1808.0,1674.0,1547.0,2081.494845360825,3,True,1,True
440,0.0,1.0,1,Line drawing algorithm,O(n),43.0,Line Drawing,2.0,Line Drawing,380.0,,,1,1,O(n),not well-defined,(none),[http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf Gupta-Sproull algorithm (1981)],Gupta-Sproull algorithm,1981,http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf,,,,0.0,0,3,n: 3,O(n),n: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,O(1),Constant number of O(1)-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,Line_drawing_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Line_drawing_algorithm/monthly/20150701/20230731,2714.0,2826.0,2880.0,2810.0,2680.0,2859.0,3538.0,3738.0,3000.0,2885.0,2673.0,2053.0,2149.0,2366.0,2719.0,3012.0,3327.0,3171.0,3460.0,3626.0,4064.0,3658.0,3365.0,2627.0,3012.0,3026.0,3197.0,3931.0,3630.0,3506.0,3575.0,3191.0,3291.0,3063.0,3421.0,2423.0,3187.0,3174.0,3093.0,3320.0,3662.0,3318.0,3364.0,3296.0,3406.0,3381.0,3455.0,2564.0,2563.0,3196.0,3114.0,3241.0,3841.0,3540.0,3627.0,3806.0,3122.0,3262.0,3176.0,2712.0,2604.0,3355.0,4054.0,3598.0,3604.0,3954.0,3556.0,3781.0,4347.0,3845.0,3325.0,3555.0,4198.0,4022.0,3283.0,3330.0,3504.0,4185.0,3450.0,3594.0,3512.0,3311.0,3521.0,3860.0,2853.0,3030.0,3249.0,3391.0,4063.0,3890.0,3272.0,3491.0,3370.0,3075.0,3342.0,2461.0,2397.0,3289.8762886597938,3,True,1,True
441,1.0,0.0,1,Greiner–Hormann clipping algorithm,,44.0,Polygon Clipping,1.0,Polygon Clipping with Arbitrary Clipping Polygon,381.0,,,1,1,O(nlogn),,,[http://davis.wpi.edu/~matt/courses/clipping/ Greiner–Hormann clipping algorithm (1998)],Greiner–Hormann clipping algorithm,1998,http://davis.wpi.edu/~matt/courses/clipping/,2,1.0,https://www.inf.usi.ch/hormann/papers/Greiner.1998.ECO.pdf,1.0,4->5,5,n: 5,O(n^2) ?,n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Image Processing,Greiner%E2%80%93Hormann_clipping_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Greiner%E2%80%93Hormann_clipping_algorithm/monthly/20150701/20230731,325.0,302.0,325.0,363.0,366.0,339.0,350.0,387.0,454.0,364.0,545.0,337.0,293.0,328.0,368.0,386.0,434.0,347.0,376.0,394.0,489.0,425.0,422.0,425.0,428.0,396.0,408.0,498.0,460.0,416.0,432.0,402.0,449.0,476.0,386.0,378.0,371.0,373.0,411.0,461.0,428.0,446.0,432.0,373.0,471.0,463.0,458.0,411.0,335.0,445.0,385.0,450.0,402.0,358.0,439.0,600.0,495.0,526.0,594.0,444.0,455.0,457.0,459.0,446.0,432.0,422.0,547.0,468.0,554.0,513.0,449.0,444.0,440.0,401.0,389.0,435.0,413.0,436.0,472.0,368.0,476.0,430.0,548.0,471.0,419.0,465.0,448.0,514.0,406.0,511.0,517.0,505.0,480.0,439.0,500.0,424.0,414.0,431.0412371134021,5,True,3,False
442,1.0,0.0,1,Sutherland–Hodgman algorithm,,44.0,Polygon Clipping,1.0,Polygon Clipping with Convex Clipping Polygon,382.0,,,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/360767.360802 Sutherland–Hodgman algorithm (1974)],Sutherland–Hodgman algorithm,1974,https://dl.acm.org/doi/10.1145/360767.360802,1,1.0,https://dl.acm.org/doi/pdf/10.1145/360767.360802,1.0,0,5,n: 5,O(n^2),n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,3,n: 3,O(n),"Each iteration, keeps track of updated polygon after clipping by a side. Note that there can be at most $O(n)$ intersection points due to the clipping polygon being convex",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Image Processing,Sutherland%E2%80%93Hodgman_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sutherland%E2%80%93Hodgman_algorithm/monthly/20150701/20230731,1466.0,2110.0,2524.0,3020.0,3089.0,2206.0,1938.0,2099.0,3311.0,2924.0,2783.0,2264.0,1355.0,1618.0,2293.0,2914.0,3606.0,2448.0,2230.0,2250.0,3721.0,4201.0,3816.0,2712.0,1631.0,1742.0,3050.0,2734.0,3669.0,2669.0,1908.0,2355.0,3249.0,2785.0,2707.0,2055.0,1324.0,1556.0,2140.0,2985.0,2779.0,2513.0,1877.0,1918.0,2582.0,3140.0,2563.0,2217.0,1429.0,1387.0,1573.0,2518.0,2810.0,2647.0,2061.0,1954.0,2291.0,2675.0,2605.0,2442.0,1657.0,1866.0,2632.0,2662.0,3913.0,3016.0,2858.0,2243.0,3026.0,2536.0,2647.0,2709.0,2108.0,1751.0,1723.0,2061.0,2390.0,3621.0,2163.0,2118.0,1898.0,1727.0,2019.0,2707.0,1612.0,1716.0,1611.0,2147.0,2756.0,2971.0,2119.0,1658.0,2013.0,1814.0,2167.0,2520.0,1557.0,2393.298969072165,5,True,3,True
443,1.0,0.0,1,Vatti clipping algorithm,,44.0,Polygon Clipping,1.0,Polygon Clipping with Arbitrary Clipping Polygon,383.0,,,1,1,O(nlogn),,,[https://dl.acm.org/doi/10.1145/129902.129906 Vatti clipping algorithm (1992)],Vatti clipping algorithm,1992,https://dl.acm.org/doi/10.1145/129902.129906,,,,0.0,0,5,n: 5,O(n^2) ?,n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Image Processing,Vatti_clipping_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Vatti_clipping_algorithm/monthly/20150701/20230731,870.0,705.0,814.0,790.0,851.0,847.0,867.0,825.0,944.0,844.0,818.0,822.0,783.0,778.0,838.0,885.0,939.0,818.0,834.0,790.0,952.0,807.0,908.0,910.0,905.0,936.0,906.0,885.0,914.0,793.0,883.0,784.0,930.0,829.0,918.0,841.0,919.0,728.0,830.0,922.0,935.0,871.0,882.0,857.0,958.0,960.0,808.0,716.0,769.0,831.0,760.0,872.0,795.0,794.0,830.0,839.0,801.0,894.0,840.0,835.0,817.0,747.0,770.0,928.0,799.0,799.0,925.0,847.0,992.0,946.0,832.0,783.0,748.0,726.0,689.0,756.0,796.0,806.0,926.0,721.0,859.0,703.0,817.0,798.0,700.0,635.0,595.0,572.0,466.0,584.0,473.0,527.0,583.0,491.0,515.0,487.0,493.0,800.6185567010309,5,True,3,False
444,1.0,0.0,1,Weiler–Atherton clipping algorithm,,44.0,Polygon Clipping,1.0,Polygon Clipping with Arbitrary Clipping Polygon,384.0,,,1,1,O(n^2),,,[https://www.cs.drexel.edu/~david/Classes/CS430/HWs/p214-weiler.pdf Weiler–Atherton clipping algorithm (1977)],Weiler–Atherton clipping algorithm,1977,https://www.cs.drexel.edu/~david/Classes/CS430/HWs/p214-weiler.pdf,,,,0.0,0,5,n: 5,O(n^2),n: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Image Processing,Weiler%E2%80%93Atherton_clipping_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Weiler%E2%80%93Atherton_clipping_algorithm/monthly/20150701/20230731,607.0,534.0,708.0,869.0,869.0,896.0,670.0,836.0,1151.0,1112.0,981.0,706.0,607.0,644.0,866.0,1033.0,1253.0,895.0,732.0,666.0,1156.0,1187.0,1152.0,938.0,641.0,661.0,895.0,1163.0,1373.0,1039.0,878.0,950.0,1245.0,1453.0,1238.0,844.0,604.0,720.0,896.0,1128.0,1165.0,1194.0,664.0,733.0,979.0,1265.0,990.0,722.0,568.0,553.0,639.0,864.0,760.0,740.0,602.0,651.0,752.0,841.0,777.0,998.0,639.0,699.0,704.0,832.0,1409.0,880.0,862.0,652.0,775.0,657.0,588.0,523.0,551.0,513.0,549.0,951.0,667.0,983.0,650.0,527.0,567.0,564.0,653.0,660.0,406.0,396.0,574.0,838.0,785.0,988.0,996.0,732.0,877.0,1063.0,838.0,816.0,446.0,825.3917525773196,5,True,3,False
445,1.0,0.0,1,Inverse iteration,,47.0,Eigenvalues (Iterative Methods),2.0,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,398.0,,0.0,1,1,O(n^2),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104 Inverse iteration (1921)],Inverse iteration,1921,https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,Inverse_iteration,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Inverse_iteration/monthly/20150701/20230731,764.0,846.0,934.0,1391.0,1714.0,1555.0,1115.0,1224.0,1661.0,1574.0,1425.0,982.0,594.0,699.0,922.0,1210.0,1575.0,1471.0,1165.0,1229.0,1475.0,1613.0,1329.0,969.0,773.0,825.0,902.0,1634.0,1621.0,1664.0,1196.0,1155.0,1421.0,1422.0,1542.0,1030.0,763.0,662.0,897.0,1637.0,1346.0,1509.0,1317.0,1089.0,1542.0,1714.0,1587.0,1063.0,857.0,865.0,1005.0,1607.0,1877.0,1481.0,1303.0,1160.0,1307.0,1666.0,1672.0,1131.0,838.0,817.0,942.0,1560.0,1851.0,1666.0,1280.0,1017.0,1748.0,1544.0,1533.0,1173.0,879.0,1102.0,854.0,1421.0,1551.0,1563.0,1169.0,921.0,1630.0,1340.0,1429.0,990.0,816.0,740.0,879.0,1279.0,1557.0,1268.0,1154.0,845.0,1496.0,1201.0,1189.0,1175.0,746.0,1245.7835051546392,2.5,False,2.5,False
446,1.0,0.0,1,Rayleigh quotient iteration,,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenpair; Any eigenvalue,399.0,,0.0,1,1,O(n^2),,,[- Rayleigh quotient iteration (1940)],Rayleigh quotient iteration,1940,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store $(A-mu_i*I)^{(-1)}$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Rayleigh_quotient_iteration#Algorithm,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,Rayleigh_quotient_iteration,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Rayleigh_quotient_iteration/monthly/20150701/20230731,550.0,565.0,750.0,885.0,1154.0,1089.0,777.0,853.0,1107.0,1202.0,1068.0,694.0,585.0,646.0,757.0,952.0,1515.0,1117.0,898.0,944.0,1173.0,1555.0,1163.0,861.0,621.0,674.0,858.0,1183.0,1459.0,1455.0,1007.0,1055.0,1353.0,1361.0,1307.0,836.0,782.0,608.0,697.0,1068.0,1445.0,1320.0,848.0,939.0,1271.0,1411.0,1200.0,696.0,627.0,612.0,759.0,1205.0,1631.0,1507.0,991.0,834.0,1154.0,1262.0,1394.0,925.0,599.0,605.0,831.0,1260.0,1613.0,1406.0,1012.0,921.0,1515.0,1298.0,917.0,745.0,563.0,584.0,684.0,967.0,1184.0,1039.0,857.0,721.0,1317.0,1116.0,1026.0,765.0,599.0,526.0,659.0,988.0,1221.0,1281.0,857.0,747.0,1310.0,1071.0,1002.0,660.0,545.0,992.020618556701,2.5,False,2.5,False
447,1.0,0.0,1,LOBPCG,,47.0,Eigenvalues (Iterative Methods),1.0,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,400.0,,0.0,1,1,O(n^2),,,[- LOBPCG algorithm (1948)],LOBPCG algorithm,1948,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of $O(n)$-sized vectors per iteration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/LOBPCG,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,LOBPCG,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/LOBPCG/monthly/20150701/20230731,208.0,181.0,198.0,265.0,238.0,187.0,204.0,228.0,267.0,231.0,244.0,255.0,218.0,240.0,193.0,308.0,301.0,252.0,246.0,256.0,252.0,209.0,261.0,214.0,204.0,249.0,196.0,248.0,340.0,326.0,335.0,326.0,374.0,292.0,352.0,341.0,351.0,368.0,282.0,356.0,376.0,411.0,485.0,542.0,538.0,443.0,473.0,504.0,464.0,460.0,392.0,491.0,483.0,415.0,463.0,370.0,510.0,444.0,462.0,445.0,392.0,382.0,390.0,398.0,452.0,404.0,380.0,358.0,583.0,475.0,596.0,385.0,390.0,367.0,386.0,442.0,453.0,444.0,425.0,452.0,479.0,508.0,468.0,435.0,373.0,377.0,398.0,409.0,407.0,351.0,383.0,441.0,626.0,642.0,607.0,534.0,595.0,374.7835051546392,2.5,False,2.5,True
448,0.0,0.0,0,,,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,401.0,,0.0,1,1,O(n^2),,,[- Bisection method (1985)],Bisection method,1985,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computing characteristic polynomial takes $O(n^2)$ space (via e.g. Faddeev–LeVerrier algorithm); rest of algo can be done in $O(n)$ space (related to root computation),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.5,False,2.5,False
449,0.0,1.0,1,Eigenvalue algorithm,,47.0,Eigenvalues (Iterative Methods),1.0,Any eigenvalue,402.0,,0.0,1,1,O(n^2),,,[- Laguerre iteration (1940)],Laguerre iteration,1940,-,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,^ see above,1.0,0.0,,0,,0,,0,0,,0,0,https://archive.org/details/numericalmethods00form,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,Eigenvalue_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Eigenvalue_algorithm/monthly/20150701/20230731,3200.0,3240.0,4235.0,4850.0,5452.0,5599.0,5050.0,5234.0,5431.0,5522.0,5113.0,4053.0,3302.0,3765.0,4599.0,7149.0,6304.0,5595.0,5319.0,6909.0,6314.0,5711.0,5633.0,4797.0,4121.0,4085.0,4821.0,5930.0,6171.0,5193.0,4909.0,4795.0,5456.0,5306.0,5189.0,4070.0,3773.0,3640.0,4034.0,5140.0,5646.0,4706.0,4542.0,4150.0,5154.0,5841.0,5102.0,4118.0,3709.0,3532.0,4079.0,5117.0,6534.0,4822.0,4553.0,4777.0,4689.0,5399.0,5388.0,4573.0,3873.0,3869.0,4390.0,6006.0,6496.0,5322.0,4771.0,4382.0,5444.0,4944.0,4582.0,3898.0,4045.0,3782.0,3956.0,5187.0,5376.0,4524.0,4736.0,4335.0,4924.0,4504.0,4217.0,3657.0,3002.0,3182.0,3290.0,3882.0,4521.0,3904.0,3741.0,3420.0,3929.0,3521.0,3754.0,3438.0,2948.0,4672.082474226804,2.5,False,2.5,False
450,1.0,0.0,1,QR algorithm,,47.0,Eigenvalues (Iterative Methods),2.0,All eigenvalues; Any eigenvalue,403.0,,0.0,1,1,O(n^2),,,[https://academic.oup.com/comjnl/article/4/4/332/432033 QR algorithm (1962)],QR algorithm,1962,https://academic.oup.com/comjnl/article/4/4/332/432033,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores QR factorization at each iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,QR_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/QR_algorithm/monthly/20150701/20230731,2630.0,2243.0,2681.0,3279.0,3686.0,3509.0,2971.0,3122.0,3462.0,3969.0,3432.0,2734.0,2256.0,2289.0,2768.0,3349.0,4023.0,3590.0,2936.0,2735.0,3521.0,3796.0,3401.0,2728.0,2086.0,2402.0,2481.0,3316.0,3838.0,3620.0,2986.0,2897.0,3460.0,3667.0,3573.0,2661.0,2776.0,2403.0,2484.0,3576.0,4285.0,3466.0,3099.0,3161.0,3834.0,4751.0,3598.0,2982.0,2570.0,2274.0,2665.0,3786.0,4684.0,3873.0,3139.0,3149.0,3152.0,3580.0,4016.0,3252.0,2458.0,2431.0,2690.0,3626.0,4639.0,4138.0,3059.0,2960.0,3965.0,4632.0,3949.0,3127.0,2748.0,3194.0,2714.0,3407.0,4288.0,3893.0,3373.0,3349.0,3773.0,3805.0,3804.0,4082.0,2494.0,3450.0,3140.0,3608.0,4737.0,4013.0,3322.0,3336.0,4409.0,4293.0,4201.0,3584.0,2863.0,3342.3298969072166,2.5,False,2.5,False
451,1.0,0.0,1,Jacobi eigenvalue algorithm,,47.0,Eigenvalues (Iterative Methods),1.0,All eigenvalues; Any eigenvalue,404.0,,0.0,1,1,O(n^2),,,[https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030 Jacobi eigenvalue algorithm (1846)],Jacobi eigenvalue algorithm,1846,https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)?,Computes and stores results of GSG^T iterations,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000.0,,,,,,,,,4,,,Numerical Analysis,Jacobi_eigenvalue_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Jacobi_eigenvalue_algorithm/monthly/20150701/20230731,1261.0,1351.0,1571.0,1955.0,2137.0,1949.0,1732.0,1662.0,2020.0,2361.0,1906.0,1484.0,1114.0,1206.0,1605.0,1908.0,2155.0,1809.0,1595.0,1845.0,2230.0,1983.0,2088.0,1460.0,1294.0,1384.0,1645.0,2015.0,2186.0,1917.0,1495.0,1592.0,1728.0,1935.0,2057.0,1400.0,1097.0,1089.0,1422.0,1542.0,1825.0,1775.0,1374.0,1503.0,1723.0,2249.0,1874.0,1278.0,1160.0,1228.0,1433.0,1599.0,2037.0,1675.0,1485.0,1695.0,1808.0,2499.0,2626.0,1844.0,1549.0,1436.0,1929.0,2049.0,2621.0,2263.0,2021.0,1967.0,2643.0,2124.0,1862.0,1739.0,1400.0,1364.0,1684.0,1728.0,1993.0,2032.0,1804.0,1875.0,1813.0,1909.0,2182.0,1796.0,1425.0,1274.0,1624.0,1971.0,2035.0,1735.0,1487.0,1631.0,1792.0,1815.0,1789.0,1523.0,1193.0,1752.0824742268042,2.5,False,2.5,False
452,1.0,0.0,1,Divide and rule,,47.0,Eigenvalues (Iterative Methods),2.0,All eigenvalues; Any eigenvalue,405.0,,0.0,1,1,O(nlogn),,,[https://link.springer.com/content/pdf/10.1007/BF01389480.pdf Divide-and-conquer (1986)],Divide-and-conquer,1986,https://link.springer.com/content/pdf/10.1007/BF01389480.pdf,,,,1.0,4->5,2.51,"n: 4,
n^2: 2.51",O(n \log n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Stores reduction to tridiagonal form; recursion (S(n)=2S(n/2)+O(n^2)) should work out to O(n^2),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm,,,,,,,,,,,9965.0,100.3512293,0.10537939,19931568.57,50171.66594,0.265271952,29897352854,33447777.3,0.457381329,4,,,Numerical Analysis,Divide_and_rule,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Divide_and_rule/monthly/20150701/20230731,15075.0,13066.0,13724.0,14290.0,16402.0,14274.0,15986.0,14853.0,16288.0,14190.0,13571.0,17584.0,18079.0,13936.0,13786.0,15780.0,20724.0,14688.0,18810.0,17006.0,16907.0,14238.0,15804.0,14985.0,14231.0,20790.0,21001.0,18831.0,17677.0,16951.0,20175.0,21760.0,20141.0,17673.0,18846.0,16500.0,16579.0,17049.0,16142.0,18497.0,16874.0,15063.0,17788.0,16275.0,18659.0,16462.0,15506.0,13138.0,14871.0,16670.0,15509.0,15704.0,16806.0,17082.0,17595.0,16184.0,14940.0,18405.0,21929.0,37288.0,21005.0,19661.0,18944.0,20789.0,20785.0,18900.0,25924.0,19908.0,25332.0,18528.0,17867.0,18048.0,17659.0,17277.0,17976.0,18828.0,18584.0,16880.0,17077.0,17511.0,16497.0,14783.0,14597.0,12860.0,12352.0,12959.0,14506.0,13169.0,13146.0,11163.0,12553.0,11979.0,14685.0,12560.0,13957.0,12664.0,11948.0,16840.18556701031,2.5,False,2.5,False
453,1.0,0.0,1,Homotopy analysis method,,47.0,Eigenvalues (Iterative Methods),1.0,All eigenpairs; Eigenpair closest to mu; Any eigenpair; Any eigenvalue; All eigenvalues,406.0,,0.0,1,1,O(n^2),,,[https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/(S(czeh2tfqyw2orz553k1w0r45))/reference/ReferencesPapers.aspx?ReferenceID=530065,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2)??,Conservative bound on space used per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,Homotopy_analysis_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Homotopy_analysis_method/monthly/20150701/20230731,727.0,730.0,714.0,817.0,934.0,875.0,841.0,817.0,944.0,947.0,1000.0,861.0,712.0,745.0,777.0,946.0,961.0,1043.0,962.0,928.0,1124.0,995.0,1039.0,840.0,832.0,811.0,813.0,1099.0,1090.0,996.0,993.0,977.0,984.0,946.0,1124.0,836.0,803.0,763.0,804.0,992.0,947.0,1014.0,962.0,928.0,1072.0,1061.0,934.0,848.0,982.0,744.0,849.0,909.0,942.0,1030.0,1007.0,844.0,813.0,861.0,791.0,761.0,682.0,657.0,665.0,744.0,796.0,820.0,841.0,751.0,907.0,888.0,749.0,736.0,808.0,688.0,737.0,768.0,1284.0,1155.0,910.0,687.0,912.0,803.0,868.0,839.0,720.0,825.0,696.0,719.0,736.0,766.0,801.0,781.0,812.0,804.0,898.0,927.0,655.0,868.8247422680413,2.5,False,2.5,False
454,1.0,0.0,1,Folded spectrum method,,47.0,Eigenvalues (Iterative Methods),1.0,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,407.0,,0.0,1,1,O(n^2),,,[https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828 Folded spectrum method (1934)],Folded spectrum method,1934,https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",O(n)?,Requires only a constant number of O(n)-sized vectors per iteration; matrix-to-vector multiplication only requires O(n) aux space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Numerical Analysis,Folded_spectrum_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Folded_spectrum_method/monthly/20150701/20230731,103.0,79.0,109.0,137.0,119.0,87.0,88.0,67.0,73.0,111.0,81.0,83.0,76.0,69.0,72.0,112.0,113.0,87.0,91.0,92.0,88.0,76.0,97.0,76.0,63.0,88.0,79.0,100.0,106.0,94.0,123.0,85.0,94.0,105.0,116.0,69.0,70.0,49.0,78.0,77.0,106.0,82.0,97.0,70.0,110.0,118.0,94.0,81.0,85.0,68.0,59.0,116.0,93.0,102.0,95.0,98.0,63.0,91.0,77.0,53.0,67.0,45.0,49.0,47.0,70.0,77.0,58.0,71.0,83.0,85.0,80.0,65.0,60.0,36.0,50.0,43.0,75.0,68.0,62.0,53.0,99.0,75.0,76.0,58.0,53.0,55.0,60.0,91.0,103.0,71.0,75.0,68.0,70.0,82.0,90.0,72.0,49.0,80.73195876288659,2.5,False,2.5,True
455,0.0,1.0,1,Eigenvalue algorithm,,47.0,Eigenvalues (Iterative Methods),2.0,Any eigenpair; Any eigenvalue,408.0,,0.0,1,1,O(n),,,[https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf MRRR algorithm (1999)],MRRR algorithm,1999,https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf,2,1.0,http://www.cs.utexas.edu/~inderjit/public_papers/DesignMRRR_toms06.pdf,1.0,5->6,2.5,"n: 3,
n^2: 2.5",O(n),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Need to compute and store some matrix of the form $(A-mu*I)^{(-1)}$ (for inverse iteration-like uses),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.124210035,1000000,1000000,0.263848203,1000000000,1000000000,0.420830833,4,,,Numerical Analysis,Eigenvalue_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Eigenvalue_algorithm/monthly/20150701/20230731,3200.0,3240.0,4235.0,4850.0,5452.0,5599.0,5050.0,5234.0,5431.0,5522.0,5113.0,4053.0,3302.0,3765.0,4599.0,7149.0,6304.0,5595.0,5319.0,6909.0,6314.0,5711.0,5633.0,4797.0,4121.0,4085.0,4821.0,5930.0,6171.0,5193.0,4909.0,4795.0,5456.0,5306.0,5189.0,4070.0,3773.0,3640.0,4034.0,5140.0,5646.0,4706.0,4542.0,4150.0,5154.0,5841.0,5102.0,4118.0,3709.0,3532.0,4079.0,5117.0,6534.0,4822.0,4553.0,4777.0,4689.0,5399.0,5388.0,4573.0,3873.0,3869.0,4390.0,6006.0,6496.0,5322.0,4771.0,4382.0,5444.0,4944.0,4582.0,3898.0,4045.0,3782.0,3956.0,5187.0,5376.0,4524.0,4736.0,4335.0,4924.0,4504.0,4217.0,3657.0,3002.0,3182.0,3290.0,3882.0,4521.0,3904.0,3741.0,3420.0,3929.0,3521.0,3754.0,3438.0,2948.0,4672.082474226804,2.5,True,2.5,False
456,1.0,0.0,1,Bisection method,,48.0,Root Computation,1.0,General Root Computation,409.0,,0.0,1,1,O(log((b-a)/epsilon),,,[- Bisection method (1820)],Bisection method,1820,-,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,https://en.wikipedia.org/wiki/Bisection_method,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Bisection_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bisection_method/monthly/20150701/20230731,8957.0,11644.0,20776.0,16659.0,15940.0,12249.0,17981.0,17580.0,17685.0,15749.0,14450.0,12377.0,8713.0,11937.0,20615.0,20334.0,19102.0,14304.0,17158.0,20390.0,20492.0,17825.0,16175.0,14674.0,11250.0,12588.0,18402.0,21244.0,19599.0,15642.0,18301.0,19708.0,20470.0,18986.0,17734.0,12333.0,11996.0,12668.0,17119.0,22059.0,17355.0,14759.0,16303.0,18348.0,17917.0,17730.0,15764.0,11628.0,10454.0,11130.0,18400.0,19773.0,18385.0,13611.0,15029.0,17993.0,15850.0,19283.0,18705.0,16949.0,11942.0,11595.0,18413.0,21441.0,20580.0,17307.0,16683.0,18952.0,20139.0,17270.0,16214.0,17163.0,14043.0,14133.0,16649.0,19805.0,16375.0,14450.0,14102.0,16236.0,15108.0,13865.0,13020.0,11083.0,8958.0,8934.0,12993.0,14061.0,13840.0,11244.0,11932.0,12909.0,13781.0,11506.0,11912.0,9864.0,7607.0,15622.061855670105,3,True,1,True
457,1.0,0.0,1,Regula falsi,,48.0,Root Computation,1.0,General Root Computation,410.0,,0.0,1,1,O(n),,,[- False position method (1690)],False position method,1690,-,1,1.0,https://www.geeksforgeeks.org/program-for-method-of-false-position/,1.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,https://archive.org/details/historyofmathema031897mbp,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,Regula_falsi,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Regula_falsi/monthly/20150701/20230731,76.0,78.0,118.0,77.0,91.0,64.0,61.0,96.0,83.0,86.0,72.0,60.0,42.0,66.0,76.0,95.0,66.0,63.0,73.0,77.0,67.0,77.0,66.0,55.0,45.0,42.0,62.0,43.0,56.0,43.0,50.0,62.0,57.0,60.0,67.0,53.0,42.0,54.0,63.0,100.0,73.0,50.0,54.0,60.0,56.0,66.0,51.0,57.0,1298.0,2951.0,4447.0,5160.0,5046.0,4355.0,4623.0,5257.0,4214.0,4007.0,5000.0,4096.0,3562.0,3475.0,5721.0,6900.0,5848.0,6740.0,5594.0,5999.0,6404.0,5370.0,4547.0,4834.0,5520.0,4759.0,5364.0,4978.0,5265.0,4102.0,4524.0,4930.0,4865.0,4144.0,3745.0,3143.0,2020.0,2112.0,3354.0,3526.0,3650.0,3319.0,3222.0,3474.0,4218.0,3375.0,3816.0,2846.0,2477.0,2220.072164948453,3,True,1,True
458,1.0,0.0,1,Newton's method,,48.0,Root Computation,1.0,Root Computation with continuous first derivative,411.0,,0.0,1,1,(order of convergence = 2),,,[ Newton's method (1940)],Newton's method,1940,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current estimate $x_i$ and the derivative $f'$ (assuming this takes $O(1)$ space); iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Newton%27s_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Newton%27s_method/monthly/20150701/20230731,35995.0,36186.0,51307.0,69379.0,65054.0,54249.0,48495.0,58715.0,59404.0,59530.0,55196.0,43277.0,35350.0,38631.0,53430.0,66711.0,67770.0,52901.0,50653.0,57170.0,63238.0,56090.0,58000.0,43402.0,38201.0,47950.0,57247.0,72729.0,74201.0,58571.0,56505.0,63116.0,65225.0,66441.0,63703.0,44967.0,42264.0,44292.0,57016.0,73368.0,72635.0,57463.0,54749.0,61912.0,69336.0,66150.0,58584.0,42052.0,38197.0,39050.0,51930.0,66300.0,60250.0,46270.0,47433.0,55517.0,50655.0,55421.0,55720.0,48810.0,39193.0,35336.0,50334.0,64222.0,58798.0,50813.0,54363.0,54664.0,66373.0,56168.0,49115.0,44511.0,41285.0,38382.0,50082.0,59302.0,54215.0,45009.0,46917.0,48996.0,51738.0,47667.0,47612.0,37819.0,33201.0,33703.0,45334.0,51610.0,52607.0,41553.0,42080.0,43569.0,51653.0,44820.0,46185.0,37653.0,33947.0,52115.38144329897,3,True,1,True
459,1.0,0.0,1,Halley's method,,48.0,Root Computation,1.0,Root Computation with continuous second derivative,412.0,,0.0,1,1,(order of convergence = 3),,,[- Halley's method (1940)],Halley's method,1940,-,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store current estimate x_i and the derivatives f' and f'' (assuming this takes O(1) space); iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,https://en.wikipedia.org/wiki/Halley%27s_method,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Halley%27s_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Halley%27s_method/monthly/20150701/20230731,1116.0,1142.0,1749.0,2088.0,1758.0,1616.0,1401.0,2043.0,1607.0,1544.0,1507.0,1337.0,1187.0,1200.0,1894.0,1861.0,1666.0,1681.0,1844.0,2400.0,2037.0,1778.0,1705.0,1471.0,1332.0,1385.0,1926.0,1920.0,1833.0,1686.0,1664.0,2244.0,1982.0,1824.0,1885.0,1710.0,1592.0,1826.0,2116.0,2593.0,1974.0,1950.0,1754.0,1975.0,2045.0,2001.0,1748.0,1421.0,1323.0,1372.0,1798.0,2176.0,1772.0,1987.0,1567.0,1896.0,1870.0,1926.0,2062.0,1578.0,1472.0,1224.0,1591.0,2124.0,2231.0,1868.0,1778.0,1922.0,2531.0,2524.0,2017.0,1590.0,1726.0,1584.0,1973.0,2659.0,2255.0,1942.0,1811.0,1844.0,2374.0,2380.0,2342.0,2075.0,1766.0,1784.0,1924.0,2261.0,2422.0,2524.0,2318.0,1971.0,2124.0,2609.0,2317.0,1741.0,1550.0,1860.7525773195875,3,True,1,True
460,1.0,0.0,1,Secant method,,48.0,Root Computation,1.0,General Root Computation,413.0,,0.0,1,1,(order of convergence = phi~1.618),,,[- Secant method (1940)],Secant method,1940,-,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store previous 2 estimates x_i and x_{i-1}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,https://en.wikipedia.org/wiki/Secant_method,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Secant_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Secant_method/monthly/20150701/20230731,4835.0,6127.0,9260.0,11033.0,10339.0,8242.0,7747.0,10799.0,9909.0,9905.0,8350.0,5389.0,4411.0,5859.0,9417.0,11535.0,10582.0,8023.0,8012.0,11433.0,11288.0,9792.0,9069.0,6305.0,5405.0,6327.0,9663.0,12339.0,11120.0,8663.0,8906.0,12839.0,11273.0,11010.0,9819.0,6277.0,5639.0,6320.0,9576.0,12156.0,10535.0,7662.0,8463.0,10637.0,11062.0,10738.0,8992.0,5738.0,5214.0,5704.0,9972.0,11745.0,10093.0,8044.0,7631.0,10580.0,8775.0,8978.0,9341.0,7616.0,5560.0,5737.0,9756.0,11800.0,10611.0,9383.0,8149.0,9419.0,11773.0,9399.0,7822.0,7506.0,7344.0,7206.0,9910.0,10767.0,10569.0,8149.0,8133.0,8703.0,9928.0,9497.0,7832.0,5877.0,4835.0,4850.0,7728.0,8545.0,8902.0,7104.0,6486.0,7469.0,8330.0,7119.0,7238.0,5635.0,4621.0,8579.432989690722,3,True,1,True
461,1.0,0.0,1,Ridders' method,,48.0,Root Computation,1.0,General Root Computation,414.0,,0.0,1,1,(order of convergence = sqrt(2)),,,[https://ieeexplore.ieee.org/document/1084580/ Ridder's method (1979)],Ridder's method,1979,https://ieeexplore.ieee.org/document/1084580/,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store previous 2 estimates x_i and x_{i-1}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Ridders%27_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Ridders%27_method/monthly/20150701/20230731,367.0,456.0,510.0,561.0,571.0,514.0,464.0,608.0,393.0,374.0,356.0,475.0,346.0,334.0,401.0,476.0,558.0,362.0,389.0,591.0,444.0,489.0,457.0,470.0,403.0,332.0,340.0,428.0,600.0,336.0,450.0,390.0,497.0,400.0,392.0,405.0,299.0,323.0,432.0,545.0,480.0,403.0,448.0,490.0,519.0,406.0,412.0,462.0,471.0,315.0,369.0,558.0,454.0,415.0,408.0,449.0,523.0,483.0,477.0,400.0,280.0,279.0,323.0,562.0,428.0,445.0,559.0,560.0,838.0,690.0,625.0,549.0,421.0,467.0,446.0,527.0,628.0,413.0,494.0,547.0,576.0,541.0,606.0,371.0,458.0,370.0,519.0,575.0,531.0,520.0,565.0,458.0,679.0,505.0,490.0,443.0,362.0,465.25773195876286,3,True,1,True
462,1.0,0.0,1,Muller's method,,48.0,Root Computation,1.0,General Root Computation,415.0,,0.0,1,1,(order of convergence ~ 1.84),,,[https://www.jstor.org/stable/2001916 Muller's method (1956)],Muller's method,1956,https://www.jstor.org/stable/2001916,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
n_max: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",O(1),"Store previous 3 estimates x_i, x_{i-1}, and x_{i-2}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,1,"epsilon, additive",0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,6,,,Numerical Analysis,Muller%27s_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Muller%27s_method/monthly/20150701/20230731,740.0,819.0,1394.0,1716.0,1330.0,1320.0,1198.0,1485.0,1428.0,1324.0,1321.0,1002.0,833.0,1092.0,1534.0,1845.0,1727.0,1424.0,1344.0,1494.0,1698.0,1621.0,1431.0,996.0,990.0,1326.0,1639.0,2061.0,1680.0,1482.0,1425.0,1912.0,1879.0,1800.0,1544.0,1059.0,1236.0,1365.0,1748.0,1986.0,1555.0,1272.0,1335.0,1439.0,1758.0,1572.0,1381.0,968.0,1025.0,1272.0,1791.0,1869.0,1951.0,1603.0,1228.0,1668.0,1611.0,1569.0,1534.0,1225.0,1028.0,1057.0,1999.0,1928.0,1605.0,1729.0,1368.0,1537.0,1800.0,2169.0,1705.0,1264.0,1314.0,1352.0,1507.0,1784.0,1693.0,1375.0,1171.0,1390.0,1456.0,1655.0,1369.0,1137.0,943.0,968.0,1477.0,1512.0,1672.0,1164.0,1468.0,1400.0,1500.0,1408.0,1312.0,1114.0,792.0,1443.2577319587629,3,True,1,True
463,1.0,0.0,1,Todd–Coxeter algorithm,,50.0,Coset Enumeration,1.0,Coset Enumeration,423.0,,,1,1,O(2^n),,,[https://www.cambridge.org/core/journals/proceedings-of-the-edinburgh-mathematical-society/article/practical-method-for-enumerating-cosets-of-a-finite-abstract-group/0306574AD958F694A0A8339338348AA1 Todd–Coxeter algorithm (1936)],Todd–Coxeter algorithm,1936,https://www.cambridge.org/core/journals/proceedings-of-the-edinburgh-mathematical-society/article/practical-method-for-enumerating-cosets-of-a-finite-abstract-group/0306574AD958F694A0A8339338348AA1,1,1.0,https://www.cambridge.org/core/services/aop-cambridge-core/content/view/0306574AD958F694A0A8339338348AA1/S0013091500008221a.pdf/practical_method_for_enumerating_cosets_of_a_finite_abstract_group.pdf,1.0,0,8,n: 8,O(2^n),"n: number of generators
g: order of group (possibly exponential in n)
k: number of relations
c: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"g: 3,
k: 3,
c: 3,
n: 8",O(gkc),"Defines O(k) tables, each with O(g) columns and O(c) rows",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,Todd%E2%80%93Coxeter_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Todd%E2%80%93Coxeter_algorithm/monthly/20150701/20230731,162.0,190.0,163.0,245.0,383.0,240.0,214.0,222.0,294.0,261.0,305.0,238.0,254.0,207.0,204.0,252.0,374.0,232.0,184.0,250.0,410.0,337.0,221.0,222.0,161.0,166.0,240.0,258.0,321.0,205.0,232.0,254.0,230.0,266.0,238.0,255.0,202.0,163.0,367.0,283.0,305.0,222.0,217.0,247.0,232.0,295.0,233.0,199.0,184.0,178.0,176.0,283.0,392.0,226.0,201.0,198.0,333.0,270.0,252.0,215.0,162.0,148.0,157.0,261.0,218.0,249.0,223.0,167.0,221.0,302.0,205.0,172.0,158.0,165.0,210.0,237.0,211.0,218.0,196.0,179.0,241.0,157.0,269.0,243.0,196.0,165.0,246.0,206.0,261.0,198.0,197.0,187.0,247.0,216.0,244.0,261.0,174.0,232.2680412371134,8,True,8,True
464,0.0,1.0,1,Coset enumeration,,50.0,Coset Enumeration,1.0,Coset Enumeration,424.0,,,1,1,O(2^n),,,[ Haselgrove-Leech-Trotter (HLT) algorithm (1940)],Haselgrove-Leech-Trotter (HLT) algorithm,1940,,,,,0.0,0,8,n: 8,O(2^n),"n: number of generators
g: order of group (possibly exponential in n)
k: number of relations
c: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"n: 8,
g: 3",O(ng)?,Implementation stores a table whose number of required registers is the product of the number of generators (n) and the number of cosets (O(g)),1.0,0.0,,0,,0,,0,0,,0,0,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/coset-enumeration-on-digital-computers/047323FB9415ACF3466E627590ABB790,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,Coset_enumeration,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Coset_enumeration/monthly/20150701/20230731,144.0,76.0,94.0,103.0,108.0,101.0,106.0,81.0,82.0,97.0,103.0,101.0,83.0,91.0,80.0,106.0,132.0,120.0,78.0,125.0,114.0,121.0,82.0,91.0,72.0,69.0,86.0,137.0,124.0,117.0,197.0,143.0,196.0,153.0,135.0,97.0,98.0,133.0,109.0,122.0,112.0,106.0,122.0,118.0,169.0,140.0,130.0,95.0,92.0,116.0,118.0,156.0,160.0,132.0,126.0,97.0,110.0,134.0,105.0,130.0,93.0,56.0,75.0,109.0,103.0,89.0,98.0,58.0,116.0,104.0,73.0,69.0,71.0,86.0,88.0,71.0,88.0,93.0,83.0,67.0,87.0,90.0,89.0,68.0,76.0,81.0,77.0,88.0,73.0,98.0,76.0,96.0,137.0,69.0,71.0,103.0,61.0,103.14432989690722,8,True,8,True
465,1.0,0.0,1,Knuth–Bendix completion algorithm,,50.0,Coset Enumeration,1.0,Coset Enumeration,425.0,,,1,1,O(1.5^n n^2 logn),,,[https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/knuth-bendix.pdf Knuth–Bendix algorithm (1970)],Knuth–Bendix algorithm,1970,https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/knuth-bendix.pdf,1,1.0,,1.0,0,8,n: 8,O(1.5^n n^2 logn),"n: number of generators
g: order of group (possibly exponential in n)
k: number of relations
c: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"n: 8,
g: 3",O(ng)???,Can store a table whose number of required registers is the product of the number of generators (n) and the number of cosets (O(g)),1.0,0.0,,0,,0,,0,0,,0,0,https://www.win.tue.nl/~mvdbrand/courses/seminar/0809/papers/ag-genesis.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,Knuth%E2%80%93Bendix_completion_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Knuth%E2%80%93Bendix_completion_algorithm/monthly/20150701/20230731,498.0,508.0,572.0,607.0,686.0,566.0,624.0,643.0,570.0,621.0,621.0,552.0,486.0,488.0,624.0,691.0,603.0,654.0,674.0,584.0,578.0,554.0,574.0,611.0,575.0,569.0,705.0,805.0,771.0,711.0,785.0,968.0,798.0,776.0,670.0,604.0,623.0,558.0,654.0,673.0,994.0,677.0,692.0,698.0,870.0,886.0,699.0,669.0,567.0,544.0,578.0,819.0,591.0,624.0,695.0,587.0,601.0,953.0,798.0,749.0,663.0,731.0,666.0,613.0,666.0,650.0,674.0,777.0,652.0,636.0,723.0,592.0,507.0,555.0,546.0,591.0,572.0,600.0,543.0,653.0,643.0,582.0,652.0,537.0,619.0,536.0,570.0,660.0,749.0,805.0,798.0,766.0,650.0,675.0,626.0,574.0,524.0,652.5876288659794,8,True,8,True
466,1.0,0.0,1,Expectation–maximization algorithm,,51.0,Maximum Likelihood Parameters,1.0,,426.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2984875 Expectation–maximization (EM) algorithm (1977)],Expectation–maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.01,False,3,True
467,0.0,1.0,1,Division algorithm,,51.0,Maximum Likelihood Parameters,1.0,,427.0,,0.0,1,1,O(n^3),,,[- Newton–Raphson algorithm (1685)],Newton–Raphson algorithm,1685,-,,,,1.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",O(n+r^2)?,"Stores current theta guess, which is updated each iteration, and requires computation of the (inverse of the) Hessian matrix. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Newton%27s_method

https://web.mit.edu/10.001/Web/Course_Notes/NLAE/node6.html",,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis,Division_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Division_algorithm/monthly/20150701/20230731,7422.0,7701.0,10341.0,12170.0,11334.0,10082.0,9791.0,11005.0,11643.0,10933.0,10342.0,8126.0,7434.0,8799.0,12202.0,12475.0,14447.0,9862.0,9880.0,11231.0,13489.0,10892.0,10054.0,8639.0,8036.0,8417.0,11579.0,12680.0,13040.0,9165.0,10151.0,10332.0,12472.0,11113.0,10666.0,8868.0,8806.0,8880.0,10731.0,12682.0,11330.0,8984.0,9394.0,9957.0,11109.0,10773.0,10007.0,8108.0,8510.0,8790.0,11561.0,14535.0,13245.0,9986.0,10601.0,11534.0,11574.0,12631.0,11557.0,9762.0,10117.0,9372.0,12826.0,15429.0,15748.0,12384.0,11781.0,11581.0,13194.0,12695.0,11236.0,9862.0,10836.0,9788.0,10827.0,12100.0,11755.0,10096.0,9621.0,9387.0,9526.0,8519.0,8630.0,7199.0,7112.0,6912.0,8423.0,9156.0,9323.0,12254.0,8578.0,8853.0,10537.0,8446.0,7422.0,7531.0,6920.0,10390.061855670105,5.01,False,3,True
468,0.0,1.0,1,Expectation–maximization algorithm,,51.0,Maximum Likelihood Parameters,1.0,,428.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2337481 Parameter-expanded expectation maximization (PX-EM) algorithm (1998)],Parameter-expanded expectation maximization (PX-EM) algorithm,1998,https://www.jstor.org/stable/2337481,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta (+ alpha) and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.01,False,3,True
469,0.0,1.0,1,Expectation–maximization algorithm,,51.0,Maximum Likelihood Parameters,1.0,,429.0,,0.0,1,1,O(n^2 logn),,,[https://arxiv.org/abs/1709.06970 Expectation conditional maximization (ECM) (2017)],Expectation conditional maximization (ECM),2017,https://arxiv.org/abs/1709.06970,,,,1.0,0,5.01,n: 5.01,O(n^2 \log n),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.285,100.3433319,0.061679318,1.99316E+13,50171.66594,0.150919414,2.99E+19,33447777.3,0.252330781,3,,,Numerical Analysis,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.01,True,3,True
470,0.0,1.0,1,Expectation–maximization algorithm,,51.0,Maximum Likelihood Parameters,1.0,,430.0,,0.0,1,1,O(n^4 log^0.1.5n),,,[https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf Generalized expectation maximization (GEM) algorithm (1994)],Generalized expectation maximization (GEM) algorithm,1994,https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf,,,,0.0,0,7,n: 7,O(n^4 \log^{0.1}(.5n)),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.01,False,3,True
471,0.0,1.0,1,Expectation–maximization algorithm,,51.0,Maximum Likelihood Parameters,1.0,,431.0,,0.0,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1109/TIT.2002.808105 α-EM algorithm (2003)],α-EM algorithm,2003,https://dl.acm.org/doi/10.1109/TIT.2002.808105,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of alpha-log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.01,False,3,True
472,0.0,0.0,0,,,52.0,Cardinality Estimation,2.0,,432.0,,0.0,1,1,O(N),,,[- Naive solution (1940)],Naive solution,1940,-,,,,1.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,3,N: 3,O(n),"keep track of exact histogram, may require storing all values",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
473,1.0,0.0,1,Flajolet–Martin algorithm,,52.0,Cardinality Estimation,2.0,,433.0,,0.0,1,1,O(N),Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/src/FlMa85.pdf  Flajolet–Martin algorithm (1984)],Flajolet–Martin algorithm,1984,http://algo.inria.fr/flajolet/Publications/src/FlMa85.pdf,,,,0.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,2,N: 2,O(log n),https://www.sciencedirect.com/science/article/pii/S0022000097915452,0.0,0.0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,Flajolet%E2%80%93Martin_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Flajolet%E2%80%93Martin_algorithm/monthly/20150701/20230731,176.0,199.0,184.0,1066.0,661.0,650.0,667.0,3608.0,1454.0,1142.0,1149.0,591.0,545.0,641.0,623.0,756.0,972.0,946.0,764.0,666.0,821.0,917.0,1814.0,682.0,523.0,468.0,574.0,785.0,802.0,709.0,571.0,606.0,875.0,957.0,1156.0,577.0,473.0,539.0,528.0,846.0,889.0,590.0,576.0,742.0,1102.0,1184.0,1075.0,581.0,571.0,544.0,646.0,878.0,1108.0,744.0,617.0,847.0,920.0,1038.0,717.0,693.0,603.0,543.0,894.0,875.0,1027.0,1168.0,708.0,900.0,764.0,819.0,1430.0,1356.0,2138.0,682.0,499.0,741.0,732.0,657.0,452.0,662.0,830.0,1101.0,1039.0,864.0,648.0,575.0,646.0,993.0,985.0,962.0,697.0,563.0,832.0,1133.0,974.0,899.0,991.0,836.360824742268,3,True,1,False
474,0.0,1.0,1,HyperLogLog,,52.0,Cardinality Estimation,2.0,,434.0,,0.0,1,1,O(N),Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf LogLog algorithm (2003)],LogLog algorithm,2003,http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf,,,,0.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,1.99,N: 1.99,O(log(log(n))),http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf,0.0,1.0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,HyperLogLog,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/HyperLogLog/monthly/20150701/20230731,4522.0,3768.0,5078.0,4676.0,4121.0,3958.0,3912.0,4266.0,4880.0,5153.0,4993.0,4263.0,3723.0,4448.0,4079.0,4313.0,4828.0,4662.0,4594.0,4820.0,5198.0,4698.0,7537.0,8610.0,5967.0,6075.0,8229.0,7655.0,5783.0,5263.0,6283.0,5235.0,6229.0,5782.0,6733.0,5773.0,5303.0,5452.0,5795.0,7341.0,6304.0,5678.0,5964.0,6778.0,7246.0,6645.0,6537.0,5626.0,5621.0,5974.0,5738.0,6986.0,6912.0,5353.0,6128.0,6349.0,5850.0,6766.0,6205.0,5786.0,6121.0,5344.0,5537.0,5905.0,5569.0,8209.0,5991.0,5595.0,7553.0,6243.0,6042.0,5547.0,5721.0,5586.0,5445.0,5912.0,5371.0,5500.0,5715.0,5181.0,6224.0,5698.0,5952.0,5691.0,8698.0,6816.0,5629.0,5534.0,6009.0,6264.0,7215.0,6407.0,6109.0,5402.0,5929.0,7694.0,14931.0,5904.4639175257735,3,True,1,False
475,1.0,0.0,1,HyperLogLog,,52.0,Cardinality Estimation,2.0,,435.0,,0.0,1,1,O(N),Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf HyperLogLog algorithm (2007)],HyperLogLog algorithm,2007,http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf,,,,0.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)
eps: approximation parameter",N,,,Word RAM,words,2,N: 2,O(eps^{-2}*log(log(n)))+log(n)),https://oertl.github.io/hyperloglog-sketch-estimation-paper/paper/paper.pdf,0.0,0.0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,HyperLogLog,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/HyperLogLog/monthly/20150701/20230731,4522.0,3768.0,5078.0,4676.0,4121.0,3958.0,3912.0,4266.0,4880.0,5153.0,4993.0,4263.0,3723.0,4448.0,4079.0,4313.0,4828.0,4662.0,4594.0,4820.0,5198.0,4698.0,7537.0,8610.0,5967.0,6075.0,8229.0,7655.0,5783.0,5263.0,6283.0,5235.0,6229.0,5782.0,6733.0,5773.0,5303.0,5452.0,5795.0,7341.0,6304.0,5678.0,5964.0,6778.0,7246.0,6645.0,6537.0,5626.0,5621.0,5974.0,5738.0,6986.0,6912.0,5353.0,6128.0,6349.0,5850.0,6766.0,6205.0,5786.0,6121.0,5344.0,5537.0,5905.0,5569.0,8209.0,5991.0,5595.0,7553.0,6243.0,6042.0,5547.0,5721.0,5586.0,5445.0,5912.0,5371.0,5500.0,5715.0,5181.0,6224.0,5698.0,5952.0,5691.0,8698.0,6816.0,5629.0,5534.0,6009.0,6264.0,7215.0,6407.0,6109.0,5402.0,5929.0,7694.0,14931.0,5904.4639175257735,3,True,1,False
476,0.0,1.0,1,HyperLogLog,,52.0,Cardinality Estimation,2.0,,436.0,,0.0,1,1,O(N),Any distribution of values?,(need to read entire input),[https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf HyperLogLog++ (2014)],HyperLogLog++,2014,https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf,,,,1.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)
eps: approximation parameter",N,,,Word RAM,words,2,N: 2,O(eps^{-2}*log(log(n)))+log(n)),(see hyperloglog?),0.0,0.0,,1,,1,,0,0,,0,0,,,,,,,,,,,,5.623413252,177.827941,,31.6227766,31622.7766,,177.827941,5623413.252,,6,,,Numerical Analysis,HyperLogLog,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/HyperLogLog/monthly/20150701/20230731,4522.0,3768.0,5078.0,4676.0,4121.0,3958.0,3912.0,4266.0,4880.0,5153.0,4993.0,4263.0,3723.0,4448.0,4079.0,4313.0,4828.0,4662.0,4594.0,4820.0,5198.0,4698.0,7537.0,8610.0,5967.0,6075.0,8229.0,7655.0,5783.0,5263.0,6283.0,5235.0,6229.0,5782.0,6733.0,5773.0,5303.0,5452.0,5795.0,7341.0,6304.0,5678.0,5964.0,6778.0,7246.0,6645.0,6537.0,5626.0,5621.0,5974.0,5738.0,6986.0,6912.0,5353.0,6128.0,6349.0,5850.0,6766.0,6205.0,5786.0,6121.0,5344.0,5537.0,5905.0,5569.0,8209.0,5991.0,5595.0,7553.0,6243.0,6042.0,5547.0,5721.0,5586.0,5445.0,5912.0,5371.0,5500.0,5715.0,5181.0,6224.0,5698.0,5952.0,5691.0,8698.0,6816.0,5629.0,5534.0,6009.0,6264.0,7215.0,6407.0,6109.0,5402.0,5929.0,7694.0,14931.0,5904.4639175257735,3,True,1,False
477,0.0,0.0,0,,,52.0,Cardinality Estimation,2.0,streaming,437.0,,0.0,1,1,O(N),Any distribution of values?,(need to read entire input),[ Min/max sketches streaming algorithm (1980)],Min/max sketches streaming algorithm,1980,,,,,0.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)",N,,,Word RAM,words,1,N: 1,O(1),only keep track of minimum value. also assuming hash function requires O(1) space,1.0,0.0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
478,0.0,1.0,1,Count-distinct problem,,52.0,Cardinality Estimation,2.0,streaming,438.0,,0.0,1,1,O(N),Any distribution of values?,(need to read entire input),[ Bottom-m sketches streaming algorithm (1980)],Bottom-m sketches streaming algorithm,1980,,,,,0.0,0,3,N: 3,O(N),"N: number of values in multiset
n: cardinality of multiset (not known)
m: size of sketch",N,,,Word RAM,words,3,"m: 3,
N: 3",O(m),only keep track of m minimum values. also assuming hash function requires O(1) space,1.0,0.0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,Count-distinct_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Count-distinct_problem/monthly/20150701/20230731,742.0,659.0,800.0,826.0,842.0,886.0,858.0,899.0,955.0,920.0,981.0,754.0,706.0,806.0,847.0,904.0,1029.0,900.0,992.0,1077.0,1199.0,870.0,2515.0,1633.0,1027.0,948.0,1079.0,1378.0,1164.0,974.0,1094.0,1050.0,1377.0,1180.0,1371.0,1098.0,1039.0,1099.0,1182.0,1319.0,1259.0,1413.0,1175.0,1294.0,1319.0,1346.0,1287.0,1099.0,1046.0,1055.0,1207.0,1541.0,1538.0,1222.0,1458.0,1289.0,1355.0,1502.0,1406.0,1354.0,1242.0,1179.0,1323.0,1662.0,1500.0,1464.0,1231.0,1156.0,1469.0,1166.0,1104.0,1061.0,1179.0,959.0,916.0,1197.0,1181.0,1174.0,850.0,933.0,1015.0,980.0,1134.0,911.0,981.0,854.0,796.0,996.0,882.0,984.0,906.0,811.0,990.0,899.0,918.0,1170.0,1542.0,1122.2577319587629,3,True,1,False
479,1.0,0.0,1,Chaitin's algorithm,,53.0,Register Allocation,1.0,Global Register Allocation,439.0,RIG coloring,,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/872726.806984 Chaitin's Algorithm (1981)],Chaitin's Algorithm,1981,https://dl.acm.org/doi/10.1145/872726.806984,,,,1.0,0,5,n: 5,O(n^2),$n$: number of live ranges (the number of candidates to reside in registers),n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: this algorithm uses both an adjacency matrix (called the bit matrix) and adjacency lists (called the adjacency vectors),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Operating Systems,Chaitin%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Chaitin%27s_algorithm/monthly/20150701/20230731,161.0,141.0,133.0,162.0,172.0,233.0,165.0,172.0,176.0,186.0,189.0,159.0,103.0,86.0,147.0,139.0,162.0,194.0,183.0,137.0,215.0,177.0,212.0,162.0,91.0,93.0,137.0,140.0,172.0,168.0,176.0,167.0,139.0,185.0,198.0,147.0,128.0,122.0,121.0,118.0,160.0,188.0,194.0,170.0,205.0,290.0,170.0,115.0,137.0,126.0,115.0,171.0,163.0,186.0,208.0,161.0,167.0,294.0,179.0,147.0,178.0,163.0,106.0,133.0,173.0,120.0,171.0,122.0,171.0,204.0,178.0,142.0,166.0,120.0,107.0,126.0,179.0,206.0,159.0,158.0,166.0,336.0,237.0,157.0,138.0,150.0,157.0,160.0,262.0,208.0,153.0,191.0,252.0,319.0,226.0,200.0,178.0,168.9278350515464,3,False,1,False
480,0.0,0.0,0,,,53.0,Register Allocation,1.0,Global Register Allocation,440.0,"Assumes all variables allocated in main memory (i.e. assumes no spill handling required).

Priority-based RIG coloring",,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/502874.502896 Chow's Algorithm (1984)],Chow's Algorithm,1984,https://dl.acm.org/doi/10.1145/502874.502896,,,,0.0,0,5,n: 5,O(n^2),$n$: number of live ranges (the number of candidates to reside in registers),n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: this algorithm also uses a register interference graph (RIG),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
481,0.0,1.0,1,Register allocation,,53.0,Register Allocation,2.0,Global Register Allocation,441.0,Greedy assignment,,1,1,O(n),,,"[http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf Linear Scan, Poletto & Sarkar (1999)]","Linear Scan, Poletto & Sarkar",1999,http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf,,,,1.0,4->6,3,n: 3,O(n),"$n$: number of live ranges (the number of candidates to reside in registers)
$r$: number of registers available",n,,,Word RAM,words,1,"r: 3,
n: 1",$O(r)$,"Derived: given the live ranges, the only auxiliary data structure is an ""active"" list that contains the active live ranges and this has length at most $r$",1.0,0.0,,0,,0,,1,0,,0,0,,,,,,1.0,1.15443469,1.0,3.641588834,1.0,9.0,1000.0,1000,0.467799268,1000000,1000000,1.15443469,1000000000,1000000000,2.16227766,4,,,Operating Systems,Register_allocation,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Register_allocation/monthly/20150701/20230731,2557.0,3087.0,2939.0,3297.0,3760.0,3589.0,3180.0,3256.0,3406.0,3309.0,3464.0,2671.0,2167.0,2632.0,2539.0,2879.0,3958.0,3859.0,2836.0,2500.0,3135.0,3208.0,3544.0,2305.0,2041.0,2114.0,2708.0,3179.0,4354.0,3131.0,3156.0,2512.0,3138.0,3151.0,3551.0,2508.0,2467.0,2413.0,2533.0,2555.0,3255.0,3188.0,3175.0,2603.0,3237.0,3869.0,4069.0,2301.0,2558.0,2288.0,2516.0,3260.0,3854.0,3273.0,3022.0,2964.0,2925.0,4510.0,3473.0,2909.0,2613.0,2726.0,2717.0,3971.0,3305.0,3638.0,3703.0,2935.0,3173.0,3143.0,3525.0,3064.0,3209.0,2565.0,2525.0,2803.0,2880.0,2965.0,2998.0,2711.0,2737.0,2942.0,2855.0,3020.0,2616.0,2404.0,2074.0,2459.0,2911.0,2857.0,2422.0,2841.0,2994.0,2746.0,3271.0,2808.0,2513.0,2994.59793814433,3,True,1,True
482,1.0,0.0,1,Fortune's algorithm,O(n*log(n)),54.0,Voronoi Diagrams,1.0,Voronoi Diagrams,445.0,,,1,1,O(nlogn),,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune's algorithm (1986)],Fortune's algorithm,1986,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Word/Real RAM,words,3,n: 3,O(n),https://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,5,,,Combinatorics,Fortune%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fortune%27s_algorithm/monthly/20150701/20230731,2783.0,2414.0,3045.0,2904.0,3095.0,2892.0,3312.0,3163.0,3236.0,3176.0,3109.0,2826.0,2452.0,2991.0,2640.0,2940.0,3374.0,3091.0,2970.0,2673.0,3042.0,2943.0,3510.0,2815.0,2820.0,2659.0,2617.0,3034.0,3048.0,2614.0,3337.0,2762.0,2872.0,3025.0,3307.0,2755.0,2722.0,2430.0,2660.0,3081.0,3679.0,3968.0,2877.0,2439.0,2704.0,2625.0,2633.0,2412.0,2376.0,2032.0,2113.0,2571.0,2460.0,2062.0,2133.0,1944.0,2027.0,3044.0,2438.0,2111.0,1847.0,1650.0,1693.0,2166.0,2245.0,2131.0,2014.0,1797.0,2261.0,2217.0,2279.0,1835.0,1923.0,1747.0,1918.0,2197.0,2200.0,1927.0,1830.0,2052.0,1963.0,1873.0,1909.0,1864.0,1697.0,1788.0,1638.0,1703.0,2257.0,1994.0,2142.0,1704.0,2087.0,1764.0,1816.0,1891.0,1652.0,2468.639175257732,4,True,3,True
483,1.0,0.0,1,Bowyer–Watson algorithm,O(n*log(n)),54.0,Voronoi Diagrams,1.0,Voronoi Diagrams,447.0,,,1,1,O(nlogn),,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Word/Real RAM,words,3,n: 3,O(n),"Computes the Delaunay triangulation first (O(n) space), then uses that to generate the Voronoi diagram",1.0,0.0,,0,,0,,0,0,,0,0,https://academic.oup.com/comjnl/article/24/2/162/338193,,,,,,,,,,,9965.0,,,,,,,,,5,,,Combinatorics,Bowyer%E2%80%93Watson_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bowyer%E2%80%93Watson_algorithm/monthly/20150701/20230731,718.0,697.0,780.0,873.0,870.0,991.0,870.0,983.0,922.0,989.0,1042.0,830.0,817.0,853.0,911.0,1086.0,1089.0,995.0,1102.0,942.0,1148.0,1109.0,1170.0,947.0,876.0,789.0,916.0,1059.0,1160.0,1080.0,1046.0,1020.0,1165.0,1168.0,1269.0,1183.0,1050.0,921.0,1034.0,1190.0,1264.0,1307.0,1145.0,1014.0,1406.0,1346.0,1343.0,1091.0,1123.0,1057.0,1092.0,1303.0,1345.0,1109.0,1164.0,1130.0,1354.0,1395.0,1463.0,1265.0,1141.0,989.0,1076.0,1259.0,1266.0,1419.0,1225.0,1037.0,1388.0,1347.0,1419.0,1277.0,1028.0,1005.0,1126.0,1092.0,1303.0,1173.0,1291.0,1084.0,1481.0,1452.0,1925.0,1473.0,1221.0,1251.0,1334.0,1538.0,1615.0,1507.0,1705.0,1477.0,2203.0,1785.0,1917.0,1500.0,1591.0,1188.618556701031,4,True,3,True
484,0.0,0.0,0,,,55.0,Variance Calculations,2.0,,448.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[- Naïve algorithm (1940)],Naïve algorithm,1940,-,1,1.0,,1.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintain number of values, sum of values, and sum of squares of values",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,1,True
485,0.0,1.0,1,Connected-component labeling,,55.0,Variance Calculations,2.0,,449.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[- Two-pass algorithm (1940)],Two-pass algorithm,1940,-,,,,0.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintain number of values, sum of values, and sum of squares of (value minus mean) terms",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Connected-component_labeling,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Connected-component_labeling/monthly/20150701/20230731,4196.0,4204.0,5394.0,6089.0,6760.0,5238.0,5127.0,5447.0,6379.0,6221.0,6754.0,5125.0,4428.0,4618.0,5666.0,6130.0,6810.0,5404.0,5791.0,5801.0,6929.0,6986.0,6717.0,5572.0,4763.0,4594.0,5764.0,6930.0,6464.0,5436.0,5551.0,5187.0,6058.0,5729.0,5723.0,4391.0,4491.0,4289.0,4521.0,5611.0,5699.0,4749.0,5455.0,4776.0,5574.0,5259.0,4831.0,4046.0,4089.0,3429.0,4044.0,5368.0,5292.0,4222.0,4790.0,4708.0,4406.0,4833.0,4753.0,4437.0,3818.0,3591.0,4314.0,5341.0,4665.0,4495.0,4531.0,4005.0,6203.0,4565.0,3925.0,4019.0,3464.0,3202.0,3659.0,4732.0,4423.0,4139.0,3983.0,3560.0,4315.0,3593.0,3753.0,3167.0,2597.0,2968.0,3229.0,4520.0,4121.0,3243.0,3551.0,3437.0,3933.0,3252.0,3592.0,2753.0,2472.0,4754.412371134021,2,False,1,True
486,0.0,1.0,1,Algorithms for calculating variance,,55.0,Variance Calculations,2.0,,450.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.302.7503&rep=rep1&type=pdf Welford's Online algorithm (1962)],Welford's Online algorithm,1962,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.302.7503&rep=rep1&type=pdf,,,,0.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintains O(1) information (count, mean, M2) that is constantly updated as values are read",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Algorithms_for_calculating_variance,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Algorithms_for_calculating_variance/monthly/20150701/20230731,6920.0,6720.0,8577.0,8393.0,8033.0,7190.0,8759.0,9145.0,9148.0,8345.0,8330.0,7321.0,7045.0,6872.0,8212.0,8520.0,8537.0,6752.0,8004.0,8282.0,9494.0,7668.0,8067.0,7675.0,7913.0,7738.0,8033.0,9016.0,8524.0,6862.0,7709.0,7876.0,8674.0,8406.0,8220.0,7123.0,7240.0,7591.0,7207.0,9051.0,8407.0,6953.0,7640.0,7064.0,8125.0,7918.0,7630.0,6749.0,6726.0,6371.0,2222366.0,8796.0,7814.0,5986.0,6501.0,7729.0,7223.0,7638.0,7181.0,6525.0,6428.0,5917.0,7664.0,8697.0,8150.0,7021.0,8561.0,7012.0,8089.0,7220.0,6497.0,6559.0,6259.0,6154.0,6321.0,7202.0,7341.0,5695.0,6869.0,6800.0,7568.0,8696.0,8828.0,8823.0,8749.0,7846.0,7455.0,8435.0,8510.0,6795.0,8095.0,8055.0,10169.0,8820.0,8755.0,8177.0,8077.0,30544.77319587629,2,False,1,True
487,0.0,1.0,1,Algorithms for calculating variance,,55.0,Variance Calculations,2.0,,451.0,,0.0,1,1,O(n),Any distribution of values?,(need to read entire input),[https://dl.acm.org/doi/10.1145/359146.359153 Weighted incremental algorithm (1979)],Weighted incremental algorithm,1979,https://dl.acm.org/doi/10.1145/359146.359153,,,,0.0,0,3,n: 3,O(n),n: number of values,n,,,Word/Real RAM,words,1,n: 1,O(1),"Maintains O(1) information (sum of weights, sum of squared weights, weighted sum of values, weighted sum of values squared) that is constantly updated as values are read",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Algorithms_for_calculating_variance,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Algorithms_for_calculating_variance/monthly/20150701/20230731,6920.0,6720.0,8577.0,8393.0,8033.0,7190.0,8759.0,9145.0,9148.0,8345.0,8330.0,7321.0,7045.0,6872.0,8212.0,8520.0,8537.0,6752.0,8004.0,8282.0,9494.0,7668.0,8067.0,7675.0,7913.0,7738.0,8033.0,9016.0,8524.0,6862.0,7709.0,7876.0,8674.0,8406.0,8220.0,7123.0,7240.0,7591.0,7207.0,9051.0,8407.0,6953.0,7640.0,7064.0,8125.0,7918.0,7630.0,6749.0,6726.0,6371.0,2222366.0,8796.0,7814.0,5986.0,6501.0,7729.0,7223.0,7638.0,7181.0,6525.0,6428.0,5917.0,7664.0,8697.0,8150.0,7021.0,8561.0,7012.0,8089.0,7220.0,6497.0,6559.0,6259.0,6154.0,6321.0,7202.0,7341.0,5695.0,6869.0,6800.0,7568.0,8696.0,8828.0,8823.0,8749.0,7846.0,7455.0,8435.0,8510.0,6795.0,8095.0,8055.0,10169.0,8820.0,8755.0,8177.0,8077.0,30544.77319587629,2,False,1,True
488,0.0,0.0,0,,,55.0,Variance Calculations,2.0,,452.0,,0.0,1,1,O(log n),Any distribution of values?,(need to read entire input),[http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf Chan's algorithm Parallel Implementation (1979)],Chan's algorithm Parallel Implementation,1979,http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf,,,,0.0,0,2,n: 2,O(\log n),n: number of values,n,,,EREW(??) PRAM,words,3,n: 3,O(1) per processor,"Each processor maintains O(1) information related to count, mean, M2",1.0,0.0,,0,,0,,0,1,O(n),0,0,https://dbs.ifi.uni-heidelberg.de/files/Team/eschubert/publications/SSDBM18-covariance-authorcopy.pdf,,,,,,,,,,,1.0,,,,,,,,,6,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,True,1,False
489,0.0,1.0,1,Topological sorting,,56.0,Topological Sorting,2.0,Topological Sorting,453.0,,,1,1,O(V+E),Any distribution of values?,(need to read entire input),[https://dl.acm.org/doi/10.1145/368996.369025 Kahn's algorithm (1962)],Kahn's algorithm,1962,https://dl.acm.org/doi/10.1145/368996.369025,1,1.0,,1.0,0,5,"V: 5,
E: 3",O(V+E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,V: 3,O(V),maintain stack of nodes with no incoming edges,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,Topological_sorting,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Topological_sorting/monthly/20150701/20230731,13996.0,14365.0,16837.0,22120.0,23468.0,23037.0,17458.0,20116.0,22003.0,26226.0,23373.0,17395.0,14853.0,16891.0,19904.0,25410.0,29543.0,25817.0,20885.0,23831.0,26520.0,27391.0,24723.0,17957.0,15498.0,16991.0,20218.0,28403.0,27556.0,23321.0,20376.0,21564.0,24883.0,31064.0,25888.0,19426.0,17748.0,16888.0,18475.0,25325.0,24688.0,25183.0,19612.0,18969.0,22079.0,24661.0,23184.0,18323.0,16486.0,17257.0,20015.0,26301.0,27104.0,24160.0,20300.0,22027.0,22143.0,26452.0,30964.0,23483.0,22854.0,18304.0,20927.0,27255.0,32526.0,30607.0,26274.0,25763.0,33191.0,27597.0,23264.0,21055.0,22327.0,22207.0,20585.0,25978.0,26747.0,26222.0,23562.0,24034.0,27126.0,26681.0,26224.0,22901.0,21112.0,20158.0,18729.0,22441.0,24470.0,23938.0,19423.0,17436.0,19328.0,19180.0,18832.0,16805.0,16041.0,22507.60824742268,2,False,3,True
490,1.0,0.0,1,Tarjan's strongly connected components algorithm,,56.0,Topological Sorting,2.0,Topological Sorting,454.0,,,1,1,O(V+E),Any distribution of values?,(need to read entire input),[https://link.springer.com/article/10.1007/BF00268499 Tarjan's DFS based algorithm (1976)],Tarjan's DFS based algorithm,1976,https://link.springer.com/article/10.1007/BF00268499,,,,0.0,0,5,"V: 5,
E: 3",O(V+E),"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,V: 3,O(V)?,"maintain O(V)-sized recursion stack, along with O(V) marks",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Combinatorics,Tarjan%27s_strongly_connected_components_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tarjan%27s_strongly_connected_components_algorithm/monthly/20150701/20230731,5036.0,4821.0,6221.0,7883.0,7001.0,5878.0,5585.0,4939.0,6132.0,6732.0,7694.0,5201.0,4567.0,4548.0,4891.0,6080.0,6747.0,6502.0,5232.0,5680.0,7081.0,6601.0,7150.0,5464.0,4305.0,4079.0,4314.0,5340.0,6163.0,4678.0,4892.0,4829.0,6535.0,5494.0,5755.0,4430.0,4094.0,3751.0,3683.0,6035.0,5208.0,5333.0,4819.0,4266.0,5201.0,4703.0,4714.0,3906.0,3222.0,2967.0,4718.0,7200.0,7478.0,6933.0,7171.0,6090.0,7264.0,7149.0,7777.0,6237.0,5505.0,5629.0,5584.0,6633.0,5886.0,7312.0,6614.0,5939.0,6134.0,9470.0,6199.0,5330.0,4745.0,4367.0,4619.0,6050.0,6104.0,5937.0,5933.0,5164.0,6635.0,6234.0,9880.0,5330.0,4962.0,4906.0,4515.0,6382.0,5857.0,4602.0,5521.0,4471.0,4964.0,4853.0,4824.0,4219.0,3784.0,5623.628865979382,2,False,3,True
491,0.0,1.0,1,Topological sorting,,56.0,Topological Sorting,1.0,Topological Sorting,455.0,,,1,1,O( log² V),,,[https://www.proquest.com/docview/920003939?pq-origsite=gscholar&fromopenview=true Dekel; Nassimi & Sahni Parallel Implementation  (1981)],Dekel; Nassimi & Sahni Parallel Implementation,1981,https://www.proquest.com/docview/920003939?pq-origsite=gscholar&fromopenview=true,,,,0.0,0,2,V: 2,O(\log^2 V),"V: number of vertices
E: number of edges",V,,,"PRAM (not sure what type), SIMD computers?",words,5,V: 5,O(V^2)??,"Their n*n*n cube setup seems to only require each processor to keep track of one entry A[i, j], B[i, j] and propagates the results across the structure, only requiring O(1) auxiliary space per processor. Comparison sorting can be done easily with O(1) auxiliary space per processor.",1.0,0.0,,0,,0,,0,1,O(V^3)?,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Combinatorics,Topological_sorting,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Topological_sorting/monthly/20150701/20230731,13996.0,14365.0,16837.0,22120.0,23468.0,23037.0,17458.0,20116.0,22003.0,26226.0,23373.0,17395.0,14853.0,16891.0,19904.0,25410.0,29543.0,25817.0,20885.0,23831.0,26520.0,27391.0,24723.0,17957.0,15498.0,16991.0,20218.0,28403.0,27556.0,23321.0,20376.0,21564.0,24883.0,31064.0,25888.0,19426.0,17748.0,16888.0,18475.0,25325.0,24688.0,25183.0,19612.0,18969.0,22079.0,24661.0,23184.0,18323.0,16486.0,17257.0,20015.0,26301.0,27104.0,24160.0,20300.0,22027.0,22143.0,26452.0,30964.0,23483.0,22854.0,18304.0,20927.0,27255.0,32526.0,30607.0,26274.0,25763.0,33191.0,27597.0,23264.0,21055.0,22327.0,22207.0,20585.0,25978.0,26747.0,26222.0,23562.0,24034.0,27126.0,26681.0,26224.0,22901.0,21112.0,20158.0,18729.0,22441.0,24470.0,23938.0,19423.0,17436.0,19328.0,19180.0,18832.0,16805.0,16041.0,22507.60824742268,2,True,3,False
492,0.0,1.0,1,DFA minimization,,57.0,DFA Minimization,2.0,DFA Minimization,456.0,,,1,1,O(n \log \log n),"Uniform distribution over all complete automota with $n$ states, using a specific strategy for Hopcroft's algorithm",https://arxiv.org/pdf/1010.5318.pdf,[https://www.cs.cmu.edu/~./sutner/CDM/papers/Hopcroft71.pdf Hopcroft's algorithm (1971)],Hopcroft's algorithm,1971,https://www.cs.cmu.edu/~./sutner/CDM/papers/Hopcroft71.pdf,,,,1.0,0,4,"n: 4,
k: 3",O(kn \log n),"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(kn)$,https://link.springer.com/content/pdf/10.1007/3-540-54430-5_107.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,996578.4285,1003.433319,0.585255375,1993156857,50171.66594,1.057613978,2.98974E+12,33447777.3,2.174128351,1,,,Combinatorics,DFA_minimization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/DFA_minimization/monthly/20150701/20230731,1837.0,2047.0,3062.0,3716.0,3592.0,2795.0,3064.0,3922.0,3390.0,3402.0,3302.0,2190.0,1573.0,1917.0,2581.0,3432.0,3234.0,2648.0,2802.0,3525.0,3901.0,4313.0,3568.0,2110.0,1954.0,2080.0,2946.0,3701.0,3863.0,3228.0,3137.0,3559.0,3975.0,3839.0,3451.0,2346.0,1885.0,2164.0,3143.0,3604.0,3602.0,2531.0,2812.0,3432.0,3267.0,3933.0,3306.0,2235.0,1768.0,1931.0,3111.0,3841.0,3871.0,2907.0,2923.0,3824.0,2941.0,3761.0,3015.0,2588.0,2226.0,2628.0,3680.0,4537.0,3843.0,3613.0,2804.0,3276.0,4244.0,3411.0,3052.0,2435.0,2303.0,2343.0,2922.0,3868.0,3547.0,2616.0,2424.0,3403.0,3143.0,3483.0,3206.0,2322.0,1894.0,2009.0,2972.0,2956.0,2971.0,2607.0,2410.0,2851.0,3646.0,2877.0,2902.0,2099.0,1972.0,3009.19587628866,3,False,3,True
493,0.0,1.0,1,DFA minimization,,57.0,DFA Minimization,2.0,DFA Minimization,457.0,,,1,1,O(n \log \log n),Uniform distribution over all complete automota with $n$ states,https://doi.org/10.1007/978-3-642-15155-2_29,[https://doi.org/10.2307/2964500 Moore's algorithm (1956)],Moore's algorithm,1956,https://doi.org/10.2307/2964500,,,,1.0,0,5,"n: 5,
k: 3",O(n^2 k),"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary data structure that keeps track of a 'block' binary variable for each state,1.0,0.0,,0,,0,,0,0,,0,0,,,,,k=100,,,,,,,1000000000.0,1,,1E+14,1,,1.00E+20,1,,1,,,Combinatorics,DFA_minimization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/DFA_minimization/monthly/20150701/20230731,1837.0,2047.0,3062.0,3716.0,3592.0,2795.0,3064.0,3922.0,3390.0,3402.0,3302.0,2190.0,1573.0,1917.0,2581.0,3432.0,3234.0,2648.0,2802.0,3525.0,3901.0,4313.0,3568.0,2110.0,1954.0,2080.0,2946.0,3701.0,3863.0,3228.0,3137.0,3559.0,3975.0,3839.0,3451.0,2346.0,1885.0,2164.0,3143.0,3604.0,3602.0,2531.0,2812.0,3432.0,3267.0,3933.0,3306.0,2235.0,1768.0,1931.0,3111.0,3841.0,3871.0,2907.0,2923.0,3824.0,2941.0,3761.0,3015.0,2588.0,2226.0,2628.0,3680.0,4537.0,3843.0,3613.0,2804.0,3276.0,4244.0,3411.0,3052.0,2435.0,2303.0,2343.0,2922.0,3868.0,3547.0,2616.0,2424.0,3403.0,3143.0,3483.0,3206.0,2322.0,1894.0,2009.0,2972.0,2956.0,2971.0,2607.0,2410.0,2851.0,3646.0,2877.0,2902.0,2099.0,1972.0,3009.19587628866,3,False,3,True
494,0.0,1.0,1,DFA minimization,,57.0,DFA Minimization,2.0,DFA Minimization,458.0,,,1,1,O(2^n),,,[https://www.semanticscholar.org/paper/Canonical-regular-expressions-and-minimal-state-for-Brzozowski/94def4233e1e8f15bab72e82708a03fd37233b14 Brzozowski's algorithm (1963)],Brzozowski's algorithm,1963,https://www.semanticscholar.org/paper/Canonical-regular-expressions-and-minimal-state-for-Brzozowski/94def4233e1e8f15bab72e82708a03fd37233b14,,,,0.0,0,8,n: 8,O(2^n),"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,8,n: 8,$O(2^n)$,http://www.cs.ru.nl/bachelors-theses/2017/Erin_van_der_Veen___4431200___The_Practical_Performance_of_Automata_Minimization_Algorithms.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,DFA_minimization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/DFA_minimization/monthly/20150701/20230731,1837.0,2047.0,3062.0,3716.0,3592.0,2795.0,3064.0,3922.0,3390.0,3402.0,3302.0,2190.0,1573.0,1917.0,2581.0,3432.0,3234.0,2648.0,2802.0,3525.0,3901.0,4313.0,3568.0,2110.0,1954.0,2080.0,2946.0,3701.0,3863.0,3228.0,3137.0,3559.0,3975.0,3839.0,3451.0,2346.0,1885.0,2164.0,3143.0,3604.0,3602.0,2531.0,2812.0,3432.0,3267.0,3933.0,3306.0,2235.0,1768.0,1931.0,3111.0,3841.0,3871.0,2907.0,2923.0,3824.0,2941.0,3761.0,3015.0,2588.0,2226.0,2628.0,3680.0,4537.0,3843.0,3613.0,2804.0,3276.0,4244.0,3411.0,3052.0,2435.0,2303.0,2343.0,2922.0,3868.0,3547.0,2616.0,2424.0,3403.0,3143.0,3483.0,3206.0,2322.0,1894.0,2009.0,2972.0,2956.0,2971.0,2607.0,2410.0,2851.0,3646.0,2877.0,2902.0,2099.0,1972.0,3009.19587628866,3,False,3,False
495,0.0,0.0,0,,,57.0,DFA Minimization,2.0,Acyclic DFA Minimization,459.0,,,1,1,O(n),,,[https://www.sciencedirect.com/science/article/pii/0304397592901423 Revuz's algorithm (1992)],Revuz's algorithm,1992,https://www.sciencedirect.com/science/article/pii/0304397592901423,,,,1.0,3->6,3,n: 3,O(n),"$n$: number of states
$d$: number of transitions
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000000,0.467799268,1000000,100000000,0.668100537,1000000000,1E+11,1.020949938,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
496,0.0,0.0,0,,,57.0,DFA Minimization,2.0,Cyclic Nontrivial SCCs DFA Minimization,460.0,,,1,1,O(n),,,[https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf Almeida & Zeitoun (2008)],Almeida & Zeitoun,2008,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,,,,0.0,0,3,n: 3,O(n),"$n$: number of states
$d$: number of transitions
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
497,1.0,0.0,1,Tarjan's off-line lowest common ancestors algorithm,,58.0,Lowest Common Ancestor,2.0,Off-Line Lowest Common Ancestor,461.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),[https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174 Tarjan's off-line lowest common ancestors algorithm (1984)],Tarjan's off-line lowest common ancestors algorithm,1984,https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174,2,1.0,,1.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,Tarjan%27s_off-line_lowest_common_ancestors_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tarjan%27s_off-line_lowest_common_ancestors_algorithm/monthly/20150701/20230731,670.0,590.0,806.0,860.0,921.0,700.0,601.0,665.0,868.0,807.0,889.0,740.0,642.0,558.0,1167.0,713.0,781.0,654.0,769.0,690.0,820.0,611.0,599.0,814.0,809.0,585.0,706.0,744.0,776.0,731.0,808.0,797.0,690.0,531.0,572.0,599.0,523.0,557.0,619.0,719.0,759.0,619.0,621.0,735.0,618.0,611.0,629.0,625.0,690.0,609.0,560.0,724.0,732.0,795.0,725.0,691.0,576.0,727.0,1019.0,693.0,634.0,911.0,822.0,728.0,661.0,510.0,563.0,479.0,682.0,685.0,554.0,676.0,463.0,447.0,831.0,635.0,617.0,495.0,626.0,431.0,460.0,495.0,484.0,414.0,413.0,468.0,408.0,410.0,413.0,379.0,376.0,385.0,362.0,330.0,316.0,228.0,276.0,634.2886597938144,3,True,3,True
498,0.0,1.0,1,Lowest common ancestor,,58.0,Lowest Common Ancestor,2.0,Lowest Common Ancestor with Static Trees,462.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),[https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat Schieber; Vishkin (1988)],Schieber; Vishkin,1988,https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,,,,0.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics,Lowest_common_ancestor,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lowest_common_ancestor/monthly/20150701/20230731,4276.0,3615.0,3799.0,4172.0,3711.0,3483.0,3839.0,3956.0,4013.0,3944.0,3782.0,3520.0,3138.0,3193.0,4775.0,4086.0,4050.0,3349.0,3492.0,3613.0,3704.0,3506.0,3239.0,3578.0,4141.0,3359.0,3435.0,4195.0,3392.0,2969.0,3266.0,3226.0,3634.0,3148.0,3177.0,2886.0,2744.0,2700.0,3459.0,3668.0,3657.0,2968.0,3380.0,3314.0,3400.0,3222.0,3114.0,3951.0,3222.0,2939.0,3396.0,3678.0,3462.0,3811.0,3665.0,3444.0,3252.0,4521.0,4540.0,3659.0,4256.0,4022.0,3694.0,4221.0,3801.0,3652.0,3455.0,3823.0,4148.0,4129.0,4092.0,4916.0,5788.0,4082.0,4029.0,4620.0,4621.0,4282.0,4755.0,4347.0,4707.0,5012.0,4916.0,4791.0,7606.0,6295.0,4473.0,4544.0,4084.0,3603.0,4183.0,3717.0,4223.0,3635.0,3893.0,4287.0,4674.0,3888.6907216494847,3,True,3,True
499,0.0,1.0,1,Lowest common ancestor,,58.0,Lowest Common Ancestor,1.0,Lowest Common Ancestor with Static Trees,463.0,,,1,1,O(n+m) ?,Any distribution of values?,(need to read entire input + all queries),[https://apps.dtic.mil/dtic/tr/fulltext/u2/a227803.pdf Berkman; Vishkin (1993)],Berkman; Vishkin,1993,https://apps.dtic.mil/dtic/tr/fulltext/u2/a227803.pdf,,,,0.0,0,3,"n: 3,
m: 3",O(n+m) ?,"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),space bounded by pre-processing time,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics,Lowest_common_ancestor,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lowest_common_ancestor/monthly/20150701/20230731,4276.0,3615.0,3799.0,4172.0,3711.0,3483.0,3839.0,3956.0,4013.0,3944.0,3782.0,3520.0,3138.0,3193.0,4775.0,4086.0,4050.0,3349.0,3492.0,3613.0,3704.0,3506.0,3239.0,3578.0,4141.0,3359.0,3435.0,4195.0,3392.0,2969.0,3266.0,3226.0,3634.0,3148.0,3177.0,2886.0,2744.0,2700.0,3459.0,3668.0,3657.0,2968.0,3380.0,3314.0,3400.0,3222.0,3114.0,3951.0,3222.0,2939.0,3396.0,3678.0,3462.0,3811.0,3665.0,3444.0,3252.0,4521.0,4540.0,3659.0,4256.0,4022.0,3694.0,4221.0,3801.0,3652.0,3455.0,3823.0,4148.0,4129.0,4092.0,4916.0,5788.0,4082.0,4029.0,4620.0,4621.0,4282.0,4755.0,4347.0,4707.0,5012.0,4916.0,4791.0,7606.0,6295.0,4473.0,4544.0,4084.0,3603.0,4183.0,3717.0,4223.0,3635.0,3893.0,4287.0,4674.0,3888.6907216494847,3,True,3,True
500,0.0,1.0,1,Lowest common ancestor,,58.0,Lowest Common Ancestor,2.0,Lowest Common Ancestor with Static Trees,464.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),[https://www.ics.uci.edu/~eppstein/261/BenFar-LCA-00.pdf Bender; Colton [LCA <=> RMQ] (2000)],Bender; Colton [LCA <=> RMQ],2000,https://www.ics.uci.edu/~eppstein/261/BenFar-LCA-00.pdf,,,,0.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),space bounded by pre-processing time,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics,Lowest_common_ancestor,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lowest_common_ancestor/monthly/20150701/20230731,4276.0,3615.0,3799.0,4172.0,3711.0,3483.0,3839.0,3956.0,4013.0,3944.0,3782.0,3520.0,3138.0,3193.0,4775.0,4086.0,4050.0,3349.0,3492.0,3613.0,3704.0,3506.0,3239.0,3578.0,4141.0,3359.0,3435.0,4195.0,3392.0,2969.0,3266.0,3226.0,3634.0,3148.0,3177.0,2886.0,2744.0,2700.0,3459.0,3668.0,3657.0,2968.0,3380.0,3314.0,3400.0,3222.0,3114.0,3951.0,3222.0,2939.0,3396.0,3678.0,3462.0,3811.0,3665.0,3444.0,3252.0,4521.0,4540.0,3659.0,4256.0,4022.0,3694.0,4221.0,3801.0,3652.0,3455.0,3823.0,4148.0,4129.0,4092.0,4916.0,5788.0,4082.0,4029.0,4620.0,4621.0,4282.0,4755.0,4347.0,4707.0,5012.0,4916.0,4791.0,7606.0,6295.0,4473.0,4544.0,4084.0,3603.0,4183.0,3717.0,4223.0,3635.0,3893.0,4287.0,4674.0,3888.6907216494847,3,True,3,True
501,0.0,1.0,1,Lowest common ancestor,,58.0,Lowest Common Ancestor,2.0,Lowest Common Ancestor with Static Trees,465.0,,,1,1,O(n+m),Any distribution of values?,(need to read entire input + all queries),"[https://link.springer.com/article/10.1007/s00224-004-1155-5 Stephen Alstrup, Cyril Gavoille, Haim Kaplan & Theis Rauhe  (2004)]","Stephen Alstrup, Cyril Gavoille, Haim Kaplan & Theis Rauhe",2004,https://link.springer.com/article/10.1007/s00224-004-1155-5,,,,0.0,0,3,"n: 3,
m: 3",O(n+m),"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,O(n),"(see original reference, noting that a word is O(log n) bits)",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Combinatorics,Lowest_common_ancestor,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lowest_common_ancestor/monthly/20150701/20230731,4276.0,3615.0,3799.0,4172.0,3711.0,3483.0,3839.0,3956.0,4013.0,3944.0,3782.0,3520.0,3138.0,3193.0,4775.0,4086.0,4050.0,3349.0,3492.0,3613.0,3704.0,3506.0,3239.0,3578.0,4141.0,3359.0,3435.0,4195.0,3392.0,2969.0,3266.0,3226.0,3634.0,3148.0,3177.0,2886.0,2744.0,2700.0,3459.0,3668.0,3657.0,2968.0,3380.0,3314.0,3400.0,3222.0,3114.0,3951.0,3222.0,2939.0,3396.0,3678.0,3462.0,3811.0,3665.0,3444.0,3252.0,4521.0,4540.0,3659.0,4256.0,4022.0,3694.0,4221.0,3801.0,3652.0,3455.0,3823.0,4148.0,4129.0,4092.0,4916.0,5788.0,4082.0,4029.0,4620.0,4621.0,4282.0,4755.0,4347.0,4707.0,5012.0,4916.0,4791.0,7606.0,6295.0,4473.0,4544.0,4084.0,3603.0,4183.0,3717.0,4223.0,3635.0,3893.0,4287.0,4674.0,3888.6907216494847,3,True,3,True
502,0.0,0.0,0,,,59.0,Graph Edit Distance Computation,2.0,Exact GED,466.0,Beam Stack Search,,1,1,O(VS),,,[https://doi.org/10.1016/j.knosys.2018.10.002  X Chen (2019)],X Chen,2019,https://doi.org/10.1016/j.knosys.2018.10.002,,,,0.0,0,8,"V: 8,
S: 3",O(VS),"V: number of vertices in the larger of the two graphs
S: size of the search tree (exp(V))
w: the beam width; parameter for how many of the best nodes are kept at each layer of the beam search (O(V))",V,,,Word RAM,words,6,"V: 6,
w: 3",O(wV^2),"Theorem 5, https://doi.org/10.1016/j.knosys.2018.10.002",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
503,0.0,0.0,0,,,59.0,Graph Edit Distance Computation,2.0,Inexact GED,467.0,SimGNN,,1,0,O(V^2),,,[https://asset-pdf.scinapse.io/prod/2886034153/2886034153.pdf Y Bai (2018)],Y Bai,2018,https://asset-pdf.scinapse.io/prod/2886034153/2886034153.pdf,,,,0.0,0,5,V: 5,O(V^2),V: number of vertices in the larger of the two graphs,V,,,Word RAM,words,5,V: 5,O(V^2),Derived: Auxiliary matrices for the neural network of size VxV,1.0,0.0,,0,,1,none stated,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,False
504,0.0,0.0,0,,,59.0,Graph Edit Distance Computation,2.0,Inexact GED,468.0,AStar+,,1,0,O(V E^2 logV),,,[https://doi.org/10.48550/arXiv.1709.06810 L Chang (2017)],L Chang,2017,https://doi.org/10.48550/arXiv.1709.06810,,,,0.0,0,7,"V: 7,
E: 5",O(V E^2 logV),"V: number of vertices in the larger of the two graphs
E: number of edges in the larger of the two graphs",V,,,Word RAM,words,3,V: 3,O(V),"Theorem 5.1, and the bound on T_{\leq \delta ...} is V\log V
https://doi.org/10.48550/arXiv.1709.06810",0.0,1.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
505,0.0,0.0,0,,,59.0,Graph Edit Distance Computation,2.0,Inexact GED,469.0,A* with bipartite heuristic,,1,0,O(V^2),,,[https://doi.org/10.1007/978-3-642-38221-5_15 K Riesen (2013)],K Riesen,2013,https://doi.org/10.1007/978-3-642-38221-5_15,,,,0.0,0,5,V: 5,O(V^2),V: number of vertices in the larger of the two graphs,V,,,Word RAM,words,3,V: 3,O(V),Space complexity of A*,0.0,0.0,,0,,0,,1,0,,0,0,,,,,,428.5714286,0.497849623,428571.4286,1.37393167,428571428.6,2.762428143,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
506,0.0,0.0,0,,,59.0,Graph Edit Distance Computation,2.0,Inexact GED,471.0,A*-Beamsearch,,1,0,O(V^2),,,"[https://link.springer.com/chapter/10.1007/11815921_17 Neuhaus, Riesen, Bunke (2006)]","Neuhaus, Riesen, Bunke",2006,https://link.springer.com/chapter/10.1007/11815921_17,,,,0.0,0,5,V: 5,O(V^2),"V: number of vertices in the larger of the two graphs
w: the beam width; parameter for how many of the best nodes are kept at each layer of the beam search (O(V))",V,,,Word RAM,words,5,V: 5,O(wV),Derived: number of nodes under consideration at once,1.0,0.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,False
507,0.0,0.0,0,,,59.0,Graph Edit Distance Computation,1.0,Inexact GED,474.0,energy-based,,1,0,O(V^2 E),,,[https://direct.mit.edu/neco/article-pdf/10/7/1873/813998/089976698300017188.pdf?casa_token=nCYv9xO_Cc4AAAAA:EHiG4v8QmQju6u9RE6w4X6EGRtk5O5W6hIGy-_0A3HSit43f__4oSd4wjAtFIGJuopGMZzU Finch (1998)],Finch,1998,https://direct.mit.edu/neco/article-pdf/10/7/1873/813998/089976698300017188.pdf?casa_token=nCYv9xO_Cc4AAAAA:EHiG4v8QmQju6u9RE6w4X6EGRtk5O5W6hIGy-_0A3HSit43f__4oSd4wjAtFIGJuopGMZzU,,,,1.0,2->3,7,"V: 7,
E: 3",O(V^2 E),"V: number of vertices in the larger of the two graphs
E: number of edges in the larger of the two graphs",V,,,Word RAM,words,5,V: 5,O(V^2)?,Seems to store/update a constant number of values per pair of nodes (one from each graph),1.0,0.0,,0,,0,,1,0,,0,0,click pdf at: https://scholar.google.com/scholar?hl=en&as_sdt=0%2C22&q=An+Energy+Function+and+Continuous+Edit+Process+for+Graph+Matching&btnG=,,,,,183673.4694,,183673000000.0,,1.84e+17,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
508,1.0,0.0,1,Bron–Kerbosch algorithm,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",475.0,,,1,1,O(3^{(n/3)}),,,[https://dl.acm.org/doi/10.1145/362342.362367 Bron–Kerbosch algorithm (1973)],Bron–Kerbosch algorithm,1973,https://dl.acm.org/doi/10.1145/362342.362367,,,,1.0,-,8,n: 8,$O(3^{(n/3)})$,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,Keep track of an O(n)-sized recursive stack with O(n)-sized lists as elements?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,250000.0,,250000000000.0,,2.5e+17,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Bron%E2%80%93Kerbosch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bron%E2%80%93Kerbosch_algorithm/monthly/20150701/20230731,1084.0,971.0,1029.0,1115.0,1370.0,1420.0,997.0,1142.0,1613.0,2010.0,1972.0,2265.0,1157.0,1002.0,1910.0,1602.0,1830.0,2302.0,1544.0,1318.0,1812.0,1843.0,1839.0,1612.0,1290.0,1288.0,1181.0,2074.0,2256.0,2035.0,1667.0,1278.0,1711.0,1690.0,1823.0,2127.0,1138.0,887.0,1060.0,1671.0,1840.0,2563.0,1964.0,1184.0,1791.0,1610.0,1560.0,1381.0,1299.0,1031.0,1018.0,1374.0,1673.0,1369.0,1428.0,868.0,1445.0,1509.0,1552.0,1179.0,982.0,837.0,890.0,1009.0,1372.0,1379.0,1623.0,1086.0,1447.0,2185.0,1321.0,1242.0,771.0,932.0,812.0,1228.0,1261.0,1708.0,1393.0,1102.0,1185.0,1305.0,1118.0,1045.0,985.0,951.0,901.0,1194.0,1257.0,1675.0,1596.0,927.0,1233.0,1256.0,1242.0,1115.0,959.0,1403.0618556701031,5.3728596,False,3,False
509,0.0,1.0,1,Bron–Kerbosch algorithm,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",476.0,,,1,1,O(3^{(n/3)}),,,[http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf Akkoyunlu; E. A.  (1973)],Akkoyunlu; E. A.,1973,http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf,,,,0.0,-,8,n: 8,O(3^{(n/3)}),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,See Bron-Kerbosch (seems like a similar approach?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Bron%E2%80%93Kerbosch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bron%E2%80%93Kerbosch_algorithm/monthly/20150701/20230731,1084.0,971.0,1029.0,1115.0,1370.0,1420.0,997.0,1142.0,1613.0,2010.0,1972.0,2265.0,1157.0,1002.0,1910.0,1602.0,1830.0,2302.0,1544.0,1318.0,1812.0,1843.0,1839.0,1612.0,1290.0,1288.0,1181.0,2074.0,2256.0,2035.0,1667.0,1278.0,1711.0,1690.0,1823.0,2127.0,1138.0,887.0,1060.0,1671.0,1840.0,2563.0,1964.0,1184.0,1791.0,1610.0,1560.0,1381.0,1299.0,1031.0,1018.0,1374.0,1673.0,1369.0,1428.0,868.0,1445.0,1509.0,1552.0,1179.0,982.0,837.0,890.0,1009.0,1372.0,1379.0,1623.0,1086.0,1447.0,2185.0,1321.0,1242.0,771.0,932.0,812.0,1228.0,1261.0,1708.0,1393.0,1102.0,1185.0,1305.0,1118.0,1045.0,985.0,951.0,901.0,1194.0,1257.0,1675.0,1596.0,927.0,1233.0,1256.0,1242.0,1115.0,959.0,1403.0618556701031,5.3728596,False,3,False
510,0.0,1.0,1,Bron–Kerbosch algorithm,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",477.0,,,1,1,O(3^{(n/3)}),,,[https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf Tomita; Tanaka & Takahashi (2006)],Tomita; Tanaka & Takahashi,2006,https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf,,,,0.0,-,8,n: 8,O(3^{(n/3)}),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,See Bron-Kerbosch (seems like a similar approach?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Bron%E2%80%93Kerbosch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bron%E2%80%93Kerbosch_algorithm/monthly/20150701/20230731,1084.0,971.0,1029.0,1115.0,1370.0,1420.0,997.0,1142.0,1613.0,2010.0,1972.0,2265.0,1157.0,1002.0,1910.0,1602.0,1830.0,2302.0,1544.0,1318.0,1812.0,1843.0,1839.0,1612.0,1290.0,1288.0,1181.0,2074.0,2256.0,2035.0,1667.0,1278.0,1711.0,1690.0,1823.0,2127.0,1138.0,887.0,1060.0,1671.0,1840.0,2563.0,1964.0,1184.0,1791.0,1610.0,1560.0,1381.0,1299.0,1031.0,1018.0,1374.0,1673.0,1369.0,1428.0,868.0,1445.0,1509.0,1552.0,1179.0,982.0,837.0,890.0,1009.0,1372.0,1379.0,1623.0,1086.0,1447.0,2185.0,1321.0,1242.0,771.0,932.0,812.0,1228.0,1261.0,1708.0,1393.0,1102.0,1185.0,1305.0,1118.0,1045.0,985.0,951.0,901.0,1194.0,1257.0,1675.0,1596.0,927.0,1233.0,1256.0,1242.0,1115.0,959.0,1403.0618556701031,5.3728596,False,3,False
511,0.0,0.0,0,,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",478.0,,,1,1,O(3^{(n/3)}) total work? (previously this cell said O(n^4)),,,[https://arxiv.org/pdf/1801.00202.pdf Segundo; Artieda;  Strash Parallel (2011)],Segundo; Artieda;  Strash Parallel,2011,https://arxiv.org/pdf/1801.00202.pdf,,,,0.0,-,8,n: 8,$O(3^{(n/3)})$ total work? (previously this cell said $O(n^4)$),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2) auxiliary??,Keep track of an O(n)-sized recursive stack with O(n)-sized lists as elements? (this algo builds off of Bron-Kerbosch),1.0,0.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3728596,False,3,False
512,0.0,1.0,1,Bron–Kerbosch algorithm,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",479.0,,,1,1,O(dn 3^{(d/3)}),,,"[https://arxiv.org/pdf/1006.5440.pdf David Eppstein, Maarten Löffler, Darren Strash (2010)]","David Eppstein, Maarten Löffler, Darren Strash",2010,https://arxiv.org/pdf/1006.5440.pdf,,,,0.0,-,8,"n: 8,
d: 8",$O(dn 3^{(d/3)})$,"n: number of vertices
m: number of edges
d: degeneracy of graph (worst case, d=O(n))",n,,,Word RAM,words,5,n: 5,O(n^2)?,"See Bron-Kerbosch, but also keeps track of O(n)-sized degeneracy ordering",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Bron%E2%80%93Kerbosch_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bron%E2%80%93Kerbosch_algorithm/monthly/20150701/20230731,1084.0,971.0,1029.0,1115.0,1370.0,1420.0,997.0,1142.0,1613.0,2010.0,1972.0,2265.0,1157.0,1002.0,1910.0,1602.0,1830.0,2302.0,1544.0,1318.0,1812.0,1843.0,1839.0,1612.0,1290.0,1288.0,1181.0,2074.0,2256.0,2035.0,1667.0,1278.0,1711.0,1690.0,1823.0,2127.0,1138.0,887.0,1060.0,1671.0,1840.0,2563.0,1964.0,1184.0,1791.0,1610.0,1560.0,1381.0,1299.0,1031.0,1018.0,1374.0,1673.0,1369.0,1428.0,868.0,1445.0,1509.0,1552.0,1179.0,982.0,837.0,890.0,1009.0,1372.0,1379.0,1623.0,1086.0,1447.0,2185.0,1321.0,1242.0,771.0,932.0,812.0,1228.0,1261.0,1708.0,1393.0,1102.0,1185.0,1305.0,1118.0,1045.0,985.0,951.0,901.0,1194.0,1257.0,1675.0,1596.0,927.0,1233.0,1256.0,1242.0,1115.0,959.0,1403.0618556701031,5.3728596,False,3,False
513,0.0,1.0,1,Takao Nishizeki,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",480.0,,,1,1,$O(a(G)*m)$ per clique,,,[https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf Chiba and Nishizeki  (1985)],Chiba and Nishizeki,1985,https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,,,,0.0,-,6,"n: 6,
m: 3,
a(G): 3",$O(a(G)*m)$ per clique,"n: number of vertices
m: number of edges
a(G): arboricity of graph (O(n) worst case)",n,,,Word RAM,words,5,"m: 3,
n: 5",O(m),https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Takao_Nishizeki,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Takao_Nishizeki/monthly/20150701/20230731,74.0,89.0,115.0,100.0,93.0,76.0,67.0,68.0,67.0,69.0,86.0,66.0,106.0,67.0,53.0,69.0,63.0,58.0,78.0,61.0,58.0,52.0,61.0,52.0,47.0,59.0,79.0,77.0,53.0,56.0,54.0,48.0,46.0,41.0,38.0,66.0,54.0,56.0,45.0,50.0,69.0,65.0,72.0,79.0,62.0,92.0,36.0,36.0,71.0,49.0,54.0,72.0,64.0,65.0,67.0,62.0,49.0,55.0,17.0,30.0,31.0,28.0,21.0,21.0,25.0,32.0,34.0,30.0,39.0,28.0,30.0,21.0,29.0,32.0,27.0,33.0,23.0,34.0,19.0,210.0,61.0,49.0,45.0,34.0,144.0,42.0,62.0,55.0,47.0,52.0,62.0,35.0,44.0,33.0,58.0,57.0,43.0,56.21649484536083,5.3728596,False,3,False
514,0.0,0.0,0,,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",481.0,,,1,1,O(n d^2 2^d),,,[https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf M. Chrobak and D. Eppstein (1989)],M. Chrobak and D. Eppstein,1989,https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf,,,,0.0,-,8,n: 8,$O(n d^2 2^d)$,"n: number of vertices
m: number of edges
d: degeneracy of graph (O(n) worst case)",n,,,Word RAM,words,3,n: 3,O(n)?,Keeps track of degeneracy ordering along with vertex and subset being tested (here the subset size is bounded by O(d)=O(n)),1.0,0.0,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3728596,False,3,True
515,0.0,0.0,0,,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",482.0,,,1,1,$O(nm)$ per clique,,,"[https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa (1977)]","Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa",1977,https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true,,,,1.0,-,6,"n: 6,
m: 3",$O(nm)$ per clique,"n: number of vertices
m: number of edges
d: degeneracy of graph",n,,,Word RAM,words,5,"m: 3,
n: 5",O(m),"See original reference, but also note that we'd have to construct and store the complementary graph (as this is originally an algo for MISs)",0.0,1.0,,0,,0,,0,0,,0,0,,,,,"V:E
1:1",500.0,3.728708045,500000.0,25.59147948,500000000.0,148.5348781,250000.0,Inf,inf,2.5E+11,Inf,inf,2.50E+17,Inf,inf,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3728596,False,3,False
516,0.0,0.0,0,,,60.0,Clique Problems,1.0,"Enumerating Maximal Cliques, arbitrary graph",483.0,,,1,1,$O(n^\omega)$ per clique where omega is the exponent on matrix multiplication,,,"[https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23 Kazuhisa Makino, Takeaki Uno; Section 5 (2004)]","Kazuhisa Makino, Takeaki Uno; Section 5",2004,https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,,,,0.0,-,5.3728596,n: 5.3728596,$O(n^{\omega})$ per clique where omega is the exponent on matrix multiplication,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3728596,True,3,False
517,1.0,0.0,1,Held–Karp algorithm,O(V^2 2^V),61.0,The Traveling-Salesman Problem,1.0,Minimum TSP,484.0,,,1,1,$O(V^2 2^V)$,,,[https://www.jstor.org/stable/2098806 Held–Karp algorithm (1962)],Held–Karp algorithm,1962,https://www.jstor.org/stable/2098806,,,,1.0,0,8,V: 8,$O(V^2 2^V)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,8,V: 8,O(V*2^V),"Need to store all C(S, l) for all subsets $S \subseteq V$ and all vertices l",1.0,0.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Held%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Held%E2%80%93Karp_algorithm/monthly/20150701/20230731,779.0,765.0,1089.0,1523.0,2008.0,2672.0,1446.0,1423.0,1734.0,2539.0,2295.0,1556.0,1157.0,1582.0,1491.0,2082.0,3157.0,3034.0,2009.0,1861.0,2310.0,2464.0,2201.0,1793.0,1259.0,1472.0,1960.0,2394.0,3704.0,2376.0,1780.0,1942.0,2581.0,3615.0,2621.0,1775.0,1434.0,1448.0,1663.0,2316.0,3269.0,2871.0,1849.0,1837.0,2277.0,2434.0,2650.0,1417.0,1207.0,1029.0,1328.0,1982.0,2638.0,3129.0,1692.0,1885.0,2068.0,2492.0,2587.0,1678.0,1454.0,1186.0,1353.0,2261.0,2750.0,2542.0,2006.0,1792.0,2078.0,2377.0,2510.0,1724.0,1888.0,1250.0,1498.0,2258.0,2993.0,2497.0,1759.0,1908.0,2051.0,2192.0,4797.0,1835.0,1464.0,1421.0,1475.0,1981.0,2837.0,2727.0,1652.0,1643.0,1924.0,1932.0,2616.0,1623.0,1226.0,2032.0515463917525,#VALUE!,False,1,False
518,1.0,0.0,1,Christofides algorithm,,61.0,The Traveling-Salesman Problem,2.0,Approximate TSP,485.0,,,1,0,$O(V^3)$,,,[https://apps.dtic.mil/dtic/tr/fulltext/u2/a025602.pdf Christofides algorithm (1976)],Christofides algorithm,1976,https://apps.dtic.mil/dtic/tr/fulltext/u2/a025602.pdf,,,,1.0,0,6,V: 6,$O(V^3)$,"V: number of vertices
E: number of edges",V,,,Word RAM,words,5,V: 5,O(V^2)???,Depends on best space complexity for O(V^3) min-weight matching (the rest of the algorithm requires O(V) auxiliary space),1.0,0.0,,0,,1,1.5,1,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Christofides_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Christofides_algorithm/monthly/20150701/20230731,996.0,1072.0,1200.0,1620.0,2076.0,2195.0,1453.0,1422.0,1894.0,2300.0,2233.0,1539.0,1050.0,2341.0,2917.0,2441.0,5197.0,2443.0,1755.0,1827.0,2578.0,2635.0,2681.0,2243.0,1412.0,1504.0,1771.0,2224.0,3488.0,2985.0,1795.0,1638.0,2539.0,3667.0,2787.0,2136.0,1276.0,1225.0,1568.0,2273.0,3581.0,3492.0,2216.0,3065.0,2586.0,2936.0,2258.0,1665.0,1409.0,1355.0,1545.0,2063.0,2888.0,3242.0,1969.0,1783.0,2600.0,2687.0,2211.0,1857.0,1670.0,1144.0,1245.0,5503.0,3910.0,3207.0,2314.0,1960.0,3502.0,3443.0,2792.0,2472.0,1458.0,1580.0,1633.0,2069.0,2858.0,2852.0,2003.0,1743.0,2558.0,3004.0,2695.0,2258.0,1887.0,1553.0,1687.0,2549.0,3119.0,3504.0,2334.0,1931.0,2409.0,3130.0,3082.0,2287.0,1626.0,2296.6494845360826,#VALUE!,False,1,False
519,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,496.0,,,1,1,$O(4^{(n^2)})$,,,[ 5-point star Cramer's rule (1945)],5-point star Cramer's rule,1945,,,,,1.0,0,8,n: 8,$O(4^{(n^2)})$,n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,8,n: 8,"$O(4^{(n^2)})$ for sure, $O(n^2)$ possibly??? (if super conservative)","For expansion by minors, each ""level"" of expansion requires computing and storing O(1) smaller determinants, and there are O(n^2) levels overall",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,inf,,inf,,inf,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
520,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,497.0,,,1,1,O(n^4),,,[ 5-point Gauss elimination (1945)],5-point Gauss elimination,1945,,,,,1.0,1->2,7,n: 7,O(n^4),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,7,n: 7,O(n^4),"See Gauss-Jordan elimination, but matrix is of size n^2*n^2",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000000000.0,inf,1e+24,inf,1e+36,inf,1000000000000.0,Inf,inf,1.00E+24,Inf,inf,1.00E+36,Inf,inf,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
521,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,498.0,,,1,1,O(n^4 logn),,,[ 5-point Gauss Seidel iteration (1945)],5-point Gauss Seidel iteration,1945,,,,,0.0,0,7.01,n: 7.01,O(n^4 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,999999.0,1000000000000.0,1000000000000.0,1e+18,1e+18,,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,True
522,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,499.0,,,1,1,O(n^3 logn),,,[ 5-point SOR iteration (1954)],5-point SOR iteration,1954,,,,,1.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,"Need one auxiliary O(n^2)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,9965784285.0,Inf,,1.99E+19,Inf,,2.99E+28,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,True
523,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,500.0,,,1,1,O(n^2 log^2n),,,[ 5-point ADI iteration (1955)],5-point ADI iteration,1955,,,,,1.0,2->3,5.02,n: 5.02,O(n^2 \log^2 n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Alternating-direction_implicit_method,,,,,,,,,,,99316856.41,Inf,,3.97267E+14,Inf,,8.94E+20,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,True
524,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,501.0,,,1,1,O(n^3),,,[ 9-point SOR iteration (1956)],9-point SOR iteration,1956,,,,,0.0,0,6,n: 6,O(n^3),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,"Need one auxiliary O(n^2)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,1000000000.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,True
525,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,502.0,,,1,1,O(n^3),,,[https://epubs.siam.org/doi/pdf/10.1137/0113067 9-point Tensor product (1964)],9-point Tensor product,1964,https://epubs.siam.org/doi/pdf/10.1137/0113067,,,,1.0,0,6,n: 6,O(n^3),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,Inf,,1.99316E+13,Inf,,2.99E+19,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,True
526,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,503.0,,,1,1,O(n^2 logn),,,[ 9-point ADI iteration (1965)],9-point ADI iteration,1965,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,True,5,True
527,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,504.0,,,1,1,O(n^2 logn),,,[ 5-point FFT (1965)],5-point FFT,1965,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301225.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,True,5,True
528,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,505.0,,,1,1,O(n^2 logn),,,[ 9-point ADI iteration + smooth guess (1969)],9-point ADI iteration + smooth guess,1969,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,True,5,True
529,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,506.0,,,1,1,O(n^2 logn),,,[ 5-point cyclic reduction (1970)],5-point cyclic reduction,1970,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,Generally uses a constant number of n^2*n^2 matrices where O(n^2) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,True,5,True
530,0.0,0.0,0,,,62.0,Poisson Problem,1.0,2-Dimensional Poisson Problem,507.0,,,1,1,O(n^2 logn),,,[ 9-point FFT (1978)],9-point FFT,1978,,,,,0.0,0,5.01,n: 5.01,O(n^2 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,O(n^2)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,True,5,True
531,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,508.0,,,1,1,$O(5^{(n^3)})$,,,[ 5-point star Cramer's rule (1945)],5-point star Cramer's rule,1945,,,,,1.0,0,8,n: 8,O(5^{(n^3)}),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,8,n: 8,"$O(5^{(n^3)})$ for sure, $O(n^3)$ possibly??? (if super conservative)","For expansion by minors, each ""level"" of expansion requires computing and storing O(1) smaller determinants, and there are O(n^3) levels overall",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
532,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,509.0,,,1,1,O(n^7),,,[ 5-point Gauss elimination (1945)],5-point Gauss elimination,1945,,,,,1.0,1->2,7,n: 7,O(n^7),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,7,n: 7,O(n^6),"See Gauss-Jordan elimination, but matrix is of size n^3*n^3",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000.0,Inf,,1.00E+24,Inf,,1.00E+36,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
533,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,510.0,,,1,1,O(n^5 logn),,,[ 5-point Gauss Seidel iteration (1945)],5-point Gauss Seidel iteration,1945,,,,,0.0,0,7,n: 7,O(n^5 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965780000000.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
534,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,511.0,,,1,1,O(n^4 logn),,,[ 5-point SOR iteration (1954)],5-point SOR iteration,1954,,,,,1.0,0,7,n: 7,O(n^4 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,"Need one auxiliary O(n^3)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,9965784285.0,Inf,,1.99E+19,Inf,,2.99E+28,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
535,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,512.0,,,1,1,O(n^3 log^2n),,,[ 5-point ADI iteration (1955)],5-point ADI iteration,1955,,,,,1.0,2->3,6.02,n: 6.02,O(n^3 \log^2 n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Alternating-direction_implicit_method,,,,,,,,,,,99316856.41,Inf,,3.97267E+14,Inf,,8.94E+20,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
536,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,513.0,,,1,1,O(n^4),,,[ 9-point SOR iteration (1956)],9-point SOR iteration,1956,,,,,0.0,0,7,n: 7,O(n^4),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,"Need one auxiliary O(n^3)-sized vector to store guess, and the scalar sigma",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,1000000000.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
537,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,514.0,,,1,1,O(n^4),,,[https://epubs.siam.org/doi/pdf/10.1137/0113067 9-point Tensor product (1964)],9-point Tensor product,1964,https://epubs.siam.org/doi/pdf/10.1137/0113067,,,,1.0,0,7,n: 7,O(n^4),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,Inf,,1.99316E+13,Inf,,2.99E+19,Inf,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
538,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,515.0,,,1,1,O(n^3 logn),,,[ 9-point ADI iteration (1965)],9-point ADI iteration,1965,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
539,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,516.0,,,1,1,O(n^3 logn),,,[ 5-point FFT (1965)],5-point FFT,1965,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301225.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
540,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,517.0,,,1,1,O(n^3 logn),,,[ 9-point ADI iteration + smooth guess (1969)],9-point ADI iteration + smooth guess,1969,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
541,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,518.0,,,1,1,O(n^3 logn),,,[ 5-point cyclic reduction (1970)],5-point cyclic reduction,1970,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,Generally uses a constant number of n^3*n^3 matrices where O(n^3) entries are nonempty,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
542,0.0,0.0,0,,,63.0,Poisson Problem,1.0,3-Dimensional Poisson Problem,519.0,,,1,1,O(n^3 logn),,,[ 9-point FFT (1978)],9-point FFT,1978,,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),n: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,O(n^3)?,FFT generally requires aux. space equal to dimension of vector?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784.0,,,,,,,,,1,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,5,False
543,0.0,0.0,0,,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,520.0,,,1,1,O(n^4)? (previously O(n^2)),,,[- Naive algorithm (1934)],Naive algorithm,1934,-,1,1.0,,1.0,0,7,n: 7,$O(n^4)$? (previously $O(n^2)$),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in triangulation, and current triangle being tested",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
544,0.0,1.0,1,Delaunay triangulation,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,521.0,,,1,1,O(n^2),,,[https://link.springer.com/article/10.1007/PL00009464 Flipping algorithm (1999)],Flipping algorithm,1999,https://link.springer.com/article/10.1007/PL00009464,,,,0.0,0,5,n: 5,O(n^2),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),Keep track of edges in current triangulation,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,Delaunay_triangulation,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Delaunay_triangulation/monthly/20150701/20230731,14525.0,13851.0,15958.0,16052.0,17190.0,15070.0,16925.0,16449.0,17776.0,19429.0,17126.0,15550.0,13496.0,14299.0,14887.0,16856.0,17714.0,15085.0,16281.0,15959.0,18142.0,16647.0,17962.0,15912.0,14611.0,13731.0,15493.0,17234.0,19716.0,15343.0,16595.0,15714.0,17042.0,16858.0,17770.0,15771.0,14646.0,13724.0,13578.0,15595.0,15968.0,14602.0,15387.0,14133.0,16155.0,15616.0,16220.0,13954.0,14223.0,12811.0,13361.0,16388.0,16325.0,13620.0,14227.0,14721.0,14339.0,16240.0,16424.0,14390.0,13435.0,12693.0,12448.0,15434.0,15090.0,14981.0,14537.0,15146.0,17025.0,16069.0,15725.0,14137.0,12124.0,12212.0,13132.0,14123.0,14625.0,14443.0,13379.0,13258.0,14938.0,15266.0,15191.0,13675.0,13047.0,12998.0,13474.0,14605.0,15587.0,14850.0,15433.0,14314.0,15916.0,15530.0,14902.0,13393.0,12951.0,15172.701030927836,3,False,3,True
545,0.0,0.0,0,,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,522.0,,,1,1,O(nlogn),,,[https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf de Berg; Cheong (2008)],de Berg; Cheong,2008,https://web.archive.org/web/20091028054315/http://www.cs.uu.nl/geobook/interpolation.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
546,1.0,0.0,1,Bowyer–Watson algorithm,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,523.0,,,1,1,O(nlogn),,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,Bowyer%E2%80%93Watson_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bowyer%E2%80%93Watson_algorithm/monthly/20150701/20230731,718.0,697.0,780.0,873.0,870.0,991.0,870.0,983.0,922.0,989.0,1042.0,830.0,817.0,853.0,911.0,1086.0,1089.0,995.0,1102.0,942.0,1148.0,1109.0,1170.0,947.0,876.0,789.0,916.0,1059.0,1160.0,1080.0,1046.0,1020.0,1165.0,1168.0,1269.0,1183.0,1050.0,921.0,1034.0,1190.0,1264.0,1307.0,1145.0,1014.0,1406.0,1346.0,1343.0,1091.0,1123.0,1057.0,1092.0,1303.0,1345.0,1109.0,1164.0,1130.0,1354.0,1395.0,1463.0,1265.0,1141.0,989.0,1076.0,1259.0,1266.0,1419.0,1225.0,1037.0,1388.0,1347.0,1419.0,1277.0,1028.0,1005.0,1126.0,1092.0,1303.0,1173.0,1291.0,1084.0,1481.0,1452.0,1925.0,1473.0,1221.0,1251.0,1334.0,1538.0,1615.0,1507.0,1705.0,1477.0,2203.0,1785.0,1917.0,1500.0,1591.0,1188.618556701031,3,False,3,True
547,0.0,0.0,0,,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,524.0,,,1,1,O(nlogn),,,[https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf Belloch (2006)],Belloch,2006,https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove (see other incremental algos)",1.0,0.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
548,0.0,0.0,0,,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,525.0,,,1,1,O(nlogn),,,[http://www.geom.uiuc.edu/~samuelp/del_project.html Guibas; Stofli (1985)],Guibas; Stofli,1985,http://www.geom.uiuc.edu/~samuelp/del_project.html,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Space recursion is S(n)=max(2S(n/2), O(n)) as triangulations from recursive calls are modified in the merge step",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
549,0.0,0.0,0,,,64.0,Delaunay Triangulation,2.0,2-Dimensional Delaunay Triangulation,526.0,,,1,1,O(nlogn),,,[https://dl.acm.org/doi/10.1145/142675.142695 Fortune (1992)],Fortune,1992,https://dl.acm.org/doi/10.1145/142675.142695,,,,0.0,0,5,n: 5,O(n^2),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),See incremental/flipping algorithm space complexities,1.0,0.0,,0,,0,O(1/n\epsilon),0,0,,0,0,,"Given a set of points on a surface, find a triangulation such that for every triangule there is a circumscribing pseudocircle that is \alpha-empty. A circumscribing  \alpha-pseudocircle are circular arcs with endpoints at the vertices of the polygon which all lie inside the circumscribing circle of the polygon and make an angle at most \alpha with the circumscribing polygon at the verticies. A pseudocircle is \alpha-empty if it is an \alpha-pseudocircle and it contains no verticies in its interior.",,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
550,0.0,0.0,0,,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,528.0,,,1,1,O(nlogn),,,[http://www.s-hull.org/paper/s_hull.pdf S-hull (Sinclair) (2010)],S-hull (Sinclair),2010,http://www.s-hull.org/paper/s_hull.pdf,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
551,0.0,1.0,1,Delaunay triangulation,,64.0,Delaunay Triangulation,2.0,2-Dimensional Delaunay Triangulation,529.0,,,1,1,O(n log log n),uniform distribution in the unit square,https://link.springer.com/article/10.1007/BF01840356,[https://link.springer.com/article/10.1007/BF01840356 Dwyer (1987)],Dwyer,1987,https://link.springer.com/article/10.1007/BF01840356,,,,0.0,0,4,n: 4,O(n \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,"Space recursion is S(n)=max(2S(n/2), O(n)) as triangulations from recursive calls are modified in the merge step",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,4,,,Combinatorics,Delaunay_triangulation,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Delaunay_triangulation/monthly/20150701/20230731,14525.0,13851.0,15958.0,16052.0,17190.0,15070.0,16925.0,16449.0,17776.0,19429.0,17126.0,15550.0,13496.0,14299.0,14887.0,16856.0,17714.0,15085.0,16281.0,15959.0,18142.0,16647.0,17962.0,15912.0,14611.0,13731.0,15493.0,17234.0,19716.0,15343.0,16595.0,15714.0,17042.0,16858.0,17770.0,15771.0,14646.0,13724.0,13578.0,15595.0,15968.0,14602.0,15387.0,14133.0,16155.0,15616.0,16220.0,13954.0,14223.0,12811.0,13361.0,16388.0,16325.0,13620.0,14227.0,14721.0,14339.0,16240.0,16424.0,14390.0,13435.0,12693.0,12448.0,15434.0,15090.0,14981.0,14537.0,15146.0,17025.0,16069.0,15725.0,14137.0,12124.0,12212.0,13132.0,14123.0,14625.0,14443.0,13379.0,13258.0,14938.0,15266.0,15191.0,13675.0,13047.0,12998.0,13474.0,14605.0,15587.0,14850.0,15433.0,14314.0,15916.0,15530.0,14902.0,13393.0,12951.0,15172.701030927836,3,False,3,True
552,0.0,0.0,0,,,64.0,Delaunay Triangulation,1.0,2-Dimensional Delaunay Triangulation,531.0,,,1,1,O(n),uniform distribution in the unit square,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,[https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf Drysdale; Su (1996)],Drysdale; Su,1996,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,1,1.0,,1.0,5->6,3,n: 3,O(n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,See other incremental algorithms,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.131283437,1000000,1000000,0.279802214,1000000000,1000000000,0.447819047,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
553,0.0,1.0,1,Delaunay triangulation,,64.0,Delaunay Triangulation,1.0,General Delaunay Triangulation (d-dimensions),532.0,,,1,1,O(n),random points from a d-ball,https://link.springer.com/article/10.1007/BF02574694,[https://link.springer.com/article/10.1007/BF02574694 Dwyer (higher dimensions) (1987)],Dwyer (higher dimensions),1987,https://link.springer.com/article/10.1007/BF02574694,,,,0.0,0,3.99,n: 3.99,O(n \log \log n),n: number of points,n,,,Real RAM?,words,3,n: 3,O(n)?,Keep track of O(1) information per triangle related to triangulation??,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,3316.983346,301.4787521,0.12914611,4316983.346,231643.2378,0.300604039,4901945847,204000621.6,0.502452221,4,,,Combinatorics,Delaunay_triangulation,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Delaunay_triangulation/monthly/20150701/20230731,14525.0,13851.0,15958.0,16052.0,17190.0,15070.0,16925.0,16449.0,17776.0,19429.0,17126.0,15550.0,13496.0,14299.0,14887.0,16856.0,17714.0,15085.0,16281.0,15959.0,18142.0,16647.0,17962.0,15912.0,14611.0,13731.0,15493.0,17234.0,19716.0,15343.0,16595.0,15714.0,17042.0,16858.0,17770.0,15771.0,14646.0,13724.0,13578.0,15595.0,15968.0,14602.0,15387.0,14133.0,16155.0,15616.0,16220.0,13954.0,14223.0,12811.0,13361.0,16388.0,16325.0,13620.0,14227.0,14721.0,14339.0,16240.0,16424.0,14390.0,13435.0,12693.0,12448.0,15434.0,15090.0,14981.0,14537.0,15146.0,17025.0,16069.0,15725.0,14137.0,12124.0,12212.0,13132.0,14123.0,14625.0,14443.0,13379.0,13258.0,14938.0,15266.0,15191.0,13675.0,13047.0,12998.0,13474.0,14605.0,15587.0,14850.0,15433.0,14314.0,15916.0,15530.0,14902.0,13393.0,12951.0,15172.701030927836,3,False,3,True
554,0.0,0.0,0,,,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,533.0,,,1,1,O(n^2),,,"[https://www.ncbi.nlm.nih.gov/pubmed/7497130 de Bruijn Graph (Idury, Waterman) (1994)]","de Bruijn Graph (Idury, Waterman)",1994,https://www.ncbi.nlm.nih.gov/pubmed/7497130,,,,1.0,0,5,n: 5,O(n^2),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,3,n: 3,O(n)?,Requires computing O(n) overlaps for graph; data structures are otherwise linear in space usage,1.0,0.0,,0,,0,,0,0,,0,0,"https://academic.oup.com/bioinformatics/article/32/9/1301/1744507

https://ieeexplore.ieee.org/document/9684373",,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
555,0.0,0.0,0,,,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,535.0,,,1,1,O(nlogn),,,[https://www.ncbi.nlm.nih.gov/pubmed/7497129 String Graph (Myers) (1994)],String Graph (Myers),1994,https://www.ncbi.nlm.nih.gov/pubmed/7497129,,,,1.0,4->5,4,n: 4,O(n \log n),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,3,n: 3,O(n)?,Requires computing O(n) overlaps for graph; data structures are otherwise linear in space usage,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
556,0.0,0.0,0,,,65.0,De Novo Genome Assembly,1.0,De Novo Genome Assembly,536.0,,,1,1,O(n),,,"[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881401/pdf/btq217.pdf String Graph with Ferragina–Manzini Index (Simpson, Durbin) (2010)]","String Graph with Ferragina–Manzini Index (Simpson, Durbin)",2010,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881401/pdf/btq217.pdf,,,,1.0,5->6,3,n: 3,O(n),"n: sum of lengths of reads
f: number of input sequences?",n,,,Word RAM,words,3,n: 3,O(n)?,Requires computing O(n) overlaps for graph; data structures are otherwise linear in space usage,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,9.965,0.154528961,1000000,19.93156857,0.205650255,1000000000,29.89735285,0.236593747,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
557,0.0,1.0,1,Subset sum problem,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,1.0,Subset Sum,539.0,,,1,1,O(2^n * n),,,[ Naive algorithm (1940)],Naive algorithm,1940,,,,,1.0,0,8,n: 8,O(2^n * n),n: the number of integers in the set,n,,,Word RAM,words,3,n: 3,$O(n)$,https://dl.acm.org/doi/10.1145/321812.321823,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Subset_sum_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Subset_sum_problem/monthly/20150701/20230731,8812.0,8136.0,9700.0,11712.0,14063.0,13303.0,11208.0,12764.0,12129.0,13821.0,12366.0,9587.0,17323.0,10858.0,10134.0,12880.0,14501.0,13148.0,11550.0,11223.0,13675.0,13647.0,13261.0,9921.0,9500.0,9043.0,10483.0,11994.0,14674.0,11514.0,10956.0,9494.0,10826.0,13359.0,12206.0,8737.0,8217.0,8379.0,9379.0,11734.0,14340.0,13900.0,11445.0,10640.0,12463.0,13760.0,12479.0,9615.0,9097.0,8946.0,10444.0,13182.0,13153.0,12380.0,11003.0,11896.0,10544.0,13912.0,12559.0,12308.0,9901.0,9850.0,11206.0,13717.0,15521.0,17179.0,13413.0,11455.0,13930.0,15882.0,12608.0,10553.0,10683.0,10707.0,10255.0,12675.0,15448.0,13552.0,11307.0,13094.0,12992.0,13044.0,13023.0,9801.0,8382.0,7772.0,8094.0,9592.0,11897.0,10161.0,8317.0,7838.0,8685.0,8851.0,8342.0,7106.0,6602.0,11461.01030927835,3,False,1,False
558,0.0,0.0,0,,"\tilde{O}(min{\sqrt{n'}t, t^{5/4}, σ})",66.0,The Subset-Sum Problem,1.0,Subset Sum,540.0,,,1,1,O(2^{(n/2)} * n),,,[ Random Split Exponential algorithm (1940)],Random Split Exponential algorithm,1940,,,,,1.0,0,8,n: 8,$O(2^{(n/2)} * n)$,n: the number of integers in the set,n,,,Word RAM,words,8,n: 8,$O(2^{(n/2)})$,https://dl.acm.org/doi/10.1145/321812.321823,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
559,0.0,0.0,0,,O(2^n),67.0,Dependency Inference Problem,1.0,Functional Dependency Inference Problem,554.0,,,1,1,O(n^2 2^n p log p),,,[https://www.sciencedirect.com/science/article/pii/0166218X92900315 Brute force algorithm (1967)],Brute force algorithm,1967,https://www.sciencedirect.com/science/article/pii/0166218X92900315,,,,1.0,0,8,"n: 8,
p: 4",$O(n^2 2^n p \log p)$,"n: number of attributes
p: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",O(n2^n)?,"bound on size of output (2^n domains, O(n) possible attributes per domain); can probably be improved",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,8,True
560,0.0,0.0,0,,O(2^n),67.0,Dependency Inference Problem,1.0,Functional Dependency Inference Problem,555.0,,,1,1,O(n 2^n p),,,[https://www.aaai.org/Papers/Workshops/1993/WS-93-02/WS93-02-017.pdf Schlimmer (1993)],Schlimmer,1993,https://www.aaai.org/Papers/Workshops/1993/WS-93-02/WS93-02-017.pdf,,,,1.0,0,8,"n: 8,
p: 3",$O(n 2^n p)$,"n: number of attributes
p: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",O(2^n),"(original source, but without user-supplied bound",0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,8,True
561,0.0,0.0,0,,,68.0,BCNF Decomposition,2.0,Decisional BCNF,556.0,,,1,1,O(kn^2),,,[https://doi.org/10.1016/0950-5849(92)90028-N Liu (1992)],Liu,1992,https://doi.org/10.1016/0950-5849(92)90028-N,,,,1.0,0,6,"n: 6,
k: 3",$O(kn^2)$,"n: size of database?
k: number of functional dependencies (assume O(n))",n,,,Word RAM,words,3,n: 3,O(n),Derived: Creates an auxiliary database,1.0,0.0,,0,,0,,0,0,,0,0,,,,,"k:n
1:1",,,,,,,125000000.0,1,,1.25E+17,1,,1.25E+26,1,,3,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,True,3,True
562,0.0,0.0,0,,O(kn^2),70.0,Dependency Inference Problem,1.0,Multivalued Dependency Inference Problem,566.0,,,1,1,O(n^2 2^n p log p),,,[https://www.sciencedirect.com/science/article/pii/0166218X92900315 Räihä; Manilla (1992)],Räihä; Manilla,1992,https://www.sciencedirect.com/science/article/pii/0166218X92900315,,,,0.0,0,8,n: 8,O(n^2 2^n p log p),"n: number of attributes
p: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",O(n2^n)?,"bound on size of output (2^n domains, O(n) possible attributes per domain); can probably be improved",1.0,0.0,,0,,0,,0,0,,0,0,,,,,L=100,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,8,True
563,0.0,0.0,0,,,71.0,Disk Scheduling,2.0,Disk Scheduling,568.0,,,1,1,O(n),Any distribution of inputs,Same behavior regardless of input,[- FCFS (1979)],FCFS,1979,-,,,,1.0,0,3,n: 3,O(n),n: number of requests,n,,,Word RAM,words,1,n: 1,$O(1)$,Needs to keep track of seek distance but FCFS is fairly straightforward/no extra info needed,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics),,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
564,0.0,0.0,0,,,71.0,Disk Scheduling,2.0,Disk Scheduling,569.0,,,1,1,O(n*log n) with binary tree,Any distribution of inputs,Same behavior regardless of input,[- SSTF (1979)],SSTF,1979,-,,,,0.0,0,4,n: 4,O(n \log n) with binary tree,n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.geeksforgeeks.org/program-for-sstf-disk-scheduling-algorithm/?ref=lbp,0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shortest_seek_first,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
565,1.0,0.0,1,Elevator algorithm,,71.0,Disk Scheduling,2.0,Disk Scheduling,570.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- SCAN (1979)],SCAN,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.geeksforgeeks.org/scan-elevator-disk-scheduling-algorithms/?ref=lbp,0.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Elevator_algorithm,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems,Elevator_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Elevator_algorithm/monthly/20150701/20230731,2028.0,1888.0,2213.0,2782.0,3356.0,3271.0,2612.0,2296.0,2641.0,3922.0,3910.0,2647.0,1752.0,1983.0,2258.0,2906.0,3575.0,3293.0,2739.0,2362.0,2629.0,3793.0,3677.0,2237.0,1870.0,1824.0,2205.0,2990.0,3406.0,3270.0,2385.0,2163.0,2527.0,2977.0,3175.0,2053.0,1845.0,1914.0,1978.0,2624.0,2621.0,2279.0,2005.0,1915.0,2332.0,2871.0,2761.0,2089.0,1749.0,1723.0,1781.0,2161.0,2319.0,2591.0,2015.0,1869.0,1748.0,2030.0,1832.0,1614.0,1263.0,1202.0,1314.0,1307.0,1622.0,1642.0,1305.0,1258.0,1531.0,1276.0,1369.0,3209.0,1352.0,1213.0,1536.0,1816.0,1721.0,1588.0,1552.0,1285.0,1396.0,1932.0,1470.0,1286.0,1157.0,1078.0,1048.0,1457.0,2101.0,1415.0,1284.0,1229.0,1235.0,1479.0,1389.0,1099.0,1103.0,2080.4123711340208,3,False,1,False
566,1.0,0.0,1,LOOK algorithm,,71.0,Disk Scheduling,2.0,Disk Scheduling,571.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- LOOK (1979)],LOOK,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,Needs sorted array of requests and seek distance but not much else,1.0,0.0,,0,,0,,0,0,,0,0,http://courses.teresco.org/cs432_f02/lectures/17-files/17-files.html,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems,LOOK_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/LOOK_algorithm/monthly/20150701/20230731,534.0,445.0,578.0,1172.0,1708.0,1722.0,676.0,785.0,1030.0,1569.0,1773.0,1090.0,516.0,570.0,641.0,1369.0,1878.0,1636.0,969.0,665.0,878.0,1597.0,2037.0,862.0,573.0,468.0,661.0,1357.0,1549.0,1294.0,788.0,574.0,850.0,1584.0,1481.0,766.0,527.0,477.0,477.0,985.0,1161.0,1098.0,632.0,407.0,639.0,1150.0,1034.0,680.0,425.0,337.0,432.0,587.0,833.0,785.0,390.0,417.0,470.0,554.0,530.0,444.0,314.0,164.0,231.0,270.0,458.0,448.0,296.0,255.0,304.0,330.0,260.0,294.0,237.0,198.0,200.0,248.0,271.0,318.0,229.0,218.0,197.0,315.0,236.0,195.0,168.0,132.0,168.0,207.0,230.0,328.0,209.0,210.0,182.0,181.0,273.0,195.0,140.0,651.8041237113403,3,False,1,False
567,0.0,0.0,0,,,71.0,Disk Scheduling,2.0,Disk Scheduling,572.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- C-SCAN (1979)],C-SCAN,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,See SCAN,1.0,0.0,,0,,0,,0,0,,0,0,http://courses.teresco.org/cs432_f02/lectures/17-files/17-files.html,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
568,0.0,1.0,1,Elevator algorithm,,71.0,Disk Scheduling,2.0,Disk Scheduling,573.0,,,1,1,O(n*log n),Any distribution of inputs,Same behavior regardless of input,[- C-LOOK (1979)],C-SCAN,1979,-,,,,0.0,0,4,n: 4,O(n \log n),n: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,See LOOK,1.0,0.0,,0,,0,,0,0,,0,0,http://www.cs.nuim.ie/~dkelly/CS240-05/Disk%20Scheduling.htm,,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems,Elevator_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Elevator_algorithm/monthly/20150701/20230731,2028.0,1888.0,2213.0,2782.0,3356.0,3271.0,2612.0,2296.0,2641.0,3922.0,3910.0,2647.0,1752.0,1983.0,2258.0,2906.0,3575.0,3293.0,2739.0,2362.0,2629.0,3793.0,3677.0,2237.0,1870.0,1824.0,2205.0,2990.0,3406.0,3270.0,2385.0,2163.0,2527.0,2977.0,3175.0,2053.0,1845.0,1914.0,1978.0,2624.0,2621.0,2279.0,2005.0,1915.0,2332.0,2871.0,2761.0,2089.0,1749.0,1723.0,1781.0,2161.0,2319.0,2591.0,2015.0,1869.0,1748.0,2030.0,1832.0,1614.0,1263.0,1202.0,1314.0,1307.0,1622.0,1642.0,1305.0,1258.0,1531.0,1276.0,1369.0,3209.0,1352.0,1213.0,1536.0,1816.0,1721.0,1588.0,1552.0,1285.0,1396.0,1932.0,1470.0,1286.0,1157.0,1078.0,1048.0,1457.0,2101.0,1415.0,1284.0,1229.0,1235.0,1479.0,1389.0,1099.0,1103.0,2080.4123711340208,3,False,1,False
569,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,574.0,,,1,1,O(2^k n^{O(1)}),,,[ Brute force (backtracking search) (1940)],Brute force (backtracking search),1940,,,,,1.0,0,8,"n: 8,
k: 8",O(2^k n^O(1)),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(k)$,Just need to keep track of current subset being checked,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,True
570,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,575.0,,,1,1,O(kn + 2^k k^{(2k + 2)}),,,[http://bud.cs.uky.edu/~goldsmit/papers/NondetWithinP.pdf Sam Buss  (1993)],Sam Buss,1993,http://bud.cs.uky.edu/~goldsmit/papers/NondetWithinP.pdf,,,,1.0,0,8,"n: 8,
k: 8",$O(kn + 2^k k^{(2k + 2)})$,"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,5,"k: 5,
n: 5",$O(k^2)$?,Auxiliary graph contains O(k^2) edges unless the instance is rejected; rest of steps take O(k^2) auxiliary space at most,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,False
571,0.0,1.0,1,Kernelization,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,576.0,,,1,1,O(kn + 1.2852^k),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.4800&rep=rep1&type=pdf Chen; I. Kanj; and W. Jia. (2001)],Chen; I. Kanj; and W. Jia.,2001,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.4800&rep=rep1&type=pdf,,,,0.0,0,8,"n: 8,
k: 8",$O(kn + 1.2852^k)$,"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains O(k^2) edges; algorithm subsequently branches to a depth of O(k) (each fork being degree O(1)), with a new O(k^2)-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to O(k) by just keeping track of graph deltas?) (but also a different source claims exponential?)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Kernelization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kernelization/monthly/20150701/20230731,368.0,384.0,423.0,585.0,617.0,498.0,498.0,455.0,552.0,470.0,503.0,387.0,374.0,371.0,436.0,550.0,456.0,453.0,580.0,533.0,680.0,510.0,528.0,488.0,469.0,452.0,439.0,562.0,586.0,534.0,608.0,474.0,567.0,534.0,562.0,453.0,484.0,428.0,469.0,564.0,584.0,522.0,580.0,583.0,655.0,575.0,843.0,525.0,512.0,437.0,519.0,507.0,669.0,569.0,462.0,516.0,495.0,592.0,631.0,495.0,491.0,405.0,457.0,699.0,605.0,456.0,489.0,462.0,639.0,751.0,583.0,496.0,441.0,388.0,329.0,533.0,653.0,558.0,411.0,560.0,511.0,544.0,509.0,610.0,473.0,375.0,436.0,505.0,561.0,463.0,424.0,459.0,484.0,549.0,517.0,470.0,456.0,514.5051546391752,8,True,3,False
572,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,577.0,,,1,1,"O(min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)",,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf Chandran and F. Grandoni (2004)],Chandran and F. Grandoni,2004,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf,,,,0.0,0,8,"n: 8,
k: 8","$O(min(1.2759^k k^1.5, 1.2745^k k^4) + kn)$","n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,8,"k: 8,
n: 8","$O(min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)$ but exponential",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,False
573,0.0,1.0,1,Vertex cover,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,578.0,,,1,1,O(1.2738^k+ kn),,,[https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf Chen; I. Kanj; and W. Jia. (2006)],Chen; I. Kanj; and W. Jia.,2006,https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf,,,,0.0,0,8,"n: 8,
k: 8",O(1.2738^k+ kn),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,7,n: 7,$O(poly(n))$,https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Vertex_cover,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Vertex_cover/monthly/20150701/20230731,4515.0,4055.0,4813.0,7587.0,12785.0,12184.0,6654.0,6719.0,8005.0,11599.0,9963.0,7439.0,4528.0,4194.0,5049.0,7612.0,11694.0,11754.0,7356.0,6943.0,8748.0,11006.0,10312.0,6321.0,5021.0,5066.0,4873.0,7867.0,12947.0,13075.0,7549.0,6296.0,8210.0,12032.0,10644.0,7081.0,4779.0,3703.0,4359.0,8130.0,12201.0,11806.0,6348.0,5804.0,8068.0,10609.0,10618.0,6789.0,4570.0,4120.0,4933.0,8043.0,12967.0,10852.0,6477.0,6442.0,6642.0,10389.0,9164.0,8064.0,5958.0,4942.0,5092.0,8298.0,13432.0,12306.0,8741.0,7384.0,10391.0,12561.0,10044.0,8187.0,6000.0,4868.0,5160.0,7581.0,12827.0,12461.0,7725.0,6985.0,8290.0,10664.0,9069.0,7495.0,5469.0,4618.0,5268.0,7851.0,13107.0,12406.0,8006.0,6953.0,7172.0,9757.0,8626.0,6511.0,5427.0,8103.144329896907,8,True,3,False
574,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,"The Vertex Cover Problem, Degrees Bounded By 3",579.0,,,1,1,O(k*1.2192^k),,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K J. Chen; L. Liu; and W. Jia. (2000)],J. Chen; L. Liu; and W. Jia.,2000,https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K,,,,1.0,0,8,"n: 8,
k: 8",O(k*1.2192^k),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,False
575,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,580.0,,,1,1,O(kn + (1.324718)^k * k^2),,,[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.711.8844 Balasubramanian; Fellows (1996)],Balasubramanian; Fellows,1996,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.711.8844,,,,1.0,0,8,"n: 8,
k: 8",O(kn + (1.324718)^k * k^2),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,False
576,0.0,1.0,1,NP-intermediate,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,581.0,,,1,1,O(3^k n),,,[https://www.sciencedirect.com/science/article/pii/S0022000096900586 Papadimitriou and M Yannakakis (1996)],Papadimitriou and M Yannakakis,1996,https://www.sciencedirect.com/science/article/pii/S0022000096900586,,,,0.0,0,8,"n: 8,
k: 8",O(3^k n),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(k)$ auxiliary?,"keep track of maximal matching, and subsequent vertices in cover; note that max size is O(k) else we can reject immediately",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,NP-intermediate,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/NP-intermediate/monthly/20150701/20230731,788.0,589.0,598.0,747.0,3091.0,1663.0,821.0,738.0,909.0,886.0,996.0,817.0,695.0,620.0,682.0,862.0,1170.0,934.0,1024.0,873.0,964.0,942.0,1112.0,833.0,756.0,889.0,830.0,993.0,1097.0,1012.0,907.0,838.0,986.0,1029.0,1067.0,845.0,831.0,666.0,741.0,946.0,1025.0,962.0,913.0,952.0,1134.0,1270.0,1210.0,1186.0,933.0,892.0,988.0,1412.0,1130.0,1387.0,1312.0,988.0,941.0,1136.0,945.0,926.0,798.0,665.0,866.0,934.0,1448.0,1362.0,922.0,927.0,1178.0,1197.0,1176.0,836.0,811.0,759.0,556.0,717.0,877.0,931.0,704.0,698.0,753.0,992.0,978.0,725.0,695.0,626.0,587.0,773.0,955.0,941.0,834.0,776.0,855.0,991.0,814.0,727.0,605.0,942.4536082474228,8,True,3,True
577,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,582.0,,,1,1,O(kn + 1.29175^k k^2).,,,"[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.1933&rep=rep1&type=pdf Niedermeier, Rossmanith (1999)]","Niedermeier, Rossmanith",1999,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.69.1933&rep=rep1&type=pdf,,,,1.0,0,8,"n: 8,
k: 8",O(kn + 1.29175^k k^2).,"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,False
578,0.0,0.0,0,,,72.0,The Vertex Cover Problem,1.0,The Vertex Cover Problem,583.0,,,1,1,O(kn + 1.31951^k k^2),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.12.4079&rep=rep1&type=pdf Downey (1998)],Downey,1998,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.12.4079&rep=rep1&type=pdf,,,,1.0,0,8,"n: 8,
k: 8",O(kn + 1.31951^k k^2),"n: number of vertices
m: number of edges
k: size of vertex cover (worst case O(n))",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),(see remark in algo id #576),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,False
579,1.0,0.0,1,CYK algorithm,O(n^2.38 * |G|),73.0,CFG Problems,1.0,CFG Recognition,584.0,,,1,1,O(n^3 * |G|),,,[https://core.ac.uk/download/pdf/158319955.pdf Cocke–Younger–Kasami algorithm (1968)],Cocke–Younger–Kasami algorithm,1968,https://core.ac.uk/download/pdf/158319955.pdf,,,,1.0,0,6,"n: 6,
|G|: 3",O(n^3 * |G|),"n: input string length
|G|: size of grammar",n,,,Double-tape TM,cells,5,n: 5,O(n^2),https://core.ac.uk/download/pdf/158319955.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,G=100,,,,,,,100000000000.0,1,,1.00E+20,1,,1.00E+29,1,,3,,,Combinatorics,CYK_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/CYK_algorithm/monthly/20150701/20230731,2475.0,2178.0,2624.0,5164.0,5845.0,4843.0,3978.0,3251.0,4371.0,4816.0,4768.0,3435.0,2256.0,2164.0,2482.0,4226.0,5621.0,5276.0,3813.0,3597.0,4603.0,5537.0,4959.0,3196.0,2176.0,2152.0,2718.0,5126.0,6259.0,5083.0,3927.0,4229.0,5083.0,5611.0,5494.0,3939.0,2648.0,2216.0,3227.0,5624.0,5383.0,5198.0,3762.0,3242.0,4687.0,5185.0,5284.0,3876.0,2357.0,2055.0,2971.0,5285.0,5223.0,4405.0,3328.0,3165.0,4047.0,4458.0,4648.0,3724.0,2401.0,1898.0,2892.0,4390.0,5225.0,9099.0,4733.0,3442.0,5172.0,4485.0,4412.0,3909.0,2468.0,2007.0,2588.0,3653.0,4441.0,3794.0,3153.0,2636.0,3562.0,3808.0,3804.0,3315.0,2224.0,1767.0,2351.0,3766.0,4628.0,3678.0,3370.0,2824.0,4187.0,3488.0,3659.0,2808.0,2056.0,3869.752577319588,5.3728596,False,5,True
580,0.0,0.0,0,,O(n^2.38 * |G|),73.0,CFG Problems,1.0,CFG Recognition,585.0,,,1,1,$O(n^\omega * |G|)$ where omega is the exponent for matrix multiplication,,,[https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468 Valiant (1975)],Valiant,1975,https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468,,,,1.0,0,5.3728596,"n: 5.3728596,
|G|: 3",O(n^omega * |G|) where omega is the exponent for matrix multiplication,"n: input string length
|G|: size of grammar",n,,,Word RAM and multitape TM,words/cells,5,n: 5,O(n^2)?,See matrix multiplication space complexity,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1380384265.0,72.44359601,0.843802017,1.91E+16,5248.074602,2.399605878,2.63E+23,380189.3963,5.268200174,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.3728596,True,5,True
581,1.0,0.0,1,Earley parser,O(n^3),73.0,CFG Problems,2.0,CFG Parsing,586.0,,,1,1,O(n^3),,,[https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf Earley parser (1968)],Earley parser,1968,https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,,,,1.0,0,6,n: 6,O(n^3),n: input string length,n,,,Word RAM,words,5,n: 5,O(n^2),https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,100,,1.00E+18,100,,1.00E+27,100,,3,,,Combinatorics,Earley_parser,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Earley_parser/monthly/20150701/20230731,1343.0,1220.0,1849.0,1945.0,2327.0,2365.0,2121.0,2165.0,2148.0,2082.0,1916.0,1595.0,1173.0,1190.0,1308.0,1829.0,2076.0,1731.0,2775.0,2092.0,1936.0,2283.0,1815.0,1426.0,1276.0,1251.0,1318.0,1822.0,1947.0,1963.0,1800.0,1641.0,2231.0,2043.0,2214.0,1576.0,1402.0,1409.0,1675.0,2120.0,1992.0,2095.0,1743.0,1631.0,2135.0,2064.0,2632.0,1541.0,1583.0,1750.0,1776.0,2158.0,2145.0,2075.0,1900.0,1739.0,1953.0,2286.0,2072.0,1438.0,1226.0,1070.0,1438.0,1683.0,2097.0,2527.0,1737.0,1530.0,1783.0,1678.0,2139.0,1843.0,1301.0,1360.0,1466.0,1659.0,1679.0,1803.0,1944.0,1435.0,1539.0,1995.0,1823.0,1501.0,1461.0,1250.0,1226.0,1489.0,1838.0,1662.0,1676.0,1372.0,1670.0,1749.0,1763.0,1264.0,1280.0,1763.5257731958764,5.3728596,False,5,True
582,1.0,0.0,1,GLR parser,O(n^3),73.0,CFG Problems,2.0,CFG Parsing,587.0,,,1,1,O(n^3),,,[https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18 GLR parser (1974)],GLR parser,1974,https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,,,,0.0,0,6,n: 6,O(n^3),n: input string length,n,,,Word RAM? (implemented on ALGOL),words,6,n: 6,O(n^3),https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Combinatorics,GLR_parser,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/GLR_parser/monthly/20150701/20230731,1218.0,1122.0,1287.0,1376.0,1343.0,1381.0,1330.0,1360.0,1332.0,1330.0,1234.0,1213.0,1051.0,1102.0,1217.0,1251.0,1301.0,1210.0,1244.0,1288.0,1252.0,1259.0,1251.0,1119.0,956.0,1065.0,1092.0,1346.0,1206.0,1385.0,1320.0,1284.0,1367.0,1437.0,1231.0,1031.0,976.0,1025.0,1237.0,1183.0,1263.0,1022.0,1109.0,1077.0,1146.0,1190.0,1085.0,946.0,939.0,942.0,1088.0,1240.0,1227.0,1062.0,1069.0,1134.0,919.0,1098.0,920.0,935.0,754.0,649.0,846.0,829.0,761.0,1085.0,794.0,760.0,988.0,892.0,837.0,876.0,865.0,773.0,725.0,760.0,856.0,789.0,826.0,997.0,939.0,820.0,903.0,966.0,790.0,795.0,851.0,914.0,847.0,979.0,986.0,871.0,954.0,823.0,783.0,794.0,788.0,1052.4536082474226,5.3728596,False,5,False
583,1.0,0.0,1,Apriori algorithm,,74.0,Finding Frequent Itemsets,2.0,Finding Frequent Itemsets,588.0,,,1,1,O(n^2),,,[http://www.vldb.org/conf/1994/P487.PDF A-Priori algorithm (1994)],A-Priori algorithm,1994,http://www.vldb.org/conf/1994/P487.PDF,,,,1.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),https://dl.acm.org/doi/pdf/10.1145/1014052.1014091,0.0,0.0,,0,,0,,0,0,,0,0,https://www-users.cse.umn.edu/~kumar001/dmbook/ch6.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Apriori_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Apriori_algorithm/monthly/20150701/20230731,7491.0,8124.0,9432.0,11666.0,11182.0,10544.0,9733.0,11041.0,13162.0,12778.0,11819.0,8561.0,7335.0,8539.0,10137.0,12852.0,14357.0,10663.0,10257.0,11310.0,14873.0,14249.0,13223.0,9225.0,8685.0,9443.0,10755.0,12513.0,13914.0,11114.0,10495.0,11051.0,12958.0,14307.0,12453.0,8755.0,8292.0,9210.0,10199.0,12536.0,11751.0,10577.0,9213.0,8874.0,11821.0,13710.0,11001.0,7443.0,6859.0,7364.0,9761.0,10944.0,13154.0,9756.0,8815.0,9530.0,9158.0,10138.0,9619.0,9190.0,6790.0,6189.0,9481.0,10998.0,11660.0,12157.0,9526.0,8465.0,11248.0,10401.0,9127.0,8587.0,8947.0,6926.0,7891.0,8623.0,8937.0,7966.0,7391.0,5323.0,3.0,1.0,128.0,6295.0,4623.0,4315.0,5636.0,6652.0,7923.0,6798.0,5583.0,4897.0,5651.0,5210.0,6086.0,5016.0,3718.0,9207.0,5,True,5,True
584,0.0,0.0,0,,,74.0,Finding Frequent Itemsets,1.0,Finding Frequent Itemsets,589.0,,,1,1,O(n^2),,,[https://dl.acm.org/doi/abs/10.1145/568271.223813 The Algorithm of Park; Chen; and Yu (PCY) (1995)],The Algorithm of Park; Chen; and Yu (PCY),1995,https://dl.acm.org/doi/abs/10.1145/568271.223813,,,,0.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-44418-1_1.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,5,True
585,0.0,0.0,0,,,74.0,Finding Frequent Itemsets,1.0,Finding Frequent Itemsets,590.0,,,1,1,O(n^2),,,[http://ilpubs.stanford.edu:8090/423/ The Multistage Algorithm (1999)],The Multistage Algorithm,1999,http://ilpubs.stanford.edu:8090/423/,,,,0.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,5,True
586,0.0,0.0,0,,,74.0,Finding Frequent Itemsets,1.0,Finding Frequent Itemsets,591.0,,,1,1,O(n^2),,,[http://ilpubs.stanford.edu:8090/423/ The Multihash Algorithm (1999)],The Multihash Algorithm,1999,http://ilpubs.stanford.edu:8090/423/,,,,0.0,0,5,n: 5,O(n^2),n: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,O(n^2),"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,5,True
587,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,592.0,,,1,1,O(n^2 log^3 n),,,[https://doi.org/10.1109/TIT.2009.2016040 Gupta; Verdu (2009)],Gupta; Verdu,2009,https://doi.org/10.1109/TIT.2009.2016040,,,,0.0,0,5.03,n: 5.03,O(n^2 log^3 n),n: input string length (bits),n,,,Word RAM,bits,3,n: 3,O(n),"Derived: Considering the codebook to be part of the input, this only requires storing a single codeword in memory, of size $O(n)$, along with some constants",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
588,1.0,0.0,1,Discrete cosine transform,,75.0,Data Compression,2.0,Lossy Compression,593.0,,,1,1,O(n^2),,,[https://doi.org/10.1109%2FT-C.1974.223784 Discrete Cosine Transform (1974)],Discrete Cosine Transform,1974,https://doi.org/10.1109%2FT-C.1974.223784,,,,1.0,1->3,5,n: 5,O(n^2),n: number of items in input series of data,n,Derived: each of the n terms of the DCT has a sum of n terms,1.0,Word RAM,words,3,n: 3,O(n),Derived: store the DCT coefficient for each input term,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,inf,1000000.0,inf,1000000000.0,inf,1000000000.0,Inf,inf,1.00E+18,Inf,inf,1.00E+27,Inf,inf,1,,,Image Processing,Discrete_cosine_transform,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Discrete_cosine_transform/monthly/20150701/20230731,12961.0,12892.0,13221.0,16129.0,16419.0,16324.0,14381.0,15055.0,18668.0,17679.0,18460.0,14787.0,13038.0,12541.0,14279.0,17993.0,19585.0,17403.0,16036.0,15371.0,19663.0,18261.0,19110.0,14779.0,12741.0,13198.0,13365.0,18155.0,19619.0,15482.0,15728.0,14803.0,17144.0,18214.0,17973.0,14785.0,12895.0,12606.0,13643.0,17784.0,17179.0,16354.0,14627.0,14042.0,16716.0,17829.0,17619.0,12774.0,12178.0,15587.0,15079.0,22644.0,27356.0,24348.0,19901.0,19074.0,18379.0,21821.0,20133.0,16055.0,14774.0,13237.0,14759.0,17789.0,19335.0,18983.0,18032.0,28859.0,22174.0,19855.0,18531.0,16942.0,17621.0,15699.0,13807.0,16415.0,17922.0,17418.0,23989.0,16456.0,17476.0,17573.0,20322.0,16421.0,13147.0,12084.0,12662.0,14432.0,18480.0,15831.0,14726.0,14274.0,16181.0,14812.0,15243.0,13209.0,11745.0,16640.0,3,False,3,True
589,0.0,0.0,0,,,75.0,Data Compression,2.0,Lossy Compression,594.0,Low Density Generator Matrix (LDGM) codes; for a Bernouli(1/2) source,,1,1,O(n^2),,,[https://ieeexplore.ieee.org/document/1523592 Maneva and M. J. Wainwright (2005)],Maneva and M. J. Wainwright,2005,https://ieeexplore.ieee.org/document/1523592,,,,0.0,0,5,n: 5,O(n^2),"n: length of input vector
m: length of compressed output vector",n,,,Word RAM,bits,5,n: 5,O(n^2),"Derived: size of the factor graph representation of the generator matrix, or size of the generator matrix itself",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
590,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,595.0,Constraint Satisfaction Problem with Random Gates,,1,1,O(n^2),,,[https://arxiv.org/abs/cond-mat/0504509  Ciliberti; Mézard (2005)],Ciliberti; Mézard,2005,https://arxiv.org/abs/cond-mat/0504509,,,,1.0,3->4,5,n: 5,O(n^2),"n: length of input vector
m: length of compressed output vector",n,,,Word RAM,bits,5,n: 5,O(n^2)?,"Derived: size of the factor graph representation of the generator matrix, or size of the generator matrix itself",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,Inf,,1E+12,Inf,,1.00E+18,Inf,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
591,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,596.0,Brute Force,,1,1,O(n*2^n),,,[ Brute force (1940)],Brute force,1940,,,,,1.0,0,8,n: 8,O(n*2^n),n: length of input data,n,,,Word RAM,words,8,n: 8,O(n*2^n)?,Keep track of big codebook?,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,inf,,inf,,inf,,inf,1,,Inf,1,,Inf,1,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
592,0.0,0.0,0,,,75.0,Data Compression,2.0,Lossy Compression,597.0,Low Density Parity Check (LDPC),,1,1,O(n*2^n),,,[https://doi.org/10.1109/TIT.2003.815805 Matsunaga; Yamamoto (2003)],Matsunaga; Yamamoto,2003,https://doi.org/10.1109/TIT.2003.815805,,,,0.0,0,8,n: 8,O(n*2^n),n: length of input data,n,,,Word RAM,words,8,n: 8,exp(n),https://doi.org/10.1109/TIT.2003.815805,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
593,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,598.0,LDGM codes + multilevel quantization,,1,1,O(kmn)?,,,[https://ieeexplore.ieee.org/document/5474629/ Sun; M. Shao; J. Chen; K. Wong; and X. Wu (2010)],Sun; M. Shao; J. Chen; K. Wong; and X. Wu,2010,https://ieeexplore.ieee.org/document/5474629/,,,,0.0,0,8,n: 8,O(kmn)?,"n: length of input data
m: level parameter
k: rate parameter",n,,,Word RAM,words,3,"n: 3,
m: 3,
k: 3",O(kmn)?,Encoding scheme can be thought of as a factor graph with O(k+mn) nodes and O(kmn) edges,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
594,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,599.0,Low Density Parity Check (LDPC),,1,1,O(n*2^n),,,[https://www.semanticscholar.org/paper/Lossy-Data-Compression-over-Zq-by-LDPC-Code-Miyake/652f0438118898b63126f7261ec4cd2002ff0e0b Miyake 2006 (2006)],Miyake 2006,2006,https://www.semanticscholar.org/paper/Lossy-Data-Compression-over-Zq-by-LDPC-Code-Miyake/652f0438118898b63126f7261ec4cd2002ff0e0b,,,,0.0,0,8,n: 8,O(n*2^n),n: length of input data,n,,,Word RAM,words,8,n: 8,O(2^n),"Parity check matrix is size poly(n), distortion dictionary is size O(2^n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
595,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,600.0,LDGM + LDPC,,1,1,O(n*2^n),,,[https://arxiv.org/abs/cs/0602046 Martinian and M. J. Wainwright (2006)],Martinian and M. J. Wainwright,2006,https://arxiv.org/abs/cs/0602046,,,,0.0,0,8,n: 8,O(n*2^n),"n: length of input data
m: number of information bits
k: rate parameter (in LDPC)",n,,,Word RAM,words,3,"n: 3,
m: 3,
k: 3",O(mn+mk)?,"Consists of an LDGM portion (O(n+m) nodes, O(mn) edges) and an LDPC portion (O(m+k) nodes, O(mk) edges)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
596,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,601.0,Gibbs sampler,,1,1,O(n),,,[https://web.stanford.edu/~tsachy/pdf_files/Lossy%20Source%20Coding%20via%20Markov%20Chain%20Monte%20Carlo.pdf Jalali and T. Weissman (2008)],Jalali and T. Weissman,2008,https://web.stanford.edu/~tsachy/pdf_files/Lossy%20Source%20Coding%20via%20Markov%20Chain%20Monte%20Carlo.pdf,,,,1.0,4->6,3,n: 3,O(n),n: length of input data,n,,,Word RAM,words,3,n: 3,O(n)?,"Derived: Auxiliary data structures are H_k and m_k. H_k is just a singular value and is constant space, but m_k is a O(n)-size vector.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
597,0.0,0.0,0,,,75.0,Data Compression,1.0,Lossy Compression,602.0,Wyner-Ziv DUDE,,1,1,O(n),,,[https://authors.library.caltech.edu/17983/1/Jalali2010p7459Ieee_T_Inform_Theory.pdf Jalali; A. Montanari; and T. Weissman (2010)],Jalali; A. Montanari; and T. Weissman,2010,https://authors.library.caltech.edu/17983/1/Jalali2010p7459Ieee_T_Inform_Theory.pdf,,,,0.0,0,3,n: 3,O(n),n: length of input data,n,,,Word RAM,words,3,n: 3,O(n)?,Derived: Auxiliary data structures consist of a constant number of O(n)-sized vectors and function definitions,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,1,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
598,0.0,0.0,0,,,75.0,Data Compression,2.0,Lossy Compression,603.0,Polar codes,,1,1,O(N log N),,,[https://arxiv.org/pdf/0903.0307.pdf Korada and R. Urbanke; (2010)],Korada and R. Urbanke;,2010,https://arxiv.org/pdf/0903.0307.pdf,,,,0.0,0,8,n: 8,O(n*2^n),"n: length of input data
N: code length/block length, typically N=2^n",n,https://arxiv.org/pdf/0903.0307.pdf,0.0,Word RAM,words,8,n: 8,O(N),Derived: size of the polar codes that need to be stored,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,,,,,,,,,1,O(N log N) time w.r.t. codelength,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
599,1.0,0.0,1,Berlekamp's algorithm,,76.0,Factorization of Polynomials Over Finite Fields,1.0,Distinct-degree; Equal-degree,604.0,,,1,1,O(n^3 logn),,,[https://ieeexplore.ieee.org/document/6768643/ Berlekamp's algorithm (1967)],Berlekamp's algorithm,1967,https://ieeexplore.ieee.org/document/6768643/,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),Computes the remainder of $g^{((p-1)/2)}-1 mod f$ (in order to find gcd of $g^{((p-1)/2)}-1$ and f),1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Berlekamp%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Berlekamp%27s_algorithm/monthly/20150701/20230731,417.0,414.0,527.0,559.0,693.0,609.0,556.0,554.0,632.0,754.0,727.0,583.0,492.0,434.0,437.0,708.0,626.0,640.0,733.0,740.0,866.0,680.0,745.0,561.0,375.0,411.0,460.0,617.0,589.0,624.0,717.0,549.0,750.0,781.0,623.0,568.0,445.0,456.0,492.0,677.0,666.0,669.0,772.0,642.0,756.0,1322.0,738.0,500.0,462.0,404.0,383.0,606.0,761.0,645.0,667.0,572.0,616.0,743.0,853.0,566.0,512.0,432.0,487.0,567.0,596.0,710.0,570.0,617.0,806.0,718.0,776.0,704.0,590.0,429.0,431.0,619.0,626.0,630.0,517.0,547.0,746.0,767.0,629.0,628.0,462.0,398.0,447.0,562.0,589.0,627.0,552.0,479.0,807.0,733.0,755.0,541.0,623.0,612.2989690721649,5,False,3,True
600,0.0,1.0,1,Factorization of polynomials,,76.0,Factorization of Polynomials Over Finite Fields,1.0,,605.0,,,1,1,O(n^3),,,[- Schubert's algorithm (1940)],Schubert's algorithm,1940,-,,,,1.0,0,6,n: 6,O(n^3),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),,,,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis,Factorization_of_polynomials,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Factorization_of_polynomials/monthly/20150701/20230731,2639.0,2588.0,3293.0,3584.0,2984.0,2350.0,2690.0,2413.0,2618.0,2727.0,2874.0,2483.0,2398.0,2823.0,3085.0,2877.0,3146.0,2616.0,2684.0,2787.0,3007.0,2744.0,2909.0,2900.0,3086.0,3211.0,3489.0,3906.0,3099.0,2820.0,3150.0,2728.0,3139.0,2910.0,3408.0,3399.0,3247.0,4125.0,3530.0,3743.0,3108.0,2901.0,3401.0,3127.0,3590.0,3214.0,3410.0,3459.0,3015.0,3119.0,3748.0,3946.0,3416.0,2641.0,3033.0,2759.0,2844.0,3356.0,3091.0,2745.0,2913.0,3009.0,4398.0,6315.0,4191.0,3461.0,3535.0,3122.0,3533.0,2897.0,2481.0,2342.0,2209.0,2633.0,3405.0,3972.0,3599.0,2741.0,3087.0,2700.0,2972.0,2620.0,2753.0,2390.0,2264.0,2899.0,3342.0,4309.0,3123.0,2551.0,2778.0,2564.0,2939.0,2524.0,2545.0,2474.0,2437.0,3073.8041237113403,5,False,3,True
601,0.0,1.0,1,Square-free polynomial,,76.0,Factorization of Polynomials Over Finite Fields,1.0,Square-free,606.0,,,1,1,O(n^3),,,[- Square-free factorization (1975)],Square-free factorization,1975,-,,,,0.0,0,6,n: 6,O(n^3),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),Computes and stores a constant number of polynomials of degree $O(n)$ per iteration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis,Square-free_polynomial,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Square-free_polynomial/monthly/20150701/20230731,415.0,330.0,408.0,487.0,427.0,365.0,513.0,421.0,437.0,451.0,474.0,438.0,328.0,328.0,428.0,375.0,424.0,516.0,558.0,471.0,461.0,405.0,466.0,364.0,317.0,304.0,429.0,458.0,482.0,398.0,584.0,385.0,513.0,543.0,478.0,423.0,475.0,432.0,376.0,483.0,555.0,505.0,567.0,518.0,665.0,590.0,554.0,529.0,424.0,444.0,556.0,585.0,664.0,549.0,586.0,572.0,502.0,603.0,589.0,496.0,548.0,462.0,514.0,654.0,636.0,643.0,571.0,534.0,688.0,724.0,594.0,524.0,493.0,424.0,468.0,529.0,644.0,579.0,578.0,554.0,657.0,809.0,717.0,715.0,537.0,545.0,545.0,616.0,672.0,582.0,585.0,598.0,718.0,669.0,634.0,636.0,600.0,521.8453608247422,5,False,3,True
602,0.0,1.0,1,Factorization of polynomials over finite fields,,76.0,Factorization of Polynomials Over Finite Fields,1.0,Distinct-degree,607.0,,,1,1,O(n^3 + nlogn),,,[- Distinct-degree factorization (1944)],Distinct-degree factorization,1944,-,,,,0.0,0,6,n: 6,O(n^3 + n \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),"Computes and stores a constant number of polynomials of degree $O(n)$ per iteration. Note that computing $gcd(f, x^{(q^i)}-x)$ can be cleverly done in $O(n)$ space.",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Factorization_of_polynomials_over_finite_fields,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Factorization_of_polynomials_over_finite_fields/monthly/20150701/20230731,1039.0,1069.0,1259.0,1767.0,1902.0,1533.0,1610.0,1564.0,1881.0,1906.0,1680.0,1394.0,1010.0,918.0,1224.0,1628.0,1591.0,1311.0,1277.0,1420.0,1739.0,1570.0,1446.0,903.0,821.0,901.0,1140.0,1569.0,1831.0,1264.0,1407.0,1282.0,1711.0,1490.0,1384.0,1173.0,1010.0,966.0,1084.0,1588.0,1710.0,1345.0,1254.0,1188.0,1712.0,1528.0,1497.0,1159.0,983.0,965.0,1255.0,1950.0,2032.0,1445.0,1287.0,1383.0,1462.0,1791.0,1697.0,1394.0,1165.0,1073.0,1216.0,1623.0,1852.0,1589.0,1603.0,1370.0,1872.0,1575.0,1585.0,1086.0,938.0,958.0,953.0,1445.0,1385.0,1286.0,1269.0,1189.0,1392.0,1413.0,1231.0,1144.0,871.0,889.0,1032.0,1412.0,1533.0,1287.0,1106.0,1083.0,1572.0,1476.0,1261.0,1077.0,926.0,1361.1958762886595,5,False,3,True
603,1.0,0.0,1,Cantor–Zassenhaus algorithm,,76.0,Factorization of Polynomials Over Finite Fields,1.0,Equal-degree,608.0,,,1,1,O(n^3 logn),,,[https://www.ams.org/journals/mcom/1981-36-154/S0025-5718-1981-0606517-5/home.html Cantor–Zassenhaus algorithm (1981)],Cantor–Zassenhaus algorithm,1981,https://www.ams.org/journals/mcom/1981-36-154/S0025-5718-1981-0606517-5/home.html,,,,0.0,0,6.01,n: 6.01,O(n^3 \log n),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),"Keeps track of a set of factors, where sum of degrees of factors is O(n) so the total number of terms to keep track of is O(n). Also, computing h^{((q^d-1)/2)}-1 mod f only requires O(n) space",1.0,0.0,,1,Monte Carlo,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,Cantor%E2%80%93Zassenhaus_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cantor%E2%80%93Zassenhaus_algorithm/monthly/20150701/20230731,228.0,232.0,269.0,327.0,449.0,358.0,409.0,394.0,358.0,329.0,324.0,325.0,346.0,240.0,258.0,448.0,377.0,404.0,385.0,376.0,458.0,310.0,359.0,331.0,218.0,267.0,326.0,289.0,347.0,351.0,497.0,297.0,351.0,357.0,350.0,284.0,286.0,265.0,305.0,399.0,299.0,345.0,338.0,266.0,447.0,592.0,342.0,235.0,399.0,279.0,278.0,411.0,340.0,394.0,343.0,342.0,340.0,468.0,386.0,301.0,273.0,284.0,341.0,402.0,380.0,360.0,385.0,318.0,498.0,454.0,427.0,315.0,321.0,318.0,312.0,325.0,345.0,322.0,376.0,343.0,468.0,495.0,409.0,386.0,329.0,268.0,350.0,383.0,409.0,402.0,430.0,342.0,443.0,411.0,412.0,367.0,407.0,355.0309278350516,5,False,3,True
604,0.0,1.0,1,Factorization of polynomials over finite fields,,76.0,Factorization of Polynomials Over Finite Fields,1.0,Equal-degree,609.0,,,1,1,O(n^2),,,[https://www.sciencedirect.com/science/article/abs/pii/0020019090901954 Victor Shoup's algorithm (1990)],Victor Shoup's algorithm,1990,https://www.sciencedirect.com/science/article/abs/pii/0020019090901954,,,,1.0,3->4,5,n: 5,O(n^2),"n: degree of polynomial
p: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",O(n),"Keeps track of a set of factors, where sum of degrees of factors is $O(n)$ so the total number of terms to keep track of is $O(n)$. Also, polynomials in the separating set can be computed in $O(n)$ space",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1000,0.148153622,1E+12,1000000,0.318256739,1.00E+18,1000000000,0.513561248,3,,,Numerical Analysis,Factorization_of_polynomials_over_finite_fields,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Factorization_of_polynomials_over_finite_fields/monthly/20150701/20230731,1039.0,1069.0,1259.0,1767.0,1902.0,1533.0,1610.0,1564.0,1881.0,1906.0,1680.0,1394.0,1010.0,918.0,1224.0,1628.0,1591.0,1311.0,1277.0,1420.0,1739.0,1570.0,1446.0,903.0,821.0,901.0,1140.0,1569.0,1831.0,1264.0,1407.0,1282.0,1711.0,1490.0,1384.0,1173.0,1010.0,966.0,1084.0,1588.0,1710.0,1345.0,1254.0,1188.0,1712.0,1528.0,1497.0,1159.0,983.0,965.0,1255.0,1950.0,2032.0,1445.0,1287.0,1383.0,1462.0,1791.0,1697.0,1394.0,1165.0,1073.0,1216.0,1623.0,1852.0,1589.0,1603.0,1370.0,1872.0,1575.0,1585.0,1086.0,938.0,958.0,953.0,1445.0,1385.0,1286.0,1269.0,1189.0,1392.0,1413.0,1231.0,1144.0,871.0,889.0,1032.0,1412.0,1533.0,1287.0,1106.0,1083.0,1572.0,1476.0,1261.0,1077.0,926.0,1361.1958762886595,5,True,3,True
605,1.0,0.0,1,Berlekamp–Massey algorithm,,77.0,Cryptanalysis of Linear Feedback Shift Registers,1.0,Cryptanalysis of Linear Feedback Shift Registers,610.0,,,1,1,O(n^2),,,[https://ieeexplore.ieee.org/document/1054260 Berlekamp–Massey algorithm (1969)],Berlekamp–Massey algorithm,1969,https://ieeexplore.ieee.org/document/1054260,2,1.0,https://www.semanticscholar.org/paper/Shift-register-synthesis-and-BCH-decoding-Massey/a0870e57fb5e59aae83f2a2a09b8df78257ef556,1.0,0,5,n: 5,O(n^2),n: size of input stream,n,,,Word RAM,words,3,n: 3,O(n)?,Computes and stores constant number of polynomials of degree $O(n)$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Cryptography,Berlekamp%E2%80%93Massey_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Berlekamp%E2%80%93Massey_algorithm/monthly/20150701/20230731,848.0,957.0,1048.0,1331.0,1404.0,1294.0,1214.0,1354.0,1675.0,1632.0,1617.0,1006.0,1014.0,787.0,1141.0,1370.0,1378.0,1112.0,1384.0,1279.0,1556.0,1469.0,1528.0,1215.0,882.0,1090.0,1027.0,1321.0,1299.0,1133.0,1340.0,997.0,1335.0,1229.0,1528.0,1209.0,1168.0,1169.0,1048.0,1428.0,1408.0,1422.0,2312.0,2162.0,1476.0,2650.0,1685.0,1214.0,1020.0,1005.0,1187.0,1521.0,1457.0,1326.0,1311.0,1499.0,1522.0,1582.0,1695.0,1284.0,1296.0,1142.0,1015.0,1186.0,1376.0,1426.0,1082.0,1220.0,1498.0,1864.0,1490.0,1385.0,1189.0,981.0,1044.0,1314.0,1402.0,1112.0,1230.0,1271.0,1213.0,1509.0,1530.0,1297.0,1147.0,1052.0,1213.0,1238.0,1471.0,1150.0,1570.0,1352.0,1383.0,1512.0,1381.0,1235.0,1101.0,1324.0309278350514,5,True,3,True
606,1.0,0.0,1,Gale–Shapley algorithm,O(n^2),78.0,Stable Matching Problem,1.0,Stable Marriage Problem,611.0,,,1,1,O(n^2),,,[http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf Gale–Shapley algorithm (1962)],Gale–Shapley algorithm,1962,http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf,1,1.0,https://en.wikipedia.org/wiki/Gale–Shapley_algorithm,1.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,3,n: 3,O(n),Only need to keep track of current (provisional) matchings,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,Gale%E2%80%93Shapley_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Gale%E2%80%93Shapley_algorithm/monthly/20150701/20230731,100.0,106.0,193.0,136.0,67.0,102.0,102.0,124.0,187.0,110.0,68.0,83.0,53.0,53.0,58.0,58.0,66.0,67.0,58.0,62.0,65.0,55.0,56.0,64.0,43.0,39.0,56.0,63.0,82.0,72.0,52.0,57.0,59.0,72.0,72.0,60.0,37.0,53.0,55.0,66.0,53.0,54.0,63.0,72.0,70.0,51.0,53.0,48.0,37.0,50.0,91.0,81.0,540.0,2000.0,3998.0,4261.0,3678.0,5104.0,5165.0,4718.0,4533.0,4877.0,6937.0,6784.0,5719.0,7103.0,8099.0,8099.0,9061.0,7286.0,6878.0,6801.0,5620.0,5412.0,7776.0,7883.0,6600.0,5667.0,7957.0,7833.0,8263.0,6735.0,6252.0,6365.0,5055.0,5908.0,7295.0,6983.0,6781.0,5991.0,7566.0,9799.0,9183.0,7853.0,7237.0,7178.0,6763.0,3003.6082474226805,1,False,1,False
607,0.0,1.0,1,Stable roommates problem,,78.0,Stable Matching Problem,1.0,Stable Roommates Problem,612.0,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf Irving's Algorithm (1985)],Irving's Algorithm,1985,http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of pairs of roommates,n,,,Word RAM,words,5,n: 5,O(n^2)?,Manipulates the $O(n)$-many $O(n)$-size preference lists,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,Stable_roommates_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Stable_roommates_problem/monthly/20150701/20230731,820.0,911.0,1606.0,1580.0,1433.0,1231.0,1553.0,1885.0,1192.0,1598.0,1295.0,1082.0,1117.0,1314.0,1566.0,1437.0,1520.0,1241.0,1858.0,1556.0,1997.0,1288.0,1478.0,1173.0,1058.0,1167.0,1563.0,1524.0,1505.0,1391.0,1923.0,1694.0,1610.0,1753.0,1634.0,1181.0,1216.0,1270.0,1577.0,1723.0,1230.0,1275.0,1684.0,1901.0,1901.0,1557.0,1452.0,1146.0,1240.0,1190.0,1738.0,2108.0,1657.0,1274.0,1520.0,1372.0,1307.0,1629.0,1553.0,1186.0,1211.0,1213.0,1705.0,1381.0,1516.0,1284.0,1594.0,1366.0,1621.0,1513.0,1349.0,1105.0,1126.0,1567.0,1438.0,1091.0,1216.0,1112.0,1472.0,1544.0,1509.0,1206.0,1249.0,1034.0,947.0,1330.0,1400.0,1278.0,1240.0,932.0,1601.0,1574.0,1368.0,1096.0,1253.0,909.0,989.0,1399.7835051546392,1,False,1,False
608,0.0,0.0,0,,O(n^2),78.0,Stable Matching Problem,1.0,Stable Marriage Problem,613.0,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf Manlove; Malley (2005)],Manlove; Malley,2005,http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance?",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
609,0.0,0.0,0,,O(n^2),78.0,Stable Matching Problem,1.0,Stable Marriage Problem,614.0,,,1,1,O(n^2),,,[http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf Unsworth; C.; Prosser; P (2005)],Unsworth; C.; Prosser; P,2005,http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance? (see original reference)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
610,0.0,0.0,0,,,78.0,Stable Matching Problem,1.0,Arc Consistency?,615.0,,,1,1,O(n^3),,,[https://www.sciencedirect.com/science/article/abs/pii/000437029290020X Hentenryck et. al. (1992)],Hentenryck et. al.,1992,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,,,,0.0,0,6,n: 6,O(n^3),n: number of men and number of women,n,,,Word RAM,words,6,n: 6,O(n^3)?,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
611,0.0,0.0,0,,O(n^2),78.0,Stable Matching Problem,1.0,Stable Marriage Problem,616.0,,,1,1,O(n^2),,,[https://link.springer.com/chapter/10.1007/3-540-45578-7_16 Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M. (2001)],Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M.,2001,https://link.springer.com/chapter/10.1007/3-540-45578-7_16,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,5,n: 5,O(n^2)?,"Constructs, preprocesses, and solves an O(n^2)-size CSP instance?",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
612,0.0,0.0,0,,,78.0,Stable Matching Problem,1.0,Stable Roommates Problem,617.0,,,1,1,O(n^3),,,[https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2 Patrick Posser (2014)],Patrick Posser,2014,https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,,,,0.0,0,6,n: 6,O(n^3),n: number of pairs of roommates,n,,,Word RAM,words,3,n: 3,O(n),https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
613,0.0,0.0,0,,O(n^2),78.0,Stable Matching Problem,1.0,Stable Marriage Problem,618.0,,,1,1,O(n^2),,,[https://link.springer.com/content/pdf/10.1007/BF02136029.pdf S. S. TSENG and R. C. T. LEE (1984)],S. S. TSENG and R. C. T. LEE,1984,https://link.springer.com/content/pdf/10.1007/BF02136029.pdf,,,,0.0,0,5,n: 5,O(n^2),n: number of men and number of women,n,,,Word RAM,words,3,n: 3,$O(n)$ per processor?,Only need to keep track of current (provisional) matchings,1.0,0.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
614,0.0,0.0,0,,O(n^2),78.0,Stable Matching Problem,1.0,Stable Marriage Problem,620.0,,,1,1,O(n^{0.5}),,,"[http://theory.stanford.edu/~megiddo/pdf/soda94.pdf Tomas Feder, Nimrod Megiddoy, Serge A Plotki (1994)]","Tomas Feder, Nimrod Megiddoy, Serge A Plotki",1994,http://theory.stanford.edu/~megiddo/pdf/soda94.pdf,,,,0.0,0,2.5,n: 2.5,O(n^0.5),n: number of men and number of women,n,,,Word RAM,words,2.5,n: 2.5,$O(n^{0.5})$ auxiliary per processor?,bounded by runtime,1.0,0.0,,0,,0,,0,1,Polynomial,0,0,,,,,,,,,,,,31.62,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,False,1,False
615,0.0,1.0,1,Longest path problem,,79.0,Longest Path Problem,1.0,Longest Path on Interval Graphs,621.0,,,1,1,O(n^4),,,[https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D. (2011)],Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D.,2011,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1,1.0,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1.0,0,7,n: 7,O(n^4),n: number of vertices,n,,,Word RAM,words,6,n: 6,O(n^3),https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000.0,1,,1.00E+24,1,,1.00E+36,1,,2,,,Combinatorics,Longest_path_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Longest_path_problem/monthly/20150701/20230731,3887.0,4532.0,5289.0,7132.0,7484.0,6692.0,5230.0,6660.0,6246.0,7400.0,6440.0,4664.0,3837.0,3866.0,5371.0,7461.0,10019.0,7719.0,5539.0,5904.0,7361.0,7278.0,6375.0,5123.0,4720.0,4577.0,4702.0,6973.0,9701.0,7247.0,6086.0,5195.0,5928.0,6555.0,6070.0,4745.0,3491.0,3425.0,4386.0,6928.0,7616.0,6426.0,4987.0,5359.0,6062.0,6262.0,6337.0,4076.0,3420.0,3673.0,4315.0,6789.0,8084.0,6135.0,4539.0,5187.0,6364.0,8598.0,7508.0,5589.0,5059.0,4345.0,4366.0,7913.0,8118.0,7988.0,5743.0,4875.0,6982.0,8625.0,7456.0,6124.0,4358.0,4365.0,4259.0,6137.0,7811.0,7195.0,4985.0,4878.0,6042.0,7598.0,6577.0,4696.0,4283.0,4693.0,4042.0,6202.0,7540.0,7124.0,4463.0,4097.0,5212.0,5230.0,5660.0,4156.0,3403.0,5857.360824742268,7,True,6,True
616,0.0,0.0,0,,,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,630.0,,,1,1,O(n^2),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[- Naive (1973)],Naive,1973,-,,,,1.0,0,5,n: 5,O(n^2),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,True
617,0.0,1.0,1,Suffix tree,,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,631.0,,,1,1,O(n),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://dl.acm.org/citation.cfm?id=1441766 Weiner's algorithm (1973)],Weiner's algorithm,1973,https://dl.acm.org/citation.cfm?id=1441766,,,,1.0,4->6,3,n: 3,O(n),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000,0.232846739,1000000,1000000,0.519911083,1000000000,1000000000,0.873817423,4,,,Combinatorics,Suffix_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Suffix_tree/monthly/20150701/20230731,8283.0,7913.0,8267.0,9867.0,9839.0,8210.0,8167.0,8148.0,9097.0,9965.0,9462.0,7434.0,7462.0,8011.0,8039.0,9214.0,9537.0,9038.0,7909.0,7959.0,8559.0,7777.0,8364.0,7163.0,6409.0,6595.0,6785.0,7917.0,7718.0,6623.0,6910.0,6167.0,6938.0,7913.0,7762.0,7066.0,6696.0,6089.0,6210.0,7221.0,7301.0,6174.0,5990.0,6240.0,7040.0,7985.0,6964.0,5865.0,5414.0,5484.0,6093.0,8173.0,7324.0,6543.0,5953.0,5781.0,5907.0,6179.0,6133.0,5714.0,5049.0,4728.0,5388.0,6331.0,6076.0,6168.0,5213.0,5344.0,5992.0,6022.0,5634.0,4567.0,5757.0,4495.0,5047.0,6162.0,7245.0,5675.0,5420.0,5453.0,5449.0,5339.0,5691.0,5769.0,4926.0,4825.0,5479.0,5470.0,6426.0,5731.0,4650.0,4438.0,4709.0,4221.0,4550.0,3843.0,3513.0,6595.412371134021,2,False,3,True
618,0.0,1.0,1,Suffix tree,,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,633.0,,,1,1,O(n),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf Ukkonen (1995)],Ukkonen,1995,https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Combinatorics,Suffix_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Suffix_tree/monthly/20150701/20230731,8283.0,7913.0,8267.0,9867.0,9839.0,8210.0,8167.0,8148.0,9097.0,9965.0,9462.0,7434.0,7462.0,8011.0,8039.0,9214.0,9537.0,9038.0,7909.0,7959.0,8559.0,7777.0,8364.0,7163.0,6409.0,6595.0,6785.0,7917.0,7718.0,6623.0,6910.0,6167.0,6938.0,7913.0,7762.0,7066.0,6696.0,6089.0,6210.0,7221.0,7301.0,6174.0,5990.0,6240.0,7040.0,7985.0,6964.0,5865.0,5414.0,5484.0,6093.0,8173.0,7324.0,6543.0,5953.0,5781.0,5907.0,6179.0,6133.0,5714.0,5049.0,4728.0,5388.0,6331.0,6076.0,6168.0,5213.0,5344.0,5992.0,6022.0,5634.0,4567.0,5757.0,4495.0,5047.0,6162.0,7245.0,5675.0,5420.0,5453.0,5449.0,5339.0,5691.0,5769.0,4926.0,4825.0,5479.0,5470.0,6426.0,5731.0,4650.0,4438.0,4709.0,4221.0,4550.0,3843.0,3513.0,6595.412371134021,2,False,3,True
619,0.0,0.0,0,,,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,634.0,,,1,1,O(n^2),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://link.springer.com/article/10.1007/BF01769703 Ukkonen and D. Wood (1993)],Ukkonen and D. Wood,1993,https://link.springer.com/article/10.1007/BF01769703,,,,0.0,0,5,n: 5,O(n^2),n: length of string,n,,,Word RAM,words,5,n: 5,O(n^2),https://link.springer.com/article/10.1007/BF01769703,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,False
620,0.0,0.0,0,,,81.0,Constructing Suffix Trees,1.0,Constructing Suffix Trees,635.0,,,1,1,O(log^4(n)),,,[https://www.sciencedirect.com/science/article/pii/S0022000097914963 Hariharan (1997)],Hariharan,1997,https://www.sciencedirect.com/science/article/pii/S0022000097914963,,,,0.0,0,2.03,n: 2.03,O(log^4(n)),n: length of string,n,,,CREW PRAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/S0022000097914963,0.0,1.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,9860.7,,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,True
621,0.0,0.0,0,,,81.0,Constructing Suffix Trees,1.0,Constructing Suffix Trees,636.0,,,1,1,O(log^2(n)),,,[https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf Süleyman Cenk Sahinalp ; Uzi Vishkin (1994)],Süleyman Cenk Sahinalp ; Uzi Vishkin,1994,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,,,,1.0,0,2.01,n: 2.01,O(log^2(n)),n: length of string,n,,,CRCW PRAM,words,4.01,n: 4.01,$O(n^{(1+\eps)})$ for any fixed eps>0,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,0.0,1.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,99.3,10070.49345,,397.2674256,2517196064,,893.8517077,1.12E+15,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,False,3,False
622,0.0,1.0,1,Suffix tree,,81.0,Constructing Suffix Trees,1.0,Constructing Suffix Trees,637.0,,,1,1,O(log n),,,[https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf Farach (1997)],Farach,1997,https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,,,,0.0,0,2,n: 2,O(\log n),n: length of string,n,,,CRCW PRAM,words,3,n: 3,O(n),https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,0.0,1.0,,1,Las Vegas,0,,0,1,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Combinatorics,Suffix_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Suffix_tree/monthly/20150701/20230731,8283.0,7913.0,8267.0,9867.0,9839.0,8210.0,8167.0,8148.0,9097.0,9965.0,9462.0,7434.0,7462.0,8011.0,8039.0,9214.0,9537.0,9038.0,7909.0,7959.0,8559.0,7777.0,8364.0,7163.0,6409.0,6595.0,6785.0,7917.0,7718.0,6623.0,6910.0,6167.0,6938.0,7913.0,7762.0,7066.0,6696.0,6089.0,6210.0,7221.0,7301.0,6174.0,5990.0,6240.0,7040.0,7985.0,6964.0,5865.0,5414.0,5484.0,6093.0,8173.0,7324.0,6543.0,5953.0,5781.0,5907.0,6179.0,6133.0,5714.0,5049.0,4728.0,5388.0,6331.0,6076.0,6168.0,5213.0,5344.0,5992.0,6022.0,5634.0,4567.0,5757.0,4495.0,5047.0,6162.0,7245.0,5675.0,5420.0,5453.0,5449.0,5339.0,5691.0,5769.0,4926.0,4825.0,5479.0,5470.0,6426.0,5731.0,4650.0,4438.0,4709.0,4221.0,4550.0,3843.0,3513.0,6595.412371134021,2,True,3,True
623,0.0,0.0,0,,,81.0,Constructing Suffix Trees,1.0,Constructing Suffix Trees,638.0,,,1,1,O(logn),,,[https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees Rytter (2004)],Rytter,2004,https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,,,,1.0,6->7,2,n: 2,O(\log n),n: length of string,n,,,CREW PRAM,words,3,n: 3,O(n),https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,0.0,1.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,9.965,100351.2293,,19.93156857,50171665944,,29.89735285,3.34E+16,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2,True,3,True
624,0.0,1.0,1,Suffix tree,,81.0,Constructing Suffix Trees,2.0,Constructing Suffix Trees,639.0,,,1,1,O(n),Any distribution (runtime same regardless of input),Same general behavior regardless of input,[http://libeccio.di.unisa.it/TdP/suffix.pdf McCreight (1976)],McCreight,1976,http://libeccio.di.unisa.it/TdP/suffix.pdf,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,words,3,n: 3,O(n),"Needs to store the intermediate steps of constructing a suffix tree, which can reach size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Combinatorics,Suffix_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Suffix_tree/monthly/20150701/20230731,8283.0,7913.0,8267.0,9867.0,9839.0,8210.0,8167.0,8148.0,9097.0,9965.0,9462.0,7434.0,7462.0,8011.0,8039.0,9214.0,9537.0,9038.0,7909.0,7959.0,8559.0,7777.0,8364.0,7163.0,6409.0,6595.0,6785.0,7917.0,7718.0,6623.0,6910.0,6167.0,6938.0,7913.0,7762.0,7066.0,6696.0,6089.0,6210.0,7221.0,7301.0,6174.0,5990.0,6240.0,7040.0,7985.0,6964.0,5865.0,5414.0,5484.0,6093.0,8173.0,7324.0,6543.0,5953.0,5781.0,5907.0,6179.0,6133.0,5714.0,5049.0,4728.0,5388.0,6331.0,6076.0,6168.0,5213.0,5344.0,5992.0,6022.0,5634.0,4567.0,5757.0,4495.0,5047.0,6162.0,7245.0,5675.0,5420.0,5453.0,5449.0,5339.0,5691.0,5769.0,4926.0,4825.0,5479.0,5470.0,6426.0,5731.0,4650.0,4438.0,4709.0,4221.0,4550.0,3843.0,3513.0,6595.412371134021,2,False,3,True
625,0.0,1.0,1,Record linkage,,83.0,Entity Resolution,1.0,Entity Resolution,645.0,,,1,1,O(n^3k),,,[https://courses.cs.washington.edu/courses/cse590q/04au/papers/Felligi69.pdf Fellegi & Sunter Model (1969)],Fellegi & Sunter Model,1969,https://courses.cs.washington.edu/courses/cse590q/04au/papers/Felligi69.pdf,,,,1.0,0,6.5,"n: 6.5,
k: 3",O(n^3k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,"Derived: A constant number of values per feature; Sums range over n elements, but can be computed in the same memory; see Method 1",1.0,0.0,,0,,0,,0,0,,0,0,,,,,"r:c
1:1",,,,,,,62500000000.0,1,,6.25E+22,1,,6.25E+34,1,,2,,,Combinatorics,Record_linkage,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Record_linkage/monthly/20150701/20230731,3503.0,3005.0,3014.0,3528.0,3328.0,3026.0,3289.0,3471.0,3841.0,3346.0,3289.0,3158.0,2680.0,3295.0,3266.0,3563.0,3322.0,2870.0,3179.0,3023.0,3547.0,3029.0,3395.0,3308.0,2726.0,3058.0,3761.0,3202.0,3340.0,2814.0,3051.0,2951.0,3296.0,3119.0,3445.0,3102.0,2796.0,2739.0,2696.0,3095.0,2889.0,2694.0,3000.0,2844.0,3096.0,3052.0,3207.0,3030.0,2812.0,2966.0,2979.0,3220.0,3026.0,2530.0,3070.0,3236.0,2813.0,2707.0,3298.0,2761.0,2792.0,2452.0,2945.0,2971.0,2540.0,2120.0,2360.0,2670.0,3335.0,2886.0,2715.0,2691.0,2475.0,2133.0,2166.0,2492.0,2506.0,1767.0,2236.0,2108.0,2365.0,2101.0,2094.0,2030.0,1776.0,1788.0,1865.0,1855.0,2021.0,1596.0,1956.0,1994.0,2123.0,1735.0,1761.0,1653.0,1695.0,2777.979381443299,5.01,False,2.5,True
626,0.0,0.0,0,,,83.0,Entity Resolution,1.0,Entity Resolution,646.0,"Bipartite method
to compute pairwise ER",,1,1,O(n^3k),,,[https://doi.org/10.14778/1687627.1687661 Gupta & Sarawagi CRF (2009)],Gupta & Sarawagi CRF,2009,https://doi.org/10.14778/1687627.1687661,,,,0.0,0,6.5,"n: 6.5,
k: 3",O(n^3k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,4.5,"n: 4.5,
k: 3",$O(nk)$?,"Derived: Creates an intermediate ""consolidated"" table that it manipulates/reorders to get final output",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,2.5,False
627,0.0,0.0,0,,,83.0,Entity Resolution,2.0,Entity Resolution,648.0,,,1,1,O(n^3k),,,[https://courses.cs.washington.edu/courses/cse590q/04au/papers/WinklerEM.pdf EM Based Winkler (2000)],EM Based Winkler,2000,https://courses.cs.washington.edu/courses/cse590q/04au/papers/WinklerEM.pdf,,,,0.0,0,6.5,"n: 6.5,
k: 3",O(n^3k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,Derived: One value per feature in the discretized vector,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,2.5,True
628,0.0,0.0,0,,,83.0,Entity Resolution,2.0,Entity Resolution,649.0,,,1,1,O(n^2 k),,,[https://arxiv.org/abs/1207.4180 Ravikumar & Cohen Generative Models (2004)],Ravikumar & Cohen Generative Models,2004,https://arxiv.org/abs/1207.4180,,,,0.0,0,5.5,"n: 5.5,
k: 3",O(n^2 k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,Derived: One value per feature in the discretized vector,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,2.5,True
629,0.0,0.0,0,,,83.0,Entity Resolution,2.0,Entity Resolution,651.0,Delphi algorithm,,1,1,O(n^2 k),,,[https://doi.org/10.1016/B978-155860869-6/50058-5 Ananthakrishna (2002)],Ananthakrishna,2002,https://doi.org/10.1016/B978-155860869-6/50058-5,,,,0.0,0,5.5,"n: 5.5,
k: 3",O(n^2 k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: the token table, the children table, and the tuples in G are stored in main memory, each are of size $O(n)$",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,2.5,False
630,0.0,0.0,0,,,83.0,Entity Resolution,1.0,Entity Resolution,652.0,,,1,1,O(n^2 k),,,[https://www.sciencedirect.com/science/article/abs/pii/016794739390116B BOYS algorithm (1993)],BOYS algorithm,1993,https://www.sciencedirect.com/science/article/abs/pii/016794739390116B,,,,0.0,0,5.5,"n: 5.5,
k: 3",O(n^2 k),"n: number of records
k: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: As written stores counts/probabailities for all pairs of entries.,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.01,False,2.5,False
631,0.0,0.0,0,,,84.0,Longest Palindromic Substring,2.0,Longest Palindromic Substring,653.0,,,1,1,O(n^3),Any distribution of values?,(behavior same across all inputs),[- Naive (1940)],Naive,1940,-,1,1.0,,1.0,0,6,n: 6,O(n^3),n: length of given string,n,,,Word RAM,words,1,n: 1,$O(1)$,https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,True
632,0.0,0.0,0,,,84.0,Longest Palindromic Substring,1.0,Longest Palindromic Substring,654.0,,,1,1,O(n^2),,,[- Dynamic Programming (1953)],Dynamic Programming,1953,-,,,,1.0,3->4,5,n: 5,O(n^2),n: length of given string,n,,,Word RAM,words,5,n: 5,O(n^2),https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1000,0.70125428,1E+12,1000000,1.894266125,1.00E+18,1000000000,3.923882632,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
633,0.0,1.0,1,Longest palindromic substring,,84.0,Longest Palindromic Substring,2.0,Longest Palindromic Substring,655.0,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://doi.org/10.1145%2F321892.321896 Manacher (1975)],Manacher,1975,https://doi.org/10.1145%2F321892.321896,2,1.0,https://dl.acm.org/doi/10.1145/321892.321896,1.0,4->6,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it stores the radii for each center, requiring O(n) space. Space usage is bounded from above by runtime, so at most O(n) space is used.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1000000,0.483981789,1000,1E+12,1.20220195,1000000000,1.00E+18,2.268027589,3,,,Combinatorics,Longest_palindromic_substring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Longest_palindromic_substring/monthly/20150701/20230731,4752.0,4605.0,5163.0,6064.0,5514.0,4304.0,5334.0,5545.0,5856.0,5630.0,4899.0,5685.0,4943.0,5479.0,6263.0,7742.0,6605.0,5526.0,6187.0,6304.0,5959.0,5285.0,5354.0,5473.0,5576.0,5808.0,5966.0,5991.0,5575.0,4006.0,4436.0,4609.0,6488.0,4530.0,4688.0,4434.0,4470.0,4303.0,4473.0,5113.0,4495.0,4027.0,4506.0,4491.0,5698.0,7285.0,5565.0,4860.0,5411.0,6256.0,6399.0,5609.0,4962.0,4467.0,5513.0,5234.0,5066.0,4773.0,4561.0,7619.0,10127.0,12243.0,11090.0,10903.0,9376.0,9660.0,12921.0,8817.0,10465.0,9800.0,10008.0,10801.0,12309.0,13356.0,11374.0,11826.0,10517.0,10172.0,12374.0,11986.0,12630.0,11183.0,11529.0,15516.0,12482.0,13759.0,10980.0,9862.0,8895.0,7833.0,8232.0,7074.0,5906.0,5579.0,5573.0,3796.0,4251.0,7184.938144329897,3,True,1,False
634,0.0,1.0,1,Longest palindromic substring,,84.0,Longest Palindromic Substring,1.0,Longest Palindromic Substring,656.0,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://doi.org/10.1007%2FBF01182773 Jeuring (1994)],Jeuring,1994,https://doi.org/10.1007%2FBF01182773,,,,0.0,0,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$?,Stores (and uses) previously computed palindrome information; unclear if O(n) is best bound possible,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics,Longest_palindromic_substring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Longest_palindromic_substring/monthly/20150701/20230731,4752.0,4605.0,5163.0,6064.0,5514.0,4304.0,5334.0,5545.0,5856.0,5630.0,4899.0,5685.0,4943.0,5479.0,6263.0,7742.0,6605.0,5526.0,6187.0,6304.0,5959.0,5285.0,5354.0,5473.0,5576.0,5808.0,5966.0,5991.0,5575.0,4006.0,4436.0,4609.0,6488.0,4530.0,4688.0,4434.0,4470.0,4303.0,4473.0,5113.0,4495.0,4027.0,4506.0,4491.0,5698.0,7285.0,5565.0,4860.0,5411.0,6256.0,6399.0,5609.0,4962.0,4467.0,5513.0,5234.0,5066.0,4773.0,4561.0,7619.0,10127.0,12243.0,11090.0,10903.0,9376.0,9660.0,12921.0,8817.0,10465.0,9800.0,10008.0,10801.0,12309.0,13356.0,11374.0,11826.0,10517.0,10172.0,12374.0,11986.0,12630.0,11183.0,11529.0,15516.0,12482.0,13759.0,10980.0,9862.0,8895.0,7833.0,8232.0,7074.0,5906.0,5579.0,5573.0,3796.0,4251.0,7184.938144329897,3,True,1,False
635,0.0,1.0,1,Longest palindromic substring,,84.0,Longest Palindromic Substring,2.0,Longest Palindromic Substring,657.0,,,1,1,O(n),Any distribution of values?,need to read entire input,[https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3 Gusfield  (1997)],Gusfield,1997,https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3,,,,0.0,0,3,n: 3,O(n),n: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it pre-processes and stores the string and the reverse of the string, requiring O(n) space. Space usage is bounded from above by runtime, so at most O(n) space is used.",1.0,0.0,,0,,0,,0,0,,0,0,https://d1wqtxts1xzle7.cloudfront.net/31053376/Algorithms_on_String_Trees_and_Sequences-with-cover-page-v2.pdf?Expires=1661234618&Signature=F2kwJp-yun59cg~XkWJkmRPpTYA~w8ZV8-T7prnT1vRBskR9HP5--HSAW3yRCkMvsogo8r6dTuq94Um2iFLJueNP-wf-EwQwsnTfaNWN8~IPjQAStkg0o3~9dr~gbsRzgddypdVJFp2qnFOzCaL3RgLw1mVEt~z6l9NwCSAK~mKZn6gZm3pP2-oCtuvQeUkRQKEWMrjbmZJvnXGoTSeKl4wMvvO5VOB17WLvU2A~G3XuiV05wJJwK8cQ9wqGZdorSYXieKLElOTfoYCDEjugeJuQXa2R-VhZtk8WpBPLmIv-PKUqQpxNG2usEwy0f4rcZnpsIBfEAJV9UBv1QwxlPQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA,,,,,,,,,,,1000.0,,,,,,,,,3,,,Combinatorics,Longest_palindromic_substring,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Longest_palindromic_substring/monthly/20150701/20230731,4752.0,4605.0,5163.0,6064.0,5514.0,4304.0,5334.0,5545.0,5856.0,5630.0,4899.0,5685.0,4943.0,5479.0,6263.0,7742.0,6605.0,5526.0,6187.0,6304.0,5959.0,5285.0,5354.0,5473.0,5576.0,5808.0,5966.0,5991.0,5575.0,4006.0,4436.0,4609.0,6488.0,4530.0,4688.0,4434.0,4470.0,4303.0,4473.0,5113.0,4495.0,4027.0,4506.0,4491.0,5698.0,7285.0,5565.0,4860.0,5411.0,6256.0,6399.0,5609.0,4962.0,4467.0,5513.0,5234.0,5066.0,4773.0,4561.0,7619.0,10127.0,12243.0,11090.0,10903.0,9376.0,9660.0,12921.0,8817.0,10465.0,9800.0,10008.0,10801.0,12309.0,13356.0,11374.0,11826.0,10517.0,10172.0,12374.0,11986.0,12630.0,11183.0,11529.0,15516.0,12482.0,13759.0,10980.0,9862.0,8895.0,7833.0,8232.0,7074.0,5906.0,5579.0,5573.0,3796.0,4251.0,7184.938144329897,3,True,1,False
636,0.0,0.0,0,,,53.0,Register Allocation,2.0,Global Register Allocation,658.0,,,1,1,O(n^2),,,[https://dl.acm.org/doi/10.1145/236114.236117 Demand-Driven Register Allocation (1996)],Demand-Driven Register Allocation,1996,https://dl.acm.org/doi/10.1145/236114.236117,,,,0.0,0,5,n: 5,O(n^2),$n$: number of instructions in procedure,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Requires storing a so-called $\Delta$-table of size $n \times n$ to keep track of $\Delta$-estimates,1.0,0.0,,0,,0,,1,0,,0,0,,,,,,,,,,,,1000000.0,1,,,,,,,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
637,1.0,0.0,1,Sethi–Ullman algorithm,,85.0,AST to Code Translation,2.0,Arithmetic Expression Binary Tree,659.0,,,1,1,O(n),,,[https://dl.acm.org/doi/10.1145/321607.321620 Sethi–Ullman Algorithm (1970)],Sethi–Ullman Algorithm,1970,https://dl.acm.org/doi/10.1145/321607.321620,0.5,1.0,https://dl.acm.org/doi/10.1145/321607.321620,1.0,0,3,n: 3,O(n),$n$: number of nodes in the tree,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Only uses in-situ updates to the input tree, no auxiliary data structures",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,Sethi%E2%80%93Ullman_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Sethi%E2%80%93Ullman_algorithm/monthly/20150701/20230731,276.0,187.0,205.0,304.0,347.0,254.0,219.0,275.0,219.0,351.0,334.0,267.0,185.0,165.0,211.0,249.0,551.0,251.0,233.0,229.0,286.0,343.0,296.0,307.0,212.0,172.0,223.0,292.0,385.0,278.0,419.0,273.0,244.0,335.0,250.0,291.0,180.0,159.0,211.0,195.0,330.0,345.0,244.0,560.0,419.0,369.0,241.0,188.0,158.0,172.0,117.0,171.0,305.0,254.0,305.0,318.0,280.0,377.0,328.0,270.0,177.0,129.0,120.0,197.0,225.0,315.0,312.0,178.0,320.0,360.0,451.0,279.0,144.0,135.0,167.0,211.0,283.0,382.0,260.0,243.0,186.0,275.0,280.0,212.0,152.0,150.0,146.0,229.0,400.0,275.0,361.0,217.0,192.0,348.0,379.0,253.0,171.0,263.1752577319588,3,True,1,True
638,0.0,0.0,0,,,86.0,Graph Isomorphism Problem,1.0,"Graph Isomorphism, Bounded Number of Vertices of Each Color",661.0,,,1,1,o(\exp(2n^{1/2}\log^2n)),,,[https://epubs.siam.org/doi/10.1137/0209018 Babai (1980)],Babai,1980,https://epubs.siam.org/doi/10.1137/0209018,,,,1.0,0,8,n: 8,o(\exp(2n^{1/2}\log^2n)),n: number of vertices,n,,,Word RAM,words,5,n: 5,O(n^2),https://epubs.siam.org/doi/10.1137/0209018 (section 2.5),0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#VALUE!,False,3m,False
639,0.0,0.0,0,,,86.0,Graph Isomorphism Problem,1.0,,663.0,,,1,1,,,,[http://users.cecs.anu.edu.au/~bdm/papers/pgi.pdf McKay (1981)],McKay,1981,http://users.cecs.anu.edu.au/~bdm/papers/pgi.pdf,,,,0.0,0,#VALUE!,,$O((m1 + m2)n^3 + m2 n^2 L)$,n: number of vertices,n,,,Word RAM,words,6,n: 6,$2mn+10n+m+(m+4)K+2mL$,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#VALUE!,True,3m,False
640,0.0,1.0,1,Graph isomorphism problem,,86.0,Graph Isomorphism Problem,1.0,,664.0,,,1,1,,,,[https://dl.acm.org/doi/10.1145/321958.321963 Schmidt & Druffel (1976)],Schmidt & Druffel,1976,https://dl.acm.org/doi/10.1145/321958.321963,,,,1.0,0,8,n: 8,$O(n*n!)$,n: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,derived in sheet,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Graph_isomorphism_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_isomorphism_problem/monthly/20150701/20230731,2391.0,2387.0,2727.0,3007.0,18595.0,6419.0,4191.0,3398.0,3633.0,3934.0,3421.0,3020.0,2473.0,2375.0,2621.0,3129.0,3840.0,3399.0,4595.0,2874.0,3534.0,3573.0,3161.0,2822.0,2402.0,2713.0,3124.0,3200.0,3937.0,3687.0,3015.0,2487.0,2874.0,3373.0,3170.0,2389.0,2265.0,2240.0,3048.0,2928.0,4149.0,3104.0,2964.0,2583.0,3255.0,3388.0,3282.0,2466.0,2440.0,2543.0,2607.0,3260.0,4136.0,3436.0,3088.0,2597.0,2639.0,3618.0,3311.0,3266.0,2827.0,2582.0,3144.0,3210.0,6184.0,4220.0,3113.0,2813.0,3669.0,3542.0,3469.0,2766.0,2591.0,2419.0,2365.0,2951.0,3622.0,3739.0,3084.0,2853.0,2792.0,3320.0,3222.0,2707.0,2413.0,3318.0,2967.0,3127.0,4287.0,3272.0,3129.0,3073.0,3625.0,3714.0,3566.0,2910.0,2750.0,3338.742268041237,#VALUE!,False,3m,False
641,0.0,0.0,0,,,86.0,Graph Isomorphism Problem,1.0,Subgraph Isomorphism,665.0,,,1,1,"Asymptotics not given, actual times. Check",,,[https://dl.acm.org/doi/10.1145/321921.321925 Ullman (1976)],Ullman,1976,https://dl.acm.org/doi/10.1145/321921.321925,,,,1.0,0,#VALUE!,,,"n: max number of vertices between the two graphs
m: min number of vertices between the two graphs",n,,,Word RAM,words,3m,"n: 3
m: 3",O(mn)?,"Stores a constant number of n*m matrices, along with a constant number of vectors of length O(m+n)",1.0,0.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#VALUE!,True,3m,True
642,0.0,1.0,1,Graph isomorphism problem,,86.0,Graph Isomorphism Problem,2.0,Circulant graphs,667.0,,,1,1,O(n^2),,,[https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/S0024611503014412 Muzychuk (2004)],Muzychuk,2004,https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/S0024611503014412,,,,0.0,0,5,n: 5,O(n^2),n: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,derived in notes,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,inf,,,inf,,,inf,1,,,Combinatorics,Graph_isomorphism_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Graph_isomorphism_problem/monthly/20150701/20230731,2391.0,2387.0,2727.0,3007.0,18595.0,6419.0,4191.0,3398.0,3633.0,3934.0,3421.0,3020.0,2473.0,2375.0,2621.0,3129.0,3840.0,3399.0,4595.0,2874.0,3534.0,3573.0,3161.0,2822.0,2402.0,2713.0,3124.0,3200.0,3937.0,3687.0,3015.0,2487.0,2874.0,3373.0,3170.0,2389.0,2265.0,2240.0,3048.0,2928.0,4149.0,3104.0,2964.0,2583.0,3255.0,3388.0,3282.0,2466.0,2440.0,2543.0,2607.0,3260.0,4136.0,3436.0,3088.0,2597.0,2639.0,3618.0,3311.0,3266.0,2827.0,2582.0,3144.0,3210.0,6184.0,4220.0,3113.0,2813.0,3669.0,3542.0,3469.0,2766.0,2591.0,2419.0,2365.0,2951.0,3622.0,3739.0,3084.0,2853.0,2792.0,3320.0,3222.0,2707.0,2413.0,3318.0,2967.0,3127.0,4287.0,3272.0,3129.0,3073.0,3625.0,3714.0,3566.0,2910.0,2750.0,3338.742268041237,#VALUE!,False,3m,False
643,1.0,0.0,1,Kleitman–Wang algorithms,$O(VE)$,87.0,Graph Realization Problems,2.0,Digraph Realization Problem,670.0,Constructs graph,,1,1,O(n),,,[https://linkinghub.elsevier.com/retrieve/pii/0012365X7390037X Kleitman–Wang Algorithm (1973)],Kleitman–Wang Algorithm,1973,https://linkinghub.elsevier.com/retrieve/pii/0012365X7390037X,1,1.0,http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%202.PDF,1.0,0,3,n: 3,O(n),$n$: number of degree pairs,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Space complexity bounded by time complexity; keep track of a constant number of sets of size $O(n)$,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,250000.0,1,,2.5E+11,1,,2.50E+17,1,,4,,,Combinatorics,Kleitman%E2%80%93Wang_algorithms,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kleitman%E2%80%93Wang_algorithms/monthly/20150701/20230731,29.0,35.0,62.0,67.0,80.0,79.0,50.0,59.0,76.0,69.0,50.0,41.0,26.0,52.0,52.0,51.0,123.0,58.0,49.0,42.0,58.0,40.0,67.0,56.0,49.0,36.0,51.0,59.0,68.0,52.0,63.0,46.0,51.0,44.0,39.0,40.0,26.0,88.0,45.0,60.0,126.0,174.0,62.0,51.0,37.0,56.0,43.0,42.0,37.0,55.0,38.0,49.0,56.0,56.0,42.0,39.0,67.0,62.0,41.0,23.0,29.0,53.0,68.0,95.0,101.0,33.0,29.0,31.0,34.0,35.0,20.0,42.0,28.0,47.0,38.0,46.0,58.0,20.0,32.0,23.0,38.0,46.0,33.0,67.0,27.0,50.0,48.0,64.0,65.0,50.0,29.0,40.0,40.0,52.0,59.0,42.0,39.0,51.49484536082474,3,True,1,False
644,1.0,0.0,1,Fulkerson–Chen–Anstee theorem,$O(VE)$,87.0,Graph Realization Problems,2.0,Digraph Realization Problem,671.0,"Makes use of (0,1) matrix properties, checks a property of the input values through the lens of an adjacency matrix",,1,1,O(n),,,[https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/properties-of-a-class-of-01matrices-covering-a-given-matrix/9A3857D219511017536142BD7F132C91 Fulkerson–Chen–Anstee (1982)],Fulkerson–Chen–Anstee,1982,https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/properties-of-a-class-of-01matrices-covering-a-given-matrix/9A3857D219511017536142BD7F132C91,,,,0.0,0,3,n: 3,O(n),$n$: number of degree pairs,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Checking an inequality that involves 3 summations, of max value $O(n^2)$ each (assuming max degree $\leq n$) which is $O(1)$ words in our Word RAM. We check this inequality for each $k = 1, \ldots, n$, but you can store the summations dynamically, so you only need to run $O(1)$ operations per iteration",1.0,0.0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/2783258.2783410?casa_token=u46OpjQb5b4AAAAA:7jdo-IEc4gQRd648rIJNa5WhQno8vQGGaHkDzTcu6FJ8K_BIraVU3kQ8qqqjUkO6zVLW71I7iI_VlA,,,,,1.0,1.15443469,1.0,3.641588834,1.0,9.0,,,,,,,,,,4,,,Combinatorics,Fulkerson%E2%80%93Chen%E2%80%93Anstee_theorem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Fulkerson%E2%80%93Chen%E2%80%93Anstee_theorem/monthly/20150701/20230731,84.0,141.0,106.0,111.0,123.0,138.0,82.0,67.0,86.0,80.0,72.0,72.0,58.0,100.0,68.0,97.0,189.0,80.0,62.0,71.0,71.0,61.0,58.0,134.0,114.0,63.0,72.0,76.0,103.0,61.0,72.0,50.0,51.0,67.0,60.0,66.0,54.0,56.0,63.0,65.0,140.0,166.0,96.0,93.0,69.0,86.0,94.0,95.0,71.0,65.0,78.0,80.0,77.0,83.0,57.0,66.0,86.0,53.0,61.0,27.0,31.0,36.0,55.0,76.0,120.0,50.0,42.0,47.0,37.0,47.0,53.0,57.0,27.0,25.0,40.0,40.0,67.0,35.0,23.0,37.0,45.0,57.0,54.0,77.0,37.0,23.0,32.0,52.0,78.0,89.0,39.0,42.0,39.0,50.0,90.0,40.0,45.0,69.90721649484536,3,True,1,True
645,0.0,0.0,0,,,88.0,Duplicate Elimination,2.0,Duplicate Elimination,673.0,,,1,1,O(nlogn),,,[ Sorting based [Merge Sort] (1964)],Sorting based [Merge Sort],1964,,,,,1.0,0,4,n: 4,O(n \log n),,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: linear space for mergesort,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,9965.0,1,,19931568.57,1,,29897352854,1,,5,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,True,1,False
646,0.0,0.0,0,,,88.0,Duplicate Elimination,2.0,Duplicate Elimination,675.0,,,1,1,O(nlogn),,,[ BST Algorithm (1999)],BST Algorithm,1999,,,,,0.0,0,4,n: 4,O(n \log n),,n,,,Word RAM,words,2,n: 2,$O(\log n)$,Derived: Space required for the recursion stack space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,9.965784285,0.140736627,19.93156857,0.362381742,29.89735285,0.640521482,9965.0,,,,,,,,,5,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,True,1,False
647,0.0,0.0,0,,,88.0,Duplicate Elimination,2.0,Duplicate Elimination,676.0,Selection sort using priority queue?,,1,1,O(n^2),,,[ Priority Queue Algorithm (1976)],Priority Queue Algorithm,1976,,,,,0.0,0,5,n: 5,O(n^2),,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary space needed for the priority queue,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,5,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,False
648,0.0,0.0,0,,,88.0,Duplicate Elimination,2.0,Duplicate Elimination,677.0,,,1,1,O(n^2),,,[https://link.springer.com/article/10.1023/A:1009761603038 Sorted Neighborhood Algorithm (SNA) (1998)],Sorted Neighborhood Algorithm (SNA),1998,https://link.springer.com/article/10.1023/A:1009761603038,,,,0.0,0,5,n: 5,O(n^2),,n,https://doi.org/10.1145/1255175.1255213,0.0,Word RAM,words,3,n: 3,$O(n)$,"Derived: store a key for each entry in the ""Create Key"" phase",1.0,0.0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/document/5381140,,,,,,,,,,,9965.0,,,,,,,,,5,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,False
649,0.0,0.0,0,,,88.0,Duplicate Elimination,2.0,Duplicate Elimination,679.0,SVM string similarity,,1,1,O(n^3),,,[https://dl.acm.org/doi/10.1145/956750.956759 Adaptive Duplicate Detection Algorithm (ADD) (2003)],Adaptive Duplicate Detection Algorithm (ADD),2003,https://dl.acm.org/doi/10.1145/956750.956759,,,,1.0,0,6,n: 6,O(n^3),,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: For SVM, only need to store a constant number of support vectors",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,0.776756327,1.0,1.112931266,1.0,1.338342829,3316.983346,3.004235765,,4316983.346,4.617013078,,4901945847,6.099078567,,5,,,Databases,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,True
650,0.0,0.0,0,,,89.0,Hyperbolic Spline Interpolation,1.0,Hyperbolic Spline Interpolation,680.0,Tridiagonal linear system,0.0,1,1,O(n^3 log^2K),,,[https://link.springer.com/article/10.1134/S0965542508040039 B.I. Kvasov (2008)],B.I. Kvasov,2008,https://link.springer.com/article/10.1134/S0965542508040039,,,,1.0,0,6,"n: 6,
K: 2",O(n^3 \log^2K),n: number of points,n,,,Word RAM,words,3,n: 3,O(n)?,Derived: Tridiagonal matrices in the linear system only require O(n) space,1.0,0.0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1134/S0965542511050095.pdf,,,,K=500,,,,,,,7284439084.0,370511.7131,0.377907451,7.28E+18,3.70512E+11,0.946346007,7.28E+27,3.71E+17,1.74928681,2,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,True,3,True
651,0.0,0.0,0,,,89.0,Hyperbolic Spline Interpolation,1.0,Hyperbolic Spline Interpolation,684.0,Pentadiagonal linear system,0.0,1,1,O(n^5 \log K),,,"[https://link.springer.com/article/10.1023/A:1018988312596 P. Costantini, B. I. Kvasov, and C. Manni (1999)]","P. Costantini, B. I. Kvasov, and C. Manni",1999,https://link.springer.com/article/10.1023/A:1018988312596,,,,0.0,0,7,"n: 7,
K: 2",O(n^5 \log K),n: number of points,n,,,Word RAM,words,3,n: 3,O(n)?,Derived: Pentadiagonal matrix in the linear system only requires O(n) space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,False,3,True
652,0.0,0.0,0,,,89.0,Hyperbolic Spline Interpolation,1.0,Hyperbolic Spline Interpolation,685.0,Discrete Generalized Splines,0.0,1,1,O(n^4),,,[http://sutir.sut.ac.th:8080/sutir/bitstream/123456789/431/1/bib115.pdf B. I. Kvasov (2000)],B. I. Kvasov,2000,http://sutir.sut.ac.th:8080/sutir/bitstream/123456789/431/1/bib115.pdf,,,,1.0,0,7,n: 7,O(n^4),n: number of points,n,,,Word RAM,words,3,n: 3,O(n)??,Requires computing the coefficients b_i and functions Phi(x) and Psi(x) as in equations 17 and 18,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000.0,2698.970004,0.280044121,1.00E+24,2698970.004,0.588455085,1.00E+36,2698970004,0.971173896,2,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,False,3,True
653,1.0,0.0,1,Expectation–maximization algorithm,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,706.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2984875 Expectation-Maximization (EM) algorithm (1977)],Expectation-Maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,,,1.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Statistics,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.02,False,1,False
654,0.0,1.0,1,Expectation–maximization algorithm,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,707.0,,0.0,1,1,O(n^2 log^3 n),,,[https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00083 EM with Quasi-Newton Methods (Jamshidian; Mortaza; Jennrich; Robert I.) (1997)],EM with Quasi-Newton Methods (Jamshidian; Mortaza; Jennrich; Robert I.),1997,https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00083,,,,1.0,0,5.03,n: 5.03,O(n^2 \log^3 n),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",O(n+r^2)?,"Stores current theta and Hessian matrix guess, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,989770366.8,1.01033536,0.000514248,7.92E+15,126.29192,0.273704779,2.67E+22,37419.82815,0.692992715,3,,,Statistics,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.02,False,1,False
655,0.0,0.0,0,,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,708.0,,0.0,1,1,O(n^3),,,[http://www.stat.ucla.edu/~ywu/research/papers/PXEM.pdf Parameter-expanded expectation maximization (PX-EM) (1998)],Parameter-expanded expectation maximization (PX-EM),1998,http://www.stat.ucla.edu/~ywu/research/papers/PXEM.pdf,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta (+ alpha) and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.02,False,1,False
656,0.0,1.0,1,Expectation–maximization algorithm,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,709.0,,0.0,1,1,O(n^3),,,[https://academic.oup.com/biomet/article-abstract/80/2/267/251605?redirectedFrom=fulltext Expectation conditional maximization (ECM) (1993)],Expectation conditional maximization (ECM),1993,https://academic.oup.com/biomet/article-abstract/80/2/267/251605?redirectedFrom=fulltext,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.02,False,1,False
657,0.0,1.0,1,Expectation–maximization algorithm,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,710.0,,0.0,1,1,O(n^3),,,[https://www.jstor.org/stable/2337067 Expectation conditional maximization either (ECME) (Liu; Chuanhai; Rubin; Donald B) (1994)],Expectation conditional maximization either (ECME) (Liu; Chuanhai; Rubin; Donald B),1994,https://www.jstor.org/stable/2337067,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,11.29760188,Statistics,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.02,False,1,False
658,0.0,0.0,0,,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,Maximum Likelihood Methods in Unknown Latent Variables,711.0,,0.0,1,1,O(n^3),,,[https://waseda.pure.elsevier.com/en/publications/the-%CE%B1-em-algorithm-surrogate-likelihood-maximization-using-%CE%B1-loga α-EM Algorithm (2003)],α-EM Algorithm,2003,https://waseda.pure.elsevier.com/en/publications/the-%CE%B1-em-algorithm-surrogate-likelihood-maximization-using-%CE%B1-loga,,,,0.0,0,6,n: 6,O(n^3),"n: number of observations in sample
r: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",O(n+r)?,"Stores current theta and Z guesses, which is updated each iteration. Also assumes description of alpha-log-likelihood takes O(n+r) auxiliary space.",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.02,False,1,False
659,0.0,1.0,1,Expectation–maximization algorithm,,91.0,Maximum Likelihood Methods in Unknown Latent Variables,1.0,"Maximum Likelihood Methods in Unknown Latent Variables; multi-view model, discrete observations",712.0,,0.0,1,1,O(n^2 log^2 n),,,[https://faculty.cc.gatech.edu/~bboots3/files/SpectralExteriorPoint-NIPSWorkshop.pdf Shaban; Amirreza; Mehrdad; Farajtabar (2015)],Shaban; Amirreza; Mehrdad; Farajtabar,2015,https://faculty.cc.gatech.edu/~bboots3/files/SpectralExteriorPoint-NIPSWorkshop.pdf,,,,0.0,0,5.02,n: 5.02,O(n^2 \log^2 n),"n: number of observations in sample
k: number of distributions in ""mixture"" (n_s)
d: dimensions of parameter for each discrete distribution (n_o)",n,,,Real RAM,words,1,"k: 3,
d: 6,
n: 1",O(kd+d^3)??,"vector of parameters has size at least Theta(kd), and tensor M has size at least Theta(d^3) in paper",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,0.199353946,1.0,0.438449888,1.0,0.72521055,9931685.0,,,,,,,,,3,,,Statistics,Expectation%E2%80%93maximization_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Expectation%E2%80%93maximization_algorithm/monthly/20150701/20230731,12131.0,11917.0,13646.0,17914.0,20997.0,17606.0,15688.0,17554.0,20845.0,22852.0,20427.0,16813.0,14602.0,14508.0,16008.0,20670.0,24687.0,20646.0,19120.0,19042.0,23603.0,24370.0,23356.0,18517.0,17392.0,16834.0,17453.0,22873.0,27405.0,22051.0,20531.0,21682.0,24335.0,27007.0,25145.0,19086.0,17722.0,17086.0,16958.0,23035.0,27235.0,30801.0,20192.0,19186.0,24549.0,25963.0,24769.0,18958.0,17050.0,15957.0,17203.0,23972.0,25862.0,20937.0,18782.0,20704.0,20500.0,24052.0,22022.0,18957.0,16872.0,14753.0,16244.0,22470.0,23504.0,21714.0,19090.0,17340.0,21748.0,21949.0,19314.0,16943.0,15261.0,13957.0,13952.0,17940.0,20764.0,18157.0,16224.0,17351.0,19899.0,18749.0,18327.0,15598.0,13082.0,12810.0,13569.0,18221.0,19681.0,16501.0,15652.0,15083.0,18184.0,16412.0,15839.0,14011.0,11928.0,19184.103092783505,5.02,True,1,True
660,0.0,1.0,1,Matrix decomposition,,92.0,Collaborative Filtering,2.0,Matrix Factorization,714.0,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[ LU Matrix Decomposition (1945)],LU Matrix Decomposition,1945,,,,,1.0,0,4.5,"n: 6,
n^2: 4.5",O(n^3),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores (intermediate steps of) factorization,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Statistics,Matrix_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Matrix_decomposition/monthly/20150701/20230731,6490.0,6502.0,8046.0,9816.0,8896.0,7510.0,7999.0,8947.0,8817.0,8460.0,8560.0,7181.0,6521.0,7164.0,8975.0,9699.0,9778.0,8158.0,8469.0,8908.0,10203.0,8967.0,8901.0,7366.0,7263.0,7656.0,8860.0,10785.0,10876.0,9582.0,9394.0,9206.0,9990.0,9676.0,9508.0,7990.0,7848.0,7772.0,9018.0,10330.0,9598.0,8867.0,8185.0,8392.0,8706.0,8601.0,8082.0,6954.0,6496.0,6561.0,7971.0,9793.0,8955.0,7390.0,7763.0,8351.0,7820.0,8780.0,9163.0,7165.0,6497.0,6203.0,7942.0,8950.0,9375.0,7939.0,7903.0,7695.0,9640.0,8426.0,7739.0,6852.0,6315.0,6112.0,7129.0,8671.0,8242.0,7476.0,7498.0,7416.0,8242.0,8056.0,7493.0,6553.0,6148.0,6268.0,7650.0,8994.0,8819.0,7448.0,7022.0,7264.0,8142.0,6723.0,7104.0,6357.0,5896.0,8122.463917525773,3,False,3,True
661,1.0,0.0,1,QR decomposition,,92.0,Collaborative Filtering,2.0,Matrix Factorization,715.0,,,1,1,O(n^2),Any distribution of values,Steps are the same regardless of input,[ QR Matrix Decomposition (1955)],QR Matrix Decomposition,1955,,,,,1.0,3->4,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores (intermediate steps of) factorization,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1000,0.995262315,1E+12,1000000,2.981071706,1.00E+18,1000000000,6.943282347,3,,,Statistics,QR_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/QR_decomposition/monthly/20150701/20230731,9259.0,8636.0,11335.0,14691.0,16289.0,13444.0,11704.0,13457.0,15219.0,15466.0,14438.0,11126.0,8962.0,9421.0,11801.0,14968.0,17951.0,15173.0,12122.0,12987.0,16059.0,15249.0,16211.0,11488.0,9905.0,10407.0,11505.0,16291.0,18403.0,15740.0,13419.0,14020.0,17013.0,16196.0,16227.0,12700.0,10378.0,10302.0,12490.0,18134.0,19804.0,15924.0,13504.0,14844.0,17381.0,18013.0,17205.0,12161.0,11403.0,10704.0,14619.0,19719.0,21878.0,16601.0,14447.0,16510.0,15726.0,18404.0,19294.0,14678.0,12055.0,11478.0,14433.0,19680.0,22024.0,18090.0,15053.0,15641.0,20447.0,19520.0,17174.0,14470.0,11898.0,10857.0,13848.0,18257.0,20283.0,17713.0,14290.0,16499.0,17313.0,17381.0,17155.0,13593.0,11170.0,11176.0,14826.0,19134.0,21318.0,17109.0,14852.0,16536.0,19235.0,17792.0,17095.0,14410.0,11652.0,15039.814432989691,3,True,3,True
662,1.0,0.0,1,Cholesky decomposition,,92.0,Collaborative Filtering,2.0,Matrix Factorization,716.0,,,1,1,O(n^2),Any distribution of values,Steps are the same regardless of input,[ Cholesky Decomposition (1983)],Cholesky Decomposition,1983,,,,,0.0,0,3,"n: 5,
n^2: 3",O(n^2),n: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",O(n^2),Computes and stores (intermediate steps of) factorization,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,3,,,Statistics,Cholesky_decomposition,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cholesky_decomposition/monthly/20150701/20230731,14013.0,13470.0,16973.0,21602.0,21569.0,17618.0,17299.0,21418.0,21838.0,22082.0,20725.0,17126.0,13913.0,16111.0,19524.0,24153.0,25093.0,19731.0,20262.0,22684.0,24496.0,22932.0,22618.0,18431.0,15627.0,16779.0,19985.0,25275.0,25159.0,20009.0,20330.0,21148.0,24842.0,24403.0,22572.0,17697.0,16086.0,16541.0,19630.0,26777.0,26027.0,20035.0,20233.0,21168.0,24032.0,23739.0,22017.0,17687.0,17551.0,16445.0,21022.0,27532.0,25780.0,20123.0,20831.0,22646.0,21282.0,24696.0,24242.0,19897.0,17936.0,16072.0,20465.0,25452.0,25349.0,22018.0,20578.0,21850.0,26272.0,25176.0,23107.0,19557.0,16802.0,17336.0,19391.0,24920.0,24336.0,19543.0,20328.0,22520.0,24378.0,21539.0,21960.0,17239.0,15658.0,15606.0,20953.0,26029.0,26930.0,20222.0,21475.0,23102.0,25951.0,22446.0,22514.0,19003.0,16538.0,20990.48453608248,3,True,3,True
663,1.0,0.0,1,Kalman filter,,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),753.0,,0.0,1,1,O(n^3),,,[ Kalman Filter (1960)],Kalman Filter,1960,,,,,1.0,0,6,n: 6,O(n^3),n: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Generally works with a constant number of O(n)*O(n)-sized matrices per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Statistics,Kalman_filter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kalman_filter/monthly/20150701/20230731,46171.0,46260.0,47081.0,53218.0,52417.0,47188.0,48494.0,51898.0,56478.0,57705.0,58573.0,53248.0,63191.0,48195.0,58038.0,57450.0,60574.0,51664.0,54680.0,55003.0,64077.0,57578.0,63197.0,53411.0,49968.0,48328.0,50068.0,57822.0,61457.0,51249.0,81418.0,64857.0,71907.0,64895.0,68055.0,56630.0,52844.0,50890.0,50299.0,59174.0,59555.0,50847.0,55927.0,54027.0,61334.0,60307.0,62694.0,53199.0,55302.0,48207.0,52282.0,60074.0,59273.0,50636.0,54357.0,55452.0,52845.0,55365.0,56946.0,52044.0,49108.0,45080.0,48589.0,53650.0,54997.0,49556.0,50595.0,52534.0,114977.0,61013.0,56889.0,52589.0,47332.0,44152.0,46102.0,51573.0,51986.0,45503.0,46315.0,46544.0,53787.0,51069.0,52179.0,48194.0,44469.0,44215.0,48294.0,52552.0,55664.0,46994.0,52124.0,50780.0,56941.0,47238.0,50910.0,48433.0,43763.0,54360.9587628866,5,False,3,False
664,1.0,0.0,1,Particle filter,,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),754.0,,0.0,1,1,O(n^3),,,[ Particle filter Del Moral (1996)],Particle filter Del Moral,1996,,,,,0.0,0,6,n: 6,O(n^3),"n: number of dimensions in state space
N: number of particles used",n,,,Word/Real RAM,words,3,"n: 3,
N: 3",O(nN)?,Works with O(N) number of O(n)-sized vectors (containing information about particles) each iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,0.211527659,1000000.0,0.467799268,1000000000.0,0.77827941,1000000000.0,,,,,,,,,3,,,Statistics,Particle_filter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Particle_filter/monthly/20150701/20230731,7939.0,7536.0,7980.0,9444.0,9780.0,7950.0,8386.0,9266.0,9662.0,10138.0,10078.0,9061.0,8140.0,7186.0,8095.0,9322.0,9917.0,8922.0,9091.0,9106.0,10552.0,9140.0,9978.0,8968.0,8273.0,8525.0,8509.0,10838.0,10813.0,8621.0,9417.0,8656.0,10003.0,10150.0,10654.0,8915.0,8248.0,7394.0,7474.0,9408.0,9651.0,9286.0,9427.0,8385.0,9589.0,9569.0,9634.0,8217.0,7966.0,7287.0,7698.0,9434.0,9299.0,7682.0,8199.0,7991.0,7977.0,8944.0,8657.0,7732.0,7220.0,6315.0,6674.0,7839.0,8294.0,8207.0,7568.0,7497.0,9194.0,8183.0,8382.0,7542.0,10414.0,8141.0,6976.0,7756.0,7938.0,7633.0,7220.0,7380.0,7830.0,7279.0,6968.0,6498.0,5656.0,5389.0,5843.0,6425.0,6711.0,5699.0,5767.0,6044.0,6607.0,5642.0,5861.0,5685.0,5112.0,8201.525773195875,5,False,3,True
665,1.0,0.0,1,Nonlinear filter,,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),757.0,,0.0,1,1,O(n^3),,,[https://ieeexplore.ieee.org/document/1098671 Kushner non-linear filter (1967)],Kushner non-linear filter,1967,https://ieeexplore.ieee.org/document/1098671,,,,0.0,0,6,n: 6,O(n^3),n: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,O(n^2)??,Generally works with a constant number of non-linear transformations; assumes that the description of the non-linear transformations is O(n^2),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Statistics,Nonlinear_filter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Nonlinear_filter/monthly/20150701/20230731,1124.0,1184.0,1287.0,1765.0,1960.0,1486.0,1447.0,1559.0,1602.0,1666.0,1558.0,1261.0,896.0,1208.0,1299.0,1569.0,1641.0,1440.0,1410.0,1463.0,2053.0,2438.0,2348.0,1540.0,1216.0,1360.0,1543.0,1866.0,1885.0,1561.0,1502.0,1361.0,1459.0,1594.0,1635.0,1227.0,1154.0,1126.0,1296.0,1713.0,1385.0,1943.0,1399.0,1329.0,1533.0,1694.0,1359.0,989.0,937.0,888.0,1157.0,1332.0,1371.0,936.0,1020.0,1071.0,942.0,1117.0,1199.0,1229.0,857.0,959.0,1564.0,1302.0,1217.0,1332.0,1149.0,997.0,1271.0,1263.0,1258.0,1068.0,923.0,754.0,1163.0,1117.0,1136.0,1255.0,1025.0,1060.0,890.0,1047.0,1148.0,908.0,662.0,680.0,801.0,793.0,1061.0,894.0,917.0,779.0,900.0,909.0,806.0,852.0,715.0,1267.6701030927834,5,False,3,False
666,1.0,0.0,1,Extended Kalman filter,,96.0,Filtering Problem (Stochastic Processes),1.0,Filtering Problem (Stochastic Processes),759.0,,0.0,1,1,O(n^2 log^2 n),,,[ Maybeck; Peter S Extended Kalman Filter (1979)],Maybeck; Peter S Extended Kalman Filter,1979,,,,,1.0,0,5.02,n: 5.02,O(n^2 \log^2 n),n: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,O(n^2)?,Generally works with a constant number of O(n)*O(n)-sized matrices per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9931685.0,,,,,,,,,3,,,Statistics,Extended_Kalman_filter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Extended_Kalman_filter/monthly/20150701/20230731,6589.0,5876.0,6247.0,7313.0,7330.0,7087.0,6841.0,7282.0,7950.0,10597.0,8054.0,7547.0,6881.0,6676.0,7175.0,8268.0,8529.0,7586.0,8204.0,8877.0,9551.0,9173.0,10363.0,9230.0,8354.0,7538.0,7737.0,9014.0,9351.0,8008.0,8725.0,8222.0,9321.0,9875.0,10274.0,8876.0,8327.0,7572.0,7583.0,9305.0,9423.0,8635.0,8926.0,8476.0,9458.0,9236.0,9322.0,7933.0,8630.0,6965.0,7694.0,9362.0,9101.0,8038.0,8798.0,9106.0,9071.0,10178.0,9844.0,8674.0,8287.0,7226.0,7532.0,9189.0,9159.0,8620.0,8333.0,8117.0,10646.0,9448.0,9250.0,8487.0,8484.0,7456.0,8106.0,9505.0,8994.0,8535.0,8194.0,8323.0,10134.0,9432.0,9572.0,8643.0,7797.0,7767.0,7986.0,9426.0,9807.0,8323.0,8249.0,8817.0,10271.0,8788.0,9764.0,9067.0,8204.0,8537.278350515464,5,False,3,False
667,0.0,0.0,0,,,97.0,Optimal Policies for MDPs,2.0,Optimal Policies for MDPs,763.0,,,1,1,O(2^n),Any distribution of values,Steps are the same regardless of input,[https://www.jstor.org/stable/24900506 Bellman Value Iteration (VI) (1957)],Bellman Value Iteration (VI),1957,https://www.jstor.org/stable/24900506,,,,1.0,0,8,n: 8,O(2^n),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,False,3,True
668,0.0,0.0,0,,,97.0,Optimal Policies for MDPs,2.0,Optimal Policies for MDPs,764.0,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[http://web.mit.edu/dimitrib/www/dpchapter.pdf Howard Policy Iteration (PI) (1960)],Howard Policy Iteration (PI),1960,http://web.mit.edu/dimitrib/www/dpchapter.pdf,,,,1.0,1->3,6,n: 6,O(n^3),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,Inf,inf,1.00E+18,Inf,inf,1.00E+27,Inf,inf,1,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,True,3,True
669,0.0,0.0,0,,,97.0,Optimal Policies for MDPs,2.0,Optimal Policies for MDPs,765.0,,,1,1,O(n^3),Any distribution of values,Steps are the same regardless of input,[ Puterman Modified Policy Iteration (MPI) (1974)],Puterman Modified Policy Iteration (MPI),1974,,,,,0.0,0,6,n: 6,O(n^3),n: number of states,n,,,Word/Real RAM,words,3,n: 3,O(n),"Only needs to store values (V) and policy (pi), both size O(n)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,1,,,Robotics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,6,True,3,True
670,0.0,1.0,1,Linear programming,,98.0,The Set-Covering Problem,1.0,Unweighted Set-Covering; Weighted Set-Covering,766.0,ILP,,1,0,O(n^2),,,[https://link.springer.com/chapter/10.1007/978-3-662-04565-7_13 Integer linear program Vazirani (2001)],Integer linear program Vazirani,2001,https://link.springer.com/chapter/10.1007/978-3-662-04565-7_13,,,,1.0,1->4,5,n: 5,O(n^2),"n: number of sets, U: size of universe",n,,,Word RAM,words,1,"U: 3,
n: 1",O(U),,,,,0,,1,\log n,0,0,,0,0,,,,,,,,,,,,1000000.0,Inf,,1E+12,Inf,,1.00E+18,Inf,,1,,,Combinatorics,Linear_programming,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Linear_programming/monthly/20150701/20230731,36256.0,39986.0,44960.0,48665.0,48648.0,47051.0,45093.0,45142.0,48318.0,48040.0,49003.0,45537.0,39300.0,38448.0,43651.0,49369.0,50994.0,45525.0,45599.0,45064.0,52329.0,47296.0,47632.0,38927.0,35178.0,36083.0,43575.0,49159.0,52400.0,43819.0,47240.0,45550.0,47859.0,47245.0,46942.0,36175.0,36467.0,35238.0,41292.0,46232.0,45410.0,39079.0,39704.0,37926.0,45890.0,44131.0,41897.0,32485.0,32544.0,31826.0,36714.0,42229.0,40159.0,34453.0,35764.0,38489.0,36382.0,39811.0,46474.0,39991.0,33370.0,32148.0,40040.0,44878.0,42530.0,40776.0,40288.0,37134.0,44099.0,38662.0,38513.0,31949.0,31011.0,29606.0,32052.0,35450.0,34535.0,29206.0,31799.0,29116.0,30559.0,28956.0,31910.0,25783.0,25195.0,24322.0,28052.0,29908.0,32742.0,27664.0,28133.0,27329.0,31169.0,26417.0,28296.0,24988.0,24914.0,38723.13402061856,4,False,1,True
671,0.0,1.0,1,Set cover problem,,98.0,The Set-Covering Problem,1.0,,768.0,,,1,1,O(n^3 logn),,,[https://dl.acm.org/doi/10.1145/237814.237991 Greedy Algorithm (1996)],Greedy Algorithm,1996,https://dl.acm.org/doi/10.1145/237814.237991,,,,1.0,0,6.01,n: 6.01,O(n^3 \log n),"n: number of sets, U: size of universe",n,,,Word RAM,words,1,"U: 3,
n: 1",O(U),,1.0,0.0,,0,,1,\ln(n) - \ln(\ln(n)) + \Theta(1),0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Set_cover_problem,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Set_cover_problem/monthly/20150701/20230731,4959.0,4491.0,5127.0,6942.0,9417.0,8467.0,6217.0,7246.0,6730.0,8181.0,7716.0,5806.0,4412.0,4392.0,5901.0,7263.0,9681.0,8770.0,6156.0,6567.0,7912.0,8004.0,8780.0,5992.0,5423.0,5010.0,5008.0,7836.0,9616.0,9079.0,7088.0,6320.0,7184.0,9827.0,7946.0,6051.0,5127.0,4747.0,5076.0,7401.0,8603.0,8543.0,6528.0,6243.0,7337.0,8801.0,8547.0,6009.0,5636.0,4738.0,5630.0,7997.0,10297.0,10077.0,6396.0,7013.0,6375.0,8683.0,8278.0,6884.0,5558.0,5616.0,5414.0,8196.0,9739.0,8637.0,6807.0,6621.0,7856.0,8485.0,7633.0,6257.0,5167.0,4826.0,5431.0,7139.0,8791.0,8082.0,6072.0,6368.0,6649.0,8796.0,7622.0,5702.0,4659.0,4256.0,4627.0,6527.0,8588.0,7535.0,6041.0,5830.0,6624.0,7611.0,6965.0,5191.0,5127.0,6902.350515463918,4,False,1,True
672,0.0,0.0,0,,,98.0,The Set-Covering Problem,1.0,,,,,1,1,O(U 2^n),,,[ Brute force (1972)],Brute force,1972,,,,,1.0,0,8,"n: 8,
U: 3",O(U 2^n),"n: number of sets
U: size of universe",n,,,Word RAM,words,1,"U: 3,
n: 1",O(U),,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,4,False,1,True
673,0.0,0.0,0,,,99.0,Motif Search,1.0,Motif Search,775.0,"Uses oligonucleotides? Also only detects ""short"" motifs, and used for yeast",,1,1,O(nm),,,[https://www.ncbi.nlm.nih.gov/pubmed/9719638 Helden Oligo-Analysis (1998)],Helden Oligo-Analysis,1998,https://www.ncbi.nlm.nih.gov/pubmed/9719638,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",O(m),Derived: store number of occurances for each motif of a specified length,1.0,0.0,,0,,0,,0,0,,0,0,"https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM1
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6490410/table/T1/?report=objectonly",,,,,500.0,6.93700526,500000.0,78.3700526,500000000.0,792.700526,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
674,0.0,0.0,0,,,99.0,Motif Search,1.0,Motif Search,776.0,Dyad analysis,,1,1,O(nm),,,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC102821/ van Helden J; Rios AF; Collado-Vides J (2000)],van Helden J; Rios AF; Collado-Vides J,2000,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC102821/,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",O(m),Derived: store number of occurances for each motif of a specified length,1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM2,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
675,0.0,1.0,1,Planted motif search,,99.0,Motif Search,1.0,Motif Search,777.0,,,1,1,O(nm),,,[https://www.aaai.org/Papers/ISMB/1999/ISMB99-030.pdf Tompa M (1999)],Tompa M,1999,https://www.aaai.org/Papers/ISMB/1999/ISMB99-030.pdf,,,,0.0,0,3,"n: 3,
m: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,3,"m: 5,
mn: 3",O(m^2),"Requires considering an $O(m^2)*O(m^2)$ matrix with $O(m^2)$ nonzero entries, based on a DFA with $O(m^2)$ states",1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM3,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,Planted_motif_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Planted_motif_search/monthly/20150701/20230731,111.0,121.0,152.0,158.0,157.0,117.0,109.0,113.0,109.0,94.0,84.0,78.0,93.0,103.0,140.0,103.0,148.0,104.0,84.0,140.0,130.0,146.0,118.0,85.0,71.0,100.0,67.0,110.0,233.0,98.0,94.0,100.0,292.0,96.0,101.0,79.0,48.0,74.0,90.0,65.0,113.0,87.0,67.0,95.0,81.0,119.0,75.0,76.0,89.0,44.0,117.0,77.0,101.0,83.0,79.0,92.0,68.0,96.0,71.0,55.0,36.0,46.0,103.0,82.0,73.0,116.0,59.0,165.0,91.0,74.0,78.0,58.0,63.0,27.0,136.0,32.0,66.0,121.0,44.0,46.0,43.0,39.0,52.0,43.0,52.0,17.0,38.0,106.0,58.0,40.0,33.0,20.0,36.0,27.0,46.0,35.0,23.0,86.84536082474227,2.75,False,2,False
676,0.0,1.0,1,Planted motif search,,99.0,Motif Search,1.0,Motif Search,778.0,,,1,1,O(n^{0.66} m),,,[https://www.ncbi.nlm.nih.gov/pubmed/10977095 Sinha S; Tompa M YMF (Yeast Motif Finder) (2000)],Sinha S; Tompa M YMF (Yeast Motif Finder),2000,https://www.ncbi.nlm.nih.gov/pubmed/10977095,,,,1.0,0,2.83,"n: 2.66,
m: 3,
mn: 2.83",O(n^{0.66} m),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",O(m),Derived: store number of occurances for each motif of a specified length,1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM4,,,,,,,,,,,30219.70407,1215.55493,0.807442746,2885959334,601690.1504,2.031198718,2.75607E+14,215300165.9,3.947893734,4,,,Bioinformatics,Planted_motif_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Planted_motif_search/monthly/20150701/20230731,111.0,121.0,152.0,158.0,157.0,117.0,109.0,113.0,109.0,94.0,84.0,78.0,93.0,103.0,140.0,103.0,148.0,104.0,84.0,140.0,130.0,146.0,118.0,85.0,71.0,100.0,67.0,110.0,233.0,98.0,94.0,100.0,292.0,96.0,101.0,79.0,48.0,74.0,90.0,65.0,113.0,87.0,67.0,95.0,81.0,119.0,75.0,76.0,89.0,44.0,117.0,77.0,101.0,83.0,79.0,92.0,68.0,96.0,71.0,55.0,36.0,46.0,103.0,82.0,73.0,116.0,59.0,165.0,91.0,74.0,78.0,58.0,63.0,27.0,136.0,32.0,66.0,121.0,44.0,46.0,43.0,39.0,52.0,43.0,52.0,17.0,38.0,106.0,58.0,40.0,33.0,20.0,36.0,27.0,46.0,35.0,23.0,86.84536082474227,2.75,False,2,False
677,0.0,1.0,1,Multiple sequence alignment,,99.0,Motif Search,1.0,Motif Search,780.0,,,1,1,O(n^2m^2),,,[https://link.springer.com/article/10.1007/BF00993379 Bailey TL; Elkan C MEME (1995)],Bailey TL; Elkan C MEME,1995,https://link.springer.com/article/10.1007/BF00993379,,,,1.0,0,5,"m: 5,
n: 5,
mn: 5",O(n^2m^2),"n: number of sequences
m: length of sequences",mn,https://link.springer.com/article/10.1007/BF00993379,0.0,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",O(mn),"Uses iterations of the EM algorithm as in (Lawrence, Reilly 1990), and thus uses similar amounts of space",1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM6,,,,,250000.0,,250000000000.0,,2.5e+17,,,,,,,,,,,4,,,Bioinformatics,Multiple_sequence_alignment,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multiple_sequence_alignment/monthly/20150701/20230731,3663.0,3500.0,4880.0,6141.0,7066.0,5689.0,4859.0,5720.0,6700.0,7374.0,7041.0,4398.0,3422.0,3741.0,5267.0,6521.0,8204.0,6321.0,5281.0,5773.0,7954.0,8226.0,7746.0,4703.0,4332.0,4304.0,5032.0,6904.0,7822.0,6348.0,5390.0,5670.0,7153.0,8960.0,8648.0,4584.0,3952.0,3817.0,5014.0,6580.0,7152.0,7125.0,4832.0,5041.0,7125.0,8074.0,8207.0,4986.0,3613.0,3575.0,5808.0,7043.0,7418.0,6236.0,4812.0,5637.0,5736.0,6654.0,6282.0,5506.0,4323.0,4051.0,5540.0,6783.0,6615.0,7113.0,5762.0,5992.0,6537.0,5791.0,5609.0,6323.0,5779.0,4579.0,4920.0,5900.0,6223.0,6352.0,5676.0,6027.0,6024.0,6251.0,6222.0,5809.0,5091.0,3672.0,4493.0,5155.0,6240.0,5631.0,4506.0,4504.0,5334.0,4905.0,6076.0,4446.0,4174.0,5773.092783505154,2.75,False,2,False
678,0.0,1.0,1,Planted motif search,,99.0,Motif Search,0.001,Motif Search,781.0,,,1,1,O(n logn m^{1.45}),,,[https://link.springer.com/chapter/10.1007/BFb0054337 Sagot M (1988)],Sagot M,1988,https://link.springer.com/chapter/10.1007/BFb0054337,,,,1.0,0,4.225,"n: 4,
m: 4.45,
mn: 4.225",O(n \log(n) m^{1.45}),"n: number of sequences
m: length of sequences
w: size of word machine",mn,,,Word RAM,words,4.5,"n: 5,
m: 3,
mn: 4.5",O(mn^2/w),https://link.springer.com/chapter/10.1007/BFb0054337,0.0,1.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM7,,,,,,,,,,,36733710.27,1,,1.74E+15,1,,5.93E+22,1,,4,,,Bioinformatics,Planted_motif_search,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Planted_motif_search/monthly/20150701/20230731,111.0,121.0,152.0,158.0,157.0,117.0,109.0,113.0,109.0,94.0,84.0,78.0,93.0,103.0,140.0,103.0,148.0,104.0,84.0,140.0,130.0,146.0,118.0,85.0,71.0,100.0,67.0,110.0,233.0,98.0,94.0,100.0,292.0,96.0,101.0,79.0,48.0,74.0,90.0,65.0,113.0,87.0,67.0,95.0,81.0,119.0,75.0,76.0,89.0,44.0,117.0,77.0,101.0,83.0,79.0,92.0,68.0,96.0,71.0,55.0,36.0,46.0,103.0,82.0,73.0,116.0,59.0,165.0,91.0,74.0,78.0,58.0,63.0,27.0,136.0,32.0,66.0,121.0,44.0,46.0,43.0,39.0,52.0,43.0,52.0,17.0,38.0,106.0,58.0,40.0,33.0,20.0,36.0,27.0,46.0,35.0,23.0,86.84536082474227,2.75,False,2,False
679,0.0,0.0,0,,,99.0,Motif Search,1.0,Motif Search,783.0,,,1,1,O(nm^{0.5}),,,[https://www.worldscientific.com/doi/10.1142/S0219720004000466 Liang Cwinnower (2003)],Liang Cwinnower,2003,https://www.worldscientific.com/doi/10.1142/S0219720004000466,,,,1.0,0,2.75,"n: 3,
m: 2.5,
mn: 2.75",O(nm^{0.5}),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,3,"m: 5,
mn: 3",O(m^2),Considers a graph on $O(m)$ nodes and $O(m^2)$ edges,1.0,0.0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM9,,,,,,,,,,,11180.33989,3285.562929,0.71569724,353553390.6,4911431.631,1.793061768,1.11803E+13,5307372442,3.449644392,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,True,2,False
680,0.0,0.0,0,,,99.0,Motif Search,1.0,Motif Search,789.0,ILP formulation,,1,1,O(mn),,,[https://link.springer.com/chapter/10.1007/11780441_22 Kingsford (2006)],Kingsford,2006,https://link.springer.com/chapter/10.1007/11780441_22,,,,0.0,0,3,"m: 3,
n: 3,
mn: 3",O(mn),"n: number of sequences
m: length of sequences",mn,,,Word RAM,words,5,"n: 5,
m: 5,
mn: 5",O(m^2n^2),"Creates an ILP with $O(m^2n^2)$ variables and $O(n^2m)$ constraints, each involving $O(m)$ variables",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,2.75,False,2,False
681,0.0,0.0,0,,,100.0,All Maximal Non-Branching Paths in a Graph,1.0,All Maximal Non-Branching Paths in a Graph,791.0,,0.0,1,1,O(m),Any distribution,(need to read entire input),[http://rosalind.info/problems/ba3m/ Naive (1940)],Naive,1940,http://rosalind.info/problems/ba3m/,,,,1.0,0,5,"m: 3,
n: 5",O(m),"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n)?,"For each vertex, store whether that vertex is a 1-in-1-out vertex (all of these can be pre-computed at the same time in $O(m)$ time). Unclear if there's a better bound",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
682,0.0,0.0,0,,,101.0,Link Analysis,1.0,InDegree Analysis,792.0,,,1,1,O(m^2 n ),,,[https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf The INDEGREE Algorithm (1997)],The INDEGREE Algorithm,1997,https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf,,,,1.0,0,6,"m: 3,
n: 6",O(mn),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Must maintain a list of visited nodes to eliminate duplication.,1.0,0.0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/1052934.1052942,,,,,,,,,,,125000000.0,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
683,1.0,0.0,1,PageRank,,153.0,Link Analysis,1.0,Link Analysis,793.0,,,1,1,O(m n ),,,[http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf The PAGERANK Algorithm (1998)],The PAGERANK Algorithm,1998,http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf,,,,1.0,3->4,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates an O(n)-sized vector designed to converge to some sort of stationary distribution,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,250000.0,500,499.0,2.5E+11,500000,499999.0,2.50E+17,500000000,499999999.0,3,,,Combinatorics,PageRank,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/PageRank/monthly/20150701/20230731,44822.0,50137.0,50399.0,53250.0,53826.0,53395.0,47976.0,49138.0,51242.0,56611.0,49419.0,40450.0,38459.0,37782.0,45828.0,48678.0,51195.0,45436.0,44507.0,45414.0,51234.0,48635.0,47634.0,39902.0,37806.0,36979.0,41117.0,50047.0,49732.0,44251.0,47761.0,41975.0,46425.0,48368.0,45774.0,38508.0,37325.0,38877.0,41060.0,46243.0,40869.0,41928.0,40227.0,36299.0,41988.0,44779.0,36802.0,31795.0,33598.0,34031.0,42354.0,47683.0,47012.0,45539.0,39489.0,39145.0,38638.0,44907.0,42743.0,34860.0,34556.0,31627.0,36018.0,42292.0,42839.0,40961.0,38755.0,35411.0,40716.0,40593.0,38257.0,33129.0,32713.0,31314.0,35807.0,39761.0,40473.0,35863.0,36756.0,34626.0,38702.0,41091.0,42503.0,42060.0,50503.0,51369.0,58941.0,68498.0,70256.0,65047.0,68866.0,64939.0,51146.0,36722.0,37015.0,32945.0,30471.0,43668.49484536082,5,False,3,True
684,1.0,0.0,1,HITS algorithm,,153.0,Link Analysis,1.0,Link Analysis,794.0,,,1,1,O(n^2 k),,,[https://dl.acm.org/doi/pdf/10.1145/324133.324140 The (Hyperlink-Induced Topic Search) HITS Algorithm (1998)],The (Hyperlink-Induced Topic Search) HITS Algorithm,1998,https://dl.acm.org/doi/pdf/10.1145/324133.324140,,,,1.0,0,5,n: 5,O(n^2 k),"n: number of pages
m: number of hyperlinks?
k: number of iterations",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates hub and authority values per node,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/HITS_algorithm#Algorithm,,,,,,,,,,,125000000.0,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics,HITS_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/HITS_algorithm/monthly/20150701/20230731,2691.0,2227.0,2540.0,3124.0,3857.0,3407.0,2468.0,2581.0,2996.0,3595.0,3738.0,3669.0,2022.0,1785.0,2117.0,2806.0,4071.0,3053.0,2531.0,2446.0,3245.0,3517.0,3808.0,2602.0,2078.0,1879.0,2283.0,3228.0,3800.0,3363.0,2702.0,2786.0,3121.0,3513.0,3443.0,2407.0,2110.0,1722.0,2255.0,2704.0,3447.0,3678.0,2415.0,2319.0,3032.0,4332.0,3273.0,2259.0,1869.0,1749.0,2430.0,2987.0,3927.0,2612.0,2258.0,2406.0,2464.0,2837.0,2926.0,2348.0,1639.0,1603.0,1827.0,2430.0,3025.0,3117.0,2535.0,2085.0,2514.0,2946.0,3271.0,2351.0,1888.0,1307.0,1783.0,2745.0,2493.0,2036.0,2048.0,1799.0,2215.0,3077.0,2879.0,2255.0,1667.0,1404.0,1341.0,2029.0,2318.0,2683.0,1902.0,1700.0,2118.0,2102.0,2436.0,1535.0,1028.0,2577.2061855670104,5,True,3,True
685,1.0,0.0,1,SALSA algorithm,,153.0,Link Analysis,1.0,Link Analysis,796.0,,,1,1,O(m^2 n ),,,[https://dl.acm.org/doi/abs/10.1145/382979.383041 The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm (2000)],The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm,2000,https://dl.acm.org/doi/abs/10.1145/382979.383041,,,,0.0,0,7,"m: 5,
n: 7",O(m^2 n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n)?,Stores and updates two O(n)-sized vectors (corresponding to 2 random walks) designed to converge to some sort of stationary distribution,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,SALSA_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SALSA_algorithm/monthly/20150701/20230731,157.0,113.0,197.0,165.0,156.0,176.0,167.0,132.0,251.0,440.0,172.0,128.0,121.0,103.0,142.0,146.0,141.0,195.0,154.0,148.0,149.0,165.0,190.0,197.0,139.0,108.0,134.0,135.0,164.0,118.0,172.0,140.0,153.0,127.0,190.0,107.0,116.0,126.0,132.0,167.0,153.0,127.0,114.0,118.0,139.0,162.0,176.0,132.0,126.0,77.0,114.0,192.0,135.0,124.0,137.0,127.0,162.0,137.0,127.0,99.0,107.0,85.0,99.0,132.0,143.0,108.0,101.0,108.0,187.0,139.0,102.0,93.0,70.0,81.0,70.0,101.0,99.0,67.0,103.0,131.0,122.0,139.0,135.0,107.0,85.0,95.0,61.0,104.0,113.0,120.0,73.0,89.0,89.0,180.0,117.0,97.0,59.0,133.2164948453608,5,False,3,True
686,0.0,0.0,0,,,153.0,Link Analysis,1.0,Link Analysis,797.0,,,1,1,O(m nlogn ),,,[https://dl.acm.org/doi/pdf/10.1145/383952.384003 Randomized HITS (2001)],Randomized HITS,2001,https://dl.acm.org/doi/pdf/10.1145/383952.384003,,,,0.0,0,6.01,"m: 3,
n: 6.01",O(m n\log n ),"n: number of pages
m: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,O(n),Stores and updates hub and authority values per node,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
687,0.0,0.0,0,,,153.0,Link Analysis,1.0,Link Analysis,798.0,,,1,1,O(m n ),,,[http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf PHITS Coheng Chan (2000)],PHITS Coheng Chan,2000,http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
z: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",O(nz)?,"Needs to store P(z), P(d|z), and P(c|z) after each EM iteration (algorithm can be smart about intermediate calculations as to not use more than O(nz) space)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
688,0.0,1.0,1,Kaltix,,153.0,Link Analysis,1.0,Link Analysis,799.0,PageRank with categories/topics,,1,1,O(m n ),,,[http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf Haveliwala (2002)],Haveliwala,2002,http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
z: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",O(nz)?,Stores and updates z O(n)-sized vectors designed to converge to some stationary distributions,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,Kaltix,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Kaltix/monthly/20150701/20230731,145.0,223.0,247.0,192.0,196.0,205.0,222.0,201.0,223.0,229.0,183.0,178.0,189.0,213.0,369.0,196.0,183.0,182.0,222.0,183.0,200.0,179.0,204.0,143.0,131.0,114.0,151.0,188.0,174.0,190.0,204.0,120.0,165.0,141.0,154.0,170.0,152.0,198.0,318.0,179.0,204.0,205.0,212.0,164.0,187.0,175.0,204.0,165.0,239.0,188.0,374.0,215.0,228.0,267.0,297.0,307.0,148.0,166.0,195.0,152.0,174.0,144.0,107.0,104.0,78.0,66.0,109.0,96.0,98.0,100.0,88.0,118.0,109.0,107.0,139.0,101.0,180.0,214.0,152.0,175.0,185.0,241.0,337.0,359.0,267.0,163.0,211.0,195.0,206.0,192.0,151.0,196.0,153.0,153.0,200.0,233.0,415.0,188.28865979381445,5,False,3,True
689,0.0,1.0,1,SimRank,,153.0,Link Analysis,1.0,Link Analysis,800.0,Personalized PageRank with hubs,,1,1,O(m n ),,,[http://infolab.stanford.edu/~glenj/spws.pdf Jeh and Widom (2003)],Jeh and Widom,2003,http://infolab.stanford.edu/~glenj/spws.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
h: number of ""hub"" pages",n,,,Word RAM,words,3,"n: 3,
h: 3",O(nh),Stores and updates z O(n)-sized vectors designed to converge to some basis vectors,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,SimRank,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SimRank/monthly/20150701/20230731,649.0,680.0,756.0,777.0,992.0,803.0,888.0,854.0,859.0,866.0,845.0,712.0,615.0,603.0,829.0,732.0,959.0,811.0,656.0,653.0,765.0,935.0,941.0,761.0,655.0,586.0,586.0,676.0,691.0,538.0,800.0,516.0,649.0,720.0,684.0,492.0,470.0,536.0,495.0,949.0,618.0,595.0,579.0,406.0,647.0,828.0,564.0,512.0,583.0,413.0,493.0,935.0,722.0,714.0,660.0,645.0,660.0,780.0,721.0,692.0,528.0,476.0,433.0,674.0,600.0,620.0,627.0,477.0,570.0,788.0,548.0,500.0,428.0,338.0,334.0,460.0,417.0,377.0,533.0,420.0,629.0,667.0,588.0,415.0,282.0,458.0,330.0,535.0,557.0,586.0,419.0,486.0,588.0,759.0,574.0,388.0,307.0,623.3711340206186,5,False,3,True
690,0.0,1.0,1,PageRank,,153.0,Link Analysis,1.0,Link Analysis,801.0,Query-dependent PageRank,,1,1,O(m n ),,,[https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf  Richardson and Domingos (2002)],Richardson and Domingos,2002,https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of hyperlinks?
l: number of words in lexicon",n,,,Word RAM,words,3,"n: 3,
l: 3",O(nl),See paper (noting that sum d_q can be as high as O(nl)),0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,PageRank,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/PageRank/monthly/20150701/20230731,44822.0,50137.0,50399.0,53250.0,53826.0,53395.0,47976.0,49138.0,51242.0,56611.0,49419.0,40450.0,38459.0,37782.0,45828.0,48678.0,51195.0,45436.0,44507.0,45414.0,51234.0,48635.0,47634.0,39902.0,37806.0,36979.0,41117.0,50047.0,49732.0,44251.0,47761.0,41975.0,46425.0,48368.0,45774.0,38508.0,37325.0,38877.0,41060.0,46243.0,40869.0,41928.0,40227.0,36299.0,41988.0,44779.0,36802.0,31795.0,33598.0,34031.0,42354.0,47683.0,47012.0,45539.0,39489.0,39145.0,38638.0,44907.0,42743.0,34860.0,34556.0,31627.0,36018.0,42292.0,42839.0,40961.0,38755.0,35411.0,40716.0,40593.0,38257.0,33129.0,32713.0,31314.0,35807.0,39761.0,40473.0,35863.0,36756.0,34626.0,38702.0,41091.0,42503.0,42060.0,50503.0,51369.0,58941.0,68498.0,70256.0,65047.0,68866.0,64939.0,51146.0,36722.0,37015.0,32945.0,30471.0,43668.49484536082,5,False,3,True
691,0.0,0.0,0,,,153.0,Link Analysis,1.0,Link Analysis,802.0,,,1,1,O(m n ),,,[https://dl.acm.org/doi/10.1145/775152.775202 Tomlin (2003)],Tomlin,2003,https://dl.acm.org/doi/10.1145/775152.775202,,,,0.0,0,6,"m: 3,
n: 6",O(m n ),"n: number of pages
m: number of operations per page?",n,,,Word RAM,words,3,n: 3,O(n)?,Generally computes O(n) values per iteration (row + column sums and their ratios); algorithm can be smart about intermediate calculations as to not use more space asymptotically,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
692,0.0,0.0,0,,,153.0,Link Analysis,1.0,Link Analysis,803.0,,,1,1,O(mn ),,,[https://homes.cs.washington.edu/~karlin/papers/web-search.pdf Achlioptas (2001)],Achlioptas,2001,https://homes.cs.washington.edu/~karlin/papers/web-search.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(mn ),"n: number of pages
m: number of operations per page?
l: number of words in lexicon",n,,,Word RAM,words,5,"n: 5,
l: 5",O((n+l)^2)?,Computes a constant number of SVDs of O((n+l)^2)-sized matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
693,0.0,1.0,1,Lease (computer science),,103.0,Distributed Locking Algorithms,1.0,Distributed Locking Algorithms,805.0,,0.0,1,1,O(n),,,[https://web.stanford.edu/class/cs240/readings/89-leases.pdf Leases (Cary G Gray and David R Cheriton) (1989)],Leases (Cary G Gray and David R Cheriton),1989,https://web.stanford.edu/class/cs240/readings/89-leases.pdf,2,0.0,https://web.stanford.edu/class/cs240/readings/89-leases.pdf,1.0,0,3,n: 3,O(n),"n: number of clients?
f: number of files?",n,,,,words,1,"n: 1,
f: 3",O(f)?,Generally need to keep track of one lease/lock per file (exclusivity),1.0,0.0,,0,,0,,0,0,,0,0,(see below),,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,Lease_%28computer_science%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lease_%28computer_science%29/monthly/20150701/20230731,131.0,96.0,111.0,157.0,156.0,158.0,139.0,194.0,145.0,153.0,288.0,202.0,117.0,181.0,117.0,163.0,330.0,255.0,157.0,198.0,241.0,172.0,145.0,176.0,147.0,167.0,150.0,190.0,150.0,150.0,171.0,169.0,204.0,223.0,227.0,217.0,176.0,213.0,183.0,193.0,278.0,216.0,147.0,145.0,197.0,212.0,188.0,181.0,199.0,149.0,165.0,219.0,181.0,236.0,185.0,204.0,197.0,215.0,231.0,177.0,217.0,269.0,223.0,240.0,169.0,192.0,223.0,197.0,251.0,190.0,222.0,167.0,164.0,120.0,170.0,184.0,245.0,216.0,129.0,153.0,180.0,162.0,505.0,216.0,150.0,201.0,142.0,199.0,169.0,173.0,173.0,187.0,236.0,131.0,161.0,149.0,123.0,187.95876288659792,3,True,1,True
694,0.0,1.0,1,Apache ZooKeeper,,103.0,Distributed Locking Algorithms,1.0,Distributed Locking Algorithms,806.0,,0.0,1,1,O(n),,,[https://dl.acm.org/doi/10.5555/1298455.1298487 Chubby (Mike Burrows) (2006)],Chubby (Mike Burrows),2006,https://dl.acm.org/doi/10.5555/1298455.1298487,,,,0.0,0,3,n: 3,O(n),"n: number of clients?
f: number of files?",n,,,,words,1,"n: 1,
f: 3",O(f)?,Generally need to keep track of one lock per file (exclusivity),1.0,0.0,,0,,0,,0,0,,0,0,"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html

https://redis.io/topics/distlock

https://medium.com/coinmonks/chubby-a-centralized-lock-service-for-distributed-applications-390571273052",,,,,,,,,,,1000.0,,,,,,,,,6,,,Operating Systems,Apache_ZooKeeper,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Apache_ZooKeeper/monthly/20150701/20230731,7131.0,6870.0,7649.0,7982.0,7331.0,6771.0,7902.0,8284.0,8606.0,7737.0,7725.0,7302.0,6807.0,7942.0,7518.0,7326.0,7491.0,6506.0,7574.0,7982.0,9350.0,7679.0,8547.0,7845.0,7609.0,7959.0,7916.0,8677.0,9517.0,8225.0,9932.0,9363.0,9873.0,9970.0,10370.0,9813.0,10352.0,9511.0,8882.0,8833.0,8562.0,7541.0,8315.0,7551.0,8688.0,8283.0,7815.0,7536.0,8102.0,7445.0,7782.0,9134.0,8312.0,7230.0,8344.0,8625.0,6935.0,7373.0,7170.0,6331.0,6140.0,5670.0,5814.0,6679.0,7024.0,6323.0,5886.0,6253.0,10861.0,6744.0,6434.0,5253.0,5652.0,5785.0,5733.0,6069.0,6012.0,5191.0,5477.0,5488.0,5938.0,5723.0,5519.0,4763.0,4377.0,4663.0,4547.0,4702.0,4793.0,3681.0,3958.0,3907.0,4403.0,3639.0,3658.0,3160.0,3048.0,7079.381443298969,3,True,1,True
695,0.0,0.0,0,,,104.0,Cyclic Peptide Sequencing Problem,2.0,Cyclic Peptide Sequencing Problem,816.0,,,1,1,2^{(O(n))},,,[ Brute force (1987)],Brute force,1987,,1,1.0,,1.0,0,8,n: 8,$2^{O(n)}$,"n: size of peptide, in daltons
m: number of elements in experimental spectrum",n,,,Word/Real RAM,words,3,n: 3,O(n),Keeps track of current amino acid sequence being checked,1.0,0.0,,0,,0,,0,0,,0,0,https://averyparkinson23.medium.com/sequencing-antibiotics-using-bioinformatics-2af1373ee009,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,True
696,1.0,0.0,1,Branch and bound,,104.0,Cyclic Peptide Sequencing Problem,2.0,Cyclic Peptide Sequencing Problem,817.0,Improvement on brute force (despite not doing better asymptotically),,1,1,2^{(O(n))},,,[ Branch and bound (1993)],Branch and bound,1993,,1,1.0,,1.0,4->5,8,n: 8,$2^{O(n)}$,"n: size of peptide, in daltons
m: number of elements in experimental spectrum",n,,,Word/Real RAM,words,8,n: 8,$O(2^{O(n)})$,Keeps track of all possible not fully expanded amino acid sequences so far,1.0,0.0,,0,,0,,0,0,,0,0,https://github.com/xuwd11/Coursera-Bioinformatics/blob/master/23_04_CyclopeptideSequencing.py,,,,,,,,,,,9965.0,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Bioinformatics,Branch_and_bound,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Branch_and_bound/monthly/20150701/20230731,6937.0,7663.0,8118.0,10437.0,11710.0,12200.0,8650.0,8206.0,10434.0,12786.0,14030.0,9625.0,6612.0,7055.0,7911.0,10844.0,14084.0,12700.0,10052.0,8861.0,11447.0,13521.0,14442.0,9347.0,7221.0,6815.0,9685.0,11646.0,15106.0,12805.0,10740.0,8356.0,10928.0,14216.0,14748.0,9472.0,7252.0,6977.0,7913.0,11180.0,13912.0,13361.0,9738.0,8400.0,9951.0,11488.0,11519.0,7632.0,6416.0,5839.0,8053.0,10405.0,13563.0,11589.0,10111.0,9373.0,9527.0,12038.0,12872.0,11277.0,7421.0,6778.0,8453.0,12081.0,13014.0,13426.0,11392.0,8965.0,11579.0,11520.0,12205.0,11313.0,11350.0,9417.0,8610.0,10225.0,12095.0,11228.0,9404.0,9175.0,8900.0,9923.0,10827.0,10127.0,7317.0,6643.0,6970.0,8715.0,12035.0,12233.0,10143.0,8068.0,9096.0,9549.0,10419.0,8708.0,7050.0,10166.701030927836,8,True,3,False
697,0.0,1.0,1,Point in polygon,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,830.0,,,1,1,O(n),,,[https://dl.acm.org/doi/pdf/10.1145/368637.368653 Ray casting algorithm Shimrat; M (1962)],Ray casting algorithm Shimrat; M,1962,https://dl.acm.org/doi/pdf/10.1145/368637.368653,7,0.0,,1.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of ray direction and how many polygon sides intersect with the ray,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Image Processing,Point_in_polygon,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Point_in_polygon/monthly/20150701/20230731,6712.0,5960.0,6937.0,7778.0,7344.0,6925.0,7537.0,8091.0,9237.0,8043.0,7978.0,7335.0,6973.0,7424.0,7458.0,7559.0,8175.0,7196.0,7450.0,7961.0,8191.0,7506.0,7900.0,7758.0,6749.0,7325.0,6962.0,7686.0,7758.0,6681.0,8216.0,8079.0,8093.0,8086.0,7816.0,6273.0,6197.0,6290.0,6386.0,7001.0,6963.0,5541.0,6568.0,6393.0,7020.0,7587.0,8139.0,7353.0,7258.0,7052.0,6601.0,8076.0,7703.0,6048.0,6548.0,6914.0,7240.0,7659.0,7367.0,8339.0,6809.0,6644.0,7012.0,7311.0,7386.0,7320.0,7176.0,6622.0,9111.0,8101.0,8055.0,7886.0,6995.0,6712.0,7781.0,7157.0,7013.0,5867.0,6300.0,6046.0,6530.0,6261.0,5926.0,5798.0,5298.0,5432.0,5221.0,6037.0,6658.0,5861.0,5890.0,6123.0,6956.0,5769.0,6160.0,5257.0,4668.0,7036.5360824742265,3,True,1,True
698,0.0,0.0,0,,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,831.0,,,1,1,O(a),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Grid Method) (1967)],Nordbeck and Rystedt (Grid Method),1967,https://doi.org/10.1007/BF01934125,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,Real RAM,words,3,n: 3,O(n),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
699,0.0,0.0,0,,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,832.0,,,1,1,O(nlogn),,,[https://doi.org/10.1016/0098-3004(78)90085-7 Salomon (Swath Method) (1978)],Salomon (Swath Method),1978,https://doi.org/10.1016/0098-3004(78)90085-7,,,,0.0,0,4,n: 4,O(n\log n),n: number of edges of polygon,n,,,Real RAM,words,5,n: 5,O(n^2),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,,,,,,,,,,6,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,1,False
700,0.0,0.0,0,,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,833.0,,,1,1,O(n),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Sum of area) (1967)],Nordbeck and Rystedt (Sum of area),1967,https://doi.org/10.1007/BF01934125,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current triangle and total area sum,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
701,0.0,1.0,1,Rotating calipers,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,834.0,,,1,1,O(n),,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Wedge) (1985)],Preparata and Shamos (Wedge),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,3,n: 3,O(n),https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,Rotating_calipers,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Rotating_calipers/monthly/20150701/20230731,821.0,734.0,1098.0,1242.0,1004.0,970.0,959.0,969.0,917.0,1040.0,995.0,872.0,1229.0,835.0,889.0,1243.0,1081.0,1038.0,998.0,1021.0,1381.0,1087.0,1282.0,1315.0,1035.0,1043.0,1293.0,1457.0,1447.0,1284.0,1095.0,1270.0,1126.0,1273.0,1335.0,1074.0,1066.0,988.0,1092.0,1234.0,1170.0,1428.0,1421.0,998.0,1148.0,1121.0,1077.0,1078.0,1120.0,874.0,1033.0,1154.0,1221.0,1212.0,1102.0,934.0,860.0,1102.0,1051.0,1006.0,947.0,809.0,791.0,951.0,1031.0,948.0,1029.0,919.0,1059.0,1127.0,895.0,998.0,761.0,708.0,922.0,2018.0,955.0,1009.0,1056.0,951.0,880.0,880.0,884.0,772.0,959.0,857.0,835.0,936.0,1016.0,1589.0,944.0,894.0,995.0,971.0,958.0,897.0,816.0,1053.701030927835,3,True,1,False
702,0.0,0.0,0,,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,835.0,,,1,1,O(n),,,[https://doi.org/10.1080/02693798708927823 Saalfeld (Sign of offset) (1987)],Saalfeld (Sign of offset),1987,https://doi.org/10.1080/02693798708927823,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current sides (2) being looked at,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
703,0.0,1.0,1,Rotating calipers,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,836.0,,,1,1,O(n),,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Intersection sum of angle) (1985)],Preparata and Shamos (Intersection sum of angle),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current angle and cumulative angle sum,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,Rotating_calipers,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Rotating_calipers/monthly/20150701/20230731,821.0,734.0,1098.0,1242.0,1004.0,970.0,959.0,969.0,917.0,1040.0,995.0,872.0,1229.0,835.0,889.0,1243.0,1081.0,1038.0,998.0,1021.0,1381.0,1087.0,1282.0,1315.0,1035.0,1043.0,1293.0,1457.0,1447.0,1284.0,1095.0,1270.0,1126.0,1273.0,1335.0,1074.0,1066.0,988.0,1092.0,1234.0,1170.0,1428.0,1421.0,998.0,1148.0,1121.0,1077.0,1078.0,1120.0,874.0,1033.0,1154.0,1221.0,1212.0,1102.0,934.0,860.0,1102.0,1051.0,1006.0,947.0,809.0,791.0,951.0,1031.0,948.0,1029.0,919.0,1059.0,1127.0,895.0,998.0,761.0,708.0,922.0,2018.0,955.0,1009.0,1056.0,951.0,880.0,880.0,884.0,772.0,959.0,857.0,835.0,936.0,1016.0,1589.0,944.0,894.0,995.0,971.0,958.0,897.0,816.0,1053.701030927835,3,True,1,True
704,0.0,0.0,0,,,107.0,Point-in-Polygon,2.0,Point-in-Polygon,837.0,,,1,1,O(n),,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Orientation) (1967)],Nordbeck and Rystedt (Orientation),1967,https://doi.org/10.1007/BF01934125,,,,0.0,0,3,n: 3,O(n),n: number of edges of polygon,n,,,Real RAM,words,1,n: 1,O(1),Only need to keep track of current side being looked at,1.0,0.0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000.0,,,,,,,,,6,,,Image Processing,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
705,0.0,0.0,0,,,110.0,Clock Synchronization in Distributed Systems,2.0,Clock Synchronization in Distributed Systems,879.0,,0.0,1,1,O(n),,,[https://ieeexplore.ieee.org/document/1281624 ASP (2005)],ASP,2005,https://ieeexplore.ieee.org/document/1281624,1,1.0,,1.0,0,3,n: 3,O(n),n: number of nodes in network,n,,,Word/Real RAM (per node),words,3,n: 3,O(n) (per node),"Each node needs to keep track of O(1) information about itself, and O(1) information per neighbor for synchronization purposes",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
706,0.0,1.0,1,Clock synchronization,,110.0,Clock Synchronization in Distributed Systems,1.0,Clock Synchronization in Distributed Systems,880.0,,0.0,1,1,O(n),,,[https://www.researchgate.net/publication/224306349_Clock-Sampling_Mutual_Network_Synchronization_for_Mobile_Multi-hop_Wireless_Ad_Hoc_Networks Clock-sampling mutual network synchronization (2007)],Clock-sampling mutual network synchronization,2007,https://www.researchgate.net/publication/224306349_Clock-Sampling_Mutual_Network_Synchronization_for_Mobile_Multi-hop_Wireless_Ad_Hoc_Networks,,,,0.0,0,3,n: 3,O(n),n: number of nodes in network,n,,,Word/Real RAM (per node),words,1,n: 1,O(1)? (per node),"Only needs to keep track of multiplicative correction $s$, its own clocks, and possibly O(1) other info",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1.0,9.0,1.0,99.0,1.0,999.0,1000.0,,,,,,,,,6,,,Operating Systems,Clock_synchronization,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Clock_synchronization/monthly/20150701/20230731,3992.0,4370.0,5076.0,5491.0,5681.0,5887.0,5637.0,6168.0,6459.0,6191.0,6250.0,4451.0,3962.0,4472.0,5117.0,5520.0,6082.0,5616.0,5462.0,5528.0,7101.0,6441.0,6423.0,4848.0,4456.0,4571.0,4695.0,5702.0,6485.0,5383.0,5692.0,5415.0,6559.0,6046.0,5799.0,4341.0,4548.0,4969.0,4946.0,5681.0,5849.0,5599.0,4839.0,5063.0,5530.0,5495.0,5093.0,3991.0,4014.0,3770.0,4295.0,5370.0,5882.0,4570.0,4499.0,4527.0,4110.0,4554.0,4284.0,3900.0,3713.0,3578.0,4438.0,5635.0,5804.0,4956.0,4696.0,3750.0,4876.0,3794.0,3963.0,3923.0,4332.0,3836.0,3632.0,4137.0,4040.0,4118.0,4044.0,3933.0,3789.0,3808.0,3559.0,3050.0,3327.0,3119.0,2865.0,3302.0,3603.0,3140.0,3451.0,2897.0,3520.0,3065.0,3197.0,2822.0,2828.0,4673.061855670103,3,True,1,True
707,0.0,0.0,0,,,110.0,Clock Synchronization in Distributed Systems,1.0,Clock Synchronization in Distributed Systems,881.0,,0.0,1,1,O(n),,,[https://ieeexplore.ieee.org/document/4359404 MATSF (2004)],MATSF,2004,https://ieeexplore.ieee.org/document/4359404,,,,0.0,0,3,n: 3,O(n),n: number of nodes in network,n,,,Word/Real RAM (per node),words,3,n: 3,O(n)? (per node),"Each node needs to keep track of O(1) information about itself, and O(1) information per neighbor for synchronization purposes",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,,1000000.0,,1000000000.0,,1000.0,,,,,,,,,6,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,False
708,0.0,0.0,0,,,116.0,d-Neighborhood of a String,2.0,d-Neighborhood of a String,911.0,,0.0,1,1,"$O(f_{bin}(\sigma-1, n, d))$ where $f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i$",Any distribution,(output is of that size),[http://rosalind.info/problems/ba1n/ Iterative naive (1940)],Iterative naive,1940,http://rosalind.info/problems/ba1n/,1,1.0,,1.0,0,8,n: 8,"O(f_{bin}(sigma-1, n, d)) where f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i","n: length of string
d: neighborhood distance threshold
sigma: size of alphabet",n,,,Word RAM,words,3,n: 3,O(n),"Keep track of which indices the differing letters are on, along with which set of letters are replacing the letters in these indices",1.0,0.0,,0,,0,,0,0,,0,0,http://rosalind.info/problems/ba1n/,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Bioinformatics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,True
709,0.0,1.0,1,Cyclic group,,117.0,Maximum Cut,2.0,"Maximum Cut, Approximate",913.0,,,1,1,O(V)?,,,[https://rajsain.files.wordpress.com/2013/11/randomized-algorithms-motwani-and-raghavan.pdf Motwani & Raghavan (1995)],Motwani & Raghavan,1995,https://rajsain.files.wordpress.com/2013/11/randomized-algorithms-motwani-and-raghavan.pdf,,,,0.0,0,3,n: 3,O(n)?,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n),Keeps track of current coloring/random assignment,1.0,0.0,,1,Monte Carlo,1,0.5,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Cyclic_group,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Cyclic_group/monthly/20150701/20230731,5662.0,6384.0,9259.0,11953.0,10678.0,9205.0,8801.0,10385.0,11066.0,10795.0,10612.0,7642.0,6386.0,7404.0,10875.0,14503.0,13498.0,10367.0,10500.0,11388.0,12873.0,10793.0,10696.0,7654.0,7204.0,7512.0,11207.0,15300.0,13825.0,10918.0,10396.0,12595.0,12785.0,11536.0,11522.0,7335.0,7899.0,9077.0,11960.0,15678.0,13247.0,10890.0,10793.0,12573.0,14417.0,13455.0,11585.0,8555.0,7714.0,8452.0,12195.0,15265.0,14397.0,11101.0,11051.0,12923.0,12802.0,14915.0,14484.0,12073.0,9824.0,11631.0,16771.0,22010.0,20633.0,16927.0,16001.0,15785.0,17615.0,16226.0,14028.0,12219.0,10906.0,9994.0,13284.0,17161.0,15717.0,14276.0,13844.0,15210.0,18156.0,13674.0,12843.0,10269.0,9000.0,9063.0,11536.0,14300.0,14867.0,11689.0,12047.0,11817.0,14041.0,12051.0,11719.0,10102.0,7819.0,12000.721649484536,3,True,3,True
710,0.0,1.0,1,Bloom filter,,117.0,Maximum Cut,2.0,"Maximum Cut, Approximate",914.0,,,1,1,O(VE)?,,,[http://lib.ysu.am/open_books/413311.pdf Mitzenmacher & Upfal (2005)],Mitzenmacher & Upfal,2005,http://lib.ysu.am/open_books/413311.pdf,,,,0.0,0,6,"m: 3,
n: 6",O(mn)?,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n),Keeps track of current coloring/assignment,1.0,0.0,,0,,1,0.5,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Bloom_filter,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bloom_filter/monthly/20150701/20230731,22602.0,20497.0,21020.0,22984.0,22939.0,20304.0,19553.0,22006.0,24111.0,26282.0,24192.0,21273.0,20607.0,24788.0,22519.0,25512.0,25049.0,28900.0,25160.0,24251.0,27823.0,24119.0,24605.0,22316.0,23243.0,22896.0,23756.0,27005.0,26252.0,24383.0,24583.0,23827.0,28540.0,25102.0,26197.0,22816.0,23795.0,21707.0,22020.0,26113.0,22880.0,20784.0,20173.0,19763.0,21077.0,20087.0,19002.0,17100.0,17700.0,15688.0,16204.0,20749.0,22123.0,18150.0,17242.0,17544.0,23573.0,24462.0,18833.0,17800.0,17945.0,16401.0,16378.0,17949.0,18950.0,19773.0,18081.0,18557.0,22723.0,19845.0,20035.0,18460.0,19675.0,19076.0,18725.0,21233.0,20543.0,19413.0,20757.0,21720.0,24281.0,23420.0,22731.0,21734.0,23750.0,23222.0,23883.0,21595.0,22389.0,24584.0,22483.0,25777.0,25312.0,20767.0,20049.0,21375.0,17336.0,21829.9793814433,3,False,3,True
711,0.0,1.0,1,Maximum cut,,117.0,Maximum Cut,2.0,"Maximum Cut, Approximate",915.0,,,1,1,O(V^2)?,,,"[https://doc.lagout.org/science/0_Computer%20Science/2_Algorithms/Handbook%20of%20Approximation%20Algorithms%20and%20Metaheuristics%20%5BGonzalez%202007-01-05%5D.pdf Khuller; Raghavachari & Young, ""Greedy Methods"" (2007)]","Khuller; Raghavachari & Young, ""Greedy Methods""",2007,https://doc.lagout.org/science/0_Computer%20Science/2_Algorithms/Handbook%20of%20Approximation%20Algorithms%20and%20Metaheuristics%20%5BGonzalez%202007-01-05%5D.pdf,,,,1.0,2->3,5,n: 5,O(n^2)?,"n: number of vertices
m: number of edges",n,,,Word RAM,words,3,n: 3,O(n),Keeps track of current coloring/assignment,1.0,0.0,,0,,1,0.5,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,Maximum_cut,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Maximum_cut/monthly/20150701/20230731,1296.0,1098.0,1302.0,1763.0,2435.0,2192.0,1513.0,1547.0,1834.0,2397.0,2111.0,1597.0,1224.0,974.0,1581.0,1736.0,2317.0,2409.0,1717.0,1796.0,2258.0,2270.0,2208.0,1630.0,1239.0,1031.0,1442.0,2180.0,2949.0,3061.0,1964.0,1753.0,2006.0,2650.0,2294.0,1753.0,1423.0,1202.0,1520.0,2123.0,3043.0,2745.0,2168.0,1854.0,3169.0,2841.0,2767.0,2152.0,1787.0,1492.0,2009.0,3107.0,3697.0,3345.0,2739.0,2404.0,2520.0,3117.0,3171.0,2779.0,2336.0,1903.0,2227.0,3464.0,3796.0,4031.0,3234.0,3116.0,3499.0,3830.0,3710.0,3205.0,3516.0,2358.0,2703.0,3939.0,4129.0,3819.0,3038.0,2964.0,3834.0,4510.0,4312.0,3492.0,2703.0,2635.0,2868.0,3450.0,4532.0,3688.0,3212.0,3506.0,4010.0,4235.0,3934.0,3351.0,3132.0,2607.443298969072,3,False,3,True
712,0.0,1.0,1,3-dimensional matching,,117.0,Maximum Cut,1.0,"Maximum Cut, Approximate",916.0,,,1,1,O(V^3 logE),,,[https://link.springer.com/content/pdf/10.1007/978-3-642-58412-1.pdf?pdf=button Ausiello et al. (2003)],Ausiello et al.,2003,https://link.springer.com/content/pdf/10.1007/978-3-642-58412-1.pdf?pdf=button,,,,1.0,1->2,6.01,n: 6.01,O(n^3 \log m),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2)?,Each vertex keeps track of O(V)-sized vector. assuming this is the goemans-williamson algorithm,1.0,0.0,,0,,1,~0.878; assuming this is the goemans-williamson algorithm,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,3-dimensional_matching,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/3-dimensional_matching/monthly/20150701/20230731,767.0,847.0,839.0,1043.0,1505.0,1894.0,1071.0,1024.0,1139.0,1826.0,1465.0,1100.0,799.0,892.0,833.0,1016.0,1542.0,1982.0,1046.0,1016.0,1180.0,1762.0,1583.0,1018.0,858.0,785.0,774.0,1106.0,1768.0,1818.0,1152.0,908.0,1219.0,1846.0,1801.0,1040.0,763.0,752.0,884.0,1120.0,1508.0,1805.0,1073.0,1076.0,1436.0,1603.0,1568.0,1103.0,1085.0,796.0,774.0,1098.0,1901.0,2466.0,984.0,1088.0,1190.0,1469.0,1644.0,1318.0,925.0,1076.0,751.0,1036.0,1894.0,1920.0,1223.0,888.0,1248.0,1788.0,1773.0,1137.0,910.0,864.0,760.0,1079.0,1903.0,2326.0,1068.0,958.0,1239.0,1710.0,1367.0,1199.0,797.0,792.0,745.0,990.0,1722.0,1883.0,946.0,1009.0,1235.0,1873.0,1593.0,1157.0,737.0,1250.40206185567,3,False,3,False
713,0.0,1.0,1,Wiener connector,$\tilde{O}(qm) for an O(1)-approximation,118.0,Wiener Index,1.0,Minimum Wiener Connector problem,918.0,,,1,1,O(q(m*log(n)+n*log^2(n))),,,[https://arxiv.org/abs/1504.00513 Ruchansky (2015)],Ruchansky,2015,https://arxiv.org/abs/1504.00513,1,1.0,https://arxiv.org/pdf/1504.00513.pdf,1.0,0,5.01,n: 5.01,O(q(m*log(n)+n*log^2(n))),"n: number of vertices
m: number of edges
q: number of query vertices",n,,,Word RAM,words,5,"n: 5,
q: 3,
m: 4",O(q(m+n*log(n))?,"Keeps track of $O(qm)$ shortest-path distances and $O(q*log(n))$ approximate Steiner trees, each of size $O(n)$",1.0,0.0,,0,,1,O(1),0,0,,0,0,https://en.wikipedia.org/wiki/Wiener_connector,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,Wiener_connector,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Wiener_connector/monthly/20150701/20230731,68.0,43.0,43.0,86.0,56.0,62.0,50.0,46.0,46.0,85.0,38.0,34.0,38.0,43.0,31.0,43.0,35.0,37.0,54.0,78.0,83.0,91.0,225.0,90.0,388.0,71.0,247.0,95.0,78.0,240.0,173.0,81.0,149.0,261.0,80.0,56.0,84.0,244.0,86.0,73.0,65.0,69.0,88.0,68.0,83.0,115.0,106.0,73.0,48.0,108.0,94.0,90.0,98.0,81.0,100.0,86.0,79.0,132.0,63.0,53.0,38.0,34.0,20.0,40.0,65.0,46.0,42.0,34.0,49.0,41.0,36.0,52.0,28.0,47.0,21.0,30.0,55.0,53.0,36.0,21.0,33.0,36.0,27.0,19.0,27.0,19.0,24.0,36.0,33.0,42.0,43.0,39.0,47.0,30.0,40.0,43.0,33.0,71.84536082474227,5.01,True,5,True
714,1.0,0.0,1,Bareiss algorithm,,119.0,Determinant of Matrices with Integer Entries,2.0,Determinant of Matrices with Integer Entries,919.0,,,1,1,O(n^5L^2 (log(n)^2 + L^2)),Any distribution of values?,(behavior same across all inputs),[https://www.ams.org/journals/mcom/1968-22-103/S0025-5718-1968-0226829-0/S0025-5718-1968-0226829-0.pdf Bareiss algorithm (1968)],Bareiss algorithm,1968,https://www.ams.org/journals/mcom/1968-22-103/S0025-5718-1968-0226829-0/S0025-5718-1968-0226829-0.pdf,,,,1.0,0,5.52,"n: 7,
L: 7,
n^2: 5.52",O(n^5 L^2 (\log(n)^2 + L^2)),"n: dimension of matrix
L: maximum length (in bits) of any entry",n^2,,,Word RAM? (without O(1) multiplication),bits,4.51,"n: 6,
L: 3,
n^2: 4.51",O(n^2(n*log(n)+nL)),Keeps track of $O(n^2)$ entries that have absolute value at most $O(n^{(n/2)}2^{(nL)})$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Bareiss_algorithm,,,,,,,,,,,6.28e+20,1,,2.80E+42,1,,6.52E+63,1,,2,,,Numerical Analysis,Bareiss_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bareiss_algorithm/monthly/20150701/20230731,320.0,363.0,511.0,690.0,490.0,449.0,527.0,498.0,481.0,505.0,563.0,358.0,337.0,333.0,599.0,602.0,573.0,449.0,459.0,502.0,555.0,494.0,558.0,430.0,394.0,339.0,486.0,616.0,547.0,596.0,624.0,535.0,620.0,599.0,658.0,489.0,414.0,440.0,591.0,835.0,661.0,543.0,564.0,432.0,643.0,579.0,515.0,426.0,464.0,443.0,951.0,808.0,739.0,576.0,606.0,666.0,601.0,751.0,722.0,585.0,466.0,492.0,659.0,839.0,911.0,722.0,669.0,668.0,926.0,807.0,719.0,553.0,480.0,536.0,611.0,866.0,800.0,713.0,755.0,681.0,699.0,624.0,684.0,578.0,374.0,411.0,695.0,821.0,848.0,802.0,634.0,637.0,764.0,671.0,707.0,490.0,533.0,593.2886597938144,5.011,False,4.51,True
715,0.0,1.0,1,Bareiss algorithm,,119.0,Determinant of Matrices with Integer Entries,2.0,Determinant of Matrices with Integer Entries,920.0,,,1,1,O(n^4L(log(n) + L)log(log(n) + L)),Any distribution of values?,(behavior same across all inputs),[- Bareiss algorithm with fast multiplication (1968)],Bareiss algorithm with fast multiplication,1968,-,,,,1.0,0,5.011,"n: 7,
L: 5.01,
n^2: 5.011",O(n^4 L (\log(n) + L) \log(\log(n) + L)),"n: dimension of matrix
L: maximum length (in bits) of any entry",n^2,,,Word RAM? (without O(1) multiplication),bits,4.51,"n: 6,
L: 3,
n^2: 4.51",O(n^2(n*log(n)+nL)),Keeps track of $O(n^2)$ entries that have absolute value at most $O(n^{(n/2)}2^{(nL)})$,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Bareiss_algorithm,,,,,,,,,,,100662000000000.0,6238821.104,,1.33E+29,2.1118E+13,,1.52E+44,4.30E+19,,2,,,Numerical Analysis,Bareiss_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bareiss_algorithm/monthly/20150701/20230731,320.0,363.0,511.0,690.0,490.0,449.0,527.0,498.0,481.0,505.0,563.0,358.0,337.0,333.0,599.0,602.0,573.0,449.0,459.0,502.0,555.0,494.0,558.0,430.0,394.0,339.0,486.0,616.0,547.0,596.0,624.0,535.0,620.0,599.0,658.0,489.0,414.0,440.0,591.0,835.0,661.0,543.0,564.0,432.0,643.0,579.0,515.0,426.0,464.0,443.0,951.0,808.0,739.0,576.0,606.0,666.0,601.0,751.0,722.0,585.0,466.0,492.0,659.0,839.0,911.0,722.0,669.0,668.0,926.0,807.0,719.0,553.0,480.0,536.0,611.0,866.0,800.0,713.0,755.0,681.0,699.0,624.0,684.0,578.0,374.0,411.0,695.0,821.0,848.0,802.0,634.0,637.0,764.0,671.0,707.0,490.0,533.0,593.2886597938144,5.011,True,4.51,True
716,0.0,1.0,1,Integer relation algorithm,,120.0,Integer Relation,2.0,Integer Relation,921.0,,,1,1,O(n^3),,,[https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf Ferguson–Forcade algorithm (1979)],Ferguson–Forcade algorithm,1979,https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf,,,,1.0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses auxiliary $n\times n$ matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis,Integer_relation_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Integer_relation_algorithm/monthly/20150701/20230731,678.0,565.0,742.0,670.0,601.0,501.0,619.0,547.0,686.0,570.0,468.0,495.0,461.0,471.0,509.0,622.0,629.0,518.0,529.0,554.0,716.0,577.0,545.0,541.0,496.0,538.0,466.0,453.0,473.0,453.0,595.0,438.0,649.0,459.0,485.0,396.0,412.0,372.0,380.0,398.0,384.0,411.0,417.0,379.0,785.0,490.0,485.0,415.0,462.0,370.0,399.0,484.0,455.0,404.0,423.0,437.0,391.0,516.0,488.0,415.0,336.0,383.0,617.0,455.0,359.0,453.0,447.0,395.0,576.0,456.0,425.0,317.0,291.0,342.0,326.0,497.0,528.0,358.0,363.0,354.0,440.0,398.0,441.0,554.0,504.0,449.0,466.0,612.0,611.0,547.0,650.0,527.0,534.0,555.0,548.0,477.0,505.0,488.4845360824742,6,True,5,True
717,1.0,0.0,1,Lenstra–Lenstra–Lovász lattice basis reduction algorithm,,120.0,Integer Relation,2.0,Integer Relation,922.0,Lattice-based,,1,1,O(n^4),,,[https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf LLL algorithm (1982)],LLL algorithm,1982,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,,,,0.0,0,7,n: 7,O(n^4),n: number of real numbers to find integer relation for,n,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,0.0,Word RAM,words,5,n: 5,O(n^2),"Derived: Uses n auxiliary vectors each of length n, as well as an nxn matrix",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis,Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm/monthly/20150701/20230731,1850.0,1703.0,2167.0,1816.0,1754.0,1711.0,1723.0,1618.0,1810.0,1897.0,1858.0,1597.0,1363.0,1995.0,3185.0,3473.0,3280.0,3701.0,3461.0,4137.0,8547.0,5300.0,3004.0,2613.0,2199.0,1838.0,1961.0,2202.0,2105.0,7763.0,2116.0,1676.0,2852.0,10316.0,6312.0,3170.0,2392.0,2394.0,2260.0,2377.0,2391.0,2524.0,2251.0,1842.0,2378.0,2285.0,2807.0,2361.0,2940.0,2767.0,3413.0,3750.0,3920.0,4718.0,3862.0,3471.0,3459.0,3156.0,4015.0,3464.0,2845.0,2573.0,2785.0,3072.0,2958.0,3306.0,3343.0,3283.0,10184.0,3781.0,4038.0,4334.0,4219.0,4402.0,3924.0,5396.0,4945.0,4997.0,4719.0,4108.0,4802.0,5456.0,5693.0,5471.0,6248.0,5302.0,4180.0,3339.0,3159.0,3126.0,4098.0,3395.0,3828.0,3482.0,4470.0,2466.0,3108.0,3465.0,6,False,5,True
718,0.0,1.0,1,Integer relation algorithm,,120.0,Integer Relation,2.0,Integer Relation,924.0,Partial Sum of Squares,,1,1,O(n^3),,,[https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf PSOS algorithm (1988)],PSOS algorithm,1988,https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf,,,,0.0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses multiple nxn auxiliary matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis,Integer_relation_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Integer_relation_algorithm/monthly/20150701/20230731,678.0,565.0,742.0,670.0,601.0,501.0,619.0,547.0,686.0,570.0,468.0,495.0,461.0,471.0,509.0,622.0,629.0,518.0,529.0,554.0,716.0,577.0,545.0,541.0,496.0,538.0,466.0,453.0,473.0,453.0,595.0,438.0,649.0,459.0,485.0,396.0,412.0,372.0,380.0,398.0,384.0,411.0,417.0,379.0,785.0,490.0,485.0,415.0,462.0,370.0,399.0,484.0,455.0,404.0,423.0,437.0,391.0,516.0,488.0,415.0,336.0,383.0,617.0,455.0,359.0,453.0,447.0,395.0,576.0,456.0,425.0,317.0,291.0,342.0,326.0,497.0,528.0,358.0,363.0,354.0,440.0,398.0,441.0,554.0,504.0,449.0,466.0,612.0,611.0,547.0,650.0,527.0,534.0,555.0,548.0,477.0,505.0,488.4845360824742,6,True,5,True
719,0.0,1.0,1,Integer relation algorithm,,120.0,Integer Relation,2.0,Integer Relation,925.0,Partial Sum of Squares using QR decomposition,,1,1,O(n^3),,,[https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf PSLQ algorithm (1992)],PSLQ algorithm,1992,https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf,,,,0.0,0,6,n: 6,O(n^3),n: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,O(n^2),Derived: Uses multiple nxn auxiliary matrices,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000.0,,,,,,,,,3,,,Numerical Analysis,Integer_relation_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Integer_relation_algorithm/monthly/20150701/20230731,678.0,565.0,742.0,670.0,601.0,501.0,619.0,547.0,686.0,570.0,468.0,495.0,461.0,471.0,509.0,622.0,629.0,518.0,529.0,554.0,716.0,577.0,545.0,541.0,496.0,538.0,466.0,453.0,473.0,453.0,595.0,438.0,649.0,459.0,485.0,396.0,412.0,372.0,380.0,398.0,384.0,411.0,417.0,379.0,785.0,490.0,485.0,415.0,462.0,370.0,399.0,484.0,455.0,404.0,423.0,437.0,391.0,516.0,488.0,415.0,336.0,383.0,617.0,455.0,359.0,453.0,447.0,395.0,576.0,456.0,425.0,317.0,291.0,342.0,326.0,497.0,528.0,358.0,363.0,354.0,440.0,398.0,441.0,554.0,504.0,449.0,466.0,612.0,611.0,547.0,650.0,527.0,534.0,555.0,548.0,477.0,505.0,488.4845360824742,6,True,5,True
720,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,1.0,Sequence-to-Graph Alignment,932.0,,,1,1,O(m(|V | log |V | + |E|)),,,[https://link.springer.com/chapter/10.1007/3-540-63307-3_56 Amir et al. (1997)],Amir et al.,1997,https://link.springer.com/chapter/10.1007/3-540-63307-3_56,1,0.0,https://reader.elsevier.com/reader/sd/pii/S0196677499910635?token=B149D19F22DC42C8DCC1DFAA76A22B88E61FC2018BF3ED1937F7C5951F9BD810C4726C3153D36F697AE499721F3422A1,1.0,0,6,"V: 6,
E: 3,
m: 3,
N: 6",O(m(n \log m + E)),"V: number of vertices in original hypertext graph
E: number of edges in original hypertext graph
m: length of pattern
n: number of vertices in converted graph (total text size)
e: number of edges in converted graph",N,,,Word RAM,words,6,"m: 3,
n: 6,
N: 6",O(mn),https://www.sciencedirect.com/science/article/pii/S0304397599003333,0.0,0.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,"V:E
2:3
m = 300",120000.0,,120000000.0,,120000000000.0,,1217262.743,1,,2413156857,1,,3.60905E+12,1,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
721,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,1.0,Sequence-to-Graph Alignment,933.0,,,1,1,O(m(|V | + |E|)),,,[https://www.sciencedirect.com/science/article/pii/S0304397599003333 Navarro (2000)],Navarro,2000,https://www.sciencedirect.com/science/article/pii/S0304397599003333,3,1.0,https://reader.elsevier.com/reader/sd/pii/S0304397599003333?token=C0E6BDF7BA98CD5C338EDB86675CB3A29AF44F5B046E169EE0F115788255757C815F0F0307EAF080CDF9A9DE7AA37764,1.0,3->4,5,"V: 5,
E: 3,
m: 3,
N: 5",O(n(V + E)),"total text size $n$, vertices $V$, edges $E$",N,,,Word RAM,words,3,"V: 3,
N: 3",O(V),https://www.sciencedirect.com/science/article/pii/S0304397599003333,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,400.0,5.694329501,400000.0,5.694329501,400000000.0,5.694329501,300000.0,4.057542476,0.594976756,300000000,8.04385619,1.003648024,3E+11,12.0301699,1.291345542,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
722,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,934.0,,,1,1,O(m(|V | log(m|V |) + |E|)),,,[https://www.ncbi.nlm.nih.gov/pubmed/26589280 HybridSpades (2015)],HybridSpades,2015,https://www.ncbi.nlm.nih.gov/pubmed/26589280,,,,0.0,0,7,"V: 7,
E: 3,
m: 4,
N: 7",O(m(V \log(mV) + E)),"string length $m$, vertices V, edges E",N,,,Word RAM,words,7,"m: 3,
V: 7,
E: 3,
N: 7",O(m*(V+E)),,1.0,0.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,False
723,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,935.0,Dynamic Programming,,1,1,O(mVE),,,[https://www.biorxiv.org/content/10.1101/124941v1.full V-ALIGN (2018)],V-ALIGN,2018,https://www.biorxiv.org/content/10.1101/124941v1.full,,,,0.0,0,6,"V: 6,
E: 3,
m: 3,
N: 6",O(mVE),"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.biorxiv.org/content/10.1101/124941v1.full,0.0,Word RAM,words,3,"V: 3,
m: 3,
N: 3",O(mV),https://www.biorxiv.org/content/10.1101/124941v1.full,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,False,3,True
724,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,936.0,,,1,1,O(V+ mE),,,[https://www.biorxiv.org/content/10.1101/216127v1 Rautiainen and Marschall (2017)],Rautiainen and Marschall,2017,https://www.biorxiv.org/content/10.1101/216127v1,,,,0.0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",O(V+ mE),"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.biorxiv.org/content/10.1101/216127v1,0.0,Word RAM,words,3,"V: 3,
m: 2.5,
N: 3",$O(\sqrt(m)V)$,https://www.biorxiv.org/content/10.1101/216127v1,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
725,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,937.0,,,1,1,O(V+ mE),,,"[https://www.biorxiv.org/content/10.1101/522912v1.full.pdf Jain, Chang (2019)]","Jain, Chang",2019,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,0.0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",O(V+ mE),"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,0.0,Word RAM,words,3,"V: 3,
N: 3",O(V),https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
726,0.0,0.0,0,,,122.0,Sequence-to-Graph Alignment,2.0,Sequence-to-Graph Alignment,938.0,,,1,1,O(V + mE),,,"[https://www.ncbi.nlm.nih.gov/pubmed/30851095 Rautiainen, Marschall (2019)]","Rautiainen, Marschall",2019,https://www.ncbi.nlm.nih.gov/pubmed/30851095,,,,0.0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",O(V + mE),"m: length of input sequence
V: number of vertices
E: number of edges",N,https://www.ncbi.nlm.nih.gov/pubmed/30851095,0.0,Word RAM,words,3,"V: 3,
m: 3,
N: 3",O(mV),"Derived: algorithm uses a V-sized array of bitvectors each of which is of length m, and also uses a priority queue which has at most V elements. The precomputed pattern bitvectors also takes up O(V * m) space.",1.0,0.0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
727,0.0,1.0,1,Baby-step giant-step,,123.0,Logarithm Calculations,2.0,Discrete Logarithm Over Finite Fields,939.0,,,1,1,O(2^n),,,[NA Trial Multiplication (1940)],Trial Multiplication,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Each power $k$ that you try in the brute force search is size $O(\log n)$, which is $O(1)$ when considering $O(\log n)$ size words. Only need to keep track of one at a time.",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Discrete_logarithm#Algorithms,,,,,1.0,,1.0,,1.0,,inf,,,,,,,,,1,,,Statistics,Baby-step_giant-step,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Baby-step_giant-step/monthly/20150701/20230731,1364.0,1111.0,1591.0,1754.0,1739.0,1537.0,1464.0,1394.0,1755.0,1556.0,1458.0,1035.0,958.0,1016.0,1298.0,1952.0,2102.0,1431.0,1407.0,1335.0,1818.0,2202.0,1813.0,1888.0,1087.0,1010.0,1403.0,1567.0,2055.0,1925.0,1899.0,1821.0,1920.0,2382.0,2248.0,2296.0,1738.0,1213.0,1550.0,2022.0,2158.0,2104.0,2053.0,2008.0,2064.0,2207.0,1967.0,1513.0,1385.0,1143.0,1625.0,2292.0,2398.0,2178.0,2039.0,1734.0,1934.0,2231.0,2115.0,1616.0,1225.0,1150.0,1361.0,2186.0,2072.0,2776.0,2446.0,1741.0,2233.0,1891.0,2057.0,1725.0,1237.0,1081.0,1575.0,1712.0,2148.0,1549.0,1769.0,1470.0,2125.0,2030.0,2288.0,2045.0,1924.0,1231.0,1977.0,2135.0,2242.0,1755.0,1671.0,1675.0,2208.0,3262.0,2123.0,1662.0,1774.0,1787.721649484536,8,True,1,True
728,1.0,0.0,1,Baby-step giant-step,,123.0,Logarithm Calculations,2.0,Discrete Logarithm Over Finite Fields,940.0,,,1,1,O(2^{\sqrt{n}}),,,[https://doi.org/10.1090/pspum/020 Baby-step Giant-step (1971)],Baby-step Giant-step,1971,https://doi.org/10.1090/pspum/020,,,,0.0,0,8,n: 8,O(2^{\sqrt{n}}),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$,Derived: Uses a hash table of this size,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Baby-step_giant-step,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics,Baby-step_giant-step,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Baby-step_giant-step/monthly/20150701/20230731,1364.0,1111.0,1591.0,1754.0,1739.0,1537.0,1464.0,1394.0,1755.0,1556.0,1458.0,1035.0,958.0,1016.0,1298.0,1952.0,2102.0,1431.0,1407.0,1335.0,1818.0,2202.0,1813.0,1888.0,1087.0,1010.0,1403.0,1567.0,2055.0,1925.0,1899.0,1821.0,1920.0,2382.0,2248.0,2296.0,1738.0,1213.0,1550.0,2022.0,2158.0,2104.0,2053.0,2008.0,2064.0,2207.0,1967.0,1513.0,1385.0,1143.0,1625.0,2292.0,2398.0,2178.0,2039.0,1734.0,1934.0,2231.0,2115.0,1616.0,1225.0,1150.0,1361.0,2186.0,2072.0,2776.0,2446.0,1741.0,2233.0,1891.0,2057.0,1725.0,1237.0,1081.0,1575.0,1712.0,2148.0,1549.0,1769.0,1470.0,2125.0,2030.0,2288.0,2045.0,1924.0,1231.0,1977.0,2135.0,2242.0,1755.0,1671.0,1675.0,2208.0,3262.0,2123.0,1662.0,1774.0,1787.721649484536,8,True,1,False
729,0.0,1.0,1,Discrete logarithm records,,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,941.0,,,1,1,O(2^n),,,[https://www.sciencedirect.com/science/article/pii/S0890540198927614 Function Field Sieve (FFS) (1999)],Function Field Sieve (FFS),1999,https://www.sciencedirect.com/science/article/pii/S0890540198927614,,,,0.0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,O(n^{2/3})?,same space as Number Field Sieve?,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics,Discrete_logarithm_records,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Discrete_logarithm_records/monthly/20150701/20230731,453.0,402.0,579.0,1032.0,807.0,517.0,669.0,510.0,505.0,568.0,480.0,482.0,613.0,664.0,386.0,572.0,627.0,488.0,505.0,496.0,554.0,493.0,442.0,402.0,367.0,402.0,314.0,440.0,534.0,411.0,504.0,376.0,410.0,490.0,440.0,469.0,319.0,323.0,388.0,449.0,500.0,362.0,401.0,369.0,445.0,508.0,415.0,369.0,389.0,386.0,425.0,428.0,462.0,600.0,489.0,443.0,470.0,564.0,511.0,409.0,394.0,350.0,415.0,782.0,599.0,490.0,481.0,486.0,607.0,617.0,506.0,421.0,353.0,362.0,397.0,503.0,509.0,627.0,424.0,422.0,417.0,465.0,416.0,349.0,388.0,361.0,403.0,435.0,505.0,390.0,425.0,391.0,402.0,395.0,394.0,462.0,372.0,469.50515463917526,8,True,1,False
730,1.0,0.0,1,Index calculus algorithm,,123.0,Logarithm Calculations,1.0,"Discrete Logarithm Over Finite Fields, F_q",942.0,,,1,1,$O(e^{(sqrt(2) sqrt(n*logn))})$,,,[NA Index calculus algorithm (1922)],Index calculus algorithm,1922,,,,,1.0,0,8,n: 8,$O(e^{(\sqrt(2) \sqrt(n*logn))})$,"n: number of digits/bits in the order of the finite group
r: size of factor base",n,,,RAM?,bits,3,"n: 3,
r: 5",O(n+r^2)?,See Dixon's algorithm for factoring integers; also works with an O(r)-by-O(r) sized matrix (to obtain discrete logs of primes in factor base),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Index_calculus_algorithm,,,,,1000.0,,1000000.0,,1000000000.0,,inf,1,,Inf,1,,Inf,1,,1,,,Statistics,Index_calculus_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Index_calculus_algorithm/monthly/20150701/20230731,621.0,569.0,762.0,1401.0,942.0,782.0,773.0,706.0,896.0,820.0,828.0,607.0,487.0,499.0,497.0,796.0,875.0,852.0,842.0,639.0,736.0,949.0,840.0,679.0,449.0,447.0,562.0,823.0,936.0,812.0,712.0,609.0,705.0,841.0,1002.0,708.0,544.0,451.0,597.0,657.0,904.0,898.0,724.0,669.0,888.0,952.0,804.0,702.0,612.0,494.0,522.0,910.0,1234.0,765.0,742.0,722.0,806.0,1582.0,990.0,683.0,595.0,454.0,492.0,839.0,845.0,833.0,602.0,658.0,755.0,746.0,814.0,683.0,540.0,517.0,488.0,665.0,948.0,858.0,575.0,484.0,768.0,673.0,831.0,676.0,528.0,406.0,574.0,794.0,745.0,692.0,566.0,509.0,797.0,733.0,807.0,717.0,607.0,728.5567010309278,8,True,1,False
731,1.0,0.0,1,NFS,,123.0,Logarithm Calculations,2.0,Discrete Logarithm Over Finite Fields,943.0,,,1,1,O(2^n),,,[http://www.ams.org/notices/199612/pomerance.pdf Number Field Sieve (NFS) (1990)],Number Field Sieve (NFS),1990,http://www.ams.org/notices/199612/pomerance.pdf,,,,0.0,0,8,n: 8,$O(2^n)$,n: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,O(n^{2/3}),http://www.ams.org/notices/199612/pomerance.pdf,0.0,1.0,,0,,0,,0,0,,0,0,https://core.ac.uk/download/pdf/15590206.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics,NFS,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/NFS/monthly/20150701/20230731,1297.0,1239.0,1199.0,1278.0,1282.0,1174.0,1184.0,1186.0,1102.0,1041.0,1109.0,1082.0,982.0,990.0,1182.0,1083.0,1065.0,1015.0,977.0,1164.0,1067.0,1042.0,1074.0,1165.0,962.0,913.0,937.0,967.0,962.0,848.0,960.0,879.0,1139.0,1282.0,1410.0,1228.0,1209.0,1056.0,890.0,1098.0,1238.0,1081.0,1136.0,1253.0,1232.0,999.0,993.0,928.0,907.0,1009.0,755.0,836.0,885.0,727.0,745.0,814.0,1021.0,1111.0,643.0,552.0,526.0,510.0,656.0,544.0,519.0,561.0,546.0,468.0,1074.0,672.0,397.0,392.0,355.0,343.0,374.0,333.0,337.0,348.0,403.0,349.0,380.0,342.0,360.0,364.0,332.0,368.0,394.0,466.0,395.0,404.0,391.0,352.0,366.0,315.0,350.0,327.0,314.0,809.3917525773196,8,True,1,False
732,1.0,0.0,1,Pohlig–Hellman algorithm,,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,944.0,,,1,1,"O(2^{\sqrt{n}}), only for primes; does much better for composites",,,[https://dl.acm.org/citation.cfm?id=2269283 Pohlig-Hellman (1978)],Pohlig-Hellman,1978,https://dl.acm.org/citation.cfm?id=2269283,,,,0.0,0,8,n: 8,"O(2^{\sqrt{n}}), only for primes; does much better for composites",n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$ (though only for primes),A step in the algorithm involves using baby-steps giant-steps to compute discrete logs; the rest of the algorithm (including CRT and repeated powers) isn't as intensive,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics,Pohlig%E2%80%93Hellman_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Pohlig%E2%80%93Hellman_algorithm/monthly/20150701/20230731,594.0,541.0,972.0,1460.0,1112.0,881.0,823.0,1059.0,1297.0,1043.0,1128.0,934.0,609.0,725.0,811.0,1443.0,1147.0,1046.0,851.0,883.0,1282.0,1959.0,1081.0,1181.0,826.0,673.0,858.0,1119.0,1545.0,1068.0,1108.0,1251.0,1220.0,1441.0,1638.0,1071.0,792.0,772.0,935.0,1426.0,1358.0,1348.0,1362.0,1203.0,1405.0,1659.0,1291.0,1279.0,953.0,1088.0,921.0,1525.0,1448.0,1445.0,1332.0,1353.0,1400.0,1872.0,1733.0,1366.0,1095.0,957.0,938.0,1501.0,1734.0,1574.0,1448.0,1297.0,1709.0,1497.0,1782.0,1328.0,1081.0,943.0,1001.0,1416.0,1408.0,1423.0,1366.0,1028.0,2008.0,1416.0,2319.0,1421.0,1199.0,1180.0,1522.0,1684.0,1571.0,1212.0,1155.0,1228.0,1717.0,1694.0,1980.0,1467.0,1530.0,1265.721649484536,8,True,1,False
733,1.0,0.0,1,Pollard's rho algorithm,,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,945.0,,,1,1,O(2^{(n/2)}),,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's rho algorithm (1978)],Pollard's rho algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,,,0.0,0,8,n: 8,$O(2^{(n/2)})$,n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,O(1),Stores a constant number of O(n)-bit values per iteration,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics,Pollard%27s_rho_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Pollard%27s_rho_algorithm/monthly/20150701/20230731,2453.0,2377.0,2574.0,4085.0,4352.0,4525.0,3103.0,3165.0,3724.0,4001.0,3100.0,2721.0,2312.0,2124.0,3248.0,3511.0,5051.0,3622.0,2945.0,2817.0,3634.0,4007.0,3289.0,2743.0,2778.0,2420.0,2760.0,3992.0,5009.0,3771.0,3160.0,3019.0,3132.0,3316.0,3350.0,2499.0,2452.0,2100.0,2721.0,4291.0,4036.0,3008.0,2994.0,2903.0,4142.0,4061.0,3011.0,2305.0,2618.0,2353.0,2739.0,4463.0,4298.0,3418.0,3286.0,2666.0,4307.0,4317.0,3387.0,2558.0,2211.0,2142.0,2202.0,3719.0,3826.0,2865.0,2606.0,2591.0,3604.0,3442.0,3208.0,2579.0,2385.0,2123.0,2499.0,3497.0,3143.0,2825.0,2638.0,2713.0,4632.0,2880.0,2993.0,2494.0,2497.0,1997.0,2309.0,3066.0,3247.0,3432.0,2931.0,3019.0,3820.0,2789.0,2690.0,2650.0,2208.0,3129.8453608247423,8,True,1,True
734,1.0,0.0,1,Pollard's kangaroo algorithm,,123.0,Logarithm Calculations,1.0,Discrete Logarithm Over Finite Fields,946.0,,,1,1,O(2^n),,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's kangaroo algorithm (1978)],Pollard's kangaroo algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,,,0.0,0,8,n: 8,O(2^n),n: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,O(1),"Stores a constant number of O(n)-bit values (a, b, x_i, d, x_N, y_i, d_i) per iteration; assumes that the pseudorandom map is part of the input",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Pollard%27s_kangaroo_algorithm,,,,,,,,,,,inf,,,,,,,,,1,,,Statistics,Pollard%27s_kangaroo_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Pollard%27s_kangaroo_algorithm/monthly/20150701/20230731,668.0,588.0,646.0,741.0,763.0,752.0,666.0,600.0,684.0,604.0,692.0,629.0,587.0,686.0,600.0,704.0,682.0,742.0,680.0,606.0,755.0,906.0,761.0,626.0,538.0,598.0,624.0,654.0,678.0,719.0,818.0,831.0,770.0,786.0,792.0,617.0,542.0,517.0,565.0,619.0,625.0,680.0,718.0,544.0,743.0,841.0,641.0,554.0,897.0,1180.0,927.0,861.0,842.0,803.0,806.0,963.0,866.0,877.0,851.0,706.0,571.0,615.0,495.0,708.0,670.0,700.0,781.0,716.0,881.0,773.0,780.0,650.0,545.0,483.0,577.0,685.0,744.0,724.0,685.0,488.0,772.0,630.0,649.0,499.0,589.0,559.0,604.0,710.0,868.0,564.0,480.0,540.0,617.0,663.0,616.0,600.0,846.0,691.1134020618557,8,True,1,True
735,1.0,0.0,1,AVL tree,,125.0,Self-Balancing Trees Creation,1.0,,1401.0,,,1,1,O(nlogn),,,[ AVL Tree (1962)],AVL Tree,1962,,,,,1.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.784285,1,,19931568.57,1,,29897352854,1,,5,,,Combinatorics,AVL_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/AVL_tree/monthly/20150701/20230731,17841.0,20160.0,25807.0,34145.0,35768.0,30290.0,24528.0,26083.0,31730.0,32901.0,31843.0,23682.0,18555.0,18051.0,22884.0,31021.0,35580.0,29946.0,25637.0,25176.0,35156.0,31627.0,29930.0,22490.0,19685.0,18519.0,23837.0,28773.0,31132.0,25418.0,19816.0,19418.0,24952.0,27634.0,24505.0,18926.0,15398.0,16072.0,18758.0,25794.0,28819.0,22916.0,18733.0,17878.0,22664.0,22174.0,21128.0,16366.0,14494.0,12712.0,14291.0,20079.0,23691.0,20597.0,17844.0,18170.0,19678.0,23544.0,22014.0,20217.0,16050.0,13929.0,17102.0,24910.0,30656.0,26852.0,21370.0,21626.0,26555.0,23976.0,21829.0,20506.0,20030.0,17311.0,17358.0,23484.0,26756.0,24499.0,21349.0,20888.0,24028.0,21725.0,24301.0,19792.0,17096.0,15350.0,17230.0,24170.0,28434.0,22692.0,18929.0,17308.0,22148.0,17086.0,18519.0,15322.0,11596.0,22579.78350515464,4,True,3,True
736,0.0,1.0,1,Red–black tree,,125.0,Self-Balancing Trees Creation,1.0,,1031.0,,,1,1,O(nlogn),,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,0.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,5,,,Combinatorics,Red%E2%80%93black_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Red%E2%80%93black_tree/monthly/20150701/20230731,18346.0,25197.0,23491.0,32499.0,29624.0,26223.0,20721.0,25074.0,30049.0,28035.0,27130.0,23739.0,20423.0,23360.0,26907.0,34648.0,35237.0,29117.0,25272.0,28567.0,33151.0,29523.0,26105.0,22705.0,21847.0,21243.0,23603.0,30744.0,32251.0,25072.0,23303.0,24374.0,30294.0,32184.0,27810.0,22313.0,20681.0,20429.0,22556.0,29046.0,31186.0,28513.0,23765.0,23495.0,29229.0,25613.0,23908.0,19422.0,17672.0,18000.0,19146.0,26491.0,28076.0,23678.0,20225.0,22163.0,23246.0,26424.0,25905.0,23845.0,19854.0,18092.0,20266.0,28088.0,28586.0,25513.0,22839.0,21779.0,28613.0,25217.0,22542.0,20469.0,21269.0,21645.0,21661.0,26198.0,26409.0,24301.0,22394.0,22689.0,26567.0,24167.0,24192.0,20748.0,19290.0,18482.0,21774.0,23799.0,25117.0,21028.0,20294.0,19533.0,25555.0,21293.0,19747.0,17788.0,16185.0,24400.80412371134,4,True,3,True
737,0.0,1.0,1,2–3 tree,,125.0,Self-Balancing Trees Creation,1.0,,1032.0,,,1,1,O(nlogn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,0.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.784285,1,,19931568.57,1,,29897352854,1,,5,,,Combinatorics,2%E2%80%933_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/2%E2%80%933_tree/monthly/20150701/20230731,2138.0,2202.0,2739.0,5319.0,7262.0,6651.0,7209.0,4639.0,7526.0,6564.0,4276.0,2763.0,2055.0,2153.0,2701.0,4222.0,4765.0,4792.0,3239.0,3131.0,4576.0,4930.0,3641.0,2931.0,2159.0,2059.0,2831.0,4289.0,5084.0,4318.0,2626.0,3110.0,4303.0,4349.0,4387.0,2894.0,2025.0,2381.0,2775.0,4188.0,4547.0,3961.0,2557.0,2485.0,3164.0,4062.0,3619.0,2306.0,1612.0,1594.0,2516.0,3269.0,4435.0,4151.0,2974.0,3210.0,3247.0,5666.0,3740.0,3201.0,2553.0,2176.0,2551.0,3493.0,4511.0,4066.0,2761.0,2514.0,4458.0,3331.0,3483.0,2821.0,2866.0,2050.0,3375.0,4821.0,3524.0,3810.0,2796.0,2232.0,3417.0,3186.0,3586.0,2883.0,2228.0,1809.0,1672.0,2887.0,3518.0,3120.0,2355.0,2101.0,3546.0,2269.0,2650.0,2433.0,1957.0,3426.0515463917527,4,True,3,True
738,0.0,1.0,1,Splay tree,,125.0,Self-Balancing Trees Creation,1.0,,1033.0,,,1,1,O(nlogn),,,[ Tarjan Splay Tree (1985)],Tarjan Splay Tree,1985,,,,,0.0,0,4,n: 4,O(n \log n),n: number of nodes,n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,5,,,Combinatorics,Splay_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Splay_tree/monthly/20150701/20230731,6100.0,6567.0,8240.0,10428.0,10499.0,9764.0,7418.0,8690.0,8264.0,8245.0,9091.0,7135.0,5808.0,6511.0,8071.0,11006.0,11756.0,9340.0,7809.0,7969.0,9748.0,8558.0,8525.0,6402.0,5526.0,5741.0,7284.0,10315.0,10594.0,9185.0,6998.0,7305.0,8297.0,7699.0,7946.0,6394.0,5078.0,5040.0,6701.0,8635.0,8363.0,8553.0,6244.0,6641.0,7943.0,7652.0,7430.0,5638.0,4316.0,5196.0,6184.0,8024.0,8448.0,7526.0,5288.0,5348.0,6366.0,7320.0,5898.0,5195.0,4238.0,3938.0,5059.0,7548.0,7180.0,6533.0,5712.0,5604.0,7869.0,5753.0,5796.0,5137.0,6242.0,5330.0,5587.0,7282.0,6715.0,6574.0,5322.0,6087.0,6125.0,5969.0,5354.0,4895.0,4480.0,3663.0,4624.0,5271.0,5878.0,8678.0,5374.0,4842.0,5591.0,4139.0,4084.0,3506.0,3091.0,6797.164948453608,4,True,3,True
739,0.0,1.0,1,B-tree,,125.0,Self-Balancing Trees Creation,1.0,,1034.0,,,1,1,O(n*b*log(n)/log(b))?,,,"[ Bayer, McCreight B-Tree (1970)]","Bayer, McCreight B-Tree",1970,,,,,0.0,0,4,n: 4,O(n*b*\log(n)/\log(b))?,"n: number of nodes
b: branching factor",n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of intermediary stages of tree before outputting,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,5,,,Combinatorics,B-tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/B-tree/monthly/20150701/20230731,25177.0,26867.0,29442.0,37318.0,40079.0,35730.0,32526.0,30944.0,33085.0,35317.0,36308.0,32393.0,25592.0,27612.0,30302.0,35828.0,40601.0,36364.0,31166.0,29439.0,36494.0,34631.0,34460.0,29687.0,24929.0,24768.0,29000.0,37495.0,40366.0,37303.0,31340.0,28312.0,35651.0,37501.0,37737.0,32806.0,27585.0,25992.0,27154.0,34699.0,37390.0,34477.0,30622.0,27164.0,33427.0,34493.0,32351.0,24749.0,23182.0,22107.0,26773.0,31844.0,34999.0,32415.0,26457.0,26103.0,24311.0,29655.0,30067.0,25418.0,21613.0,20802.0,21916.0,26458.0,28114.0,28127.0,30717.0,24422.0,27589.0,27302.0,26664.0,26138.0,25288.0,25930.0,22426.0,27404.0,27291.0,26375.0,25390.0,24226.0,25538.0,25205.0,25640.0,23065.0,21248.0,22025.0,21764.0,24147.0,28651.0,26867.0,25405.0,22950.0,24172.0,20992.0,22329.0,20258.0,18606.0,28876.886597938144,4,True,3,True
740,0.0,1.0,1,2–3 tree,,126.0,Self-Balancing Trees Insertion,1.0,,1059.0,,,1,1,O(logn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),Each node being changed requires constant auxiliary space to make changes; can reuse space across nodes being changed,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics,2%E2%80%933_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/2%E2%80%933_tree/monthly/20150701/20230731,2138.0,2202.0,2739.0,5319.0,7262.0,6651.0,7209.0,4639.0,7526.0,6564.0,4276.0,2763.0,2055.0,2153.0,2701.0,4222.0,4765.0,4792.0,3239.0,3131.0,4576.0,4930.0,3641.0,2931.0,2159.0,2059.0,2831.0,4289.0,5084.0,4318.0,2626.0,3110.0,4303.0,4349.0,4387.0,2894.0,2025.0,2381.0,2775.0,4188.0,4547.0,3961.0,2557.0,2485.0,3164.0,4062.0,3619.0,2306.0,1612.0,1594.0,2516.0,3269.0,4435.0,4151.0,2974.0,3210.0,3247.0,5666.0,3740.0,3201.0,2553.0,2176.0,2551.0,3493.0,4511.0,4066.0,2761.0,2514.0,4458.0,3331.0,3483.0,2821.0,2866.0,2050.0,3375.0,4821.0,3524.0,3810.0,2796.0,2232.0,3417.0,3186.0,3586.0,2883.0,2228.0,1809.0,1672.0,2887.0,3518.0,3120.0,2355.0,2101.0,3546.0,2269.0,2650.0,2433.0,1957.0,3426.0515463917527,2,True,1,True
741,0.0,1.0,1,Red–black tree,,126.0,Self-Balancing Trees Insertion,1.0,,1035.0,,,1,1,$O(1)$ amortized,,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,0.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics,Red%E2%80%93black_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Red%E2%80%93black_tree/monthly/20150701/20230731,18346.0,25197.0,23491.0,32499.0,29624.0,26223.0,20721.0,25074.0,30049.0,28035.0,27130.0,23739.0,20423.0,23360.0,26907.0,34648.0,35237.0,29117.0,25272.0,28567.0,33151.0,29523.0,26105.0,22705.0,21847.0,21243.0,23603.0,30744.0,32251.0,25072.0,23303.0,24374.0,30294.0,32184.0,27810.0,22313.0,20681.0,20429.0,22556.0,29046.0,31186.0,28513.0,23765.0,23495.0,29229.0,25613.0,23908.0,19422.0,17672.0,18000.0,19146.0,26491.0,28076.0,23678.0,20225.0,22163.0,23246.0,26424.0,25905.0,23845.0,19854.0,18092.0,20266.0,28088.0,28586.0,25513.0,22839.0,21779.0,28613.0,25217.0,22542.0,20469.0,21269.0,21645.0,21661.0,26198.0,26409.0,24301.0,22394.0,22689.0,26567.0,24167.0,24192.0,20748.0,19290.0,18482.0,21774.0,23799.0,25117.0,21028.0,20294.0,19533.0,25555.0,21293.0,19747.0,17788.0,16185.0,24400.80412371134,2,True,1,True
742,0.0,1.0,1,2–3 tree,,127.0,Self-Balancing Trees Deletion,1.0,,1060.0,,,1,1,O(logn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics,2%E2%80%933_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/2%E2%80%933_tree/monthly/20150701/20230731,2138.0,2202.0,2739.0,5319.0,7262.0,6651.0,7209.0,4639.0,7526.0,6564.0,4276.0,2763.0,2055.0,2153.0,2701.0,4222.0,4765.0,4792.0,3239.0,3131.0,4576.0,4930.0,3641.0,2931.0,2159.0,2059.0,2831.0,4289.0,5084.0,4318.0,2626.0,3110.0,4303.0,4349.0,4387.0,2894.0,2025.0,2381.0,2775.0,4188.0,4547.0,3961.0,2557.0,2485.0,3164.0,4062.0,3619.0,2306.0,1612.0,1594.0,2516.0,3269.0,4435.0,4151.0,2974.0,3210.0,3247.0,5666.0,3740.0,3201.0,2553.0,2176.0,2551.0,3493.0,4511.0,4066.0,2761.0,2514.0,4458.0,3331.0,3483.0,2821.0,2866.0,2050.0,3375.0,4821.0,3524.0,3810.0,2796.0,2232.0,3417.0,3186.0,3586.0,2883.0,2228.0,1809.0,1672.0,2887.0,3518.0,3120.0,2355.0,2101.0,3546.0,2269.0,2650.0,2433.0,1957.0,3426.0515463917527,2,True,1,True
743,0.0,1.0,1,Red–black tree,,127.0,Self-Balancing Trees Deletion,1.0,,1036.0,,,1,1,$O(1)$ amortized,,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics,Red%E2%80%93black_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Red%E2%80%93black_tree/monthly/20150701/20230731,18346.0,25197.0,23491.0,32499.0,29624.0,26223.0,20721.0,25074.0,30049.0,28035.0,27130.0,23739.0,20423.0,23360.0,26907.0,34648.0,35237.0,29117.0,25272.0,28567.0,33151.0,29523.0,26105.0,22705.0,21847.0,21243.0,23603.0,30744.0,32251.0,25072.0,23303.0,24374.0,30294.0,32184.0,27810.0,22313.0,20681.0,20429.0,22556.0,29046.0,31186.0,28513.0,23765.0,23495.0,29229.0,25613.0,23908.0,19422.0,17672.0,18000.0,19146.0,26491.0,28076.0,23678.0,20225.0,22163.0,23246.0,26424.0,25905.0,23845.0,19854.0,18092.0,20266.0,28088.0,28586.0,25513.0,22839.0,21779.0,28613.0,25217.0,22542.0,20469.0,21269.0,21645.0,21661.0,26198.0,26409.0,24301.0,22394.0,22689.0,26567.0,24167.0,24192.0,20748.0,19290.0,18482.0,21774.0,23799.0,25117.0,21028.0,20294.0,19533.0,25555.0,21293.0,19747.0,17788.0,16185.0,24400.80412371134,2,True,1,True
744,0.0,1.0,1,2–3 tree,,128.0,Self-Balancing Trees Search,1.0,,1061.0,,,1,1,O(logn),,,[ Hopcroft 2-3 Tree (1970)],Hopcroft 2-3 Tree,1970,,1,1.0,https://www.cs.drexel.edu/~amd435/courses/cs260/lectures/L-6_2-3_Trees.pdf,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),Need to keep track of constant amount of info during search (i.e. which node we're on and what direction to go),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics,2%E2%80%933_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/2%E2%80%933_tree/monthly/20150701/20230731,2138.0,2202.0,2739.0,5319.0,7262.0,6651.0,7209.0,4639.0,7526.0,6564.0,4276.0,2763.0,2055.0,2153.0,2701.0,4222.0,4765.0,4792.0,3239.0,3131.0,4576.0,4930.0,3641.0,2931.0,2159.0,2059.0,2831.0,4289.0,5084.0,4318.0,2626.0,3110.0,4303.0,4349.0,4387.0,2894.0,2025.0,2381.0,2775.0,4188.0,4547.0,3961.0,2557.0,2485.0,3164.0,4062.0,3619.0,2306.0,1612.0,1594.0,2516.0,3269.0,4435.0,4151.0,2974.0,3210.0,3247.0,5666.0,3740.0,3201.0,2553.0,2176.0,2551.0,3493.0,4511.0,4066.0,2761.0,2514.0,4458.0,3331.0,3483.0,2821.0,2866.0,2050.0,3375.0,4821.0,3524.0,3810.0,2796.0,2232.0,3417.0,3186.0,3586.0,2883.0,2228.0,1809.0,1672.0,2887.0,3518.0,3120.0,2355.0,2101.0,3546.0,2269.0,2650.0,2433.0,1957.0,3426.0515463917527,2,True,1,True
745,0.0,1.0,1,Red–black tree,,128.0,Self-Balancing Trees Search,1.0,,1037.0,,,1,1,O(logn),,,"[https://ieeexplore.ieee.org/document/4567957 Guibas, Sedgewick Red-Black Tree (1972)]","Guibas, Sedgewick Red-Black Tree",1972,https://ieeexplore.ieee.org/document/4567957,,,,1.0,0,2,n: 2,O(\log n),n: number of nodes,n,,,Word RAM,words,1,n: 1,O(1),Need to keep track of constant amount of info during search (i.e. which node we're on and what direction to go),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9.965784285,1,,19.93156857,1,,29.89735285,1,,7,,,Combinatorics,Red%E2%80%93black_tree,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Red%E2%80%93black_tree/monthly/20150701/20230731,18346.0,25197.0,23491.0,32499.0,29624.0,26223.0,20721.0,25074.0,30049.0,28035.0,27130.0,23739.0,20423.0,23360.0,26907.0,34648.0,35237.0,29117.0,25272.0,28567.0,33151.0,29523.0,26105.0,22705.0,21847.0,21243.0,23603.0,30744.0,32251.0,25072.0,23303.0,24374.0,30294.0,32184.0,27810.0,22313.0,20681.0,20429.0,22556.0,29046.0,31186.0,28513.0,23765.0,23495.0,29229.0,25613.0,23908.0,19422.0,17672.0,18000.0,19146.0,26491.0,28076.0,23678.0,20225.0,22163.0,23246.0,26424.0,25905.0,23845.0,19854.0,18092.0,20266.0,28088.0,28586.0,25513.0,22839.0,21779.0,28613.0,25217.0,22542.0,20469.0,21269.0,21645.0,21661.0,26198.0,26409.0,24301.0,22394.0,22689.0,26567.0,24167.0,24192.0,20748.0,19290.0,18482.0,21774.0,23799.0,25117.0,21028.0,20294.0,19533.0,25555.0,21293.0,19747.0,17788.0,16185.0,24400.80412371134,2,True,1,True
746,0.0,1.0,1,Transitive reduction,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,958.5,,,1,1,$O(n^\omega)$ where omega is the exponent on boolean matrix multiplication,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1972)]","Aho, Garey & Ullman",1972,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.3728596,n: 5.3728596,O(n^omega) where omega is the exponent on boolean matrix multiplication,"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,263633138.6,1,,6.95E+16,1,,1.83E+25,1,,3,,,Combinatorics,Transitive_reduction,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Transitive_reduction/monthly/20150701/20230731,876.0,798.0,934.0,1056.0,1226.0,938.0,805.0,830.0,1002.0,1060.0,1054.0,899.0,977.0,1431.0,1645.0,1263.0,1518.0,1290.0,1025.0,1064.0,1096.0,1187.0,1155.0,1000.0,1033.0,958.0,1160.0,1441.0,1386.0,992.0,1210.0,1120.0,1059.0,1266.0,1000.0,952.0,760.0,878.0,970.0,1303.0,1107.0,949.0,1088.0,1054.0,1255.0,1125.0,1054.0,971.0,911.0,867.0,977.0,1149.0,1219.0,943.0,1093.0,1322.0,1013.0,1324.0,1087.0,919.0,981.0,909.0,980.0,1184.0,1089.0,1048.0,858.0,849.0,1131.0,1394.0,1175.0,1160.0,1154.0,1118.0,1201.0,1750.0,1767.0,1602.0,1346.0,1422.0,1765.0,1547.0,1732.0,1741.0,1451.0,1541.0,1674.0,1678.0,1769.0,1490.0,1443.0,1708.0,1900.0,1807.0,2971.0,2873.0,2463.0,1244.4845360824745,5.371,False,5,True
747,0.0,1.0,1,Transitive reduction,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,949.0,,,1,1,O(n^{2.807}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1972)]","Aho, Garey & Ullman",1972,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.807,n: 5.807,O(n^2.807),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,263633138.6,1,,6.95E+16,1,,1.83E+25,1,,3,,,Combinatorics,Transitive_reduction,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Transitive_reduction/monthly/20150701/20230731,876.0,798.0,934.0,1056.0,1226.0,938.0,805.0,830.0,1002.0,1060.0,1054.0,899.0,977.0,1431.0,1645.0,1263.0,1518.0,1290.0,1025.0,1064.0,1096.0,1187.0,1155.0,1000.0,1033.0,958.0,1160.0,1441.0,1386.0,992.0,1210.0,1120.0,1059.0,1266.0,1000.0,952.0,760.0,878.0,970.0,1303.0,1107.0,949.0,1088.0,1054.0,1255.0,1125.0,1054.0,971.0,911.0,867.0,977.0,1149.0,1219.0,943.0,1093.0,1322.0,1013.0,1324.0,1087.0,919.0,981.0,909.0,980.0,1184.0,1089.0,1048.0,858.0,849.0,1131.0,1394.0,1175.0,1160.0,1154.0,1118.0,1201.0,1750.0,1767.0,1602.0,1346.0,1422.0,1765.0,1547.0,1732.0,1741.0,1451.0,1541.0,1674.0,1678.0,1769.0,1490.0,1443.0,1708.0,1900.0,1807.0,2971.0,2873.0,2463.0,1244.4845360824745,5.371,False,5,True
748,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,950.0,,,1,1,O(n^{2.8}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1978)]","Aho, Garey & Ullman",1978,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.8,n: 5.8,O(n^2.8),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,251188643.2,1.049542429,,6.31E+16,1.10153931,,1.58E+25,1.156112242,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
749,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,951.0,,,1,1,O(n^{2.78}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1979)]","Aho, Garey & Ullman",1979,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.78,n: 5.78,O(n^2.78),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,218776162.4,1.20503594,,4.79E+16,1.452111618,,1.05E+25,1.749846689,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
750,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,952.0,,,1,1,O(n^{2.52}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1980)]","Aho, Garey & Ullman",1980,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.52,n: 5.52,O(n^2.52),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,36307805.48,7.261059574,,1.32E+15,52.72298614,,4.79E+22,382.8247433,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
751,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,953.0,,,1,1,O(n^{2.518}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1980)]","Aho, Garey & Ullman",1980,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.518,n: 5.518,O(n^2.518),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,35809643.71,7.362070975,,1.28E+15,54.20008904,,4.59E+22,399.0249024,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
752,0.0,9.0,1,Transitive reduction,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,954.0,,,1,1,O(n^{2.495}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1981)]","Aho, Garey & Ullman",1981,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.495,n: 5.495,O(n^2.495),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,30549211.13,8.629785478,,9.33254E+14,74.47319739,,9.33254E+14,19633602768,,3,,,Combinatorics,Transitive_reduction,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Transitive_reduction/monthly/20150701/20230731,876.0,798.0,934.0,1056.0,1226.0,938.0,805.0,830.0,1002.0,1060.0,1054.0,899.0,977.0,1431.0,1645.0,1263.0,1518.0,1290.0,1025.0,1064.0,1096.0,1187.0,1155.0,1000.0,1033.0,958.0,1160.0,1441.0,1386.0,992.0,1210.0,1120.0,1059.0,1266.0,1000.0,952.0,760.0,878.0,970.0,1303.0,1107.0,949.0,1088.0,1054.0,1255.0,1125.0,1054.0,971.0,911.0,867.0,977.0,1149.0,1219.0,943.0,1093.0,1322.0,1013.0,1324.0,1087.0,919.0,981.0,909.0,980.0,1184.0,1089.0,1048.0,858.0,849.0,1131.0,1394.0,1175.0,1160.0,1154.0,1118.0,1201.0,1750.0,1767.0,1602.0,1346.0,1422.0,1765.0,1547.0,1732.0,1741.0,1451.0,1541.0,1674.0,1678.0,1769.0,1490.0,1443.0,1708.0,1900.0,1807.0,2971.0,2873.0,2463.0,1244.4845360824745,5.371,False,5,True
753,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,955.0,,,1,1,O(n^{2.48}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1986)]","Aho, Garey & Ullman",1986,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.48,n: 5.48,O(n^2.48),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,27542287.03,9.571940713,,7.58578E+14,91.62204901,,2.09E+22,877.0008211,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
754,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,956.0,,,1,1,O(n^{2.372}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1990)]","Aho, Garey & Ullman",1990,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.372,n: 5.372,O(n^2.372),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,13061708.88,20.18366364,,1.70608E+14,407.3802778,,2.23E+21,8222.426499,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
755,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,957.0,,,1,1,O(n^{2.373}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (2014)]","Aho, Garey & Ullman",2014,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,0.0,0,5.373,n: 5.373,O(n^2.373),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
756,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,958.0,,,1,1,O(n^{2.371}),^see above,^see above,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (2014)]","Aho, Garey & Ullman",2014,https://epubs.siam.org/doi/pdf/10.1137/0201008,,,,1.0,0,5.371,n: 5.371,O(n^2.371),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),see (boolean) matrix multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,12971792.71,20.32357011,,1.68267E+14,413.047502,,2.18E+21,8394.599865,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,True,5,True
757,0.0,0.0,0,,O(n^omega) where omega is the exponent on boolean matrix multiplication,129.0,Transitive Reduction Problem,2.0,Transitive Reduction Problem of Directed Graphs,959.0,,,1,1,O(n^3),Any distribution/runtime same regardless of input,(same general behavior regardless of input),"[https://www.sciencedirect.com/science/article/pii/0167642389900397 Gries, Martin (1989)]","Gries, Martin",1989,https://www.sciencedirect.com/science/article/pii/0167642389900397,,,,0.0,0,6,n: 6,O(n^3),"n: number of vertices
m: number of edges",n,,,Word RAM,words,5,n: 5,O(n^2),"Generally keeps track of O(1) information for every pair (u, v) of vertices? and not much additional information needed",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5.371,False,5,True
758,0.0,0.0,0,,O(2^n n \log n),131.0,Turnpike Problem,1.0,Turnpike Problem,963.0,,,1,1,O(2^n nlogn),,,[NA Outside-In algorithm (1991)],Outside-In algorithm,1991,,,,,1.0,0,8,n: 8,O(2^n nlogn),n: number of points,n,,,Word RAM,words,3,n: 3,O(n),Seems like this just needs to keep track of current configuration being tested,1.0,0.0,,0,,0,,0,0,,0,0,http://hariharan-ramesh.com/ppts/turnpike.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,True
759,0.0,0.0,0,,,132.0,n-Queens Problem,2.0,Counting Solutions; Constructing solutions,964.0,,,1,1,O(n^n),(no distribution to talk about here),(none),[ Naive Algorithm (1848)],Naive Algorithm,1848,,1,1.0,,1.0,0,8,"n: 8,
n^2: 8",O(n^n),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,2.5,True
760,0.0,0.0,0,,,132.0,n-Queens Problem,2.0,Counting Solutions; Constructing solutions,965.0,,,1,1,O(n!),(no distribution to talk about here),(none),[ Naive + 1 queen per row restriction (1850)],Naive + 1 queen per row restriction,1850,,,,,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,2.5,True
761,0.0,0.0,0,,,132.0,n-Queens Problem,2.0,Counting Solutions; Constructing solutions,966.0,,,1,1,O(n!),(no distribution to talk about here),(none),[https://dl.acm.org/citation.cfm?id=1243380 Dijkstra (1972)],Dijkstra,1972,https://dl.acm.org/citation.cfm?id=1243380,1,1.0,https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/,1.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",O(n),"Keep track of current configuration being tested and restrictions on where next queen can be placed, along with current count",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,2.5,True
762,0.0,1.0,1,Eight queens puzzle,,132.0,n-Queens Problem,2.0,Counting Solutions; Constructing solutions,968.0,,,1,1,O(n!),(no distribution to talk about here),(none),[ Gunther Determinants solution (1874)],Gunther Determinants solution,1874,,,,,0.0,0,8,"n: 8,
n^2: 8",O(n!),n: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",O(n!) ?,Seems like this one lists out all of the terms in the discriminant; presumably there is a better way but that amounts to the naive algorithm,1.0,0.0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Eight_queens_puzzle,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Eight_queens_puzzle/monthly/20150701/20230731,12740.0,15055.0,17523.0,19986.0,19898.0,17627.0,14791.0,16574.0,18031.0,22355.0,17691.0,13585.0,12905.0,15278.0,19070.0,21316.0,21270.0,19345.0,16936.0,17522.0,20467.0,21258.0,16606.0,12447.0,13209.0,14828.0,88865.0,27890.0,22882.0,19395.0,18686.0,17880.0,22296.0,20510.0,17980.0,15039.0,13302.0,14335.0,16915.0,18802.0,19100.0,15983.0,15357.0,17717.0,20656.0,43926.0,17440.0,12034.0,12705.0,12333.0,16450.0,19704.0,17643.0,15098.0,14754.0,15691.0,14985.0,18023.0,16868.0,14655.0,12555.0,11843.0,15237.0,19700.0,17741.0,18532.0,16973.0,15745.0,18863.0,16563.0,15888.0,13734.0,14777.0,14488.0,16691.0,19620.0,17027.0,16115.0,43011.0,17835.0,18888.0,18946.0,17332.0,15110.0,12907.0,12144.0,15461.0,20050.0,18000.0,16159.0,14353.0,14514.0,17683.0,15400.0,16178.0,11640.0,11368.0,18075.082474226805,3,False,2.5,False
763,0.0,0.0,0,,O(2^n),132.0,n-Queens Problem,2.0,Counting Solutions,969.0,,,1,1,O(8^n*poly(n)),(no distribution to talk about here),(none),"[http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf Rivin, Zabih (1992)]","Rivin, Zabih",1992,http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf,,,,0.0,0,8,"n: 8,
n^2: 8",O(8^n*poly(n)),n: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",O(8^n*n^2),http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,2.5,False
764,0.0,0.0,0,,2^O(n),133.0,Median String Problem,2.0,Median String Problem with Unbounded Alphabets,971.0,,,1,1,2^O(n),Any distribution/runtime same regardless of input,(same general behavior regardless of input),[ Naive Solution (1965)],Naive Solution,1965,,1.5,0.0,https://link.springer.com/chapter/10.1007/3-540-44888-8_23,1.0,0,8,n: 8,2^O(n),"n: maximum of (number of strings, max length of one of the strings)",n,,,Word RAM,words,3,n:3,O(n),"Keep track of current string being checked, current best string, and Levenshtein distances (which can be computed recursively using O(n) space)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,True
765,0.0,0.0,0,,,134.0,Frequent Words with Mismatches Problem,1.0,,972.0,,0.0,1,1,"$O(n*f_{bin}(sigma-1, k, d))$ where $f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i$",,,[ Naive solution (1940)],Naive solution,1940,,,,,1.0,0,8,n: 8,"O(n*f_{bin}(sigma-1, k, d)) where f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i","n: length of string
k: length of words
d: number of allowed mismatches
sigma: size of alphabet",n,,,Word RAM,words,8,n: 8,"O(max(n*f_{bin}(sigma-1, k, d), sigma^k)) auxiliary where f_{bin}(x, y, z) = sum_{i=0}^z C(y, i)*x^i",Keep track of counts on at most that many words,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,8,True
766,0.0,0.0,0,,,135.0,Tower of Hanoi,2.0,Tower of Hanoi,973.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Iteration based (1883)],Iteration based,1883,,1,1.0,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Only need to keep track of current configuration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,8,True,3,True
767,0.0,1.0,1,Tower of Hanoi,,135.0,Tower of Hanoi,2.0,Tower of Hanoi,974.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Recursion based (1940)],Recursion based,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,4,n: 4,O(n \log n),"Need to keep track of an O(n)-sized recursive stack, each entry requiring O(log n) space (i.e. which tower size to manipulate)",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Tower_of_Hanoi,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tower_of_Hanoi/monthly/20150701/20230731,24606.0,27391.0,34921.0,38277.0,34563.0,32332.0,30519.0,33549.0,33685.0,31431.0,29720.0,25323.0,25509.0,27090.0,35712.0,37977.0,38823.0,35245.0,34646.0,38180.0,44089.0,33269.0,34297.0,28423.0,31968.0,31524.0,41690.0,42310.0,37995.0,30343.0,30542.0,33132.0,34960.0,32152.0,27939.0,25145.0,23955.0,25950.0,31454.0,33979.0,30508.0,28105.0,26772.0,25804.0,30185.0,24733.0,25590.0,21638.0,23466.0,27565.0,34802.0,38161.0,30223.0,27869.0,31497.0,29540.0,30202.0,28720.0,28382.0,21062.0,21765.0,24641.0,28567.0,35160.0,32036.0,31608.0,30504.0,26457.0,31085.0,32466.0,34149.0,28023.0,25297.0,24479.0,33501.0,44421.0,32277.0,30904.0,31132.0,27468.0,29324.0,26291.0,24103.0,20285.0,20504.0,21123.0,31838.0,33239.0,35868.0,36173.0,30167.0,30003.0,53435.0,28367.0,26621.0,22184.0,25353.0,30621.20618556701,8,True,3,False
768,0.0,1.0,1,Tower of Hanoi,,135.0,Tower of Hanoi,2.0,Tower of Hanoi,975.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Non-recursion based (1940)],Non-recursion based,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Only need to keep track of current configuration,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Tower_of_Hanoi,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tower_of_Hanoi/monthly/20150701/20230731,24606.0,27391.0,34921.0,38277.0,34563.0,32332.0,30519.0,33549.0,33685.0,31431.0,29720.0,25323.0,25509.0,27090.0,35712.0,37977.0,38823.0,35245.0,34646.0,38180.0,44089.0,33269.0,34297.0,28423.0,31968.0,31524.0,41690.0,42310.0,37995.0,30343.0,30542.0,33132.0,34960.0,32152.0,27939.0,25145.0,23955.0,25950.0,31454.0,33979.0,30508.0,28105.0,26772.0,25804.0,30185.0,24733.0,25590.0,21638.0,23466.0,27565.0,34802.0,38161.0,30223.0,27869.0,31497.0,29540.0,30202.0,28720.0,28382.0,21062.0,21765.0,24641.0,28567.0,35160.0,32036.0,31608.0,30504.0,26457.0,31085.0,32466.0,34149.0,28023.0,25297.0,24479.0,33501.0,44421.0,32277.0,30904.0,31132.0,27468.0,29324.0,26291.0,24103.0,20285.0,20504.0,21123.0,31838.0,33239.0,35868.0,36173.0,30167.0,30003.0,53435.0,28367.0,26621.0,22184.0,25353.0,30621.20618556701,8,True,3,True
769,0.0,1.0,1,Tower of Hanoi,,135.0,Tower of Hanoi,2.0,Tower of Hanoi,976.0,,0.0,1,1,O(2^n),(no distribution to talk about here),(none),[NA Gray-code based (1940)],Gray-code based,1940,,,,,0.0,0,8,n: 8,O(2^n),n: number of disks,n,,,Word RAM,bits,3,n: 3,O(n),Need to keep track of an n-bit counter for Gray codes,1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Tower_of_Hanoi,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,Tower_of_Hanoi,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Tower_of_Hanoi/monthly/20150701/20230731,24606.0,27391.0,34921.0,38277.0,34563.0,32332.0,30519.0,33549.0,33685.0,31431.0,29720.0,25323.0,25509.0,27090.0,35712.0,37977.0,38823.0,35245.0,34646.0,38180.0,44089.0,33269.0,34297.0,28423.0,31968.0,31524.0,41690.0,42310.0,37995.0,30343.0,30542.0,33132.0,34960.0,32152.0,27939.0,25145.0,23955.0,25950.0,31454.0,33979.0,30508.0,28105.0,26772.0,25804.0,30185.0,24733.0,25590.0,21638.0,23466.0,27565.0,34802.0,38161.0,30223.0,27869.0,31497.0,29540.0,30202.0,28720.0,28382.0,21062.0,21765.0,24641.0,28567.0,35160.0,32036.0,31608.0,30504.0,26457.0,31085.0,32466.0,34149.0,28023.0,25297.0,24479.0,33501.0,44421.0,32277.0,30904.0,31132.0,27468.0,29324.0,26291.0,24103.0,20285.0,20504.0,21123.0,31838.0,33239.0,35868.0,36173.0,30167.0,30003.0,53435.0,28367.0,26621.0,22184.0,25353.0,30621.20618556701,8,True,3,True
770,0.0,0.0,0,,O(n),136.0,The Frequent Words Problem,2.0,The Frequent Words Problem,978.0,,,1,1,O(n),any distribution?,needs to read entire string,[ Naive solution (1940)],Naive solution,1940,,2,1.0,http://bioinformaticsalgorithms.com/data/debugdatasets/replication/FrequentWordsProblem.pdf,1.0,0,3,n: 3,O(n),"n: length of string
k: length of words
sigma: size of alphabet",n,,,Word RAM,words,3,n: 3,"O(max(n, \sigma^k))",Keep track of counts on at most $n-k+1$ or $\sigma^k$ words,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Statistics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,3,True
771,1.0,0.0,1,Rabin–Karp algorithm,O(n),136.0,The Frequent Words Problem,1.0,The Frequent Words Problem,1984.0,,,1,1,O(n),any distribution?,needs to read entire string,[ Rabin Karp (1987)],Rabin Karp,1987,,,,,0.0,0,3,n: 3,O(n),"n: length of string
k: length of words
sigma: size of alphabet",n,,,Word RAM,words,3,n: 3,"O(max(n, \sigma^k))?",Keep track of counts on at most $n-k+1$ or $\sigma^k$ words,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Statistics,Rabin%E2%80%93Karp_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Rabin%E2%80%93Karp_algorithm/monthly/20150701/20230731,3626.0,3579.0,4464.0,5538.0,6180.0,5475.0,4167.0,4500.0,5564.0,6407.0,7026.0,4665.0,4177.0,4683.0,5290.0,6797.0,8825.0,6970.0,6529.0,5702.0,6442.0,6903.0,7836.0,6162.0,4885.0,4568.0,4937.0,8519.0,8835.0,6942.0,4847.0,4640.0,6691.0,6838.0,6045.0,4948.0,4982.0,5125.0,6443.0,8144.0,8367.0,7383.0,6016.0,6038.0,6819.0,6601.0,5656.0,4916.0,4253.0,4869.0,4932.0,6660.0,6134.0,5636.0,5014.0,5311.0,5428.0,7632.0,6381.0,11692.0,5466.0,5265.0,5677.0,6294.0,5773.0,6617.0,5473.0,4635.0,5468.0,5533.0,5107.0,5785.0,5624.0,4376.0,4509.0,6824.0,6068.0,5754.0,5534.0,4911.0,4928.0,5478.0,6108.0,6401.0,5095.0,4760.0,5357.0,5961.0,6065.0,4836.0,4674.0,4007.0,4646.0,4496.0,4633.0,3907.0,3719.0,5736.061855670103,3,True,3,True
772,1.0,0.0,1,MD5,,138.0,One-Way Hash Functions,1.0,Unkeyed Hash Functions,980.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ MD5 (1991)],MD5,1991,,,,,1.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,"only need constant padding, 128-bit state being manipulated, and constant-sized non-linear functions (i.e. operating on O(1) bits). Also based off of Merkle-Damgard construction",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,MD5,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/MD5/monthly/20150701/20230731,52769.0,58307.0,56360.0,57786.0,54638.0,61191.0,51314.0,54707.0,58045.0,58187.0,58584.0,51250.0,47406.0,52198.0,52237.0,54061.0,52884.0,60450.0,50637.0,55324.0,56402.0,50082.0,53050.0,45965.0,42264.0,43258.0,46117.0,54695.0,53567.0,47318.0,50667.0,48433.0,54145.0,54696.0,52622.0,44616.0,43678.0,43421.0,43380.0,49590.0,47615.0,42852.0,44069.0,43413.0,46844.0,44749.0,42878.0,37095.0,36971.0,38510.0,40524.0,46451.0,45183.0,38267.0,41875.0,42181.0,42936.0,47636.0,45455.0,40960.0,36569.0,37363.0,39867.0,45344.0,43481.0,44969.0,43372.0,41194.0,48889.0,46777.0,42335.0,39391.0,44374.0,38053.0,38732.0,41330.0,40342.0,39386.0,38061.0,37752.0,42029.0,38666.0,37291.0,33566.0,31920.0,33953.0,37022.0,39997.0,41070.0,34260.0,32165.0,30164.0,35935.0,32511.0,32767.0,29030.0,26529.0,44837.32989690721,3,True,1,True
773,1.0,0.0,1,SHA-1,,138.0,One-Way Hash Functions,1.0,Unkeyed Hash Functions,981.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ SHA-1 (1993)],SHA-1,1993,,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Based off of Merkel-Damgard construction (see MD5),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,SHA-1,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SHA-1/monthly/20150701/20230731,80995.0,75593.0,69861.0,101436.0,78037.0,75374.0,70252.0,55241.0,59259.0,53693.0,52403.0,48203.0,40650.0,43801.0,45408.0,46881.0,50231.0,36150.0,26017.0,46594.0,58670.0,49656.0,49566.0,41287.0,37700.0,41834.0,42123.0,48652.0,48881.0,43259.0,44161.0,44100.0,48167.0,48035.0,44438.0,37166.0,36207.0,36087.0,36774.0,43379.0,41450.0,35062.0,39376.0,36636.0,39321.0,37953.0,39606.0,31513.0,32039.0,30967.0,34174.0,40181.0,41790.0,42302.0,42209.0,36013.0,36363.0,39211.0,34160.0,29571.0,28083.0,25839.0,28781.0,33608.0,32940.0,33523.0,32492.0,33225.0,36936.0,36045.0,32941.0,29926.0,29911.0,28402.0,29985.0,35016.0,32700.0,29995.0,31867.0,29995.0,32840.0,31158.0,29177.0,25554.0,23075.0,25212.0,27139.0,31590.0,32832.0,29228.0,28250.0,24540.0,27788.0,24084.0,23891.0,22431.0,21029.0,39877.79381443299,3,True,1,True
774,0.0,1.0,1,RIPEMD,,138.0,One-Way Hash Functions,1.0,Unkeyed Hash Functions,982.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ RIPEMD-160 (1996)],RIPEMD-160,1996,,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Likely based off of Merkel-Damgard construction (see MD5),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,RIPEMD,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/RIPEMD/monthly/20150701/20230731,2066.0,1856.0,2288.0,2296.0,2086.0,2238.0,2209.0,2347.0,2255.0,2279.0,2435.0,1746.0,1767.0,1955.0,2249.0,2197.0,2175.0,2130.0,1978.0,3228.0,2756.0,2237.0,2485.0,2372.0,2204.0,2383.0,2639.0,2862.0,2796.0,3084.0,3049.0,2962.0,3214.0,3804.0,2683.0,2496.0,2654.0,2313.0,2805.0,3210.0,2849.0,2636.0,2507.0,2477.0,2689.0,2586.0,2326.0,1964.0,2046.0,1906.0,2400.0,2340.0,2383.0,2204.0,2110.0,2466.0,2105.0,2539.0,2057.0,1811.0,1456.0,1462.0,1776.0,1731.0,1767.0,1514.0,1889.0,2204.0,2227.0,2210.0,1995.0,1898.0,1570.0,1467.0,1803.0,1846.0,1952.0,2705.0,1795.0,1967.0,1995.0,1848.0,1853.0,1597.0,1503.0,1503.0,1577.0,2129.0,2028.0,1476.0,1693.0,1341.0,1548.0,1752.0,2315.0,1563.0,1265.0,2179.474226804124,3,True,1,True
775,1.0,0.0,1,bcrypt,,138.0,One-Way Hash Functions,1.0,Unkeyed Hash Functions,983.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ bcrypt (1999)],bcrypt,1999,,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary??,generally operates in the O(1) scheme,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,bcrypt,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/bcrypt/monthly/20150701/20230731,1.0,1.0,1.0,1.0,0.0,0.0,1.0,0.0,6.0,0.0,1.0,2.0,0.0,1.0,1.0,2.0,0.0,0.0,2.0,1.0,1.0,2.0,1.0,0.0,5.0,6.0,4.0,2.0,3.0,0.0,2.0,1.0,5.0,0.0,5.0,4.0,1.0,5.0,5.0,13.0,7.0,3.0,3.0,2.0,11.0,6.0,15.0,7.0,4.0,4.0,0.0,4.0,2.0,4.0,5.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,1.0,6.0,1.0,0.0,0.0,0.0,3.0,0.0,0.0,2.0,0.0,0.0,0.0,0.0,1.0,3.0,0.0,2.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,5.0,0.0,1.0,0.0,2.0,1.0,1.0,1.0,2.0,0.0,2.061855670103093,3,True,1,True
776,1.0,0.0,1,Whirlpool (hash function),,138.0,One-Way Hash Functions,1.0,,984.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ Whirlpool (2000)],Whirlpool,2000,,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Based off of Merkel-Damgard construction (see MD5),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,Whirlpool_%28hash_function%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Whirlpool_%28hash_function%29/monthly/20150701/20230731,4.0,5.0,3.0,2.0,0.0,1.0,1.0,3.0,1.0,1.0,1.0,1.0,3.0,0.0,1.0,2.0,2.0,0.0,0.0,0.0,2.0,2.0,1.0,1.0,0.0,3.0,5.0,1.0,1.0,2.0,1.0,0.0,5.0,1.0,6.0,0.0,0.0,3028.0,3992.0,4605.0,5306.0,6812.0,6315.0,4883.0,4076.0,4215.0,4467.0,4312.0,5089.0,3934.0,4297.0,6795.0,4415.0,4772.0,4216.0,3817.0,3991.0,4563.0,1346.0,1403.0,1074.0,1009.0,1065.0,1322.0,1238.0,1123.0,1062.0,1097.0,1628.0,1508.0,1204.0,1536.0,1031.0,960.0,1052.0,983.0,1247.0,1059.0,1168.0,892.0,1260.0,1361.0,1676.0,1176.0,1413.0,1012.0,1178.0,1247.0,1514.0,1320.0,1318.0,934.0,1114.0,1207.0,1333.0,1140.0,1201.0,1498.6907216494844,3,True,1,True
777,1.0,0.0,1,SHA-2,,138.0,One-Way Hash Functions,1.0,Unkeyed Hash Functions,985.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ SHA-2 (2001)],SHA-2,2001,,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,Based off of Merkel-Damgard construction (see MD5),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,SHA-2,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SHA-2/monthly/20150701/20230731,34717.0,33399.0,37628.0,46321.0,43411.0,42492.0,41984.0,43766.0,48861.0,43604.0,43977.0,43771.0,39635.0,41476.0,42776.0,43676.0,43259.0,39306.0,41881.0,55191.0,51411.0,41898.0,47890.0,46935.0,47443.0,48428.0,51423.0,56610.0,64138.0,85976.0,75834.0,59922.0,59380.0,53806.0,51164.0,43588.0,41938.0,42350.0,40479.0,44730.0,44021.0,38678.0,41184.0,43489.0,45886.0,45814.0,48650.0,42563.0,40461.0,41036.0,38716.0,41766.0,40364.0,44342.0,43906.0,43845.0,44929.0,49094.0,48453.0,40373.0,38707.0,37504.0,40681.0,47053.0,45817.0,54310.0,54386.0,59403.0,64860.0,80877.0,79977.0,54557.0,52795.0,45845.0,50959.0,51272.0,51072.0,47923.0,49081.0,51748.0,50931.0,46308.0,46888.0,41317.0,36695.0,40045.0,45434.0,45736.0,47315.0,43801.0,46136.0,37647.0,42316.0,38703.0,54670.0,70141.0,44975.0,47545.65979381443,3,True,1,True
778,1.0,0.0,1,SHA-3,,138.0,One-Way Hash Functions,1.0,Unkeyed Hash Functions,986.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ SHA-3 (2015)],SHA-3,2015,,,,,0.0,0,3,n: 3,O(n),"n: length of string
b: width of bit blocks
r: rate parameter
d: output length",n,,,Word RAM,bits,1,"b: 3,
d: 3,
n: 1",O(b+d) auxiliary?,"only need constant padding, O(b)-bit ""absorb"" state being manipulated, constant-sized non-linear functions (i.e. operating on O(1) bits), and O(d)-sized ""squeezed"" state being manipulated. In practice b, d are O(1)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,SHA-3,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/SHA-3/monthly/20150701/20230731,9975.0,14207.0,11432.0,17878.0,14102.0,13152.0,13986.0,13179.0,14388.0,13555.0,14019.0,14240.0,11245.0,11832.0,12093.0,13659.0,13435.0,12406.0,13830.0,33110.0,22128.0,15599.0,16395.0,15985.0,16718.0,19202.0,21976.0,27379.0,24474.0,25216.0,27319.0,24148.0,25034.0,22818.0,20992.0,18053.0,16364.0,16920.0,21865.0,24437.0,23685.0,19328.0,19652.0,20542.0,19692.0,16479.0,17023.0,13497.0,13580.0,13447.0,13916.0,15632.0,15360.0,13332.0,17770.0,16126.0,14963.0,15601.0,15368.0,13554.0,13057.0,12126.0,12308.0,14579.0,13713.0,13551.0,14301.0,15155.0,17926.0,18123.0,17448.0,15267.0,14570.0,13961.0,15036.0,16016.0,15643.0,14419.0,15379.0,15611.0,16439.0,15005.0,14925.0,13220.0,12301.0,12877.0,13516.0,14531.0,14369.0,14150.0,13912.0,12886.0,15953.0,13432.0,13342.0,11836.0,11425.0,16181.443298969072,3,True,1,True
779,0.0,1.0,1,BLAKE (hash function),,138.0,One-Way Hash Functions,1.0,Optional Key?,987.0,,0.0,0,1,O(n),any distribution?,needs to read entire string,[ BLAKE2 (2012)],BLAKE2,2012,,,,,0.0,0,3,n: 3,O(n),n: length of string,n,,,Word RAM,bits,1,n: 1,O(1) auxiliary?,"Generally processes the message in O(1)-sized chunks; parameters into the ""compress"" function are also technically O(1)-sized",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,BLAKE_%28hash_function%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/BLAKE_%28hash_function%29/monthly/20150701/20230731,898.0,1280.0,1011.0,1258.0,1657.0,1871.0,1655.0,1637.0,1623.0,1636.0,2626.0,2336.0,2242.0,2205.0,2129.0,2257.0,2705.0,2498.0,2667.0,4824.0,4220.0,2955.0,3442.0,4304.0,4265.0,3883.0,3790.0,4197.0,4369.0,5808.0,15511.0,6498.0,5615.0,4543.0,4958.0,4024.0,4078.0,3735.0,3653.0,3806.0,3819.0,3519.0,3574.0,3344.0,3487.0,3351.0,4334.0,2988.0,5189.0,3349.0,2926.0,3408.0,3499.0,3196.0,5914.0,4141.0,3700.0,4367.0,4525.0,4126.0,3478.0,3786.0,3561.0,3970.0,3849.0,3765.0,4288.0,4642.0,5432.0,5127.0,5526.0,4694.0,4628.0,4200.0,4225.0,4556.0,4975.0,5040.0,5740.0,4932.0,5744.0,5372.0,4578.0,3965.0,3575.0,3914.0,4103.0,4052.0,4151.0,4070.0,3996.0,4224.0,4957.0,4936.0,4817.0,4726.0,4441.0,3932.577319587629,3,True,1,True
780,1.0,0.0,1,Shamir's secret sharing,,139.0,Secret Sharing,1.0,,988.0,,,1,1,$O(t^2)$ for secret computation? (requires polynomial interpolation),,,[ Shamir's scheme (1979)],Shamir's scheme,1979,,,,,1.0,0,5,"n: 5,
t: 5",O(t^2) for secret computation? (requires polynomial interpolation),"n: size of the group the secret is being shared with
t: threshold number of players",n,,,Word RAM,words,5,"n: 5,
t: 5","O(1) per person, O(t^2) to figure out secret?",Each person only needs to keep track of a single point (O(1) info); figuring out secret depends on polynomial interpolation algorithm,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,1,,,1,,,1,,4,,,Cryptography,Shamir%27s_secret_sharing,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shamir%27s_secret_sharing/monthly/20150701/20230731,39.0,24.0,20.0,17.0,20.0,12.0,13.0,9.0,14.0,15.0,25.0,12.0,7.0,14.0,13.0,15.0,25.0,15.0,15.0,22.0,26.0,17.0,19.0,27.0,15.0,25.0,17.0,15.0,20.0,21.0,31.0,11.0,26.0,12.0,20.0,22.0,19.0,42.0,15.0,23.0,25.0,29.0,24.0,19.0,32.0,50.0,26.0,24.0,21.0,19.0,20.0,18.0,23.0,12.0,27.0,32.0,16.0,17.0,12.0,32.0,13.0,16.0,18.0,11.0,24.0,19.0,28.0,14.0,32.0,14.0,23.0,17.0,27.0,22.0,20.0,48.0,47.0,27.0,57.0,21.0,21.0,18.0,22.0,19.0,16.0,9.0,18.0,16.0,16.0,14.0,1432.0,5219.0,6962.0,6132.0,8134.0,5493.0,4861.0,413.8865979381444,5,True,5,True
781,0.0,1.0,1,Secret sharing,,139.0,Secret Sharing,1.0,,989.0,,,1,1,$O(t^3)$ for secret computation? (requires linear solver),,,[ Blakley's scheme (1979)],Blakley's scheme,1979,,,,,0.0,0,6,"n: 6,
5: 6",O(t^3) for secret computation? (requires linear solver),"n: size of the group the secret is being shared with
t: threshold number of players",n,,,Word RAM,words,5,"n: 5,
t: 5","O(t) per person, O(t^2) to figure out secret","Each person needs to keep track of coefficients of hyperplane; figuring out secret requires O(t) hyperplanes, with O(t) coefficients",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Cryptography,Secret_sharing,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Secret_sharing/monthly/20150701/20230731,3458.0,2978.0,3182.0,3752.0,4069.0,3848.0,3779.0,3910.0,4505.0,4784.0,4185.0,3464.0,3619.0,3294.0,3405.0,3741.0,4344.0,4335.0,4447.0,4031.0,6511.0,4329.0,4634.0,4396.0,4027.0,4947.0,4664.0,5225.0,6197.0,7826.0,6964.0,5455.0,5951.0,5636.0,5236.0,4504.0,4358.0,4551.0,4208.0,4696.0,5117.0,4721.0,4527.0,4221.0,4444.0,4466.0,4308.0,3798.0,3785.0,3338.0,3506.0,4341.0,4234.0,3839.0,6100.0,3700.0,4719.0,4725.0,4153.0,4754.0,3540.0,3034.0,6619.0,8540.0,3758.0,3959.0,4194.0,6125.0,6450.0,4552.0,4408.0,3450.0,3216.0,3306.0,3375.0,3461.0,3814.0,3786.0,3691.0,3370.0,3338.0,3325.0,3543.0,3314.0,2641.0,3447.0,3120.0,3094.0,3466.0,3751.0,2834.0,2417.0,2733.0,2691.0,2758.0,2486.0,2385.0,4187.958762886598,5,False,5,True
782,1.0,0.0,1,Bisection method,,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,990.0,,0.0,1,1,$O(log((b-a)/\epsilon)$,,,[ Bisection method (-150)],Bisection method,-150,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store current endpoint values; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Bisection_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Bisection_method/monthly/20150701/20230731,8957.0,11644.0,20776.0,16659.0,15940.0,12249.0,17981.0,17580.0,17685.0,15749.0,14450.0,12377.0,8713.0,11937.0,20615.0,20334.0,19102.0,14304.0,17158.0,20390.0,20492.0,17825.0,16175.0,14674.0,11250.0,12588.0,18402.0,21244.0,19599.0,15642.0,18301.0,19708.0,20470.0,18986.0,17734.0,12333.0,11996.0,12668.0,17119.0,22059.0,17355.0,14759.0,16303.0,18348.0,17917.0,17730.0,15764.0,11628.0,10454.0,11130.0,18400.0,19773.0,18385.0,13611.0,15029.0,17993.0,15850.0,19283.0,18705.0,16949.0,11942.0,11595.0,18413.0,21441.0,20580.0,17307.0,16683.0,18952.0,20139.0,17270.0,16214.0,17163.0,14043.0,14133.0,16649.0,19805.0,16375.0,14450.0,14102.0,16236.0,15108.0,13865.0,13020.0,11083.0,8958.0,8934.0,12993.0,14061.0,13840.0,11244.0,11932.0,12909.0,13781.0,11506.0,11912.0,9864.0,7607.0,15622.061855670105,3,True,1,True
783,1.0,0.0,1,Regula falsi,,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,991.0,,0.0,1,1,O(n),,,[ Regula Falsi method (-200)],Regula Falsi method,-200,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store current endpoint values; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Regula_falsi,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Regula_falsi/monthly/20150701/20230731,76.0,78.0,118.0,77.0,91.0,64.0,61.0,96.0,83.0,86.0,72.0,60.0,42.0,66.0,76.0,95.0,66.0,63.0,73.0,77.0,67.0,77.0,66.0,55.0,45.0,42.0,62.0,43.0,56.0,43.0,50.0,62.0,57.0,60.0,67.0,53.0,42.0,54.0,63.0,100.0,73.0,50.0,54.0,60.0,56.0,66.0,51.0,57.0,1298.0,2951.0,4447.0,5160.0,5046.0,4355.0,4623.0,5257.0,4214.0,4007.0,5000.0,4096.0,3562.0,3475.0,5721.0,6900.0,5848.0,6740.0,5594.0,5999.0,6404.0,5370.0,4547.0,4834.0,5520.0,4759.0,5364.0,4978.0,5265.0,4102.0,4524.0,4930.0,4865.0,4144.0,3745.0,3143.0,2020.0,2112.0,3354.0,3526.0,3650.0,3319.0,3222.0,3474.0,4218.0,3375.0,3816.0,2846.0,2477.0,2220.072164948453,3,True,1,True
784,1.0,0.0,1,Secant method,,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,992.0,,0.0,1,1,(order of convergence = phi~1.618),,,[ Secant method (-1400)],Secant method,-1400,,1,1.0,,1.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store previous 2 estimates x_i and x_{i-1}; iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,Secant_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Secant_method/monthly/20150701/20230731,4835.0,6127.0,9260.0,11033.0,10339.0,8242.0,7747.0,10799.0,9909.0,9905.0,8350.0,5389.0,4411.0,5859.0,9417.0,11535.0,10582.0,8023.0,8012.0,11433.0,11288.0,9792.0,9069.0,6305.0,5405.0,6327.0,9663.0,12339.0,11120.0,8663.0,8906.0,12839.0,11273.0,11010.0,9819.0,6277.0,5639.0,6320.0,9576.0,12156.0,10535.0,7662.0,8463.0,10637.0,11062.0,10738.0,8992.0,5738.0,5214.0,5704.0,9972.0,11745.0,10093.0,8044.0,7631.0,10580.0,8775.0,8978.0,9341.0,7616.0,5560.0,5737.0,9756.0,11800.0,10611.0,9383.0,8149.0,9419.0,11773.0,9399.0,7822.0,7506.0,7344.0,7206.0,9910.0,10767.0,10569.0,8149.0,8133.0,8703.0,9928.0,9497.0,7832.0,5877.0,4835.0,4850.0,7728.0,8545.0,8902.0,7104.0,6486.0,7469.0,8330.0,7119.0,7238.0,5635.0,4621.0,8579.432989690722,3,True,1,True
785,1.0,0.0,1,Newton's method,,140.0,Solutions to Nonlinear Equations,1.0,Solutions to Nonlinear Equations,993.0,,0.0,1,1,(order of convergence = 2),,,[ Newton's method (1669)],Newton's method,1669,,,,,0.0,0,3,n_max: 3,O(n_{max}),"epsilon: (additive) tolerance error
a, b: endpoint values, with b>a
n_{max}: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,O(1),"Store current estimate x_i and the derivative f' (assuming this takes O(1) space); iterations take O(1) time and thus O(1) space, and space can be re-used across iterations",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Numerical Analysis,Newton%27s_method,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Newton%27s_method/monthly/20150701/20230731,35995.0,36186.0,51307.0,69379.0,65054.0,54249.0,48495.0,58715.0,59404.0,59530.0,55196.0,43277.0,35350.0,38631.0,53430.0,66711.0,67770.0,52901.0,50653.0,57170.0,63238.0,56090.0,58000.0,43402.0,38201.0,47950.0,57247.0,72729.0,74201.0,58571.0,56505.0,63116.0,65225.0,66441.0,63703.0,44967.0,42264.0,44292.0,57016.0,73368.0,72635.0,57463.0,54749.0,61912.0,69336.0,66150.0,58584.0,42052.0,38197.0,39050.0,51930.0,66300.0,60250.0,46270.0,47433.0,55517.0,50655.0,55421.0,55720.0,48810.0,39193.0,35336.0,50334.0,64222.0,58798.0,50813.0,54363.0,54664.0,66373.0,56168.0,49115.0,44511.0,41285.0,38382.0,50082.0,59302.0,54215.0,45009.0,46917.0,48996.0,51738.0,47667.0,47612.0,37819.0,33201.0,33703.0,45334.0,51610.0,52607.0,41553.0,42080.0,43569.0,51653.0,44820.0,46185.0,37653.0,33947.0,52115.38144329897,3,True,1,True
786,0.0,1.0,1,Block cipher,,141.0,Block Ciphers,1.0,Block Ciphers,994.0,,0.0,0,1,O(n),,,[NA Lucifer / DES (1976)],Lucifer / DES,1976,,,,,1.0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,"Network has a constant number of rounds and operates on O(n) bits, thus structure should require O(n) bits to describe",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Data_Encryption_Standard,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,Block_cipher,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Block_cipher/monthly/20150701/20230731,8409.0,9611.0,11442.0,12676.0,12564.0,11571.0,11854.0,12427.0,13903.0,13692.0,12246.0,9624.0,8863.0,9990.0,11140.0,12080.0,12685.0,11705.0,11687.0,12398.0,14360.0,12060.0,12477.0,10237.0,9847.0,10263.0,11340.0,14430.0,13742.0,12307.0,12350.0,12839.0,12466.0,12546.0,11511.0,9168.0,9338.0,10273.0,10672.0,12124.0,11489.0,11199.0,11278.0,11108.0,11995.0,11561.0,10665.0,8962.0,8435.0,8700.0,10362.0,11274.0,10220.0,9693.0,9779.0,10692.0,9848.0,11737.0,10279.0,9080.0,7932.0,7638.0,9628.0,12700.0,11230.0,10964.0,9655.0,10117.0,11573.0,9691.0,9732.0,8713.0,8002.0,7891.0,8730.0,10108.0,9540.0,8579.0,8999.0,9287.0,10226.0,9043.0,9041.0,7439.0,6523.0,6531.0,8422.0,8727.0,8950.0,7531.0,7127.0,7649.0,7665.0,6471.0,7528.0,6282.0,5895.0,10258.061855670105,3,True,1,False
787,1.0,,1,International Data Encryption Algorithm,,141.0,Block Ciphers,1.0,Block Ciphers,995.0,,0.0,0,1,O(n),,,[NA IDEA (1991)],IDEA,1991,,,,,0.0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,(^see above),1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,International_Data_Encryption_Algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/International_Data_Encryption_Algorithm/monthly/20150701/20230731,3227.0,3345.0,3911.0,4262.0,4663.0,4092.0,4440.0,4345.0,4549.0,3779.0,4153.0,3633.0,2872.0,3565.0,3309.0,3646.0,4383.0,3524.0,3287.0,3202.0,3799.0,3826.0,4550.0,3661.0,2724.0,3393.0,3271.0,4004.0,4552.0,3276.0,3307.0,3246.0,3797.0,3694.0,4505.0,2613.0,2757.0,2998.0,3555.0,4007.0,3580.0,3799.0,3474.0,3634.0,3625.0,3576.0,4542.0,2795.0,2476.0,2602.0,3388.0,3748.0,3865.0,3384.0,3011.0,3415.0,2822.0,3470.0,2474.0,2419.0,1876.0,1836.0,2760.0,3280.0,3062.0,2412.0,2316.0,1982.0,2720.0,2291.0,2139.0,1990.0,2167.0,1511.0,1821.0,2208.0,2457.0,2308.0,1978.0,1920.0,3460.0,2197.0,2121.0,1616.0,1534.0,1484.0,1792.0,2200.0,2556.0,1770.0,1753.0,1471.0,1780.0,1297.0,1897.0,1233.0,1207.0,2991.9896907216494,3,True,1,False
788,1.0,0.0,1,RC5,,141.0,Block Ciphers,1.0,Block Ciphers,996.0,,0.0,0,1,O(n),,,[https://link.springer.com/chapter/10.1007/3-540-60590-8_7 RC5 (1994)],RC5,1994,https://link.springer.com/chapter/10.1007/3-540-60590-8_7,,,,0.0,0,3,n: 3,O(n),"n: text length (block size)
k: key length
r: number of rounds
w: length of word",n,,,Word RAM,bits,1,"k: 3,
r: 3,
w: 3,
n: 1",O(k+rw)?,"Requires additional O(k/w)-length array of O(w)-size words (temporary working array) and O(r)-length array of O(w)-size words, as key-independent pseudorandom array.",1.0,0.0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/RC5,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,RC5,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/RC5/monthly/20150701/20230731,2796.0,2707.0,2985.0,2873.0,3033.0,2731.0,2596.0,2881.0,3443.0,2964.0,2908.0,2693.0,2318.0,3442.0,2847.0,2734.0,3050.0,2581.0,2333.0,2441.0,3610.0,2388.0,2777.0,2525.0,2422.0,2441.0,2379.0,2730.0,2864.0,2539.0,2784.0,2418.0,2606.0,2569.0,2712.0,1884.0,2016.0,2205.0,2258.0,2064.0,2273.0,2557.0,1896.0,2228.0,2493.0,2191.0,2616.0,1447.0,1625.0,1614.0,1645.0,1909.0,2024.0,1767.0,1691.0,1865.0,1851.0,1947.0,1815.0,1543.0,1356.0,1279.0,1643.0,1913.0,2186.0,1810.0,1576.0,1359.0,1645.0,1492.0,1547.0,1442.0,1444.0,1234.0,1343.0,1760.0,1640.0,1506.0,1308.0,1588.0,1542.0,1167.0,1410.0,1424.0,1057.0,1145.0,1363.0,2388.0,1835.0,1529.0,1506.0,1102.0,1359.0,1225.0,1381.0,1185.0,1028.0,2064.546391752577,3,True,1,True
789,1.0,0.0,1,Block cipher,,141.0,Block Ciphers,1.0,Block Ciphers,997.0,,0.0,0,1,O(n),,,[https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf Rijndael / AES (2001)],Rijndael / AES,2001,https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf,,,,0.0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,"Network generally operates on the O(n) bits over O(k) rounds, each round having roughly the same structure (so structure of rounds require O(1) bits to describe)",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,Block_cipher,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Block_cipher/monthly/20150701/20230731,8409.0,9611.0,11442.0,12676.0,12564.0,11571.0,11854.0,12427.0,13903.0,13692.0,12246.0,9624.0,8863.0,9990.0,11140.0,12080.0,12685.0,11705.0,11687.0,12398.0,14360.0,12060.0,12477.0,10237.0,9847.0,10263.0,11340.0,14430.0,13742.0,12307.0,12350.0,12839.0,12466.0,12546.0,11511.0,9168.0,9338.0,10273.0,10672.0,12124.0,11489.0,11199.0,11278.0,11108.0,11995.0,11561.0,10665.0,8962.0,8435.0,8700.0,10362.0,11274.0,10220.0,9693.0,9779.0,10692.0,9848.0,11737.0,10279.0,9080.0,7932.0,7638.0,9628.0,12700.0,11230.0,10964.0,9655.0,10117.0,11573.0,9691.0,9732.0,8713.0,8002.0,7891.0,8730.0,10108.0,9540.0,8579.0,8999.0,9287.0,10226.0,9043.0,9041.0,7439.0,6523.0,6531.0,8422.0,8727.0,8950.0,7531.0,7127.0,7649.0,7665.0,6471.0,7528.0,6282.0,5895.0,10258.061855670105,3,True,1,False
790,1.0,0.0,1,Blowfish (cipher),,141.0,Block Ciphers,1.0,Block Ciphers,998.0,,0.0,0,1,O(n),,,[https://link.springer.com/chapter/10.1007/3-540-58108-1_24 Blowfish (1993)],Blowfish,1993,https://link.springer.com/chapter/10.1007/3-540-58108-1_24,,,,0.0,0,3,n: 3,O(n),"n: text length (block size)
k: key length",n,,,Word RAM,bits,3,n: 3,O(n)?,"Network has a constant number of rounds and operates on O(n) bits, thus structure should require O(n) bits to describe",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,6,,,Cryptography,Blowfish_%28cipher%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Blowfish_%28cipher%29/monthly/20150701/20230731,13425.0,15058.0,15408.0,15534.0,15668.0,14294.0,15249.0,16535.0,16751.0,15387.0,14580.0,13045.0,12589.0,15286.0,14581.0,14268.0,14958.0,13459.0,13686.0,14768.0,16567.0,13396.0,13779.0,11995.0,11961.0,13133.0,12289.0,14404.0,14362.0,12046.0,13588.0,13409.0,14393.0,14096.0,13872.0,11212.0,11526.0,12066.0,10616.0,11457.0,11272.0,10529.0,10535.0,11015.0,11730.0,11314.0,10465.0,8775.0,8701.0,8673.0,9441.0,10117.0,9707.0,8968.0,9977.0,10475.0,9984.0,11224.0,10362.0,9150.0,7854.0,7957.0,8550.0,9734.0,10099.0,9921.0,9246.0,9234.0,10142.0,9208.0,8849.0,7566.0,10731.0,6911.0,7516.0,8224.0,8260.0,7723.0,7390.0,7514.0,7554.0,7299.0,10791.0,6937.0,6550.0,6948.0,7201.0,8040.0,8451.0,6911.0,7568.0,6807.0,7795.0,6654.0,7249.0,5941.0,5998.0,10870.443298969072,3,True,1,False
791,1.0,0.0,1,Gaussian elimination,,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,999.0,,,1,1,O(n^3),,,[ Gaussian elimination (-150)],Gaussian elimination,-150,,1,1.0,,1.0,0,8,n: 8,O(n^3),n: text length (block size),n,,,Word/Real RAM,words,5,n: 5,O(n^2),Requires computation of inverse of O(n^2)-sized Vandermonde matrix,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000000.0,,1000000000000.0,,1e+18,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,3,,,Numerical Analysis,Gaussian_elimination,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Gaussian_elimination/monthly/20150701/20230731,15718.0,18251.0,31192.0,33843.0,31236.0,25689.0,26522.0,29663.0,29500.0,28482.0,25850.0,17963.0,14537.0,20206.0,31157.0,36059.0,35924.0,25426.0,27779.0,30919.0,32654.0,30338.0,30035.0,19964.0,17397.0,21278.0,33339.0,38649.0,36315.0,28428.0,31472.0,33819.0,35398.0,37122.0,31551.0,18818.0,16758.0,21660.0,36074.0,40546.0,36621.0,31146.0,31395.0,34144.0,35808.0,30730.0,26582.0,18804.0,18064.0,22081.0,34593.0,37075.0,35316.0,28111.0,30437.0,30844.0,27609.0,31577.0,32235.0,25616.0,20464.0,22798.0,36561.0,40045.0,37827.0,32568.0,31988.0,32124.0,37719.0,32258.0,26482.0,23534.0,20020.0,23377.0,31353.0,34387.0,32118.0,25530.0,28008.0,27300.0,28962.0,27081.0,25393.0,18963.0,15535.0,18079.0,28520.0,33621.0,32247.0,22699.0,23865.0,24857.0,28613.0,26085.0,26843.0,19624.0,16170.0,28246.77319587629,5,False,3,False
792,0.0,0.0,0,,,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,1000.0,,,1,1,O(n^2),,,[https://www.jstor.org/stable/2004623?origin=crossref&seq=5#metadata_info_tab_contents Bjorck (1970)],Bjorck,1970,https://www.jstor.org/stable/2004623?origin=crossref&seq=5#metadata_info_tab_contents,0.5,0.0,https://www.ams.org/journals/mcom/1970-24-112/S0025-5718-1970-0290541-1/S0025-5718-1970-0290541-1.pdf,1.0,3->4,5,n: 5,O(n^2),n: text length (block size),n,,,Word/Real RAM,words,3,n: 3,O(n),https://academic.oup.com/imajna/article/8/4/473/758789?login=true,0.0,0.0,,0,,0,,0,0,,0,0,,,,,,1000.0,0.258925412,1000000.0,0.584893193,1000000000.0,0.995262315,1000000.0,1000,0.258925412,1E+12,1000000,0.584893193,1.00E+18,1000000000,0.995262315,3,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
793,0.0,0.0,0,,,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,1001.0,,,1,1,O(n^2),,,[https://academic.oup.com/imajna/article/8/4/473/758789?login=true Higham (1988)],Higham,1988,https://academic.oup.com/imajna/article/8/4/473/758789?login=true,,,,0.0,0,5,n: 5,O(n^2),n: text length (block size),n,,,Word/Real RAM,words,3,n: 3,O(n),https://academic.oup.com/imajna/article/8/4/473/758789?login=true,0.0,1.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,3,,,Numerical Analysis,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,5,True,3,True
794,0.0,1.0,1,Arnoldi iteration,,142.0,Polynomial Interpolation,1.0,2-D Polynomial Interpolation,1002.0,,,1,1,O(n^2),,,"[https://link.springer.com/article/10.1007/BF01990529 Calvetti, Reichel (1993)]","Calvetti, Reichel",1993,https://link.springer.com/article/10.1007/BF01990529,,,,0.0,0,5,n: 5,O(n^2),n: text length (block size),n,,,Word/Real RAM,words,3,n: 3,O(n)?,(maybe similar to the other O(n^2) algorithms?),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,3,,,Numerical Analysis,Arnoldi_iteration,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Arnoldi_iteration/monthly/20150701/20230731,1607.0,1395.0,1572.0,1850.0,2004.0,1867.0,1581.0,1710.0,1757.0,2231.0,2018.0,1582.0,1330.0,1277.0,1449.0,1764.0,2155.0,1968.0,1734.0,1752.0,2031.0,2024.0,2080.0,1664.0,1410.0,1488.0,1427.0,1939.0,2466.0,2166.0,1949.0,1644.0,2060.0,2186.0,2448.0,1841.0,1566.0,1413.0,1438.0,1948.0,2257.0,2392.0,1849.0,1643.0,2066.0,2243.0,2029.0,1644.0,1612.0,1298.0,1484.0,2131.0,2459.0,2427.0,1802.0,1907.0,1774.0,1987.0,2101.0,1990.0,1597.0,1658.0,1849.0,2704.0,2395.0,2569.0,2111.0,1865.0,2292.0,2253.0,2199.0,2077.0,1587.0,1503.0,1690.0,2590.0,2661.0,2178.0,1906.0,1809.0,2031.0,2450.0,2233.0,1907.0,1732.0,1690.0,1774.0,2413.0,2759.0,2261.0,1985.0,1722.0,2379.0,2134.0,2263.0,2238.0,1694.0,1938.5979381443296,5,True,3,True
795,1.0,0.0,1,Euclidean algorithm,,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,1003.0,,,1,1,O(n^2),,,[ Euclid's algorithm (-300)],Euclid's algorithm,-300,,1,1.0,,1.0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),Store only the current values being iterated on,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Statistics,Euclidean_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Euclidean_algorithm/monthly/20150701/20230731,27309.0,24161.0,37017.0,40319.0,35268.0,27011.0,30979.0,35035.0,33203.0,33852.0,30076.0,26892.0,23893.0,26980.0,41395.0,42162.0,40546.0,29813.0,35130.0,36279.0,36182.0,30181.0,28299.0,26172.0,23438.0,23142.0,36295.0,42625.0,37717.0,29317.0,33224.0,33351.0,34696.0,29637.0,25621.0,22176.0,22851.0,26618.0,34714.0,35854.0,29618.0,23859.0,27437.0,29084.0,29767.0,30063.0,30246.0,21272.0,20748.0,21564.0,42570.0,38528.0,32134.0,25955.0,30027.0,31507.0,31122.0,31657.0,27680.0,25262.0,22415.0,23155.0,33902.0,35642.0,34078.0,30955.0,29489.0,31946.0,36498.0,30327.0,25721.0,23217.0,24010.0,24592.0,36120.0,39382.0,34046.0,26151.0,29362.0,31821.0,32349.0,25395.0,24548.0,20927.0,17784.0,17777.0,26511.0,33051.0,28731.0,21415.0,23224.0,23753.0,29254.0,21972.0,21593.0,18049.0,16578.0,29435.77319587629,4.011,False,3,True
796,1.0,0.0,1,Lehmer's GCD algorithm,,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,1004.0,,,1,1,O(n^2),,,[ Lehmer's GCD algorithm (1940)],Lehmer's GCD algorithm,1940,,,,,0.0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),"Store only the current values being iterated on, and an O(1)-sized matrix with O(n)-bit numbers",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Statistics,Lehmer%27s_GCD_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Lehmer%27s_GCD_algorithm/monthly/20150701/20230731,345.0,297.0,380.0,470.0,541.0,361.0,397.0,385.0,327.0,318.0,318.0,322.0,236.0,272.0,270.0,335.0,337.0,318.0,405.0,426.0,473.0,558.0,561.0,907.0,995.0,419.0,410.0,519.0,513.0,384.0,434.0,506.0,501.0,443.0,641.0,446.0,452.0,548.0,539.0,597.0,459.0,466.0,547.0,578.0,637.0,736.0,590.0,932.0,717.0,700.0,759.0,840.0,795.0,719.0,748.0,718.0,758.0,905.0,825.0,699.0,576.0,576.0,584.0,724.0,652.0,1002.0,689.0,534.0,810.0,530.0,674.0,460.0,891.0,929.0,461.0,478.0,486.0,443.0,435.0,386.0,421.0,355.0,380.0,502.0,452.0,389.0,388.0,503.0,384.0,411.0,712.0,440.0,448.0,307.0,439.0,340.0,328.0,531.4742268041238,4.011,False,3,True
797,1.0,0.0,1,Binary GCD algorithm,,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,1005.0,,,1,1,O(n^2),,,[https://arxiv.org/abs/0910.0095 Binary GCD algorithm (1967)],Binary GCD algorithm,1967,https://arxiv.org/abs/0910.0095,,,,0.0,0,5,n: 5,O(n^2),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n),Store only the current values being iterated on,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Statistics,Binary_GCD_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Binary_GCD_algorithm/monthly/20150701/20230731,1737.0,1805.0,2482.0,2903.0,3178.0,2592.0,2545.0,2407.0,3069.0,2565.0,2214.0,1959.0,1678.0,1877.0,2226.0,3073.0,2876.0,2395.0,2498.0,2694.0,3436.0,2855.0,2297.0,2037.0,2679.0,2195.0,2722.0,3393.0,3328.0,2232.0,2498.0,2775.0,3103.0,2832.0,2636.0,1925.0,2049.0,2374.0,2499.0,2691.0,2584.0,2041.0,1964.0,2117.0,2761.0,2578.0,1635.0,1517.0,1362.0,1465.0,2048.0,2541.0,2551.0,1746.0,2047.0,1977.0,2713.0,2346.0,2105.0,1623.0,1794.0,1709.0,2292.0,2933.0,2988.0,3119.0,2055.0,2080.0,2616.0,1932.0,1822.0,1461.0,1640.0,1445.0,2166.0,2958.0,2849.0,2509.0,1974.0,1699.0,2042.0,1584.0,1318.0,1150.0,1226.0,1216.0,1757.0,1714.0,1868.0,1596.0,2235.0,1716.0,2075.0,1382.0,1528.0,1082.0,1054.0,2202.4123711340208,4.011,False,3,True
798,0.0,1.0,1,Binary GCD algorithm,,143.0,Greatest Common Divisor,1.0,Greatest Common Divisor,,,,1,1,O(n log^2 n log log n),,,"[https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf Sthele, Zimmermann (2006)]","Sthele, Zimmermann",2006,https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf,,,,1.0,0,4.011,n: 4.011,O(n \log^2 n \log \log n),n: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,O(n)??,Depends on Schonhage-Strassen multiplication,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,33056.34051,30.25138248,0.053017367,86044249.58,11621.92715,0.152378438,1.46555E+11,6823367.361,0.269244925,4,,,Statistics,Binary_GCD_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Binary_GCD_algorithm/monthly/20150701/20230731,1737.0,1805.0,2482.0,2903.0,3178.0,2592.0,2545.0,2407.0,3069.0,2565.0,2214.0,1959.0,1678.0,1877.0,2226.0,3073.0,2876.0,2395.0,2498.0,2694.0,3436.0,2855.0,2297.0,2037.0,2679.0,2195.0,2722.0,3393.0,3328.0,2232.0,2498.0,2775.0,3103.0,2832.0,2636.0,1925.0,2049.0,2374.0,2499.0,2691.0,2584.0,2041.0,1964.0,2117.0,2761.0,2578.0,1635.0,1517.0,1362.0,1465.0,2048.0,2541.0,2551.0,1746.0,2047.0,1977.0,2713.0,2346.0,2105.0,1623.0,1794.0,1709.0,2292.0,2933.0,2988.0,3119.0,2055.0,2080.0,2616.0,1932.0,1822.0,1461.0,1640.0,1445.0,2166.0,2958.0,2849.0,2509.0,1974.0,1699.0,2042.0,1584.0,1318.0,1150.0,1226.0,1216.0,1757.0,1714.0,1868.0,1596.0,2235.0,1716.0,2075.0,1382.0,1528.0,1082.0,1054.0,2202.4123711340208,4.011,True,3,True
799,0.0,0.0,0,,,145.0,Interval Scheduling,2.0,Weighted Activity Selection Problem,1006.0,,,1,1,O(2^n),Any distribution,(behavior same regardless of input),[ Brute force algorithm (1940)],Brute force algorithm,1940,,,,,1.0,0,8,n: 8,O(2^n),n: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,O(n),Need to keep track of which subset is being checked,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,inf,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
800,0.0,0.0,0,,,145.0,Interval Scheduling,1.0,Weighted Activity Selection Problem,1007.0,,,1,1,O(n^3),,,[ $O(n^3)$ Dynamic Programming (1953)],$O(n^3)$ Dynamic Programming,1953,,,,,1.0,1->3,6,n: 6,O(n^3),n: number of tasks (intervals),n,,,Word RAM,words,5,n: 5,O(n^2),"Keep track of answers to O(n^2) subproblems [i, j]",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,1000000000.0,1,,1.00E+18,1,,1.00E+27,1,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,False
801,0.0,0.0,0,,,145.0,Interval Scheduling,1.0,Weighted Activity Selection Problem,1008.0,,,1,1,O(n^2),,,[ $O(n^2)$ Dynamic Programming (1953)],$O(n^2)$ Dynamic Programming,1953,,,,,1.0,3->4,5,n: 5,O(n^2),n: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,O(n),"Keep track of answers to O(n) subproblems (cache), and sorted list of intervals",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,1000000.0,,,,,,,,,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
802,0.0,0.0,0,,,145.0,Interval Scheduling,1.0,Weighted Activity Selection Problem,1009.0,,,1,1,O(nlogn),,,[ $O(n\log n)$ Dynamic Programming (1953)],$O(n\log n)$ Dynamic Programming,1953,,,,,1.0,4->5,4,n: 4,O(n \log n),n: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,O(n),"Keep track of answers to O(n) subproblems (cache), and sorted list of intervals",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,9965.0,100351.2293,inf,19931568.57,50171665944,inf,29897352854,3.34E+16,inf,1,,,Combinatorics,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,False,3,True
803,0.0,1.0,1,Scheduling (computing),,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1010.0,,,1,1,O(n),,,[ Fixed priority shortest job first (1940)],Fixed priority shortest job first,1940,,1,1.0,,1.0,0,4,n: 4,O(n \log n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses and task priorities",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965.0,1,,19931568.57,1,,29897352854,1,,5,,,Operating Systems,Scheduling_%28computing%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Scheduling_%28computing%29/monthly/20150701/20230731,19050.0,23020.0,23468.0,26655.0,25278.0,22657.0,21597.0,24216.0,24871.0,22045.0,22811.0,18477.0,15944.0,18533.0,20480.0,22246.0,24267.0,18456.0,19163.0,19512.0,22344.0,19064.0,19272.0,14960.0,14708.0,15761.0,17577.0,21274.0,23445.0,18878.0,20802.0,21009.0,21961.0,21547.0,20622.0,15927.0,15209.0,15797.0,16895.0,20107.0,18463.0,17519.0,16214.0,16476.0,18188.0,17646.0,16193.0,13278.0,13345.0,13888.0,15068.0,17998.0,18210.0,14134.0,14516.0,16903.0,15836.0,17562.0,16720.0,15436.0,12651.0,12551.0,17621.0,19852.0,19297.0,18411.0,16166.0,16240.0,19934.0,15764.0,14088.0,15703.0,20554.0,16336.0,14697.0,15354.0,17384.0,15807.0,15038.0,14078.0,15520.0,14897.0,13279.0,12128.0,9697.0,9356.0,9491.0,10668.0,12074.0,10706.0,9573.0,8732.0,9708.0,9222.0,10467.0,8816.0,8263.0,16944.546391752578,3,False,3,True
804,1.0,0.0,1,Dynamic priority scheduling,,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1011.0,,,1,1,O(n),,,[ Priority scheduling (1940)],Priority scheduling,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems,Dynamic_priority_scheduling,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Dynamic_priority_scheduling/monthly/20150701/20230731,606.0,585.0,637.0,932.0,976.0,936.0,772.0,828.0,853.0,838.0,788.0,613.0,498.0,650.0,637.0,691.0,881.0,636.0,604.0,726.0,850.0,913.0,826.0,646.0,572.0,621.0,589.0,811.0,1009.0,787.0,770.0,679.0,807.0,894.0,803.0,485.0,415.0,390.0,547.0,690.0,702.0,638.0,621.0,616.0,733.0,846.0,721.0,545.0,387.0,366.0,442.0,561.0,500.0,496.0,532.0,465.0,508.0,680.0,497.0,552.0,397.0,411.0,428.0,563.0,454.0,524.0,498.0,576.0,625.0,500.0,588.0,561.0,669.0,336.0,391.0,405.0,517.0,496.0,464.0,480.0,459.0,445.0,409.0,718.0,250.0,294.0,277.0,379.0,424.0,428.0,323.0,225.0,315.0,367.0,311.0,282.0,284.0,580.1237113402062,3,True,3,True
805,1.0,0.0,1,Shortest remaining time,,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1012.0,,,1,1,O(n),,,[ Shortest remaining time first (1940)],Shortest remaining time first,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems,Shortest_remaining_time,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Shortest_remaining_time/monthly/20150701/20230731,1081.0,1205.0,1692.0,2298.0,2445.0,1880.0,1867.0,2482.0,2368.0,2265.0,2317.0,1750.0,1174.0,1537.0,2152.0,2721.0,2637.0,2107.0,2045.0,2373.0,2460.0,2246.0,2367.0,1648.0,1433.0,1932.0,2123.0,2778.0,2685.0,2157.0,2255.0,2538.0,2845.0,2967.0,2719.0,1830.0,1356.0,1752.0,2135.0,2765.0,2943.0,2256.0,2114.0,2373.0,2654.0,2812.0,2482.0,1629.0,1291.0,1547.0,2095.0,2750.0,2954.0,2162.0,1920.0,2169.0,1886.0,2191.0,1960.0,1961.0,1466.0,1423.0,2029.0,2601.0,2421.0,2118.0,2141.0,2115.0,2573.0,2089.0,1921.0,2142.0,1477.0,1253.0,1770.0,2098.0,2572.0,2071.0,1882.0,1917.0,2492.0,2663.0,2547.0,2228.0,1366.0,1248.0,1753.0,2055.0,2507.0,1957.0,1476.0,1794.0,1784.0,1426.0,1507.0,1079.0,843.0,2065.360824742268,3,True,3,True
806,0.0,1.0,1,FIFO (computing and electronics),,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1013.0,,,1,1,O(n),,,"[ First come, first served (1940)]","First come, first served",1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems,FIFO_%28computing_and_electronics%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/FIFO_%28computing_and_electronics%29/monthly/20150701/20230731,7603.0,7217.0,7737.0,9102.0,8917.0,7852.0,8059.0,8643.0,9675.0,9437.0,9104.0,7555.0,7180.0,7346.0,7647.0,8382.0,8657.0,7669.0,8219.0,8302.0,9810.0,8498.0,9183.0,7320.0,6597.0,6877.0,7166.0,9718.0,9182.0,7388.0,8268.0,8223.0,9114.0,8416.0,8480.0,7266.0,6848.0,6487.0,7382.0,8131.0,8011.0,7316.0,7971.0,7682.0,8683.0,8082.0,8452.0,7094.0,7322.0,7068.0,7909.0,8905.0,8209.0,6792.0,7312.0,7553.0,7413.0,8612.0,7864.0,7242.0,5731.0,5793.0,6879.0,8234.0,8582.0,8176.0,7295.0,7153.0,8075.0,7136.0,6889.0,6562.0,8525.0,6571.0,7218.0,7525.0,7953.0,7191.0,7395.0,6891.0,7827.0,7031.0,6723.0,6270.0,5922.0,5594.0,5965.0,6434.0,7876.0,5935.0,5885.0,5477.0,6066.0,5171.0,5477.0,5284.0,4827.0,7522.546391752578,3,True,3,True
807,1.0,0.0,1,Round-robin scheduling,,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1014.0,,,1,1,O(n),,,[ Round-robin scheduling (1940)],Round-robin scheduling,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems,Round-robin_scheduling,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Round-robin_scheduling/monthly/20150701/20230731,13739.0,14354.0,16949.0,19836.0,19375.0,19199.0,17164.0,20397.0,22493.0,20561.0,20041.0,18445.0,14886.0,17031.0,20086.0,22653.0,23415.0,19369.0,21227.0,22659.0,26060.0,23158.0,23265.0,19230.0,17824.0,19459.0,20423.0,25337.0,25002.0,19264.0,21229.0,22932.0,24729.0,25199.0,22772.0,18029.0,17616.0,19275.0,19970.0,23421.0,21971.0,18500.0,18487.0,19456.0,22276.0,20970.0,18297.0,15741.0,14168.0,13378.0,14698.0,17237.0,15966.0,15249.0,17121.0,18153.0,17654.0,19224.0,17262.0,17229.0,14350.0,13981.0,18714.0,22021.0,21188.0,18678.0,17579.0,17740.0,20579.0,17555.0,15986.0,15602.0,13753.0,13017.0,15031.0,16621.0,17609.0,14269.0,13813.0,14712.0,16263.0,15302.0,13214.0,12052.0,11231.0,11812.0,13542.0,15473.0,18622.0,13887.0,13532.0,14403.0,15492.0,12228.0,13773.0,12106.0,10622.0,17911.9793814433,3,True,3,True
808,1.0,0.0,1,Multilevel queue,,145.0,Interval Scheduling,1.0,"Unweighted Interval Scheduling, Online",1015.0,,,1,1,O(n),,,[ Multilevel queue scheduling (1940)],Multilevel queue scheduling,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of tasks (intervals)
k: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",O(n+k)?,^see above; also level information for each task,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,5,,,Operating Systems,Multilevel_queue,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Multilevel_queue/monthly/20150701/20230731,870.0,1175.0,1561.0,1543.0,1571.0,1356.0,1307.0,1866.0,1791.0,1893.0,1765.0,939.0,874.0,1274.0,1554.0,1775.0,1856.0,1470.0,1415.0,2069.0,1985.0,1836.0,1600.0,985.0,1208.0,1414.0,1919.0,2082.0,1772.0,1561.0,1474.0,1702.0,1886.0,1539.0,1179.0,857.0,892.0,967.0,946.0,1465.0,1100.0,898.0,812.0,930.0,1054.0,1027.0,697.0,697.0,502.0,712.0,775.0,1030.0,952.0,765.0,760.0,856.0,854.0,762.0,783.0,575.0,420.0,464.0,577.0,748.0,1148.0,798.0,707.0,707.0,956.0,716.0,559.0,486.0,570.0,457.0,530.0,690.0,749.0,772.0,627.0,569.0,733.0,607.0,424.0,428.0,294.0,267.0,394.0,561.0,501.0,452.0,400.0,405.0,398.0,298.0,347.0,308.0,260.0,990.319587628866,3,True,3,True
809,1.0,0.0,1,Banker's algorithm,,147.0,Deadlock avoidance,1.0,Deadlock Avoidance,1019.0,,,1,1,O(mn^2),,,[https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF Banker's Algorithm (1966)],Banker's Algorithm,1966,https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF,,,,1.0,0,5,"m: 3,
n: 5",O(mn^2),"n: number of processes
m: number of resource types",n,,,Word RAM,words,3,"n: 3,
m: 3",O(mn),"Main space-consuming arrays needed include ""Max,"" ""Allocation,"" and ""Need,"" which are all n*m arrays. Other arrays are either O(n) or O(m)-sized",1.0,0.0,,0,,0,,0,0,,0,0,https://www.cs.colorado.edu/~rhan/CSCI_3753_Spring_2005/CSCI_3753_Spring_2005/Lectures/03_01_05_deadlock.pdf,,,,,,,,,,,,1,,,1,,,1,,3,,,Operating Systems,Banker%27s_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Banker%27s_algorithm/monthly/20150701/20230731,3986.0,5613.0,8383.0,11456.0,11705.0,9700.0,5821.0,7684.0,11137.0,13994.0,10895.0,6692.0,4513.0,6521.0,9133.0,12393.0,14688.0,11823.0,7774.0,7835.0,12509.0,11058.0,10992.0,6600.0,4900.0,6172.0,8764.0,12208.0,14410.0,9294.0,6254.0,7701.0,12372.0,12452.0,9846.0,5909.0,4179.0,4919.0,6645.0,8166.0,8145.0,5968.0,3988.0,4962.0,8252.0,9943.0,6862.0,3705.0,3078.0,3309.0,4874.0,5626.0,5002.0,3661.0,2854.0,3786.0,3753.0,4603.0,4262.0,3815.0,2625.0,2283.0,3305.0,4633.0,5391.0,5211.0,3642.0,3454.0,4781.0,4358.0,3596.0,4526.0,4007.0,3902.0,3231.0,3575.0,4496.0,4902.0,3510.0,3274.0,3672.0,3885.0,4350.0,4393.0,2766.0,2265.0,3249.0,3424.0,4670.0,4254.0,2881.0,2700.0,3308.0,3227.0,3499.0,2863.0,2356.0,6123.79381443299,5,True,3,True
810,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Offline,1020.0,,,1,1,O(n^2),,,[ The theoretically optimal page replacement algorithm (1940)],The theoretically optimal page replacement algorithm,1940,,2,1.0,,1.0,0,5,n: 5,O(n^2),"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache; linear scan for searching for page not being used for the longest only requires O(1) auxiliary space,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,1,,1E+12,1,,1.00E+18,1,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,False,1,True
811,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1021.0,,,1,1,O(nk)?,,,[ Not recently used (1940)],Not recently used,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
812,1.0,0.0,1,FIFO (computing and electronics),,148.0,Page Replacements,1.0,Online,1022.0,,,1,1,O(nk)?,,,"[ First-in, first-out (1940)]","First-in, first-out",1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,FIFO_%28computing_and_electronics%29,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/FIFO_%28computing_and_electronics%29/monthly/20150701/20230731,7603.0,7217.0,7737.0,9102.0,8917.0,7852.0,8059.0,8643.0,9675.0,9437.0,9104.0,7555.0,7180.0,7346.0,7647.0,8382.0,8657.0,7669.0,8219.0,8302.0,9810.0,8498.0,9183.0,7320.0,6597.0,6877.0,7166.0,9718.0,9182.0,7388.0,8268.0,8223.0,9114.0,8416.0,8480.0,7266.0,6848.0,6487.0,7382.0,8131.0,8011.0,7316.0,7971.0,7682.0,8683.0,8082.0,8452.0,7094.0,7322.0,7068.0,7909.0,8905.0,8209.0,6792.0,7312.0,7553.0,7413.0,8612.0,7864.0,7242.0,5731.0,5793.0,6879.0,8234.0,8582.0,8176.0,7295.0,7153.0,8075.0,7136.0,6889.0,6562.0,8525.0,6571.0,7218.0,7525.0,7953.0,7191.0,7395.0,6891.0,7827.0,7031.0,6723.0,6270.0,5922.0,5594.0,5965.0,6434.0,7876.0,5935.0,5885.0,5477.0,6066.0,5171.0,5477.0,5284.0,4827.0,7522.546391752578,3,True,1,True
813,0.0,0.0,0,,,148.0,Page Replacements,1.0,Online,1023.0,,,1,1,O(nk)?,,,[ Second-chance (1940)],Second-chance,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,3,True,1,True
814,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1024.0,,,1,1,O(nk)?,,,[ Clock (1940)],Clock,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference bits only (plus iterator),1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
815,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1025.0,,,1,1,O(nk)?,,,[ Least recently used (1940)],Least recently used,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + info related to time last referenced for each of k pages,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
816,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1026.0,,,1,0,O(n),,,[ Random (1940)],Random,1940,,,,,0.0,0,3,n: 3,O(n),"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k)?,Need to keep track of cache?,1.0,0.0,,1,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
817,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1027.0,,,1,1,O(nk)?,,,[ Not frequently used (NFU) (1940)],Not frequently used (NFU),1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference counters only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
818,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1028.0,,,1,1,O(nk)?,,,[ Aging (1940)],Aging,1940,,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + reference counters only,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
819,0.0,1.0,1,Page replacement algorithm,,148.0,Page Replacements,1.0,Online,1029.0,,,1,1,O(nk)?,,,[https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf Longest distance first (LDF) page replacement algorithm (2017)],Longest distance first (LDF) page replacement algorithm,2017,https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf,,,,0.0,0,3,"n: 3,
k: 3",O(nk)?,"n: number of page requests
k: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",O(k),Need to keep track of cache + information related to position of pages,1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000.0,,,,,,,,,4,,,Operating Systems,Page_replacement_algorithm,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Page_replacement_algorithm/monthly/20150701/20230731,7935.0,8700.0,10590.0,14193.0,15739.0,15226.0,9925.0,11502.0,14890.0,16197.0,15625.0,11144.0,7833.0,8592.0,10613.0,15462.0,19824.0,14674.0,10738.0,10702.0,16046.0,18096.0,14980.0,9347.0,6732.0,6905.0,9335.0,15044.0,17202.0,12955.0,9132.0,8394.0,14994.0,18404.0,14196.0,9652.0,6962.0,6821.0,8508.0,13450.0,16075.0,13646.0,8611.0,8093.0,11792.0,15923.0,13771.0,7612.0,5526.0,5586.0,7510.0,10611.0,12774.0,11227.0,7486.0,7252.0,8626.0,16133.0,10940.0,9646.0,6773.0,6173.0,7364.0,10275.0,12335.0,14540.0,10934.0,8319.0,10485.0,10478.0,8850.0,9452.0,10142.0,7504.0,6179.0,7515.0,9984.0,11526.0,8256.0,8081.0,7210.0,9080.0,8317.0,7293.0,5553.0,4244.0,4052.0,5505.0,7529.0,6718.0,5622.0,4350.0,4641.0,5379.0,5185.0,4472.0,3439.0,10101.577319587628,3,True,1,True
820,0.0,1.0,1,Algorithms for Recovery and Isolation Exploiting Semantics,O(n),149.0,Recovery,2.0,"Steal, No-Force",1030.0,,,1,1,O(n),Any distribution/doesn't make too much sense to talk about distribution here,(behavior same regardless of input),[https://dl.acm.org/doi/10.1145/128765.128770 ARIES (1992)],ARIES,1992,https://dl.acm.org/doi/10.1145/128765.128770,4,1.0,,1.0,0,3,n: 3,O(n),n: number of transactions before crash,n,,,Word RAM,words,3,n: 3,O(n)?,"Uses write-ahead logging, so keeps track of transaction log, whose entries may be augmented with O(1) more information each. During recovery, needs to keep track of variable/page states",1.0,0.0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000.0,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics,https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/Algorithms_for_Recovery_and_Isolation_Exploiting_Semantics/monthly/20150701/20230731,917.0,1188.0,1112.0,1748.0,2199.0,2104.0,1203.0,1296.0,1343.0,1972.0,2044.0,1548.0,1061.0,1404.0,1096.0,2030.0,2760.0,2097.0,1475.0,1102.0,1373.0,2458.0,2057.0,1439.0,1064.0,1134.0,1089.0,2310.0,2694.0,2026.0,1586.0,1133.0,1575.0,2853.0,2390.0,1147.0,1056.0,1426.0,1310.0,2491.0,2459.0,1644.0,1253.0,915.0,1330.0,2372.0,1858.0,999.0,1684.0,978.0,1234.0,2335.0,2337.0,1493.0,1195.0,954.0,875.0,1242.0,1318.0,1055.0,987.0,842.0,923.0,1201.0,1829.0,1605.0,1330.0,969.0,1075.0,1042.0,947.0,1057.0,1009.0,1123.0,1129.0,1078.0,1309.0,1121.0,1211.0,1308.0,885.0,965.0,1118.0,956.0,1064.0,1009.0,777.0,1112.0,1099.0,1068.0,1098.0,1074.0,869.0,997.0,1118.0,1132.0,919.0,1404.0721649484535,3,True,3,True
